{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1058",
    "id": 811673367,
    "node_id": "PR_kwDOAP4Jqs4wYScX",
    "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1058",
    "diff_url": "https://github.com/bitcoin-core/secp256k1/pull/1058.diff",
    "patch_url": "https://github.com/bitcoin-core/secp256k1/pull/1058.patch",
    "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1058",
    "commits_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1058/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1058/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1058/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin-core/secp256k1/statuses/dcc846f18518f77770b6a1fc9e39683c63685d39",
    "number": 1058,
    "state": "open",
    "locked": false,
    "maintainer_can_modify": true,
    "title": "Signed-digit multi-comb ecmult_gen algorithm",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "A third iteration of the signed-digit multi-comb ecmult_gen algorithm (earlier attempts: #693, and #546 by Peter Dettman). Short summary:\r\n* A new constant-time point multiplication algorithm with precomputation (so only used for multiply with G).\r\n* Based on section 3.3 of https://eprint.iacr.org/2012/309 by Mike Hamburg.\r\n* Configurable through two parameters: COMB_BLOCKS and COMB_TEETH\r\n  * Currently only 3 predefined configurations reachable through ./configure. All three are included in precomputed_ecmult_gen.c and tested in CI.\r\n    * `--with-ecmult-gen-kb=2`: 2 kB table with COMB_BLOCKS=2 COMB_TEETH=5\r\n    * `--with-ecmult-gen-kb=22`: 22 kB table with COMB_BLOCKS=11 COMB_TEETH=6\r\n    * `--with-ecmult-gen-kb=86`: 86 kB table with COMB_BLOCKS=43 COMB_TEETH=6\r\n  * Many more configurations can be reached by manually setting the macros. These are not tested.\r\n\r\nCompared with the previous PR #693:\r\n* Updated to the new static-precomputation-only model (#893).\r\n* Just 3 curated configurations reachable through configure.\r\n* Removed some optimizations that do not matter (much).\r\n* Do blinding through an final correction add rather than an initial start point, which may later permit usage of incomplete addition formulae (#1051).\r\n* The recoding of the input scalar to signed bit representation is done slightly differently, which needs fewer special cases.",
    "labels": [
      {
        "id": 4975389731,
        "node_id": "LA_kwDOAP4Jqs8AAAABKI5sIw",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/labels/performance",
        "name": "performance",
        "description": "",
        "color": "DE3CCC",
        "default": false
      }
    ],
    "created_at": "2021-12-29T20:56:42Z",
    "updated_at": "2024-04-12T17:10:51Z",
    "mergeable": true,
    "mergeable_state": "blocked",
    "merge_commit_sha": "8ad708334bbf8af39216acd320bd77de192f020b",
    "assignees": [],
    "requested_reviewers": [],
    "requested_teams": [],
    "rebaseable": true,
    "head": {
      "label": "sipa:202112_sdmc",
      "ref": "202112_sdmc",
      "sha": "dcc846f18518f77770b6a1fc9e39683c63685d39",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "repo": {
        "id": 16648672,
        "node_id": "MDEwOlJlcG9zaXRvcnkxNjY0ODY3Mg==",
        "name": "secp256k1",
        "full_name": "sipa/secp256k1",
        "owner": {
          "login": "sipa",
          "id": 548488,
          "node_id": "MDQ6VXNlcjU0ODQ4OA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/sipa",
          "html_url": "https://github.com/sipa",
          "followers_url": "https://api.github.com/users/sipa/followers",
          "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
          "organizations_url": "https://api.github.com/users/sipa/orgs",
          "repos_url": "https://api.github.com/users/sipa/repos",
          "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/sipa/received_events",
          "type": "User",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/sipa/secp256k1",
        "description": "Optimized C library for EC operations on curve secp256k1",
        "fork": true,
        "url": "https://api.github.com/repos/sipa/secp256k1",
        "archive_url": "https://api.github.com/repos/sipa/secp256k1/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/sipa/secp256k1/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/sipa/secp256k1/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/sipa/secp256k1/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/sipa/secp256k1/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/sipa/secp256k1/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/sipa/secp256k1/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/sipa/secp256k1/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/sipa/secp256k1/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/sipa/secp256k1/contributors",
        "deployments_url": "https://api.github.com/repos/sipa/secp256k1/deployments",
        "downloads_url": "https://api.github.com/repos/sipa/secp256k1/downloads",
        "events_url": "https://api.github.com/repos/sipa/secp256k1/events",
        "forks_url": "https://api.github.com/repos/sipa/secp256k1/forks",
        "git_commits_url": "https://api.github.com/repos/sipa/secp256k1/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/sipa/secp256k1/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/sipa/secp256k1/git/tags%7B/sha%7D",
        "git_url": "git://github.com/sipa/secp256k1.git",
        "issue_comment_url": "https://api.github.com/repos/sipa/secp256k1/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/sipa/secp256k1/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/sipa/secp256k1/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/sipa/secp256k1/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/sipa/secp256k1/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/sipa/secp256k1/languages",
        "merges_url": "https://api.github.com/repos/sipa/secp256k1/merges",
        "milestones_url": "https://api.github.com/repos/sipa/secp256k1/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/sipa/secp256k1/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/sipa/secp256k1/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/sipa/secp256k1/releases%7B/id%7D",
        "ssh_url": "git@github.com:sipa/secp256k1.git",
        "stargazers_url": "https://api.github.com/repos/sipa/secp256k1/stargazers",
        "statuses_url": "https://api.github.com/repos/sipa/secp256k1/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/sipa/secp256k1/subscribers",
        "subscription_url": "https://api.github.com/repos/sipa/secp256k1/subscription",
        "tags_url": "https://api.github.com/repos/sipa/secp256k1/tags",
        "teams_url": "https://api.github.com/repos/sipa/secp256k1/teams",
        "trees_url": "https://api.github.com/repos/sipa/secp256k1/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/sipa/secp256k1.git",
        "hooks_url": "https://api.github.com/repos/sipa/secp256k1/hooks",
        "svn_url": "https://github.com/sipa/secp256k1",
        "language": "C",
        "forks_count": 20,
        "stargazers_count": 43,
        "watchers_count": 43,
        "size": 11852,
        "default_branch": "master",
        "open_issues_count": 0,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": true,
        "has_wiki": true,
        "has_pages": false,
        "has_downloads": true,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2024-04-07T14:13:16Z",
        "created_at": "2014-02-08T17:33:30Z",
        "updated_at": "2023-05-11T11:08:51Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "base": {
      "label": "bitcoin-core:master",
      "ref": "master",
      "sha": "d8311688bd383d3a923a1b11789cded3cc8e5e03",
      "user": {
        "login": "bitcoin-core",
        "id": 13464320,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjEzNDY0MzIw",
        "avatar_url": "https://avatars.githubusercontent.com/u/13464320?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin-core",
        "html_url": "https://github.com/bitcoin-core",
        "followers_url": "https://api.github.com/users/bitcoin-core/followers",
        "following_url": "https://api.github.com/users/bitcoin-core/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin-core/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin-core/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin-core/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin-core/orgs",
        "repos_url": "https://api.github.com/users/bitcoin-core/repos",
        "events_url": "https://api.github.com/users/bitcoin-core/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin-core/received_events",
        "type": "Organization",
        "site_admin": false
      },
      "repo": {
        "id": 16648618,
        "node_id": "MDEwOlJlcG9zaXRvcnkxNjY0ODYxOA==",
        "name": "secp256k1",
        "full_name": "bitcoin-core/secp256k1",
        "owner": {
          "login": "bitcoin-core",
          "id": 13464320,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjEzNDY0MzIw",
          "avatar_url": "https://avatars.githubusercontent.com/u/13464320?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin-core",
          "html_url": "https://github.com/bitcoin-core",
          "followers_url": "https://api.github.com/users/bitcoin-core/followers",
          "following_url": "https://api.github.com/users/bitcoin-core/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin-core/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin-core/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin-core/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin-core/orgs",
          "repos_url": "https://api.github.com/users/bitcoin-core/repos",
          "events_url": "https://api.github.com/users/bitcoin-core/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin-core/received_events",
          "type": "Organization",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/bitcoin-core/secp256k1",
        "description": "Optimized C library for EC operations on curve secp256k1",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1",
        "archive_url": "https://api.github.com/repos/bitcoin-core/secp256k1/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin-core/secp256k1/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin-core/secp256k1/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin-core/secp256k1/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin-core/secp256k1/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin-core/secp256k1/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin-core/secp256k1/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin-core/secp256k1/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin-core/secp256k1/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin-core/secp256k1/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin-core/secp256k1/downloads",
        "events_url": "https://api.github.com/repos/bitcoin-core/secp256k1/events",
        "forks_url": "https://api.github.com/repos/bitcoin-core/secp256k1/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin-core/secp256k1.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin-core/secp256k1/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin-core/secp256k1/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin-core/secp256k1/languages",
        "merges_url": "https://api.github.com/repos/bitcoin-core/secp256k1/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin-core/secp256k1/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin-core/secp256k1/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin-core/secp256k1/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin-core/secp256k1.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin-core/secp256k1/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin-core/secp256k1/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin-core/secp256k1/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin-core/secp256k1/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin-core/secp256k1/tags",
        "teams_url": "https://api.github.com/repos/bitcoin-core/secp256k1/teams",
        "trees_url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin-core/secp256k1.git",
        "hooks_url": "https://api.github.com/repos/bitcoin-core/secp256k1/hooks",
        "svn_url": "https://github.com/bitcoin-core/secp256k1",
        "language": "C",
        "forks_count": 952,
        "stargazers_count": 1954,
        "watchers_count": 1954,
        "size": 10695,
        "default_branch": "master",
        "open_issues_count": 135,
        "is_template": false,
        "topics": [],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": true,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2024-04-07T14:13:19Z",
        "created_at": "2014-02-08T17:30:06Z",
        "updated_at": "2024-04-09T11:49:38Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1058"
      }
    },
    "author_association": "CONTRIBUTOR",
    "draft": false,
    "additions": 2414,
    "deletions": 9964,
    "changed_files": 22,
    "commits": 16,
    "review_comments": 116,
    "comments": 37
  },
  "events": [
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-12-29T21:00:28Z",
      "updated_at": "2021-12-29T21:00:28Z",
      "source": {
        "issue": {
          "id": 1089508556,
          "node_id": "PR_kwDOAP4Jqs4wUT-x",
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1057",
          "repository_url": "https://api.github.com/repos/bitcoin-core/secp256k1",
          "labels_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1057/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1057/comments",
          "events_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1057/events",
          "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1057",
          "number": 1057,
          "state": "closed",
          "state_reason": null,
          "title": "Signed-digit multi-comb ecmult_gen algorithm",
          "body": "A third iteration of the signed-digit multi-comb ecmult_gen algorithm (earlier attempts: #693, and #546 by Peter Dettman). Short summary:\r\n* A new constant-time point multiplication algorithm with precomputation (so only used for multiply with G).\r\n* Based on section 3.3 of https://eprint.iacr.org/2012/309 by Mike Hamburg.\r\n* Configurable through two parameters: COMB_BLOCKS and COMB_TEETH\r\n  * Currently only 3 predefined configurations reachable through ./configure (tables 2 kB, 22 kB, 86 kB). All three are included in precomputed_ecmult_gen.c and tested in CI. The 2 kB option is already comparable in speed with the current code.\r\n  * Many more configurations can be reached by manually setting the macros. These are not tested.\r\n\r\nCompared with the previous PR #693:\r\n* Updated to the new static-precomputation-only model (#893).\r\n* Just 3 curated configurations reachable through configure.\r\n* Removed some optimizations that do not matter (much).\r\n* Do blinding through an final correction add rather than an initial start point, which may later permit usage of incomplete addition formulae (#1051).\r\n* The recoding of the input scalar to signed bit representation is done slightly differently, which needs fewer special cases.",
          "user": {
            "login": "sipa",
            "id": 548488,
            "node_id": "MDQ6VXNlcjU0ODQ4OA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sipa",
            "html_url": "https://github.com/sipa",
            "followers_url": "https://api.github.com/users/sipa/followers",
            "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
            "organizations_url": "https://api.github.com/users/sipa/orgs",
            "repos_url": "https://api.github.com/users/sipa/repos",
            "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/sipa/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": false,
          "comments": 5,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1057",
            "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1057",
            "diff_url": "https://github.com/bitcoin-core/secp256k1/pull/1057.diff",
            "patch_url": "https://github.com/bitcoin-core/secp256k1/pull/1057.patch"
          },
          "closed_at": "2021-12-29T20:54:49Z",
          "created_at": "2021-12-27T22:51:37Z",
          "updated_at": "2021-12-29T21:00:29Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-12-29T21:00:53Z",
      "updated_at": "2021-12-29T21:00:53Z",
      "source": {
        "issue": {
          "id": 521227598,
          "node_id": "MDExOlB1bGxSZXF1ZXN0MzM5NjQ3NzA5",
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/693",
          "repository_url": "https://api.github.com/repos/bitcoin-core/secp256k1",
          "labels_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/693/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/693/comments",
          "events_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/693/events",
          "html_url": "https://github.com/bitcoin-core/secp256k1/pull/693",
          "number": 693,
          "state": "closed",
          "state_reason": null,
          "title": "Signed-digit multi-comb for ecmult_gen (by peterdettman)",
          "body": "This is a rebase of #546. See the original PR for a full description, but in short, this introduces a new constant-time multiplication algorithm with precomputation, with better speed/size tradeoffs. It is more flexible, allowing both better speeds with the same table size, or smaller table sizes for the same speed. It permits extrmely small tables with still reasonable speeds.\r\n\r\nIn addition to the original PR, this also:\r\n* Removes the old ecmult algorithm entirely\r\n* Makes the tunables configurable through `configure`, and tests a few combinations in Travis.\r\n",
          "user": {
            "login": "sipa",
            "id": 548488,
            "node_id": "MDQ6VXNlcjU0ODQ4OA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sipa",
            "html_url": "https://github.com/sipa",
            "followers_url": "https://api.github.com/users/sipa/followers",
            "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
            "organizations_url": "https://api.github.com/users/sipa/orgs",
            "repos_url": "https://api.github.com/users/sipa/repos",
            "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/sipa/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": false,
          "comments": 58,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/693",
            "html_url": "https://github.com/bitcoin-core/secp256k1/pull/693",
            "diff_url": "https://github.com/bitcoin-core/secp256k1/pull/693.diff",
            "patch_url": "https://github.com/bitcoin-core/secp256k1/pull/693.patch"
          },
          "closed_at": "2021-12-29T20:54:56Z",
          "created_at": "2019-11-11T22:41:47Z",
          "updated_at": "2021-12-29T21:00:54Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-12-29T21:08:01Z",
      "updated_at": "2021-12-29T21:08:01Z",
      "source": {
        "issue": {
          "id": 347608128,
          "node_id": "MDExOlB1bGxSZXF1ZXN0MjA2MTg2NjMw",
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/546",
          "repository_url": "https://api.github.com/repos/bitcoin-core/secp256k1",
          "labels_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/546/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/546/comments",
          "events_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/546/events",
          "html_url": "https://github.com/bitcoin-core/secp256k1/pull/546",
          "number": 546,
          "state": "closed",
          "state_reason": null,
          "title": "Signed-digit multi-comb for ecmult_gen",
          "body": "See section 3.3 of https://eprint.iacr.org/2012/309 for a description of the algorithm. Briefly, the scalar is recoded into signed-binary form, then divided into several blocks. A separate precomp. table is prepared for each block, and performing a multiplication is done using one comb per block, interleaved.\r\n\r\nThis implementation is constant-time, preserves the existing scalar blinding, but the NUMS group element is not yet used, perhaps not really useful (no zeroes in the signed-digit recoding). ~~Static precomputation is not yet implemented.~~ Settings are overridden to let the exhaustive tests work.\r\n\r\nYou can play with the comb parameters in ecmult_gen.h .\r\n\r\nCompared to the existing approach, this gives improved performance/memory tradeoffs, and allows considerable flexibility in the parameters depending on platform details.\r\n\r\nThe following table gives an idea of the sort of tradeoffs available (bench_sign results - best \"min\" of 3, asm=no, 64bit field and scalar, -O3, Haswell):\r\n\r\nBlocks | Teeth | Spacing | Memory (KiB) | Time (us)\r\n:----: | :---: | :-----: | :-----------: | :-------:\r\n43|6|1|86|39.2\r\n22|6|2|44|39.7\r\n11|6|4|22|40.1\r\n4|6|11|8|41.0\r\n4|5|13|4|42.6\r\n2|5|26|2|44.6\r\n2|4|32|1|48.4\r\n1|4|64|0.5|53.3\r\n1|3|86|0.25|63.1\r\n1|2|128|0.125|82.3\r\n1|1|256|0.0625|140\r\n\r\nFor existing approach: 44.6us (64KiB precomp. data)\r\n",
          "user": {
            "login": "peterdettman",
            "id": 3423981,
            "node_id": "MDQ6VXNlcjM0MjM5ODE=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3423981?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/peterdettman",
            "html_url": "https://github.com/peterdettman",
            "followers_url": "https://api.github.com/users/peterdettman/followers",
            "following_url": "https://api.github.com/users/peterdettman/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/peterdettman/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/peterdettman/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/peterdettman/subscriptions",
            "organizations_url": "https://api.github.com/users/peterdettman/orgs",
            "repos_url": "https://api.github.com/users/peterdettman/repos",
            "events_url": "https://api.github.com/users/peterdettman/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/peterdettman/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": false,
          "comments": 8,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/546",
            "html_url": "https://github.com/bitcoin-core/secp256k1/pull/546",
            "diff_url": "https://github.com/bitcoin-core/secp256k1/pull/546.diff",
            "patch_url": "https://github.com/bitcoin-core/secp256k1/pull/546.patch"
          },
          "closed_at": "2020-02-25T13:50:20Z",
          "created_at": "2018-08-04T10:27:56Z",
          "updated_at": "2021-12-29T21:08:02Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "commented",
      "id": 1002807283,
      "node_id": "IC_kwDOAP4Jqs47xZ_z",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/1002807283",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-12-29T23:07:15Z",
      "updated_at": "2021-12-30T01:37:53Z",
      "author_association": "CONTRIBUTOR",
      "body": "Benchmarks:\r\n\r\n#### AMD Ryzen 5950X, GCC 11.2.0, default compile options\r\n\r\nUsing `./autogen.sh && ./configure --enable-experimental --enable-module-schnorrsig && make clean && make -j check && SECP256K1_BENCH_ITERS=1000000 ./bench schnorrsig_sign`\r\n\r\n```\r\nmaster:       schnorrsig_sign               ,    18.1       ,    18.1       ,    18.1    \r\npr1058 kb=2:  schnorrsig_sign               ,    17.9       ,    17.9       ,    17.9 \r\npr1058 kb=22: schnorrsig_sign               ,    15.1       ,    15.1       ,    15.1    \r\npr1058 kb=86: schnorrsig_sign               ,    14.4       ,    14.4       ,    14.4 \r\n```\r\n\r\n#### Intel Core I7-7820HQ @ 2.3 GHz, GCC 10.3.0, default compile options\r\n\r\nUsing `./autogen.sh && ./configure --enable-experimental --enable-module-schnorrsig && make clean && make -j check && SECP256K1_BENCH_ITERS=1000000 ./bench schnorrsig_sign`\r\n\r\n```\r\nmaster:       schnorrsig_sign               ,    38.8       ,    38.9       ,    38.9\r\npr1058 kb=2:  schnorrsig_sign               ,    39.4       ,    39.4       ,    39.4\r\npr1058 kb=22: schnorrsig_sign               ,    33.2       ,    33.3       ,    33.3\r\npr1058 kb=86: schnorrsig_sign               ,    32.4       ,    32.4       ,    32.4\r\n```\r\n\r\n#### ARM Cortex-A53 @ 1 GHz, GCC 9.3.0, default compile options\r\n\r\nUsing `./autogen.sh && ./configure --enable-experimental --enable-module-schnorrsig && make clean && make -j check && SECP256K1_BENCH_ITERS=100000 ./bench schnorrsig_sign`\r\n\r\n```\r\nmaster:       schnorrsig_sign               ,   249.0       ,   249.0       ,   249.0\r\npr1058 kb=2:  schnorrsig_sign               ,   250.0       ,   250.0       ,   250.0 \r\npr1058 kb=22: schnorrsig_sign               ,   200.0       ,   200.0       ,   200.0\r\npr1058 kb=86: schnorrsig_sign               ,   192.0       ,   192.0       ,   192.0\r\n```\r\n",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1058#issuecomment-1002807283",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1058"
    },
    {
      "event": "commented",
      "id": 1003059381,
      "node_id": "IC_kwDOAP4Jqs47yXi1",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/1003059381",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-12-30T14:44:45Z",
      "updated_at": "2021-12-30T14:44:45Z",
      "author_association": "CONTRIBUTOR",
      "body": "I occurs to me that we could actually avoid the cost of doing the scalar halving at ecmult_gen time, by instead having precomputed tables with multiples of G/2 instead of G.",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1058#issuecomment-1003059381",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1058"
    },
    {
      "event": "commented",
      "id": 1003068589,
      "node_id": "IC_kwDOAP4Jqs47yZyt",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/1003068589",
      "actor": {
        "login": "peterdettman",
        "id": 3423981,
        "node_id": "MDQ6VXNlcjM0MjM5ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3423981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/peterdettman",
        "html_url": "https://github.com/peterdettman",
        "followers_url": "https://api.github.com/users/peterdettman/followers",
        "following_url": "https://api.github.com/users/peterdettman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/peterdettman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/peterdettman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/peterdettman/subscriptions",
        "organizations_url": "https://api.github.com/users/peterdettman/orgs",
        "repos_url": "https://api.github.com/users/peterdettman/repos",
        "events_url": "https://api.github.com/users/peterdettman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/peterdettman/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-12-30T15:07:43Z",
      "updated_at": "2021-12-30T15:07:43Z",
      "author_association": "CONTRIBUTOR",
      "body": "> I occurs to me that we could actually avoid the cost of doing the scalar halving at ecmult_gen time, by instead having precomputed tables with multiples of G/2 instead of G.\r\n\r\nThe scalar halving also ensures that the low bit (the shifted-away bit) is 0.",
      "user": {
        "login": "peterdettman",
        "id": 3423981,
        "node_id": "MDQ6VXNlcjM0MjM5ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3423981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/peterdettman",
        "html_url": "https://github.com/peterdettman",
        "followers_url": "https://api.github.com/users/peterdettman/followers",
        "following_url": "https://api.github.com/users/peterdettman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/peterdettman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/peterdettman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/peterdettman/subscriptions",
        "organizations_url": "https://api.github.com/users/peterdettman/orgs",
        "repos_url": "https://api.github.com/users/peterdettman/repos",
        "events_url": "https://api.github.com/users/peterdettman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/peterdettman/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1058#issuecomment-1003068589",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1058"
    },
    {
      "event": "commented",
      "id": 1003070275,
      "node_id": "IC_kwDOAP4Jqs47yaND",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/1003070275",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-12-30T15:12:18Z",
      "updated_at": "2021-12-30T15:22:20Z",
      "author_association": "CONTRIBUTOR",
      "body": "I don't think that matters? Even/odd has no special meaning when working modulo a prime.\r\n\r\nThe PR currently uses the bits of scalar `(input + 2^COMB_BITS - 1 - blind) * 2^-1` to select multiples of G to add together.\r\n\r\nMy suggestion is that instead it could use the bits of `(input + 2^COMB_BITS - 1 - blind)` to select multiples of G/2 to add together.",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1058#issuecomment-1003070275",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1058"
    },
    {
      "event": "commented",
      "id": 1003078516,
      "node_id": "IC_kwDOAP4Jqs47ycN0",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/1003078516",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-12-30T15:33:20Z",
      "updated_at": "2021-12-30T15:33:20Z",
      "author_association": "CONTRIBUTOR",
      "body": "It seems I'm wrong, but I'm confused why!",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1058#issuecomment-1003078516",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1058"
    },
    {
      "event": "commented",
      "id": 1003079181,
      "node_id": "IC_kwDOAP4Jqs47ycYN",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/1003079181",
      "actor": {
        "login": "peterdettman",
        "id": 3423981,
        "node_id": "MDQ6VXNlcjM0MjM5ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3423981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/peterdettman",
        "html_url": "https://github.com/peterdettman",
        "followers_url": "https://api.github.com/users/peterdettman/followers",
        "following_url": "https://api.github.com/users/peterdettman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/peterdettman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/peterdettman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/peterdettman/subscriptions",
        "organizations_url": "https://api.github.com/users/peterdettman/orgs",
        "repos_url": "https://api.github.com/users/peterdettman/repos",
        "events_url": "https://api.github.com/users/peterdettman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/peterdettman/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-12-30T15:35:14Z",
      "updated_at": "2021-12-30T15:36:38Z",
      "author_association": "CONTRIBUTOR",
      "body": "I think confusion is creeping in since after the halving the scalar isn't a scalar value anymore; it's in signed-digit form, which can only represent an odd value. In particular the bits of a scalar s in signed-digit form represent the scalar value 2*s+1. I think you should also be careful not to reason modulo the order in signed-digit form.\r\n\r\nEdit: Actually, even that might not be quite complete since the high bit is being treated specially here.",
      "user": {
        "login": "peterdettman",
        "id": 3423981,
        "node_id": "MDQ6VXNlcjM0MjM5ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3423981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/peterdettman",
        "html_url": "https://github.com/peterdettman",
        "followers_url": "https://api.github.com/users/peterdettman/followers",
        "following_url": "https://api.github.com/users/peterdettman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/peterdettman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/peterdettman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/peterdettman/subscriptions",
        "organizations_url": "https://api.github.com/users/peterdettman/orgs",
        "repos_url": "https://api.github.com/users/peterdettman/repos",
        "events_url": "https://api.github.com/users/peterdettman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/peterdettman/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1058#issuecomment-1003079181",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1058"
    },
    {
      "event": "commented",
      "id": 1003082496,
      "node_id": "IC_kwDOAP4Jqs47ydMA",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/1003082496",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-12-30T15:43:54Z",
      "updated_at": "2021-12-30T15:43:54Z",
      "author_association": "CONTRIBUTOR",
      "body": "It works, but you need to use the bits of `input - blind + (2^COMB_BITS - 1)/2` instead. That's what you get when you substitute `2*(input-blind)` for `e` in the formula in the paper (because now we're trying to compute `input*G = 2*(input-blind)*(G/2) + blind*G`).",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1058#issuecomment-1003082496",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1058"
    },
    {
      "event": "commented",
      "id": 1003086944,
      "node_id": "IC_kwDOAP4Jqs47yeRg",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/1003086944",
      "actor": {
        "login": "peterdettman",
        "id": 3423981,
        "node_id": "MDQ6VXNlcjM0MjM5ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3423981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/peterdettman",
        "html_url": "https://github.com/peterdettman",
        "followers_url": "https://api.github.com/users/peterdettman/followers",
        "following_url": "https://api.github.com/users/peterdettman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/peterdettman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/peterdettman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/peterdettman/subscriptions",
        "organizations_url": "https://api.github.com/users/peterdettman/orgs",
        "repos_url": "https://api.github.com/users/peterdettman/repos",
        "events_url": "https://api.github.com/users/peterdettman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/peterdettman/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-12-30T15:56:25Z",
      "updated_at": "2021-12-30T15:56:25Z",
      "author_association": "CONTRIBUTOR",
      "body": "Oh I see, using double the input and the blind (of G/2) lets the halving be moved to precomputation. Nice.",
      "user": {
        "login": "peterdettman",
        "id": 3423981,
        "node_id": "MDQ6VXNlcjM0MjM5ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3423981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/peterdettman",
        "html_url": "https://github.com/peterdettman",
        "followers_url": "https://api.github.com/users/peterdettman/followers",
        "following_url": "https://api.github.com/users/peterdettman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/peterdettman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/peterdettman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/peterdettman/subscriptions",
        "organizations_url": "https://api.github.com/users/peterdettman/orgs",
        "repos_url": "https://api.github.com/users/peterdettman/repos",
        "events_url": "https://api.github.com/users/peterdettman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/peterdettman/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1058#issuecomment-1003086944",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1058"
    },
    {
      "event": "reviewed",
      "id": 841990533,
      "node_id": "PRR_kwDOAP4Jqs4yL8GF",
      "url": null,
      "actor": null,
      "commit_id": "4a4d16e83c69bff9ad0c3c27fc13b6ad8b222f24",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "peterdettman",
        "id": 3423981,
        "node_id": "MDQ6VXNlcjM0MjM5ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3423981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/peterdettman",
        "html_url": "https://github.com/peterdettman",
        "followers_url": "https://api.github.com/users/peterdettman/followers",
        "following_url": "https://api.github.com/users/peterdettman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/peterdettman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/peterdettman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/peterdettman/subscriptions",
        "organizations_url": "https://api.github.com/users/peterdettman/orgs",
        "repos_url": "https://api.github.com/users/peterdettman/repos",
        "events_url": "https://api.github.com/users/peterdettman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/peterdettman/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1058#pullrequestreview-841990533",
      "submitted_at": "2021-12-30T16:16:41Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1058"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 5828612738,
      "node_id": "HRFPE_lADOAP4Jqs5BA3RkzwAAAAFbaZKC",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/5828612738",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-12-30T17:07:12Z"
    },
    {
      "event": "commented",
      "id": 1003112426,
      "node_id": "IC_kwDOAP4Jqs47ykfq",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/1003112426",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-12-30T17:08:47Z",
      "updated_at": "2021-12-30T17:08:47Z",
      "author_association": "CONTRIBUTOR",
      "body": "Updated to use the avoid-halving-scalar trick.",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1058#issuecomment-1003112426",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1058"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 5828655233,
      "node_id": "HRFPE_lADOAP4Jqs5BA3RkzwAAAAFbajiB",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/5828655233",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-12-30T17:24:09Z"
    },
    {
      "event": "reviewed",
      "id": 842157030,
      "node_id": "PRR_kwDOAP4Jqs4yMkvm",
      "url": null,
      "actor": null,
      "commit_id": "a7f0d0e5dec0b88676b9b6c79f21e12405f7befb",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "peterdettman",
        "id": 3423981,
        "node_id": "MDQ6VXNlcjM0MjM5ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3423981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/peterdettman",
        "html_url": "https://github.com/peterdettman",
        "followers_url": "https://api.github.com/users/peterdettman/followers",
        "following_url": "https://api.github.com/users/peterdettman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/peterdettman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/peterdettman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/peterdettman/subscriptions",
        "organizations_url": "https://api.github.com/users/peterdettman/orgs",
        "repos_url": "https://api.github.com/users/peterdettman/repos",
        "events_url": "https://api.github.com/users/peterdettman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/peterdettman/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1058#pullrequestreview-842157030",
      "submitted_at": "2021-12-31T05:03:53Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1058"
    },
    {
      "event": "reviewed",
      "id": 842170777,
      "node_id": "PRR_kwDOAP4Jqs4yMoGZ",
      "url": null,
      "actor": null,
      "commit_id": "a7f0d0e5dec0b88676b9b6c79f21e12405f7befb",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "peterdettman",
        "id": 3423981,
        "node_id": "MDQ6VXNlcjM0MjM5ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3423981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/peterdettman",
        "html_url": "https://github.com/peterdettman",
        "followers_url": "https://api.github.com/users/peterdettman/followers",
        "following_url": "https://api.github.com/users/peterdettman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/peterdettman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/peterdettman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/peterdettman/subscriptions",
        "organizations_url": "https://api.github.com/users/peterdettman/orgs",
        "repos_url": "https://api.github.com/users/peterdettman/repos",
        "events_url": "https://api.github.com/users/peterdettman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/peterdettman/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1058#pullrequestreview-842170777",
      "submitted_at": "2021-12-31T06:40:49Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1058"
    },
    {
      "event": "reviewed",
      "id": 842171020,
      "node_id": "PRR_kwDOAP4Jqs4yMoKM",
      "url": null,
      "actor": null,
      "commit_id": "a7f0d0e5dec0b88676b9b6c79f21e12405f7befb",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "peterdettman",
        "id": 3423981,
        "node_id": "MDQ6VXNlcjM0MjM5ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3423981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/peterdettman",
        "html_url": "https://github.com/peterdettman",
        "followers_url": "https://api.github.com/users/peterdettman/followers",
        "following_url": "https://api.github.com/users/peterdettman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/peterdettman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/peterdettman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/peterdettman/subscriptions",
        "organizations_url": "https://api.github.com/users/peterdettman/orgs",
        "repos_url": "https://api.github.com/users/peterdettman/repos",
        "events_url": "https://api.github.com/users/peterdettman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/peterdettman/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1058#pullrequestreview-842171020",
      "submitted_at": "2021-12-31T06:42:00Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1058"
    },
    {
      "event": "reviewed",
      "id": 842171797,
      "node_id": "PRR_kwDOAP4Jqs4yMoWV",
      "url": null,
      "actor": null,
      "commit_id": "a7f0d0e5dec0b88676b9b6c79f21e12405f7befb",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "peterdettman",
        "id": 3423981,
        "node_id": "MDQ6VXNlcjM0MjM5ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3423981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/peterdettman",
        "html_url": "https://github.com/peterdettman",
        "followers_url": "https://api.github.com/users/peterdettman/followers",
        "following_url": "https://api.github.com/users/peterdettman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/peterdettman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/peterdettman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/peterdettman/subscriptions",
        "organizations_url": "https://api.github.com/users/peterdettman/orgs",
        "repos_url": "https://api.github.com/users/peterdettman/repos",
        "events_url": "https://api.github.com/users/peterdettman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/peterdettman/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1058#pullrequestreview-842171797",
      "submitted_at": "2021-12-31T06:46:43Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1058"
    },
    {
      "event": "reviewed",
      "id": 842171911,
      "node_id": "PRR_kwDOAP4Jqs4yMoYH",
      "url": null,
      "actor": null,
      "commit_id": "a7f0d0e5dec0b88676b9b6c79f21e12405f7befb",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "peterdettman",
        "id": 3423981,
        "node_id": "MDQ6VXNlcjM0MjM5ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3423981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/peterdettman",
        "html_url": "https://github.com/peterdettman",
        "followers_url": "https://api.github.com/users/peterdettman/followers",
        "following_url": "https://api.github.com/users/peterdettman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/peterdettman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/peterdettman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/peterdettman/subscriptions",
        "organizations_url": "https://api.github.com/users/peterdettman/orgs",
        "repos_url": "https://api.github.com/users/peterdettman/repos",
        "events_url": "https://api.github.com/users/peterdettman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/peterdettman/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1058#pullrequestreview-842171911",
      "submitted_at": "2021-12-31T06:47:29Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1058"
    },
    {
      "event": "commented",
      "id": 1003290914,
      "node_id": "IC_kwDOAP4Jqs47zQEi",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/1003290914",
      "actor": {
        "login": "peterdettman",
        "id": 3423981,
        "node_id": "MDQ6VXNlcjM0MjM5ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3423981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/peterdettman",
        "html_url": "https://github.com/peterdettman",
        "followers_url": "https://api.github.com/users/peterdettman/followers",
        "following_url": "https://api.github.com/users/peterdettman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/peterdettman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/peterdettman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/peterdettman/subscriptions",
        "organizations_url": "https://api.github.com/users/peterdettman/orgs",
        "repos_url": "https://api.github.com/users/peterdettman/repos",
        "events_url": "https://api.github.com/users/peterdettman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/peterdettman/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-12-31T07:06:34Z",
      "updated_at": "2021-12-31T07:06:34Z",
      "author_association": "CONTRIBUTOR",
      "body": "As an exercise I added a 2 blocks, 4 teeth configuration:\r\n\r\n1. add {2,4} to CONFIGS table in precompute_ecmult_gen.c; nice and declarative.\r\n2. make precompute_ecmult_gen and run to get new precomputed_ecmult_gen.c which correctly includes new {2,4} option.\r\n3. modify configure.ac to support new \"1\" option for ecmult-gen-kb\r\n4. configure --with-ecmult-gen-kb=1, confirm in libsecp256k1-config.h that COMB_BLOCKS, COMB_TEETH are correct.\r\n5. make clean, make, tests to confirm it's working\r\n\r\nThis all worked without isues and was reasonably minimal effort. This particular example also satisfied me that there is no issue with combs covering exactly 256 bits.",
      "user": {
        "login": "peterdettman",
        "id": 3423981,
        "node_id": "MDQ6VXNlcjM0MjM5ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3423981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/peterdettman",
        "html_url": "https://github.com/peterdettman",
        "followers_url": "https://api.github.com/users/peterdettman/followers",
        "following_url": "https://api.github.com/users/peterdettman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/peterdettman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/peterdettman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/peterdettman/subscriptions",
        "organizations_url": "https://api.github.com/users/peterdettman/orgs",
        "repos_url": "https://api.github.com/users/peterdettman/repos",
        "events_url": "https://api.github.com/users/peterdettman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/peterdettman/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1058#issuecomment-1003290914",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1058"
    },
    {
      "event": "commented",
      "id": 1003396694,
      "node_id": "IC_kwDOAP4Jqs47zp5W",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/1003396694",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-12-31T15:05:57Z",
      "updated_at": "2021-12-31T15:05:57Z",
      "author_association": "CONTRIBUTOR",
      "body": "@peterdettman FWIW, the easiest way of achieving the same would be:\r\n1. Modify configure.ac to support a new option\r\n2. Run configure with that option\r\n3. make clean-precomp && make normally\r\n\r\nBecause precompute_ecmult_gen is automatically built & run when a precomputed_*.c file is missing, and because precompute_ecmult_gen will always include the table for whatever the configuration is.",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1058#issuecomment-1003396694",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1058"
    },
    {
      "event": "mentioned",
      "id": 5830652143,
      "node_id": "MEE_lADOAP4Jqs5BA3RkzwAAAAFbiLDv",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/5830652143",
      "actor": {
        "login": "peterdettman",
        "id": 3423981,
        "node_id": "MDQ6VXNlcjM0MjM5ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3423981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/peterdettman",
        "html_url": "https://github.com/peterdettman",
        "followers_url": "https://api.github.com/users/peterdettman/followers",
        "following_url": "https://api.github.com/users/peterdettman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/peterdettman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/peterdettman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/peterdettman/subscriptions",
        "organizations_url": "https://api.github.com/users/peterdettman/orgs",
        "repos_url": "https://api.github.com/users/peterdettman/repos",
        "events_url": "https://api.github.com/users/peterdettman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/peterdettman/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-12-31T15:05:58Z"
    },
    {
      "event": "subscribed",
      "id": 5830652144,
      "node_id": "SE_lADOAP4Jqs5BA3RkzwAAAAFbiLDw",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/5830652144",
      "actor": {
        "login": "peterdettman",
        "id": 3423981,
        "node_id": "MDQ6VXNlcjM0MjM5ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3423981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/peterdettman",
        "html_url": "https://github.com/peterdettman",
        "followers_url": "https://api.github.com/users/peterdettman/followers",
        "following_url": "https://api.github.com/users/peterdettman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/peterdettman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/peterdettman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/peterdettman/subscriptions",
        "organizations_url": "https://api.github.com/users/peterdettman/orgs",
        "repos_url": "https://api.github.com/users/peterdettman/repos",
        "events_url": "https://api.github.com/users/peterdettman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/peterdettman/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-12-31T15:05:58Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 5830713000,
      "node_id": "HRFPE_lADOAP4Jqs5BA3RkzwAAAAFbiZ6o",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/5830713000",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-12-31T15:51:42Z"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-12-31T22:25:22Z",
      "updated_at": "2021-12-31T22:25:22Z",
      "source": {
        "issue": {
          "id": 1087816645,
          "node_id": "I_kwDOAP4Jqs5A1sPF",
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1051",
          "repository_url": "https://api.github.com/repos/bitcoin-core/secp256k1",
          "labels_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1051/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1051/comments",
          "events_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1051/events",
          "html_url": "https://github.com/bitcoin-core/secp256k1/issues/1051",
          "number": 1051,
          "state": "open",
          "state_reason": null,
          "title": "Try a non-uniform group law (e.g., for ecmult_gen)?",
          "body": "The group law in `secp256k1_gej_add_ge` is uniform, i.e., it works for P + Q no matter if P != Q or P = Q. (It still needs to handle infinity and has another special case.) \r\n\r\nIt needs 7 fe mul and 5 fe sqr, the best non-uniform group law in EFD needs one fewer sqr (https://www.hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html#addition-madd-2007-bl). Mabye it's faster also in practice. We could simply implement it and benchmark it.\r\n\r\nDepending on the specifics of our ecmult_gen algorithm, it may be the case that this algorithm never adds P + Q with P = Q (for example, the ecmult algorithm within the MuSig-DN circuit has a similar property)). Then, we could get away with the non-uniform law in ecmult_gen.\r\n\r\nI think we shouldn't really think about this before https://github.com/bitcoin-core/secp256k1/pull/693 has been done.",
          "user": {
            "login": "real-or-random",
            "id": 1071625,
            "node_id": "MDQ6VXNlcjEwNzE2MjU=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/real-or-random",
            "html_url": "https://github.com/real-or-random",
            "followers_url": "https://api.github.com/users/real-or-random/followers",
            "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
            "organizations_url": "https://api.github.com/users/real-or-random/orgs",
            "repos_url": "https://api.github.com/users/real-or-random/repos",
            "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/real-or-random/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": false,
          "comments": 30,
          "created_at": "2021-12-23T15:38:09Z",
          "updated_at": "2022-12-03T16:44:05Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "commented",
      "id": 1003548907,
      "node_id": "IC_kwDOAP4Jqs470PDr",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/1003548907",
      "actor": {
        "login": "peterdettman",
        "id": 3423981,
        "node_id": "MDQ6VXNlcjM0MjM5ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3423981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/peterdettman",
        "html_url": "https://github.com/peterdettman",
        "followers_url": "https://api.github.com/users/peterdettman/followers",
        "following_url": "https://api.github.com/users/peterdettman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/peterdettman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/peterdettman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/peterdettman/subscriptions",
        "organizations_url": "https://api.github.com/users/peterdettman/orgs",
        "repos_url": "https://api.github.com/users/peterdettman/repos",
        "events_url": "https://api.github.com/users/peterdettman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/peterdettman/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-01-01T12:04:51Z",
      "updated_at": "2022-01-01T12:04:51Z",
      "author_association": "CONTRIBUTOR",
      "body": "Having some confusion over possible bad interactions between modular reduction and signed-digit form, I wanted to reason things out in reverse.\r\n\r\nFor point P of order N, scalar s in [0,N), and an L-bit comb (2^L > N), let C(s,P) be the value calculated by our comb, which considers the bits of s, zero-extended to L bits as signed digits. Then:\r\n```\r\n    C(s,P) == (2.s - (2^L - 1)) * P\r\n```\r\nTherefore in order to use the comb to calculate k * G, we solve for the scalar `t` to use:\r\n```\r\n    k * G == C(t,G) == (2.t - (2^L - 1)) * G \r\n=>  k == 2.t - (2^L - 1) mod N\r\n=>  t == (k + (2^L - 1))/2 mod N\r\n```\r\nCan we skip that halving and use G/2 instead?\r\n```\r\n    C(2t,G/2) == (4.t - (2^L - 1)) * G/2\r\n              == (2.t - (2^L - 1)/2) * G\r\n              != C(t,G) unless 2^L == 1 mod N\r\n```\r\nSo no, but let's back up a step and ask what scalar `u` to use in the comb to calculate k * G as 2.k * (G/2):\r\n```\r\n    2.k * (G/2) == C(u,G/2) == (2.u - (2^L - 1)) * G/2\r\n=>  2.k == 2.u - (2^L - 1) mod N\r\n=>  u == k + (2^L - 1)/2 mod N\r\n```\r\nand since L is constant, the halving is now only needed in the precomputation.\r\n\r\nScalar blinding (using b * G == B):\r\n```\r\n    k * G == (k - b) * G + B == 2.(k - b) * (G/2) + B == C(k - b + (2^L - 1)/2, G/2) + B\r\n```\r\nwhere `-b + (2^L - 1)/2` can be precomputed.\r\n",
      "user": {
        "login": "peterdettman",
        "id": 3423981,
        "node_id": "MDQ6VXNlcjM0MjM5ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3423981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/peterdettman",
        "html_url": "https://github.com/peterdettman",
        "followers_url": "https://api.github.com/users/peterdettman/followers",
        "following_url": "https://api.github.com/users/peterdettman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/peterdettman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/peterdettman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/peterdettman/subscriptions",
        "organizations_url": "https://api.github.com/users/peterdettman/orgs",
        "repos_url": "https://api.github.com/users/peterdettman/repos",
        "events_url": "https://api.github.com/users/peterdettman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/peterdettman/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1058#issuecomment-1003548907",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1058"
    },
    {
      "event": "commented",
      "id": 1003550833,
      "node_id": "IC_kwDOAP4Jqs470Phx",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/1003550833",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-01-01T12:13:54Z",
      "updated_at": "2022-01-01T12:13:54Z",
      "author_association": "CONTRIBUTOR",
      "body": "Nice, that's much better explained than my current comments. I'll try to include it.",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1058#issuecomment-1003550833",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1058"
    },
    {
      "event": "commented",
      "id": 1003551152,
      "node_id": "IC_kwDOAP4Jqs470Pmw",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/1003551152",
      "actor": {
        "login": "peterdettman",
        "id": 3423981,
        "node_id": "MDQ6VXNlcjM0MjM5ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3423981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/peterdettman",
        "html_url": "https://github.com/peterdettman",
        "followers_url": "https://api.github.com/users/peterdettman/followers",
        "following_url": "https://api.github.com/users/peterdettman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/peterdettman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/peterdettman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/peterdettman/subscriptions",
        "organizations_url": "https://api.github.com/users/peterdettman/orgs",
        "repos_url": "https://api.github.com/users/peterdettman/repos",
        "events_url": "https://api.github.com/users/peterdettman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/peterdettman/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-01-01T12:16:22Z",
      "updated_at": "2022-01-01T12:16:22Z",
      "author_association": "CONTRIBUTOR",
      "body": "Although the above satisfies me mathematically, I would like to see an explicit test case where the comb_offset (2^L - 1)/2 causes a modular reduction (relative to k-b). e.g. arrange for k-b == N + 1 - comb_offset. I hope that's not too painful, but otherwise random testing seems unlikely to hit such a case.",
      "user": {
        "login": "peterdettman",
        "id": 3423981,
        "node_id": "MDQ6VXNlcjM0MjM5ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3423981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/peterdettman",
        "html_url": "https://github.com/peterdettman",
        "followers_url": "https://api.github.com/users/peterdettman/followers",
        "following_url": "https://api.github.com/users/peterdettman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/peterdettman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/peterdettman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/peterdettman/subscriptions",
        "organizations_url": "https://api.github.com/users/peterdettman/orgs",
        "repos_url": "https://api.github.com/users/peterdettman/repos",
        "events_url": "https://api.github.com/users/peterdettman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/peterdettman/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1058#issuecomment-1003551152",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1058"
    },
    {
      "event": "commented",
      "id": 1003579579,
      "node_id": "IC_kwDOAP4Jqs470Wi7",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/1003579579",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-01-01T16:13:23Z",
      "updated_at": "2022-01-01T16:13:23Z",
      "author_association": "CONTRIBUTOR",
      "body": "@peterdettman Making this change causes instant failure during the tests, at least:\r\n\r\n```diff\r\n--- a/src/ecmult_gen_impl.h\r\n+++ b/src/ecmult_gen_impl.h\r\n@@ -78,7 +78,7 @@ static void secp256k1_ecmult_gen(const secp256k1_ecmult_gen_context *ctx, secp25\r\n      */\r\n \r\n     /* Compute the scalar (gn + ctx->scalar_offset). */\r\n-    secp256k1_scalar_add(&tmp, &ctx->scalar_offset, gn);\r\n+    CHECK(!secp256k1_scalar_add(&tmp, &ctx->scalar_offset, gn));\r\n     /* Convert to recoded array. */\r\n     for (i = 0; i < 8; ++i) {\r\n         recoded[i] = secp256k1_scalar_get_bits(&tmp, 32 * i, 32);\r\n```\r\n\r\nIncluding a test case that results in `tmp=0` or `tmp=1` or so may be useful though.",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1058#issuecomment-1003579579",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1058"
    },
    {
      "event": "mentioned",
      "id": 5831814953,
      "node_id": "MEE_lADOAP4Jqs5BA3RkzwAAAAFbmm8p",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/5831814953",
      "actor": {
        "login": "peterdettman",
        "id": 3423981,
        "node_id": "MDQ6VXNlcjM0MjM5ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3423981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/peterdettman",
        "html_url": "https://github.com/peterdettman",
        "followers_url": "https://api.github.com/users/peterdettman/followers",
        "following_url": "https://api.github.com/users/peterdettman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/peterdettman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/peterdettman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/peterdettman/subscriptions",
        "organizations_url": "https://api.github.com/users/peterdettman/orgs",
        "repos_url": "https://api.github.com/users/peterdettman/repos",
        "events_url": "https://api.github.com/users/peterdettman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/peterdettman/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-01-01T16:13:23Z"
    },
    {
      "event": "subscribed",
      "id": 5831814955,
      "node_id": "SE_lADOAP4Jqs5BA3RkzwAAAAFbmm8r",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/5831814955",
      "actor": {
        "login": "peterdettman",
        "id": 3423981,
        "node_id": "MDQ6VXNlcjM0MjM5ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3423981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/peterdettman",
        "html_url": "https://github.com/peterdettman",
        "followers_url": "https://api.github.com/users/peterdettman/followers",
        "following_url": "https://api.github.com/users/peterdettman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/peterdettman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/peterdettman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/peterdettman/subscriptions",
        "organizations_url": "https://api.github.com/users/peterdettman/orgs",
        "repos_url": "https://api.github.com/users/peterdettman/repos",
        "events_url": "https://api.github.com/users/peterdettman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/peterdettman/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-01-01T16:13:23Z"
    },
    {
      "event": "commented",
      "id": 1003581233,
      "node_id": "IC_kwDOAP4Jqs470W8x",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/1003581233",
      "actor": {
        "login": "peterdettman",
        "id": 3423981,
        "node_id": "MDQ6VXNlcjM0MjM5ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3423981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/peterdettman",
        "html_url": "https://github.com/peterdettman",
        "followers_url": "https://api.github.com/users/peterdettman/followers",
        "following_url": "https://api.github.com/users/peterdettman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/peterdettman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/peterdettman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/peterdettman/subscriptions",
        "organizations_url": "https://api.github.com/users/peterdettman/orgs",
        "repos_url": "https://api.github.com/users/peterdettman/repos",
        "events_url": "https://api.github.com/users/peterdettman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/peterdettman/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-01-01T16:28:00Z",
      "updated_at": "2022-01-01T16:28:00Z",
      "author_association": "CONTRIBUTOR",
      "body": "scalar_offset includes the randomly-distributed blind, so there will be modular reductions. This isn't concerning at all because we can reason about the blind independently of the comb (just input offset + output offset).\r\n\r\nHowever the comb offset is small: 2^(COMB_BITS-256) * (2^256 - N). So I would like a test that involves the comb_offset itself causing a modular reduction. The math checks out of course, but an explicit test can't hurt.\r\n",
      "user": {
        "login": "peterdettman",
        "id": 3423981,
        "node_id": "MDQ6VXNlcjM0MjM5ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3423981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/peterdettman",
        "html_url": "https://github.com/peterdettman",
        "followers_url": "https://api.github.com/users/peterdettman/followers",
        "following_url": "https://api.github.com/users/peterdettman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/peterdettman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/peterdettman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/peterdettman/subscriptions",
        "organizations_url": "https://api.github.com/users/peterdettman/orgs",
        "repos_url": "https://api.github.com/users/peterdettman/repos",
        "events_url": "https://api.github.com/users/peterdettman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/peterdettman/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1058#issuecomment-1003581233",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1058"
    },
    {
      "event": "commented",
      "id": 1003582579,
      "node_id": "IC_kwDOAP4Jqs470XRz",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/1003582579",
      "actor": {
        "login": "peterdettman",
        "id": 3423981,
        "node_id": "MDQ6VXNlcjM0MjM5ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3423981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/peterdettman",
        "html_url": "https://github.com/peterdettman",
        "followers_url": "https://api.github.com/users/peterdettman/followers",
        "following_url": "https://api.github.com/users/peterdettman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/peterdettman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/peterdettman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/peterdettman/subscriptions",
        "organizations_url": "https://api.github.com/users/peterdettman/orgs",
        "repos_url": "https://api.github.com/users/peterdettman/repos",
        "events_url": "https://api.github.com/users/peterdettman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/peterdettman/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-01-01T16:42:15Z",
      "updated_at": "2022-01-01T16:42:15Z",
      "author_association": "CONTRIBUTOR",
      "body": "Actually, I think (2^L - 1)/2 mod N is only small (128 bits) if L == 256.",
      "user": {
        "login": "peterdettman",
        "id": 3423981,
        "node_id": "MDQ6VXNlcjM0MjM5ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3423981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/peterdettman",
        "html_url": "https://github.com/peterdettman",
        "followers_url": "https://api.github.com/users/peterdettman/followers",
        "following_url": "https://api.github.com/users/peterdettman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/peterdettman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/peterdettman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/peterdettman/subscriptions",
        "organizations_url": "https://api.github.com/users/peterdettman/orgs",
        "repos_url": "https://api.github.com/users/peterdettman/repos",
        "events_url": "https://api.github.com/users/peterdettman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/peterdettman/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1058#issuecomment-1003582579",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1058"
    },
    {
      "event": "commented",
      "id": 1003582851,
      "node_id": "IC_kwDOAP4Jqs470XWD",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/1003582851",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-01-01T16:44:58Z",
      "updated_at": "2022-01-01T16:44:58Z",
      "author_association": "CONTRIBUTOR",
      "body": "For the 43/6/1 configuration it is 0x80000000000000000000000000000001e7f9b4a5f9130fa66044722cc7ae9e1e\r\nFor the 11/6/4 configuration it is 0x8000000000000000000000000000000987e0873ddd5f4e3fe1563adfe6691698",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1058#issuecomment-1003582851",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1058"
    },
    {
      "event": "commented",
      "id": 1003584220,
      "node_id": "IC_kwDOAP4Jqs470Xrc",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/1003584220",
      "actor": {
        "login": "peterdettman",
        "id": 3423981,
        "node_id": "MDQ6VXNlcjM0MjM5ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3423981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/peterdettman",
        "html_url": "https://github.com/peterdettman",
        "followers_url": "https://api.github.com/users/peterdettman/followers",
        "following_url": "https://api.github.com/users/peterdettman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/peterdettman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/peterdettman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/peterdettman/subscriptions",
        "organizations_url": "https://api.github.com/users/peterdettman/orgs",
        "repos_url": "https://api.github.com/users/peterdettman/repos",
        "events_url": "https://api.github.com/users/peterdettman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/peterdettman/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-01-01T16:59:57Z",
      "updated_at": "2022-01-01T16:59:57Z",
      "author_association": "CONTRIBUTOR",
      "body": "> Including a test case that results in `tmp=0` or `tmp=1` or so may be useful though.\r\n\r\nSo, these and maybe -1 would be enough. I will check a 256-bit config manually if they are added.",
      "user": {
        "login": "peterdettman",
        "id": 3423981,
        "node_id": "MDQ6VXNlcjM0MjM5ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3423981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/peterdettman",
        "html_url": "https://github.com/peterdettman",
        "followers_url": "https://api.github.com/users/peterdettman/followers",
        "following_url": "https://api.github.com/users/peterdettman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/peterdettman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/peterdettman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/peterdettman/subscriptions",
        "organizations_url": "https://api.github.com/users/peterdettman/orgs",
        "repos_url": "https://api.github.com/users/peterdettman/repos",
        "events_url": "https://api.github.com/users/peterdettman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/peterdettman/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1058#issuecomment-1003584220",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1058"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 5831925288,
      "node_id": "HRFPE_lADOAP4Jqs5BA3RkzwAAAAFbnB4o",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/5831925288",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-01-01T18:36:02Z"
    },
    {
      "event": "commented",
      "id": 1003598664,
      "node_id": "IC_kwDOAP4Jqs470bNI",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/1003598664",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-01-01T18:36:50Z",
      "updated_at": "2022-01-01T18:36:50Z",
      "author_association": "CONTRIBUTOR",
      "body": "@peterdettman I've incorporated your derivation in the comments in ecmult_gen_impl.h, and added a test case for recoded={-1,0,1}.",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1058#issuecomment-1003598664",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1058"
    },
    {
      "event": "mentioned",
      "id": 5831925804,
      "node_id": "MEE_lADOAP4Jqs5BA3RkzwAAAAFbnCAs",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/5831925804",
      "actor": {
        "login": "peterdettman",
        "id": 3423981,
        "node_id": "MDQ6VXNlcjM0MjM5ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3423981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/peterdettman",
        "html_url": "https://github.com/peterdettman",
        "followers_url": "https://api.github.com/users/peterdettman/followers",
        "following_url": "https://api.github.com/users/peterdettman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/peterdettman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/peterdettman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/peterdettman/subscriptions",
        "organizations_url": "https://api.github.com/users/peterdettman/orgs",
        "repos_url": "https://api.github.com/users/peterdettman/repos",
        "events_url": "https://api.github.com/users/peterdettman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/peterdettman/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-01-01T18:36:50Z"
    },
    {
      "event": "subscribed",
      "id": 5831925805,
      "node_id": "SE_lADOAP4Jqs5BA3RkzwAAAAFbnCAt",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/5831925805",
      "actor": {
        "login": "peterdettman",
        "id": 3423981,
        "node_id": "MDQ6VXNlcjM0MjM5ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3423981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/peterdettman",
        "html_url": "https://github.com/peterdettman",
        "followers_url": "https://api.github.com/users/peterdettman/followers",
        "following_url": "https://api.github.com/users/peterdettman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/peterdettman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/peterdettman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/peterdettman/subscriptions",
        "organizations_url": "https://api.github.com/users/peterdettman/orgs",
        "repos_url": "https://api.github.com/users/peterdettman/repos",
        "events_url": "https://api.github.com/users/peterdettman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/peterdettman/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-01-01T18:36:50Z"
    },
    {
      "event": "reviewed",
      "id": 842381071,
      "node_id": "PRR_kwDOAP4Jqs4yNbcP",
      "url": null,
      "actor": null,
      "commit_id": "a98735b09a14d4d644504c3a9b2b989f62221051",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "peterdettman",
        "id": 3423981,
        "node_id": "MDQ6VXNlcjM0MjM5ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3423981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/peterdettman",
        "html_url": "https://github.com/peterdettman",
        "followers_url": "https://api.github.com/users/peterdettman/followers",
        "following_url": "https://api.github.com/users/peterdettman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/peterdettman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/peterdettman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/peterdettman/subscriptions",
        "organizations_url": "https://api.github.com/users/peterdettman/orgs",
        "repos_url": "https://api.github.com/users/peterdettman/repos",
        "events_url": "https://api.github.com/users/peterdettman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/peterdettman/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1058#pullrequestreview-842381071",
      "submitted_at": "2022-01-02T05:22:15Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1058"
    },
    {
      "event": "reviewed",
      "id": 842381195,
      "node_id": "PRR_kwDOAP4Jqs4yNbeL",
      "url": null,
      "actor": null,
      "commit_id": "a98735b09a14d4d644504c3a9b2b989f62221051",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "peterdettman",
        "id": 3423981,
        "node_id": "MDQ6VXNlcjM0MjM5ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3423981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/peterdettman",
        "html_url": "https://github.com/peterdettman",
        "followers_url": "https://api.github.com/users/peterdettman/followers",
        "following_url": "https://api.github.com/users/peterdettman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/peterdettman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/peterdettman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/peterdettman/subscriptions",
        "organizations_url": "https://api.github.com/users/peterdettman/orgs",
        "repos_url": "https://api.github.com/users/peterdettman/repos",
        "events_url": "https://api.github.com/users/peterdettman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/peterdettman/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1058#pullrequestreview-842381195",
      "submitted_at": "2022-01-02T05:24:33Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1058"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 5832933132,
      "node_id": "HRFPE_lADOAP4Jqs5BA3RkzwAAAAFbq38M",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/5832933132",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-01-02T18:34:45Z"
    },
    {
      "event": "commented",
      "id": 1004975047,
      "node_id": "IC_kwDOAP4Jqs475rPH",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/1004975047",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-01-04T16:41:50Z",
      "updated_at": "2022-01-04T16:41:50Z",
      "author_association": "CONTRIBUTOR",
      "body": "I've worked on an additional change that introduces a COMB_RANGE which is normally 256, but in exhaustive test mode corresponds to the number of bits in EXHAUSTIVE_TEST_ORDER. Then COMB_BITS only has to cover COMB_RANGE etc, instead of always being at least 256.\r\n\r\nAnd I'm seeing a suspicious failure in certain configurations with that (even making sure that the precomputed table only contains non-infinity points).\r\n\r\nI'll retry this approach to make sure I haven't missed something.",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1058#issuecomment-1004975047",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1058"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 5842416993,
      "node_id": "HRFPE_lADOAP4Jqs5BA3RkzwAAAAFcPDVh",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/5842416993",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-01-04T19:22:48Z"
    },
    {
      "event": "commented",
      "id": 1005262880,
      "node_id": "IC_kwDOAP4Jqs476xgg",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/1005262880",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-01-04T23:58:59Z",
      "updated_at": "2022-01-05T02:13:15Z",
      "author_association": "CONTRIBUTOR",
      "body": "I added a commit that permits COMB_BITS < 256 in exhaustive test mode. However, it doesn't work in a lot of configurations,  and I don't understand what's causing it.\r\n\r\nHere is a list of (blocks teeth spacing) tuples and whether they work (for both order 13 and 199): [groups.txt](https://github.com/bitcoin-core/secp256k1/files/7811096/groups.txt)",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1058#issuecomment-1005262880",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1058"
    },
    {
      "event": "commented",
      "id": 1005821373,
      "node_id": "IC_kwDOAP4Jqs478529",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/1005821373",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-01-05T15:34:12Z",
      "updated_at": "2022-01-05T15:34:12Z",
      "author_association": "CONTRIBUTOR",
      "body": "Update: it appears that `EXHAUSTIVE_TEST_ORDER < 2**(BLOCKS * TEETH * (SPACING - 1))` perfectly predicts which configurations work.",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1058#issuecomment-1005821373",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1058"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 5848400985,
      "node_id": "HRFPE_lADOAP4Jqs5BA3RkzwAAAAFcl4RZ",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/5848400985",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-01-05T19:16:27Z"
    },
    {
      "event": "commented",
      "id": 1006030063,
      "node_id": "IC_kwDOAP4Jqs479szv",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/1006030063",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-01-05T19:52:05Z",
      "updated_at": "2022-01-05T19:52:05Z",
      "author_association": "CONTRIBUTOR",
      "body": "Final update: I was being very dumb, and precompute_ecmult_gen just had `spacing = (COMB_RANGE + blocks * teeth) / (block * teeth)` hardcoded, leading to an inconsistency between the table and the actual multiplication code.\r\n\r\nFalse alarm.",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1058#issuecomment-1006030063",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1058"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "apoelstra",
        "id": 1351933,
        "node_id": "MDQ6VXNlcjEzNTE5MzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1351933?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/apoelstra",
        "html_url": "https://github.com/apoelstra",
        "followers_url": "https://api.github.com/users/apoelstra/followers",
        "following_url": "https://api.github.com/users/apoelstra/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/apoelstra/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/apoelstra/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/apoelstra/subscriptions",
        "organizations_url": "https://api.github.com/users/apoelstra/orgs",
        "repos_url": "https://api.github.com/users/apoelstra/repos",
        "events_url": "https://api.github.com/users/apoelstra/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/apoelstra/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-01-27T13:24:09Z",
      "updated_at": "2022-01-27T13:24:09Z",
      "source": {
        "issue": {
          "id": 1116207801,
          "node_id": "I_kwDOAVzY0c5Ch_q5",
          "url": "https://api.github.com/repos/rust-bitcoin/rust-secp256k1/issues/388",
          "repository_url": "https://api.github.com/repos/rust-bitcoin/rust-secp256k1",
          "labels_url": "https://api.github.com/repos/rust-bitcoin/rust-secp256k1/issues/388/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/rust-bitcoin/rust-secp256k1/issues/388/comments",
          "events_url": "https://api.github.com/repos/rust-bitcoin/rust-secp256k1/issues/388/events",
          "html_url": "https://github.com/rust-bitcoin/rust-secp256k1/issues/388",
          "number": 388,
          "state": "open",
          "state_reason": null,
          "title": "Context randomization tracking issue",
          "body": "Consolidating discussion from #385 #386 #387. Tobin is proposing to re-randomize contexts, not just the global one, when they are created -- though naturally only if the `rand` feature is enabled. Our current situation is kinda weird -- for users of global contexts, we require they \"opt out\" of rerandomization by choosing the `global-context-less-secure` feature vs the `global-context` flag, while ordinary users must \"opt in\" by creating a context then explicitly calling `randomize()` on it.\r\n\r\nA bit of context (hah):\r\n* re-randomization is not free: it takes about as long as a signing operation (around 50us on a desktop computer)\r\n* on the other hand, context generation is extremely expensive (multiple milliseconds on a desktop computer) so this is fine during context creation; but on the third hand, now that we are moving toward pre-computing all the tables, context creation will be nearly free, so the re-randomization would then be the bulk of the \"create context\" operation\r\n* re-randomization of verification contexts is a no-op. This discussion is only about signing contexts\r\n\r\nHere is my proposal:\r\n1. We remove the `global-context-less-secure` feature; `global-context` enables the global context, and we rerandomize it on first use if `rand` is also enabled.\r\n2. Similarly we randomize **all** signing contexts on creation, if `rand` is enabled\r\n3. We also change `sign()` and `sign_schnorr` to rerandomize the context after each signing operation. We add a `sign_no_rerandomize` method to opt out of this\r\n   1. This would nearly double signing time, **although** sipa points out that there is a theoretical way, with help from upstream, we could make the rerandomization 99%+ faster, by essentially only doing one bit of re-randomization per signature\r\n   2. This would also force the signing API to take a `&mut` pointer to the context object, which really sucks.\r\n3. We leave the `rerandomize()` methods in place but document that users have basically no reason to call them manually.\r\n\r\nAlternate proposals:\r\n* Leave the `sign` methods alone but add `sign_randomize` ones which also do the re-randomization\r\n* Embed a mutex in our `Context` objects so that re-randomization can be done with normal non-mutable references. (May be OK with \"fast re-randomization\", almost certainly not with full re-randomization, which would basically cause parallel signing operations to be force-serialized.)\r\n\r\ncc @TheBlueMatt @tcharding\r\n\r\nSee also https://github.com/bitcoin-core/secp256k1/issues/881 (which is not the \"one-bit rerandomization\" idea, but is similar and has a similar effect).\r\n\r\nSee also https://github.com/bitcoin-core/secp256k1/pull/1058 which will affect upstream's blinding logic.",
          "user": {
            "login": "apoelstra",
            "id": 1351933,
            "node_id": "MDQ6VXNlcjEzNTE5MzM=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1351933?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/apoelstra",
            "html_url": "https://github.com/apoelstra",
            "followers_url": "https://api.github.com/users/apoelstra/followers",
            "following_url": "https://api.github.com/users/apoelstra/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/apoelstra/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/apoelstra/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/apoelstra/subscriptions",
            "organizations_url": "https://api.github.com/users/apoelstra/orgs",
            "repos_url": "https://api.github.com/users/apoelstra/repos",
            "events_url": "https://api.github.com/users/apoelstra/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/apoelstra/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 30,
          "created_at": "2022-01-27T13:21:26Z",
          "updated_at": "2022-08-05T07:48:03Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7873502391,
      "node_id": "HRFPE_lADOAP4Jqs5BA3RkzwAAAAHVTBy3",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/7873502391",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-11-23T04:29:16Z"
    },
    {
      "event": "commented",
      "id": 1324536211,
      "node_id": "IC_kwDOAP4Jqs5O8tGT",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/1324536211",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-11-23T04:29:33Z",
      "updated_at": "2022-11-23T04:29:33Z",
      "author_association": "CONTRIBUTOR",
      "body": "Rebased.",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1058#issuecomment-1324536211",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1058"
    },
    {
      "event": "commented",
      "id": 1325068475,
      "node_id": "IC_kwDOAP4Jqs5O-vC7",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/1325068475",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-11-23T13:26:27Z",
      "updated_at": "2022-11-23T13:26:27Z",
      "author_association": "CONTRIBUTOR",
      "body": "I believe this PR is ready for review (the discussion above was just observing some configurations not working due to a fairly stupid bug which was fixed).",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1058#issuecomment-1325068475",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1058"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 8124103145,
      "node_id": "HRFPE_lADOAP4Jqs5BA3RkzwAAAAHkO_np",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/8124103145",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-12-29T03:26:08Z"
    },
    {
      "event": "commented",
      "id": 1367063431,
      "node_id": "IC_kwDOAP4Jqs5Re7uH",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/1367063431",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-12-29T04:21:22Z",
      "updated_at": "2022-12-29T04:21:22Z",
      "author_association": "CONTRIBUTOR",
      "body": "Rebased after merge of #1178. Added changelog entry.",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1058#issuecomment-1367063431",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1058"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 8124232337,
      "node_id": "HRFPE_lADOAP4Jqs5BA3RkzwAAAAHkPfKR",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/8124232337",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-12-29T04:24:42Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 8126899477,
      "node_id": "HRFPE_lADOAP4Jqs5BA3RkzwAAAAHkZqUV",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/8126899477",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-12-29T15:49:30Z"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-12-30T06:39:21Z",
      "updated_at": "2022-12-30T06:39:21Z",
      "source": {
        "issue": {
          "id": 1514285978,
          "node_id": "PR_kwDOAP4Jqs5GYHyn",
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1184",
          "repository_url": "https://api.github.com/repos/bitcoin-core/secp256k1",
          "labels_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1184/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1184/comments",
          "events_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1184/events",
          "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1184",
          "number": 1184,
          "state": "closed",
          "state_reason": null,
          "title": "Signed-digit based ecmult_const algorithm",
          "body": "Using some insights learned from #1058, this replaces the fixed-wnaf ecmult_const algorithm with a signed-digit based one. Conceptually both algorithms are very similar, in that they boil down to summing precomputed odd multiples of the input points. Practically however, the new algorithm is simpler because it's just using scalar operations, rather than relying on wnaf machinery with skew terms to guarantee odd multipliers.\r\n\r\nThe idea is that we can compute $q \\cdot A$ as follows:\r\n* Let $s = f(q)$, for some function $f()$.\r\n* Compute $(s_1, s_2)$ such that $s = s_1 + \\lambda s_2$, using `secp256k1_scalar_lambda_split`.\r\n* Let $v_1 = s_1 + 2^{128}$ and $v_2 = s_2 + 2^{128}$ (such that the $v_i$ are positive and $n$ bits long).\r\n* Computing the result as $$\\sum_{i=0}^{n-1} (2v_1[i]-1) 2^i A + \\sum_{i=0}^{n-1} (2v_2[i]-1) 2^i \\lambda A$$ where $x[i]$ stands for the *i*'th bit of $x$, so summing positive and negative powers of two times $A$, based on the bits of $v_1.$\r\n\r\nThe comments in `ecmult_const_impl.h` show that if $f(q) = (q + (1+\\lambda)(2^n - 2^{129} - 1))/2 \\mod n$, the result will equal $q \\cdot A$.\r\n\r\nThis last step can be performed in groups of multiple bits at once, by looking up entries in a precomputed table of odd multiples of $A$ and $\\lambda A$, and then multiplying by a power of two before proceeding to the next group.\r\n\r\nThe result is slightly faster (I measure ~2% speedup), but significantly simpler as it only uses scalar arithmetic to determine the table lookup values. The speedup is due to the fact that no skew corrections at the end are needed, and less overhead to determine table indices. The precomputed table sizes are also made independent from the `ecmult` ones, after observing that the optimal table size is bigger here (which also gives a small speedup).",
          "user": {
            "login": "sipa",
            "id": 548488,
            "node_id": "MDQ6VXNlcjU0ODQ4OA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sipa",
            "html_url": "https://github.com/sipa",
            "followers_url": "https://api.github.com/users/sipa/followers",
            "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
            "organizations_url": "https://api.github.com/users/sipa/orgs",
            "repos_url": "https://api.github.com/users/sipa/repos",
            "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/sipa/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 4975389731,
              "node_id": "LA_kwDOAP4Jqs8AAAABKI5sIw",
              "url": "https://api.github.com/repos/bitcoin-core/secp256k1/labels/performance",
              "name": "performance",
              "description": "",
              "color": "DE3CCC",
              "default": false
            },
            {
              "id": 5492448291,
              "node_id": "LA_kwDOAP4Jqs8AAAABR2AcIw",
              "url": "https://api.github.com/repos/bitcoin-core/secp256k1/labels/refactor/smell",
              "name": "refactor/smell",
              "description": "",
              "color": "FBCA04",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "milestone": {
            "url": "https://api.github.com/repos/bitcoin-core/secp256k1/milestones/5",
            "html_url": "https://github.com/bitcoin-core/secp256k1/milestone/5",
            "labels_url": "https://api.github.com/repos/bitcoin-core/secp256k1/milestones/5/labels",
            "id": 9880835,
            "node_id": "MI_kwDOAP4Jqs4AlsUD",
            "number": 5,
            "state": "closed",
            "title": "0.4.1",
            "description": "",
            "creator": {
              "login": "jonasnick",
              "id": 2582071,
              "node_id": "MDQ6VXNlcjI1ODIwNzE=",
              "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/jonasnick",
              "html_url": "https://github.com/jonasnick",
              "followers_url": "https://api.github.com/users/jonasnick/followers",
              "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
              "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
              "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
              "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
              "organizations_url": "https://api.github.com/users/jonasnick/orgs",
              "repos_url": "https://api.github.com/users/jonasnick/repos",
              "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
              "received_events_url": "https://api.github.com/users/jonasnick/received_events",
              "type": "User",
              "site_admin": false
            },
            "open_issues": 1,
            "closed_issues": 6,
            "created_at": "2023-09-04T14:30:28Z",
            "updated_at": "2024-01-05T13:12:50Z",
            "closed_at": "2024-01-05T13:12:50Z",
            "due_on": "2023-12-21T08:00:00Z"
          },
          "locked": false,
          "comments": 21,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1184",
            "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1184",
            "diff_url": "https://github.com/bitcoin-core/secp256k1/pull/1184.diff",
            "patch_url": "https://github.com/bitcoin-core/secp256k1/pull/1184.patch"
          },
          "closed_at": "2023-11-07T22:19:15Z",
          "created_at": "2022-12-30T06:39:21Z",
          "updated_at": "2023-11-07T22:19:16Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 8205746452,
      "node_id": "HRFPE_lADOAP4Jqs5BA3RkzwAAAAHpGcEU",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/8205746452",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-01-11T21:50:12Z"
    },
    {
      "event": "commented",
      "id": 1379531405,
      "node_id": "IC_kwDOAP4Jqs5SOfqN",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/1379531405",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-01-11T21:50:45Z",
      "updated_at": "2023-01-11T21:50:45Z",
      "author_association": "CONTRIBUTOR",
      "body": "Rebased after #1187 merge.",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1058#issuecomment-1379531405",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1058"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 8315919899,
      "node_id": "HRFPE_lADOAP4Jqs5BA3RkzwAAAAHvqt4b",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/8315919899",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-01-19T20:29:40Z"
    },
    {
      "event": "commented",
      "id": 1397561036,
      "node_id": "IC_kwDOAP4Jqs5TTRbM",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/1397561036",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-01-19T20:30:22Z",
      "updated_at": "2023-01-19T20:30:22Z",
      "author_association": "CONTRIBUTOR",
      "body": "Rebased after merge of #1170 and #1190.",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1058#issuecomment-1397561036",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1058"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 8965419662,
      "node_id": "HRFPE_lADOAP4Jqs5BA3RkzwAAAAIWYXKO",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/8965419662",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-04-10T17:01:01Z"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-12T07:39:19Z",
      "updated_at": "2023-05-12T07:39:19Z",
      "source": {
        "issue": {
          "id": 1393480581,
          "node_id": "PR_kwDOABII584__hei",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26222",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26222/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26222/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26222/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/26222",
          "number": 26222,
          "state": "closed",
          "state_reason": null,
          "title": "Introduce secp256k1 module with field and group classes to test framework",
          "body": "This PR rewrites a portion of `test_framework/key.py`, in a compatible way, by introducing classes that encapsulate field element and group element logic, in an attempt to be more readable and reusable.\r\n\r\nTo maximize readability, the group element logic does not use Jacobian coordinates. Instead, group elements just store (affine) X and Y coordinates directly. To compensate for the performance loss this causes, field elements are represented as fractions. This undoes most, but not all, of the performance loss, and there is a few % slowdown (as measured in `feature_taproot.py`, which heavily uses this).\r\n\r\nThe upside is that the implementation for group laws (point doubling, addition, subtraction, ...) is very close to the mathematical description of elliptic curves, and this extends to potential future extensions (e.g. ElligatorSwift as needed by #27479).",
          "user": {
            "login": "sipa",
            "id": 548488,
            "node_id": "MDQ6VXNlcjU0ODQ4OA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sipa",
            "html_url": "https://github.com/sipa",
            "followers_url": "https://api.github.com/users/sipa/followers",
            "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
            "organizations_url": "https://api.github.com/users/sipa/orgs",
            "repos_url": "https://api.github.com/users/sipa/repos",
            "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/sipa/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 62963516,
              "node_id": "MDU6TGFiZWw2Mjk2MzUxNg==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Tests",
              "name": "Tests",
              "color": "d4c5f9",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 9,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26222",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/26222",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/26222.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/26222.patch"
          },
          "closed_at": "2023-06-28T20:28:17Z",
          "created_at": "2022-10-01T17:12:10Z",
          "updated_at": "2023-06-28T20:28:18Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 9315948018,
      "node_id": "HRFPE_lADOAP4Jqs5BA3RkzwAAAAIrRhXy",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/9315948018",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-23T12:53:43Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 9321907758,
      "node_id": "HRFPE_lADOAP4Jqs5BA3RkzwAAAAIroQYu",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/9321907758",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-24T00:59:56Z"
    },
    {
      "event": "commented",
      "id": 1560309820,
      "node_id": "IC_kwDOAP4Jqs5dAHA8",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/1560309820",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-24T01:00:12Z",
      "updated_at": "2023-05-24T01:00:12Z",
      "author_association": "CONTRIBUTOR",
      "body": "Rebased, and added to cmake.",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1058#issuecomment-1560309820",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1058"
    },
    {
      "event": "referenced",
      "id": 10892972570,
      "node_id": "REFE_lADOAP4Jqs5BA3RkzwAAAAKJRZIa",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/10892972570",
      "actor": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "40f50d0fbd3c7ee78b4055bc6ca81027025c4148",
      "commit_url": "https://api.github.com/repos/bitcoin-core/secp256k1/commits/40f50d0fbd3c7ee78b4055bc6ca81027025c4148",
      "created_at": "2023-11-07T22:19:15Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 10901401210,
      "node_id": "HRFPE_lADOAP4Jqs5BA3RkzwAAAAKJxi56",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/10901401210",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-11-08T14:10:59Z"
    },
    {
      "event": "commented",
      "id": 1801968467,
      "node_id": "IC_kwDOAP4Jqs5rZ9tT",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/1801968467",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-11-08T14:11:18Z",
      "updated_at": "2023-11-08T14:11:18Z",
      "author_association": "CONTRIBUTOR",
      "body": "Rebased.",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1058#issuecomment-1801968467",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1058"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 10901421323,
      "node_id": "HRFPE_lADOAP4Jqs5BA3RkzwAAAAKJxn0L",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/10901421323",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-11-08T14:12:33Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 10901837139,
      "node_id": "HRFPE_lADOAP4Jqs5BA3RkzwAAAAKJzNVT",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/10901837139",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-11-08T14:43:43Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 10933317004,
      "node_id": "HRFPE_lADOAP4Jqs5BA3RkzwAAAAKLrS2M",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/10933317004",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-11-11T22:58:39Z"
    },
    {
      "event": "labeled",
      "id": 10945319173,
      "node_id": "LE_lADOAP4Jqs5BA3RkzwAAAAKMZFEF",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/10945319173",
      "actor": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-11-13T18:15:54Z",
      "label": {
        "name": "performance",
        "color": "DE3CCC"
      }
    },
    {
      "event": "reviewed",
      "id": 1759044478,
      "node_id": "PRR_kwDOAP4Jqs5o2ON-",
      "url": null,
      "actor": null,
      "commit_id": "4e125ea4489777d2c721cb299eac06774008708b",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "",
      "user": {
        "login": "stratospher",
        "id": 44024636,
        "node_id": "MDQ6VXNlcjQ0MDI0NjM2",
        "avatar_url": "https://avatars.githubusercontent.com/u/44024636?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stratospher",
        "html_url": "https://github.com/stratospher",
        "followers_url": "https://api.github.com/users/stratospher/followers",
        "following_url": "https://api.github.com/users/stratospher/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stratospher/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stratospher/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stratospher/subscriptions",
        "organizations_url": "https://api.github.com/users/stratospher/orgs",
        "repos_url": "https://api.github.com/users/stratospher/repos",
        "events_url": "https://api.github.com/users/stratospher/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stratospher/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1058#pullrequestreview-1759044478",
      "submitted_at": "2023-12-01T06:06:32Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1058"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 11129152945,
      "node_id": "HRFPE_lADOAP4Jqs5BA3RkzwAAAAKXWWWx",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/11129152945",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-12-02T14:56:35Z"
    },
    {
      "event": "commented",
      "id": 1837167280,
      "node_id": "IC_kwDOAP4Jqs5tgPKw",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/1837167280",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-12-02T14:57:32Z",
      "updated_at": "2023-12-02T14:57:32Z",
      "author_association": "CONTRIBUTOR",
      "body": "Rebased after #1450.",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1058#issuecomment-1837167280",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1058"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 11171429192,
      "node_id": "HRFPE_lADOAP4Jqs5BA3RkzwAAAAKZ3ntI",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/11171429192",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-12-06T17:20:47Z"
    },
    {
      "event": "reviewed",
      "id": 1761684466,
      "node_id": "PRR_kwDOAP4Jqs5pASvy",
      "url": null,
      "actor": null,
      "commit_id": "3feae17e562f6b0043f6e67252e6952dbea6aaa2",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "",
      "user": {
        "login": "stratospher",
        "id": 44024636,
        "node_id": "MDQ6VXNlcjQ0MDI0NjM2",
        "avatar_url": "https://avatars.githubusercontent.com/u/44024636?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stratospher",
        "html_url": "https://github.com/stratospher",
        "followers_url": "https://api.github.com/users/stratospher/followers",
        "following_url": "https://api.github.com/users/stratospher/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stratospher/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stratospher/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stratospher/subscriptions",
        "organizations_url": "https://api.github.com/users/stratospher/orgs",
        "repos_url": "https://api.github.com/users/stratospher/repos",
        "events_url": "https://api.github.com/users/stratospher/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stratospher/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1058#pullrequestreview-1761684466",
      "submitted_at": "2024-03-10T14:19:56Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1058"
    },
    {
      "event": "reviewed",
      "id": 1926564069,
      "node_id": "PRR_kwDOAP4Jqs5y1Qjl",
      "url": null,
      "actor": null,
      "commit_id": "3feae17e562f6b0043f6e67252e6952dbea6aaa2",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "",
      "user": {
        "login": "stratospher",
        "id": 44024636,
        "node_id": "MDQ6VXNlcjQ0MDI0NjM2",
        "avatar_url": "https://avatars.githubusercontent.com/u/44024636?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stratospher",
        "html_url": "https://github.com/stratospher",
        "followers_url": "https://api.github.com/users/stratospher/followers",
        "following_url": "https://api.github.com/users/stratospher/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stratospher/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stratospher/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stratospher/subscriptions",
        "organizations_url": "https://api.github.com/users/stratospher/orgs",
        "repos_url": "https://api.github.com/users/stratospher/repos",
        "events_url": "https://api.github.com/users/stratospher/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stratospher/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1058#pullrequestreview-1926564069",
      "submitted_at": "2024-03-10T15:02:03Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1058"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 12143878298,
      "node_id": "HRFPE_lADOAP4Jqs5BA3RkzwAAAALT1OCa",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/12143878298",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-03-17T19:46:31Z"
    },
    {
      "event": "commented",
      "id": 2002595963,
      "node_id": "IC_kwDOAP4Jqs53XTB7",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/2002595963",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-03-17T19:47:56Z",
      "updated_at": "2024-03-17T19:47:56Z",
      "author_association": "CONTRIBUTOR",
      "body": "Addressed comments and rebased.",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1058#issuecomment-2002595963",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1058"
    },
    {
      "event": "commented",
      "id": 2004205978,
      "node_id": "IC_kwDOAP4Jqs53dcGa",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/2004205978",
      "actor": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-03-18T15:22:33Z",
      "updated_at": "2024-03-20T12:26:42Z",
      "author_association": "CONTRIBUTOR",
      "body": "CI reports segfaults in the sanitizer jobs, but I'm not sure if this is a problem with the compiler, e.g., see\r\nhttps://github.com/bitcoin-core/secp256k1/actions/runs/8317860245/job/22759343772?pr=1058#step:9:148 where even a test binary built and run by ./configure segfaults. Note that this happens with the stable compilers, not with the nightly compilers... Our usage of sanitizers is quite heavy: We use multiple sanitizers at once, and we enable some special options for extra checks, maybe those work any longer. (My feeling is that upstream maintenance of the sanitizers isn't great currently, there are many open issues without responses from the maintainers.)  ",
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1058#issuecomment-2004205978",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1058"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 12161729276,
      "node_id": "HRFPE_lADOAP4Jqs5BA3RkzwAAAALU5UL8",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/12161729276",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-03-19T00:37:18Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 12184347351,
      "node_id": "HRFPE_lADOAP4Jqs5BA3RkzwAAAALWPmLX",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/12184347351",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-03-20T12:48:35Z"
    },
    {
      "event": "commented",
      "id": 2026492632,
      "node_id": "IC_kwDOAP4Jqs54ydLY",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/2026492632",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-03-29T02:24:36Z",
      "updated_at": "2024-03-29T02:24:36Z",
      "author_association": "CONTRIBUTOR",
      "body": "@armfazh said he might me interested in looking at this. \"Project Palm\"",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1058#issuecomment-2026492632",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1058"
    },
    {
      "event": "mentioned",
      "id": 12290094881,
      "node_id": "MEE_lADOAP4Jqs5BA3RkzwAAAALci_ch",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/12290094881",
      "actor": {
        "login": "armfazh",
        "id": 10335519,
        "node_id": "MDQ6VXNlcjEwMzM1NTE5",
        "avatar_url": "https://avatars.githubusercontent.com/u/10335519?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/armfazh",
        "html_url": "https://github.com/armfazh",
        "followers_url": "https://api.github.com/users/armfazh/followers",
        "following_url": "https://api.github.com/users/armfazh/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/armfazh/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/armfazh/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/armfazh/subscriptions",
        "organizations_url": "https://api.github.com/users/armfazh/orgs",
        "repos_url": "https://api.github.com/users/armfazh/repos",
        "events_url": "https://api.github.com/users/armfazh/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/armfazh/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-03-29T02:24:37Z"
    },
    {
      "event": "subscribed",
      "id": 12290094900,
      "node_id": "SE_lADOAP4Jqs5BA3RkzwAAAALci_c0",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/12290094900",
      "actor": {
        "login": "armfazh",
        "id": 10335519,
        "node_id": "MDQ6VXNlcjEwMzM1NTE5",
        "avatar_url": "https://avatars.githubusercontent.com/u/10335519?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/armfazh",
        "html_url": "https://github.com/armfazh",
        "followers_url": "https://api.github.com/users/armfazh/followers",
        "following_url": "https://api.github.com/users/armfazh/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/armfazh/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/armfazh/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/armfazh/subscriptions",
        "organizations_url": "https://api.github.com/users/armfazh/orgs",
        "repos_url": "https://api.github.com/users/armfazh/repos",
        "events_url": "https://api.github.com/users/armfazh/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/armfazh/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-03-29T02:24:37Z"
    },
    {
      "event": "reviewed",
      "id": 1973018764,
      "node_id": "PRR_kwDOAP4Jqs51meCM",
      "url": null,
      "actor": null,
      "commit_id": "3d8c92bd600b36202633194fdddcff4200c4e8c3",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "",
      "user": {
        "login": "stratospher",
        "id": 44024636,
        "node_id": "MDQ6VXNlcjQ0MDI0NjM2",
        "avatar_url": "https://avatars.githubusercontent.com/u/44024636?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stratospher",
        "html_url": "https://github.com/stratospher",
        "followers_url": "https://api.github.com/users/stratospher/followers",
        "following_url": "https://api.github.com/users/stratospher/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stratospher/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stratospher/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stratospher/subscriptions",
        "organizations_url": "https://api.github.com/users/stratospher/orgs",
        "repos_url": "https://api.github.com/users/stratospher/repos",
        "events_url": "https://api.github.com/users/stratospher/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stratospher/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1058#pullrequestreview-1973018764",
      "submitted_at": "2024-04-02T16:38:13Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1058"
    },
    {
      "event": "reviewed",
      "id": 1975763139,
      "node_id": "PRR_kwDOAP4Jqs51w8DD",
      "url": null,
      "actor": null,
      "commit_id": "3d8c92bd600b36202633194fdddcff4200c4e8c3",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "More to follow, I'm in the middle of the main commit...",
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1058#pullrequestreview-1975763139",
      "submitted_at": "2024-04-03T09:13:23Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1058"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 12345753676,
      "node_id": "HRFPE_lADOAP4Jqs5BA3RkzwAAAALf3UBM",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/12345753676",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-04-03T17:27:16Z"
    },
    {
      "event": "reviewed",
      "id": 1980314810,
      "node_id": "PRR_kwDOAP4Jqs52CTS6",
      "url": null,
      "actor": null,
      "commit_id": "843f9b06ab8a757af51f96d685ba501c175d9ee8",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "",
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1058#pullrequestreview-1980314810",
      "submitted_at": "2024-04-04T16:51:09Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1058"
    },
    {
      "event": "commented",
      "id": 2037713206,
      "node_id": "IC_kwDOAP4Jqs55dQk2",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/2037713206",
      "actor": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-04-04T16:52:26Z",
      "updated_at": "2024-04-04T16:52:26Z",
      "author_association": "CONTRIBUTOR",
      "body": "I forgot to say that all the comments I've just posted are in the main commit https://github.com/bitcoin-core/secp256k1/pull/1058/commits/62601920bee3b57456a130d1c10a4e7fc08f3866.",
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1058#issuecomment-2037713206",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1058"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAP4JqtoAKDJlYWI0M2I0ZGEzZmU5OGFmNTUyNTg3OTliNmVhYWI5YWQzNWMxYTY",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/2eab43b4da3fe98af55258799b6eaab9ad35c1a6",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/2eab43b4da3fe98af55258799b6eaab9ad35c1a6",
      "tree": {
        "sha": "a12a5fc5449afc90f9ef85b636a43c18e83a9c28",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/a12a5fc5449afc90f9ef85b636a43c18e83a9c28"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/d8311688bd383d3a923a1b11789cded3cc8e5e03",
          "sha": "d8311688bd383d3a923a1b11789cded3cc8e5e03",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/d8311688bd383d3a923a1b11789cded3cc8e5e03"
        }
      ],
      "message": "Initial gej blinding -> final ge blinding\n\nInstead of having the starting point of the ecmult_gen computation be\noffset, do it with the final point. This enables reasoning over the\nset of points reachable in intermediary computations, which can be\nleveraged by potential future optimization.\n\nBecause the final point is in affine coordinates, its projective\nblinding is no longer possible. It will be reintroduced again in\na different way, in a later commit.\n\nAlso introduce some more comments and more descriptive names.",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2024-04-04T17:31:06Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2021-12-26T23:21:57Z"
      },
      "sha": "2eab43b4da3fe98af55258799b6eaab9ad35c1a6"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAP4JqtoAKDRmZjEyNzQ1MjM3YWExZjhjNzVjYmRiOGQ0NDllZmM5YWZjNjQ2M2I",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/4ff12745237aa1f8c75cbdb8d449efc9afc6463b",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/4ff12745237aa1f8c75cbdb8d449efc9afc6463b",
      "tree": {
        "sha": "47afc3d4fd6985ca3b047488cb54f2215afd55f0",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/47afc3d4fd6985ca3b047488cb54f2215afd55f0"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/2eab43b4da3fe98af55258799b6eaab9ad35c1a6",
          "sha": "2eab43b4da3fe98af55258799b6eaab9ad35c1a6",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/2eab43b4da3fe98af55258799b6eaab9ad35c1a6"
        }
      ],
      "message": "Make exhaustive tests's scalar_inverse(&x,&x) work\n\nThe old code overwrote the input at the start of the function,\nmaking a call like secp256k1_scalar_inverse(&x,&x) always fail.",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2024-04-04T17:31:06Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2021-12-30T17:22:58Z"
      },
      "sha": "4ff12745237aa1f8c75cbdb8d449efc9afc6463b"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 12367288938,
      "node_id": "HRFPE_lADOAP4Jqs5BA3RkzwAAAALhJdpq",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/12367288938",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-04-05T03:34:50Z"
    },
    {
      "event": "reviewed",
      "id": 1982504615,
      "node_id": "PRR_kwDOAP4Jqs52Kp6n",
      "url": null,
      "actor": null,
      "commit_id": "18888cfca10f450878bc729eb278761015bceef9",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "",
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1058#pullrequestreview-1982504615",
      "submitted_at": "2024-04-05T10:21:06Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1058"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 12374441190,
      "node_id": "HRFPE_lADOAP4Jqs5BA3RkzwAAAALhkvzm",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/12374441190",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-04-05T13:45:13Z"
    },
    {
      "event": "reviewed",
      "id": 1982888494,
      "node_id": "PRR_kwDOAP4Jqs52MHou",
      "url": null,
      "actor": null,
      "commit_id": "7dec5ab865e48bef5c1e1332f66b10825be890d0",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "",
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1058#pullrequestreview-1982888494",
      "submitted_at": "2024-04-05T14:01:48Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1058"
    },
    {
      "event": "reviewed",
      "id": 1983329506,
      "node_id": "PRR_kwDOAP4Jqs52NzTi",
      "url": null,
      "actor": null,
      "commit_id": "7dec5ab865e48bef5c1e1332f66b10825be890d0",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "",
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1058#pullrequestreview-1983329506",
      "submitted_at": "2024-04-05T16:57:44Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1058"
    },
    {
      "event": "reviewed",
      "id": 1983732504,
      "node_id": "PRR_kwDOAP4Jqs52PVsY",
      "url": null,
      "actor": null,
      "commit_id": "7dec5ab865e48bef5c1e1332f66b10825be890d0",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1058#pullrequestreview-1983732504",
      "submitted_at": "2024-04-05T17:03:25Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1058"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 12377484814,
      "node_id": "HRFPE_lADOAP4Jqs5BA3RkzwAAAALhwW4O",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/12377484814",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-04-05T17:38:28Z"
    },
    {
      "event": "reviewed",
      "id": 1983827989,
      "node_id": "PRR_kwDOAP4Jqs52PtAV",
      "url": null,
      "actor": null,
      "commit_id": "d4ec830386d7893200725271f7b697423bb86824",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1058#pullrequestreview-1983827989",
      "submitted_at": "2024-04-05T18:06:54Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1058"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 12377758413,
      "node_id": "HRFPE_lADOAP4Jqs5BA3RkzwAAAALhxZrN",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/12377758413",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-04-05T18:09:39Z"
    },
    {
      "event": "reviewed",
      "id": 1983986193,
      "node_id": "PRR_kwDOAP4Jqs52QToR",
      "url": null,
      "actor": null,
      "commit_id": "dafb392b406cc9fdb1d0061cdc15006a8dc719fb",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1058#pullrequestreview-1983986193",
      "submitted_at": "2024-04-05T18:57:51Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1058"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 12379834271,
      "node_id": "HRFPE_lADOAP4Jqs5BA3RkzwAAAALh5Uef",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/12379834271",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-04-05T22:37:34Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 12381402890,
      "node_id": "HRFPE_lADOAP4Jqs5BA3RkzwAAAALh_TcK",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/12381402890",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-04-06T11:04:29Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 12381409352,
      "node_id": "HRFPE_lADOAP4Jqs5BA3RkzwAAAALh_VBI",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/12381409352",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-04-06T11:08:34Z"
    },
    {
      "event": "reviewed",
      "id": 1984890227,
      "node_id": "PRR_kwDOAP4Jqs52TwVz",
      "url": null,
      "actor": null,
      "commit_id": "a61f0e59218469a0153453a749fd2f539561da12",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1058#pullrequestreview-1984890227",
      "submitted_at": "2024-04-07T09:26:22Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1058"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAP4JqtoAKDk3NjUyNzhkZGJiMDkwMTMyYmRhZTkyZDhiOTczZGZmMDhmZTM3OTM",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/9765278ddbb090132bdae92d8b973dff08fe3793",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/9765278ddbb090132bdae92d8b973dff08fe3793",
      "tree": {
        "sha": "2ba242dcf0ade61994a77ca6974118d0694372ee",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/2ba242dcf0ade61994a77ca6974118d0694372ee"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/4ff12745237aa1f8c75cbdb8d449efc9afc6463b",
          "sha": "4ff12745237aa1f8c75cbdb8d449efc9afc6463b",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/4ff12745237aa1f8c75cbdb8d449efc9afc6463b"
        }
      ],
      "message": "Signed-digit multi-comb ecmult_gen algorithm\n\nThis introduces the signed-digit multi-comb multiplication algorithm\nfor constant-time G multiplications (ecmult_gen). It is based on\nsection 3.3 of \"Fast and compact elliptic-curve cryptography\" by\nMike Hamburg (see https://eprint.iacr.org/2012/309).\n\nOriginal implementation by Peter Dettman, with changes by Pieter Wuille\nto use scalars for recoding, and additional comments.",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2024-04-07T10:22:47Z"
      },
      "author": {
        "name": "Peter Dettman",
        "email": "peter.dettman@gmail.com",
        "date": "2021-12-26T23:09:27Z"
      },
      "sha": "9765278ddbb090132bdae92d8b973dff08fe3793"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAP4JqtoAKDliN2ZjNGEwYjY5YjU3YWQyYjU5ZWU5YTgyZTVlYWI0OWY5MmEwMjI",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/9b7fc4a0b69b57ad2b59ee9a82e5eab49f92a022",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/9b7fc4a0b69b57ad2b59ee9a82e5eab49f92a022",
      "tree": {
        "sha": "6f52e529137d61f945947662fcb5a55d841da6a8",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/6f52e529137d61f945947662fcb5a55d841da6a8"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/9765278ddbb090132bdae92d8b973dff08fe3793",
          "sha": "9765278ddbb090132bdae92d8b973dff08fe3793",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/9765278ddbb090132bdae92d8b973dff08fe3793"
        }
      ],
      "message": "Always generate tables for current (blocks,teeth) config",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2024-04-07T10:22:57Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2021-12-29T19:37:38Z"
      },
      "sha": "9b7fc4a0b69b57ad2b59ee9a82e5eab49f92a022"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAP4JqtoAKGE2Mjg3ZWY2NDFjN2EwZTgzOGQ0MzllZTNhNzM1MDRiZDQyOGY0MzA",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/a6287ef641c7a0e838d439ee3a73504bd428f430",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/a6287ef641c7a0e838d439ee3a73504bd428f430",
      "tree": {
        "sha": "3500adb4b2f89a6a53500cb53bc3b6881425251a",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/3500adb4b2f89a6a53500cb53bc3b6881425251a"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/9b7fc4a0b69b57ad2b59ee9a82e5eab49f92a022",
          "sha": "9b7fc4a0b69b57ad2b59ee9a82e5eab49f92a022",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/9b7fc4a0b69b57ad2b59ee9a82e5eab49f92a022"
        }
      ],
      "message": "Provide 3 configurations accessible through ./configure",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2024-04-07T10:22:57Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2021-12-29T20:09:52Z"
      },
      "sha": "a6287ef641c7a0e838d439ee3a73504bd428f430"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAP4JqtoAKGIwOWEwOTQ1Y2ZlMDU5MGE4MmZmZjQyMDBjMmYzYmM1NWMzZjg3ZWM",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/b09a0945cfe0590a82fff4200c2f3bc55c3f87ec",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/b09a0945cfe0590a82fff4200c2f3bc55c3f87ec",
      "tree": {
        "sha": "721c83f8b7929dd1960a37bf34cfa03dba4163c6",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/721c83f8b7929dd1960a37bf34cfa03dba4163c6"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/a6287ef641c7a0e838d439ee3a73504bd428f430",
          "sha": "a6287ef641c7a0e838d439ee3a73504bd428f430",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/a6287ef641c7a0e838d439ee3a73504bd428f430"
        }
      ],
      "message": "Optimization: move (2^COMB_BITS-1)/2 term into ctx->scalar_offset\n\nIt is unnecessary to recompute this term needed by the SDMC algorithm\nfor every multiplication; move it into the context scalar_offset value\ninstead.",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2024-04-07T10:22:57Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2021-12-26T23:37:53Z"
      },
      "sha": "b09a0945cfe0590a82fff4200c2f3bc55c3f87ec"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAP4JqtoAKDNjZjVjODFmNDRlNTIwZGM1NDJhYjlkZTZiMDQ3YjQwYjE4ZjhhYzQ",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/3cf5c81f44e520dc542ab9de6b047b40b18f8ac4",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/3cf5c81f44e520dc542ab9de6b047b40b18f8ac4",
      "tree": {
        "sha": "12a173d3e9c2eebe46fd572436adb4e463bf2c1d",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/12a173d3e9c2eebe46fd572436adb4e463bf2c1d"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/b09a0945cfe0590a82fff4200c2f3bc55c3f87ec",
          "sha": "b09a0945cfe0590a82fff4200c2f3bc55c3f87ec",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/b09a0945cfe0590a82fff4200c2f3bc55c3f87ec"
        }
      ],
      "message": "Optimization: first table lookup needs no point addition",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2024-04-07T10:22:57Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2021-12-27T00:05:49Z"
      },
      "sha": "3cf5c81f44e520dc542ab9de6b047b40b18f8ac4"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAP4JqtoAKDZkZTA2OTM2MzdkYjMzNWE2NWZhMDk4NGQ5YmE5NTQwNzk2OWFiMDk",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/6de0693637db335a65fa0984d9ba95407969ab09",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/6de0693637db335a65fa0984d9ba95407969ab09",
      "tree": {
        "sha": "67e6887417d3a4409db9b69e55121a72056ab82b",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/67e6887417d3a4409db9b69e55121a72056ab82b"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/3cf5c81f44e520dc542ab9de6b047b40b18f8ac4",
          "sha": "3cf5c81f44e520dc542ab9de6b047b40b18f8ac4",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/3cf5c81f44e520dc542ab9de6b047b40b18f8ac4"
        }
      ],
      "message": "Optimization: avoid unnecessary doublings in precomputation",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2024-04-07T10:22:57Z"
      },
      "author": {
        "name": "Peter Dettman",
        "email": "peter.dettman@gmail.com",
        "date": "2021-12-27T03:50:09Z"
      },
      "sha": "6de0693637db335a65fa0984d9ba95407969ab09"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 12383762603,
      "node_id": "HRFPE_lADOAP4Jqs5BA3RkzwAAAALiITir",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/12383762603",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-04-07T10:23:14Z"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAP4JqtoAKGNjNzQyMDViZGUzOGVmYWE0NzhkM2UxNzNkYzhhZDg0ZmY3NjdmYjQ",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/cc74205bde38efaa478d3e173dc8ad84ff767fb4",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/cc74205bde38efaa478d3e173dc8ad84ff767fb4",
      "tree": {
        "sha": "bf49e46d588a247a2073b32c63e6b72bd147d507",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/bf49e46d588a247a2073b32c63e6b72bd147d507"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/6de0693637db335a65fa0984d9ba95407969ab09",
          "sha": "6de0693637db335a65fa0984d9ba95407969ab09",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/6de0693637db335a65fa0984d9ba95407969ab09"
        }
      ],
      "message": "Rename scalar_get_bits -> scalar_get_bits_limb32; return uint32_t",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2024-04-07T14:02:02Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2024-04-07T14:02:02Z"
      },
      "sha": "cc74205bde38efaa478d3e173dc8ad84ff767fb4"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAP4JqtoAKGViMWM2NDA2ODFkZjI3NDgzYTNlZThjMDg4ZjI2MmVkM2RhMjVjYzA",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/eb1c640681df27483a3ee8c088f262ed3da25cc0",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/eb1c640681df27483a3ee8c088f262ed3da25cc0",
      "tree": {
        "sha": "9881e78aaf2e10b79d70117bb1d231925806ca98",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/9881e78aaf2e10b79d70117bb1d231925806ca98"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/cc74205bde38efaa478d3e173dc8ad84ff767fb4",
          "sha": "cc74205bde38efaa478d3e173dc8ad84ff767fb4",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/cc74205bde38efaa478d3e173dc8ad84ff767fb4"
        }
      ],
      "message": "Make secp256k1_scalar_get_bits support 32-bit reads\n\nThe old code would trigger UB when count=32.",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2024-04-07T14:03:52Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2021-12-28T23:13:04Z"
      },
      "sha": "eb1c640681df27483a3ee8c088f262ed3da25cc0"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAP4JqtoAKDQ3YWIzZmI2MWQ2YzdiMDRlM2U4MjAzN2U3Y2EwNDQyOGQ5Y2Y2YWI",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/47ab3fb61d6c7b04e3e82037e7ca04428d9cf6ab",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/47ab3fb61d6c7b04e3e82037e7ca04428d9cf6ab",
      "tree": {
        "sha": "b657d7767b8631f1b56ccc8602f8b975bd421541",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/b657d7767b8631f1b56ccc8602f8b975bd421541"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/eb1c640681df27483a3ee8c088f262ed3da25cc0",
          "sha": "eb1c640681df27483a3ee8c088f262ed3da25cc0",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/eb1c640681df27483a3ee8c088f262ed3da25cc0"
        }
      ],
      "message": "Optimization: use Nx32 representation for recoded bits\n\nThe existing code needs to deal with the edge case that bit_pos >= 256,\nwhich would lead to an out-of-bounds read from secp256k1_scalar.\n\nInstead, recode the scalar into an array of uint32_t with enough zero\npadding at the end to alleviate the issue. This also simplifies the\ncode, and is necessary for a security improvement in a follow-up\ncommit.\n\nOriginal code by Peter Dettman, with modifications by Pieter Wuille.",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2024-04-07T14:05:32Z"
      },
      "author": {
        "name": "Peter Dettman",
        "email": "peter.dettman@gmail.com",
        "date": "2021-12-28T23:13:43Z"
      },
      "sha": "47ab3fb61d6c7b04e3e82037e7ca04428d9cf6ab"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAP4JqtoAKDgxZGVmODg1MmU3YTRlYTYxZTg2NWFlNWJiYTgwYzdhOTg4M2ZjOWI",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/81def8852e7a4ea61e865ae5bba80c7a9883fc9b",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/81def8852e7a4ea61e865ae5bba80c7a9883fc9b",
      "tree": {
        "sha": "9f47b25d1feaaf67426cff28dd8fefb421821ab1",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/9f47b25d1feaaf67426cff28dd8fefb421821ab1"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/47ab3fb61d6c7b04e3e82037e7ca04428d9cf6ab",
          "sha": "47ab3fb61d6c7b04e3e82037e7ca04428d9cf6ab",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/47ab3fb61d6c7b04e3e82037e7ca04428d9cf6ab"
        }
      ],
      "message": "Reduce side channels from single-bit reads\n\nCo-authored-by: Tim Ruffing <crypto@timruffing.de>",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2024-04-07T14:05:32Z"
      },
      "author": {
        "name": "Peter Dettman",
        "email": "peter.dettman@gmail.com",
        "date": "2021-12-28T23:25:04Z"
      },
      "sha": "81def8852e7a4ea61e865ae5bba80c7a9883fc9b"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAP4JqtoAKDQwMGZmZTMyNWU5YWIxYjJkYzVhZmRlYWFjNTFmODBkODdkYzc2MTk",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/400ffe325e9ab1b2dc5afdeaac51f80d87dc7619",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/400ffe325e9ab1b2dc5afdeaac51f80d87dc7619",
      "tree": {
        "sha": "ed6a0dd4306e34ec48d20e4fd1dbb13841b7d40b",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/ed6a0dd4306e34ec48d20e4fd1dbb13841b7d40b"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/81def8852e7a4ea61e865ae5bba80c7a9883fc9b",
          "sha": "81def8852e7a4ea61e865ae5bba80c7a9883fc9b",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/81def8852e7a4ea61e865ae5bba80c7a9883fc9b"
        }
      ],
      "message": "Reintroduce projective blinding",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2024-04-07T14:05:32Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2021-12-27T03:45:30Z"
      },
      "sha": "400ffe325e9ab1b2dc5afdeaac51f80d87dc7619"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAP4JqtoAKDI0YzM3NjEyNGFhOWFmYmQ2MmJmNTBhY2I1OTM0MzJlYjc1MTA0YTk",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/24c376124aa9afbd62bf50acb593432eb75104a9",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/24c376124aa9afbd62bf50acb593432eb75104a9",
      "tree": {
        "sha": "b89dc7286ca41ac9b7e84902d39f984a71167e4e",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/b89dc7286ca41ac9b7e84902d39f984a71167e4e"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/400ffe325e9ab1b2dc5afdeaac51f80d87dc7619",
          "sha": "400ffe325e9ab1b2dc5afdeaac51f80d87dc7619",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/400ffe325e9ab1b2dc5afdeaac51f80d87dc7619"
        }
      ],
      "message": "Add test case for ecmult_gen recoded = {-1,0,1}",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2024-04-07T14:05:32Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2022-01-01T18:35:53Z"
      },
      "sha": "24c376124aa9afbd62bf50acb593432eb75104a9"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAP4JqtoAKDU4YmYzMmJjZjE1YmMzYTMyNjgyYzc3Yzg5NjU4NDNlNzExNDg5MWY",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/58bf32bcf15bc3a32682c77c8965843e7114891f",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/58bf32bcf15bc3a32682c77c8965843e7114891f",
      "tree": {
        "sha": "1c4536398b8881205157a26b2fa54e2cd53d51bf",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/1c4536398b8881205157a26b2fa54e2cd53d51bf"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/24c376124aa9afbd62bf50acb593432eb75104a9",
          "sha": "24c376124aa9afbd62bf50acb593432eb75104a9",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/24c376124aa9afbd62bf50acb593432eb75104a9"
        }
      ],
      "message": "Permit COMB_BITS < 256 for exhaustive tests",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2024-04-07T14:05:32Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2022-01-04T23:46:22Z"
      },
      "sha": "58bf32bcf15bc3a32682c77c8965843e7114891f"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAP4JqtoAKGRjYzg0NmYxODUxOGY3Nzc3MGI2YTFmYzllMzk2ODNjNjM2ODVkMzk",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/dcc846f18518f77770b6a1fc9e39683c63685d39",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/dcc846f18518f77770b6a1fc9e39683c63685d39",
      "tree": {
        "sha": "b8bc684e4903d5c3b1038ab98a209086157f843f",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/b8bc684e4903d5c3b1038ab98a209086157f843f"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/58bf32bcf15bc3a32682c77c8965843e7114891f",
          "sha": "58bf32bcf15bc3a32682c77c8965843e7114891f",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/58bf32bcf15bc3a32682c77c8965843e7114891f"
        }
      ],
      "message": "Add changelog entry for SDMC",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2024-04-07T14:05:32Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2022-12-28T21:50:07Z"
      },
      "sha": "dcc846f18518f77770b6a1fc9e39683c63685d39"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 12384255576,
      "node_id": "HRFPE_lADOAP4Jqs5BA3RkzwAAAALiKL5Y",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/12384255576",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-04-07T14:13:18Z"
    },
    {
      "event": "reviewed",
      "id": 1998001058,
      "node_id": "PRR_kwDOAP4Jqs53FxOi",
      "url": null,
      "actor": null,
      "commit_id": "dcc846f18518f77770b6a1fc9e39683c63685d39",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1058#pullrequestreview-1998001058",
      "submitted_at": "2024-04-12T17:05:43Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1058"
    },
    {
      "event": "commented",
      "id": 2052154071,
      "node_id": "IC_kwDOAP4Jqs56UWLX",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/2052154071",
      "actor": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-04-12T17:10:36Z",
      "updated_at": "2024-04-12T17:10:51Z",
      "author_association": "CONTRIBUTOR",
      "body": "As part of testing this, I played around with the edge values for the config parameters. This led me to a series of minors nits/fixups in the code that handles the parameters, see https://github.com/real-or-random/secp256k1/tree/202112_sdmc, that you can pick. Most of these commits, if not all, should probably be squashed into your commits (and a regeneration of the precomputed files is necessary, this is why CI fails on my repo.)\r\n\r\nApart from that ACK. I did all the review and testing that I planned to do.",
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1058#issuecomment-2052154071",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1058"
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/776789887",
      "pull_request_review_id": 841990533,
      "id": 776789887,
      "node_id": "PRRC_kwDOAP4Jqs4uTN9_",
      "diff_hunk": "@@ -25,41 +25,133 @@ static int secp256k1_ecmult_gen_context_is_built(const secp256k1_ecmult_gen_cont\n \n static void secp256k1_ecmult_gen_context_clear(secp256k1_ecmult_gen_context *ctx) {\n     ctx->built = 0;\n-    secp256k1_scalar_clear(&ctx->blind);\n-    secp256k1_gej_clear(&ctx->initial);\n+    secp256k1_scalar_clear(&ctx->scalar_offset);\n+    secp256k1_ge_clear(&ctx->final_point_add);\n }\n \n-/* For accelerating the computation of a*G:\n- * To harden against timing attacks, use the following mechanism:\n- * * Break up the multiplicand into groups of PREC_BITS bits, called n_0, n_1, n_2, ..., n_(PREC_N-1).\n- * * Compute sum(n_i * (PREC_G)^i * G + U_i, i=0 ... PREC_N-1), where:\n- *   * U_i = U * 2^i, for i=0 ... PREC_N-2\n- *   * U_i = U * (1-2^(PREC_N-1)), for i=PREC_N-1\n- *   where U is a point with no known corresponding scalar. Note that sum(U_i, i=0 ... PREC_N-1) = 0.\n- * For each i, and each of the PREC_G possible values of n_i, (n_i * (PREC_G)^i * G + U_i) is\n- * precomputed (call it prec(i, n_i)). The formula now becomes sum(prec(i, n_i), i=0 ... PREC_N-1).\n- * None of the resulting prec group elements have a known scalar, and neither do any of\n- * the intermediate sums while computing a*G.\n- * The prec values are stored in secp256k1_ecmult_gen_prec_table[i][n_i] = n_i * (PREC_G)^i * G + U_i.\n- */\n static void secp256k1_ecmult_gen(const secp256k1_ecmult_gen_context *ctx, secp256k1_gej *r, const secp256k1_scalar *gn) {\n-    int bits = ECMULT_GEN_PREC_BITS;\n-    int g = ECMULT_GEN_PREC_G(bits);\n-    int n = ECMULT_GEN_PREC_N(bits);\n-\n+    uint32_t comb_off;\n     secp256k1_ge add;\n+    secp256k1_fe neg;\n     secp256k1_ge_storage adds;\n-    secp256k1_scalar gnb;\n-    int i, j, n_i;\n-    \n+    secp256k1_scalar tmp;\n+    /* Array of uint32_t values large enough to store COMB_BITS bits. Only the bottom\n+     * 8 are ever nonzero, but having the zero padding at the end if COMB_BITS>256\n+     * avoids the need to deal with out-of-bounds reads from a scalar. */\n+    uint32_t recoded[(COMB_BITS + 31) >> 5] = {0};\n+    int first = 1, i;\n+\n     memset(&adds, 0, sizeof(adds));\n-    *r = ctx->initial;\n-    /* Blind scalar/point multiplication by computing (n-b)G + bG instead of nG. */\n-    secp256k1_scalar_add(&gnb, gn, &ctx->blind);\n-    add.infinity = 0;\n-    for (i = 0; i < n; i++) {\n-        n_i = secp256k1_scalar_get_bits(&gnb, i * bits, bits);\n-        for (j = 0; j < g; j++) {\n+\n+    /* We want to compute R = gn*G.\n+     *\n+     * To blind the scalar used in the computation, we rewrite this to be R = (gn-b)*G + b*G.\n+     *\n+     * Next, we write (gn-b)*G as a sum of values (2*bit_i-1) * 2^i * G, for i=0..COMB_BITS-1.\n+     * The values bit_i can be found as the binary representation of\n+     * (gn + 2^COMB_BITS - 1 - b)/2 (mod order), stored in recoded.\n+     *\n+     * The value (2^COMB_BITS - 1 - b) is precomputed as ctx->scalar_offset, and bG is\n+     * precomputed as ctx->final_point_add. Thus recoded can be written as\n+     * recoded = (gn + scalar_offset)/2, and R becomes the sum of (2*bit_i-1)*2^i*G\n+     * values plus final_point_add. */\n+\n+    /* Compute (gn + 2^COMB_BITS - 1 - 1)/2 value as a scalar. */",
      "path": "src/ecmult_gen_impl.h",
      "position": null,
      "original_position": 78,
      "commit_id": "dcc846f18518f77770b6a1fc9e39683c63685d39",
      "original_commit_id": "4a4d16e83c69bff9ad0c3c27fc13b6ad8b222f24",
      "in_reply_to_id": null,
      "user": {
        "login": "peterdettman",
        "id": 3423981,
        "node_id": "MDQ6VXNlcjM0MjM5ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3423981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/peterdettman",
        "html_url": "https://github.com/peterdettman",
        "followers_url": "https://api.github.com/users/peterdettman/followers",
        "following_url": "https://api.github.com/users/peterdettman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/peterdettman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/peterdettman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/peterdettman/subscriptions",
        "organizations_url": "https://api.github.com/users/peterdettman/orgs",
        "repos_url": "https://api.github.com/users/peterdettman/repos",
        "events_url": "https://api.github.com/users/peterdettman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/peterdettman/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Nit: -1 -b",
      "created_at": "2021-12-30T16:16:41Z",
      "updated_at": "2021-12-30T16:16:41Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1058#discussion_r776789887",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/776789887"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1058"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 59,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/776807287",
      "pull_request_review_id": 842012557,
      "id": 776807287,
      "node_id": "PRRC_kwDOAP4Jqs4uTSN3",
      "diff_hunk": "@@ -25,41 +25,133 @@ static int secp256k1_ecmult_gen_context_is_built(const secp256k1_ecmult_gen_cont\n \n static void secp256k1_ecmult_gen_context_clear(secp256k1_ecmult_gen_context *ctx) {\n     ctx->built = 0;\n-    secp256k1_scalar_clear(&ctx->blind);\n-    secp256k1_gej_clear(&ctx->initial);\n+    secp256k1_scalar_clear(&ctx->scalar_offset);\n+    secp256k1_ge_clear(&ctx->final_point_add);\n }\n \n-/* For accelerating the computation of a*G:\n- * To harden against timing attacks, use the following mechanism:\n- * * Break up the multiplicand into groups of PREC_BITS bits, called n_0, n_1, n_2, ..., n_(PREC_N-1).\n- * * Compute sum(n_i * (PREC_G)^i * G + U_i, i=0 ... PREC_N-1), where:\n- *   * U_i = U * 2^i, for i=0 ... PREC_N-2\n- *   * U_i = U * (1-2^(PREC_N-1)), for i=PREC_N-1\n- *   where U is a point with no known corresponding scalar. Note that sum(U_i, i=0 ... PREC_N-1) = 0.\n- * For each i, and each of the PREC_G possible values of n_i, (n_i * (PREC_G)^i * G + U_i) is\n- * precomputed (call it prec(i, n_i)). The formula now becomes sum(prec(i, n_i), i=0 ... PREC_N-1).\n- * None of the resulting prec group elements have a known scalar, and neither do any of\n- * the intermediate sums while computing a*G.\n- * The prec values are stored in secp256k1_ecmult_gen_prec_table[i][n_i] = n_i * (PREC_G)^i * G + U_i.\n- */\n static void secp256k1_ecmult_gen(const secp256k1_ecmult_gen_context *ctx, secp256k1_gej *r, const secp256k1_scalar *gn) {\n-    int bits = ECMULT_GEN_PREC_BITS;\n-    int g = ECMULT_GEN_PREC_G(bits);\n-    int n = ECMULT_GEN_PREC_N(bits);\n-\n+    uint32_t comb_off;\n     secp256k1_ge add;\n+    secp256k1_fe neg;\n     secp256k1_ge_storage adds;\n-    secp256k1_scalar gnb;\n-    int i, j, n_i;\n-    \n+    secp256k1_scalar tmp;\n+    /* Array of uint32_t values large enough to store COMB_BITS bits. Only the bottom\n+     * 8 are ever nonzero, but having the zero padding at the end if COMB_BITS>256\n+     * avoids the need to deal with out-of-bounds reads from a scalar. */\n+    uint32_t recoded[(COMB_BITS + 31) >> 5] = {0};\n+    int first = 1, i;\n+\n     memset(&adds, 0, sizeof(adds));\n-    *r = ctx->initial;\n-    /* Blind scalar/point multiplication by computing (n-b)G + bG instead of nG. */\n-    secp256k1_scalar_add(&gnb, gn, &ctx->blind);\n-    add.infinity = 0;\n-    for (i = 0; i < n; i++) {\n-        n_i = secp256k1_scalar_get_bits(&gnb, i * bits, bits);\n-        for (j = 0; j < g; j++) {\n+\n+    /* We want to compute R = gn*G.\n+     *\n+     * To blind the scalar used in the computation, we rewrite this to be R = (gn-b)*G + b*G.\n+     *\n+     * Next, we write (gn-b)*G as a sum of values (2*bit_i-1) * 2^i * G, for i=0..COMB_BITS-1.\n+     * The values bit_i can be found as the binary representation of\n+     * (gn + 2^COMB_BITS - 1 - b)/2 (mod order), stored in recoded.\n+     *\n+     * The value (2^COMB_BITS - 1 - b) is precomputed as ctx->scalar_offset, and bG is\n+     * precomputed as ctx->final_point_add. Thus recoded can be written as\n+     * recoded = (gn + scalar_offset)/2, and R becomes the sum of (2*bit_i-1)*2^i*G\n+     * values plus final_point_add. */\n+\n+    /* Compute (gn + 2^COMB_BITS - 1 - 1)/2 value as a scalar. */",
      "path": "src/ecmult_gen_impl.h",
      "position": null,
      "original_position": 78,
      "commit_id": "dcc846f18518f77770b6a1fc9e39683c63685d39",
      "original_commit_id": "4a4d16e83c69bff9ad0c3c27fc13b6ad8b222f24",
      "in_reply_to_id": 776789887,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Superseded by new description.",
      "created_at": "2021-12-30T17:09:03Z",
      "updated_at": "2021-12-30T17:09:03Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1058#discussion_r776807287",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/776807287"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1058"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 59,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/776926428",
      "pull_request_review_id": 842157030,
      "id": 776926428,
      "node_id": "PRRC_kwDOAP4Jqs4uTvTc",
      "diff_hunk": "@@ -10,19 +10,90 @@\n #include \"scalar.h\"\n #include \"group.h\"\n \n-#if ECMULT_GEN_PREC_BITS != 2 && ECMULT_GEN_PREC_BITS != 4 && ECMULT_GEN_PREC_BITS != 8\n-#  error \"Set ECMULT_GEN_PREC_BITS to 2, 4 or 8.\"\n+/* Configuration parameters for the signed-digit multi-comb algorithm:\n+ *\n+ * - COMB_BLOCKS is the number of lookup tables.\n+ * - COMB_TEETH is the number of bits covered by one table.\n+ *\n+ * The comb's spacing (COMB_SPACING), or the distance between the teeth,\n+ * is defined as ceil(256 / (COMB_BLOCKS * COMB_TEETH)).\n+ *\n+ * The size of the precomputed table is COMB_BLOCKS * (1 << (COMB_TEETH - 1))\n+ * secp256k1_ge_storages.\n+ *\n+ * The number of point additions equals COMB_BLOCKS * COMB_SPACING. Each point\n+ * addition involves a cmov from (1 << (COMB_TEETH - 1)) table entries and a\n+ * conditional negation.\n+ *\n+ * The number of point doublings is COMB_SPACING - 1. */\n+\n+#if defined(EXHAUSTIVE_TEST_ORDER)\n+/* We need to control these values for exhaustive tests because\n+ * the tables cannot have infinities in them (secp256k1_ge_storage\n+ * doesn't support infinities) */\n+#  undef COMB_BLOCKS\n+#  undef COMB_TEETH\n+#  if EXHAUSTIVE_TEST_ORDER > 32\n+#    define COMB_BLOCKS 52\n+#    define COMB_TEETH 5\n+#  elif EXHAUSTIVE_TEST_ORDER > 16\n+#    define COMB_BLOCKS 64\n+#    define COMB_TEETH 4\n+#  elif EXHAUSTIVE_TEST_ORDER > 8\n+#    define COMB_BLOCKS 86\n+#    define COMB_TEETH 3\n+#  elif EXHAUSTIVE_TEST_ORDER > 4\n+#    define COMB_BLOCKS 128\n+#    define COMB_TEETH 2\n+#  else\n+#    define COMB_BLOCKS 256\n+#    define COMB_TEETH 1\n+#  endif\n+#else /* !defined(EXHAUSTIVE_TEST_ORDER) */\n+/* Use (11, 6) as default configuration, which results in a 22 kB table. */\n+#  ifndef COMB_BLOCKS\n+#    define COMB_BLOCKS 11\n+#  endif\n+#  ifndef COMB_TEETH\n+#    define COMB_TEETH 6\n+#  endif\n+#endif /* defined(EXHAUSTIVE_TEST_ORDER) */\n+\n+/* Range checks on the parameters. */\n+#if !(1 <= COMB_BLOCKS && COMB_BLOCKS <= 256)\n+#  error \"COMB_BLOCKS must be in the range [1, 256]\"\n+#endif\n+#if !(1 <= COMB_TEETH && COMB_TEETH <= 8)\n+#  error \"COMB_TEETH must be in the range [1, 8]\"\n+#endif\n+\n+/* The remaining COMB_* parameters are derived values, don't modify these. */\n+/* - The distance between the teeth of the comb. */\n+#define COMB_SPACING ((255 + COMB_BLOCKS * COMB_TEETH) / (COMB_BLOCKS * COMB_TEETH))\n+/* - The number of bits covered by all the combs; must be at least 256. */\n+#define COMB_BITS (COMB_BLOCKS * COMB_TEETH * COMB_SPACING)\n+/* - The number of points per table. */\n+#define COMB_POINTS (1 << (COMB_TEETH - 1))\n+\n+/* Additional sanity checks. */\n+#if (COMB_BLOCKS - 1) * COMB_TEETH * COMB_SPACING >= 256\n+#  error \"COMB_BLOCKS can be reduced\"\n+#endif\n+#if COMB_BLOCKS * (COMB_TEETH - 1) * COMB_SPACING >= 256\n+#  error \"COMB_TEETH can be reduced\"\n #endif\n-#define ECMULT_GEN_PREC_G(bits) (1 << bits)\n-#define ECMULT_GEN_PREC_N(bits) (256 / bits)\n \n typedef struct {\n     /* Whether the context has been built. */\n     int built;\n \n-    /* Blinding values used when computing (n-b)G + bG. */\n-    secp256k1_scalar blind; /* -b */\n-    secp256k1_gej initial;  /* bG */\n+    /* Blinding values used when computing nG as (n-b)G + bG. */\n+    secp256k1_scalar scalar_offset; /* -b */\n+    secp256k1_ge final_point_add;  /* bG */",
      "path": "src/ecmult_gen.h",
      "position": null,
      "original_position": 97,
      "commit_id": "dcc846f18518f77770b6a1fc9e39683c63685d39",
      "original_commit_id": "a7f0d0e5dec0b88676b9b6c79f21e12405f7befb",
      "in_reply_to_id": null,
      "user": {
        "login": "peterdettman",
        "id": 3423981,
        "node_id": "MDQ6VXNlcjM0MjM5ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3423981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/peterdettman",
        "html_url": "https://github.com/peterdettman",
        "followers_url": "https://api.github.com/users/peterdettman/followers",
        "following_url": "https://api.github.com/users/peterdettman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/peterdettman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/peterdettman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/peterdettman/subscriptions",
        "organizations_url": "https://api.github.com/users/peterdettman/orgs",
        "repos_url": "https://api.github.com/users/peterdettman/repos",
        "events_url": "https://api.github.com/users/peterdettman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/peterdettman/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "These comments are all a bit off. I would suggest a short explanation here and possibly defer to the fuller explanations in ecmult_gen_impl.h. e.g.:\r\n\r\n> Values chosen such that n*G == comb(n + scalar_offset, G) + final_point_add. The latter expression lets us use scalar blinding and optimize the comb precomputation.\r\n",
      "created_at": "2021-12-31T05:03:53Z",
      "updated_at": "2021-12-31T05:03:53Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1058#discussion_r776926428",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/776926428"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1058"
        }
      },
      "start_line": null,
      "original_start_line": 90,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 92,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/776937622",
      "pull_request_review_id": 842170777,
      "id": 776937622,
      "node_id": "PRRC_kwDOAP4Jqs4uTyCW",
      "diff_hunk": "@@ -307,20 +306,31 @@ case $set_ecmult_window in\n esac\n \n # Set ecmult gen precision\n-if test x\"$req_ecmult_gen_precision\" = x\"auto\"; then\n-  set_ecmult_gen_precision=4\n+if test x\"$req_ecmult_gen_kb\" = x\"auto\"; then\n+  set_ecmult_gen_kb=86",
      "path": "configure.ac",
      "position": null,
      "original_position": 26,
      "commit_id": "dcc846f18518f77770b6a1fc9e39683c63685d39",
      "original_commit_id": "a7f0d0e5dec0b88676b9b6c79f21e12405f7befb",
      "in_reply_to_id": null,
      "user": {
        "login": "peterdettman",
        "id": 3423981,
        "node_id": "MDQ6VXNlcjM0MjM5ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3423981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/peterdettman",
        "html_url": "https://github.com/peterdettman",
        "followers_url": "https://api.github.com/users/peterdettman/followers",
        "following_url": "https://api.github.com/users/peterdettman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/peterdettman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/peterdettman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/peterdettman/subscriptions",
        "organizations_url": "https://api.github.com/users/peterdettman/orgs",
        "repos_url": "https://api.github.com/users/peterdettman/repos",
        "events_url": "https://api.github.com/users/peterdettman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/peterdettman/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I'm a little bit of the mind that 22 should be the default, but perhaps that's my old brain stuck in 64kB L1 world. Still, would it be reasonable to default to 22 for 32bit?",
      "created_at": "2021-12-31T06:40:49Z",
      "updated_at": "2021-12-31T06:40:49Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1058#discussion_r776937622",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/776937622"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1058"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 310,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/776937824",
      "pull_request_review_id": 842171020,
      "id": 776937824,
      "node_id": "PRRC_kwDOAP4Jqs4uTyFg",
      "diff_hunk": "@@ -10,19 +10,90 @@\n #include \"scalar.h\"\n #include \"group.h\"\n \n-#if ECMULT_GEN_PREC_BITS != 2 && ECMULT_GEN_PREC_BITS != 4 && ECMULT_GEN_PREC_BITS != 8\n-#  error \"Set ECMULT_GEN_PREC_BITS to 2, 4 or 8.\"\n+/* Configuration parameters for the signed-digit multi-comb algorithm:\n+ *\n+ * - COMB_BLOCKS is the number of lookup tables.\n+ * - COMB_TEETH is the number of bits covered by one table.\n+ *\n+ * The comb's spacing (COMB_SPACING), or the distance between the teeth,\n+ * is defined as ceil(256 / (COMB_BLOCKS * COMB_TEETH)).\n+ *\n+ * The size of the precomputed table is COMB_BLOCKS * (1 << (COMB_TEETH - 1))\n+ * secp256k1_ge_storages.\n+ *\n+ * The number of point additions equals COMB_BLOCKS * COMB_SPACING. Each point\n+ * addition involves a cmov from (1 << (COMB_TEETH - 1)) table entries and a\n+ * conditional negation.\n+ *\n+ * The number of point doublings is COMB_SPACING - 1. */\n+\n+#if defined(EXHAUSTIVE_TEST_ORDER)\n+/* We need to control these values for exhaustive tests because\n+ * the tables cannot have infinities in them (secp256k1_ge_storage\n+ * doesn't support infinities) */\n+#  undef COMB_BLOCKS\n+#  undef COMB_TEETH\n+#  if EXHAUSTIVE_TEST_ORDER > 32\n+#    define COMB_BLOCKS 52\n+#    define COMB_TEETH 5\n+#  elif EXHAUSTIVE_TEST_ORDER > 16\n+#    define COMB_BLOCKS 64\n+#    define COMB_TEETH 4\n+#  elif EXHAUSTIVE_TEST_ORDER > 8\n+#    define COMB_BLOCKS 86\n+#    define COMB_TEETH 3\n+#  elif EXHAUSTIVE_TEST_ORDER > 4\n+#    define COMB_BLOCKS 128\n+#    define COMB_TEETH 2\n+#  else\n+#    define COMB_BLOCKS 256\n+#    define COMB_TEETH 1\n+#  endif\n+#else /* !defined(EXHAUSTIVE_TEST_ORDER) */\n+/* Use (11, 6) as default configuration, which results in a 22 kB table. */\n+#  ifndef COMB_BLOCKS\n+#    define COMB_BLOCKS 11",
      "path": "src/ecmult_gen.h",
      "position": null,
      "original_position": 55,
      "commit_id": "dcc846f18518f77770b6a1fc9e39683c63685d39",
      "original_commit_id": "a7f0d0e5dec0b88676b9b6c79f21e12405f7befb",
      "in_reply_to_id": null,
      "user": {
        "login": "peterdettman",
        "id": 3423981,
        "node_id": "MDQ6VXNlcjM0MjM5ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3423981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/peterdettman",
        "html_url": "https://github.com/peterdettman",
        "followers_url": "https://api.github.com/users/peterdettman/followers",
        "following_url": "https://api.github.com/users/peterdettman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/peterdettman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/peterdettman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/peterdettman/subscriptions",
        "organizations_url": "https://api.github.com/users/peterdettman/orgs",
        "repos_url": "https://api.github.com/users/peterdettman/repos",
        "events_url": "https://api.github.com/users/peterdettman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/peterdettman/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Just noting that this isn't the same as the configure-driven default, not sure that it matters.",
      "created_at": "2021-12-31T06:41:59Z",
      "updated_at": "2021-12-31T06:42:00Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1058#discussion_r776937824",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/776937824"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1058"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 57,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/776938364",
      "pull_request_review_id": 842171797,
      "id": 776938364,
      "node_id": "PRRC_kwDOAP4Jqs4uTyN8",
      "diff_hunk": "@@ -10,19 +10,90 @@\n #include \"scalar.h\"\n #include \"group.h\"\n \n-#if ECMULT_GEN_PREC_BITS != 2 && ECMULT_GEN_PREC_BITS != 4 && ECMULT_GEN_PREC_BITS != 8\n-#  error \"Set ECMULT_GEN_PREC_BITS to 2, 4 or 8.\"\n+/* Configuration parameters for the signed-digit multi-comb algorithm:\n+ *\n+ * - COMB_BLOCKS is the number of lookup tables.\n+ * - COMB_TEETH is the number of bits covered by one table.\n+ *\n+ * The comb's spacing (COMB_SPACING), or the distance between the teeth,\n+ * is defined as ceil(256 / (COMB_BLOCKS * COMB_TEETH)).\n+ *\n+ * The size of the precomputed table is COMB_BLOCKS * (1 << (COMB_TEETH - 1))\n+ * secp256k1_ge_storages.\n+ *\n+ * The number of point additions equals COMB_BLOCKS * COMB_SPACING. Each point\n+ * addition involves a cmov from (1 << (COMB_TEETH - 1)) table entries and a\n+ * conditional negation.\n+ *\n+ * The number of point doublings is COMB_SPACING - 1. */\n+\n+#if defined(EXHAUSTIVE_TEST_ORDER)\n+/* We need to control these values for exhaustive tests because\n+ * the tables cannot have infinities in them (secp256k1_ge_storage\n+ * doesn't support infinities) */\n+#  undef COMB_BLOCKS\n+#  undef COMB_TEETH\n+#  if EXHAUSTIVE_TEST_ORDER > 32\n+#    define COMB_BLOCKS 52\n+#    define COMB_TEETH 5\n+#  elif EXHAUSTIVE_TEST_ORDER > 16\n+#    define COMB_BLOCKS 64\n+#    define COMB_TEETH 4\n+#  elif EXHAUSTIVE_TEST_ORDER > 8\n+#    define COMB_BLOCKS 86\n+#    define COMB_TEETH 3\n+#  elif EXHAUSTIVE_TEST_ORDER > 4\n+#    define COMB_BLOCKS 128\n+#    define COMB_TEETH 2\n+#  else\n+#    define COMB_BLOCKS 256\n+#    define COMB_TEETH 1\n+#  endif\n+#else /* !defined(EXHAUSTIVE_TEST_ORDER) */\n+/* Use (11, 6) as default configuration, which results in a 22 kB table. */\n+#  ifndef COMB_BLOCKS\n+#    define COMB_BLOCKS 11\n+#  endif\n+#  ifndef COMB_TEETH\n+#    define COMB_TEETH 6\n+#  endif\n+#endif /* defined(EXHAUSTIVE_TEST_ORDER) */\n+\n+/* Range checks on the parameters. */\n+#if !(1 <= COMB_BLOCKS && COMB_BLOCKS <= 256)\n+#  error \"COMB_BLOCKS must be in the range [1, 256]\"\n+#endif\n+#if !(1 <= COMB_TEETH && COMB_TEETH <= 8)\n+#  error \"COMB_TEETH must be in the range [1, 8]\"\n+#endif\n+\n+/* The remaining COMB_* parameters are derived values, don't modify these. */\n+/* - The distance between the teeth of the comb. */\n+#define COMB_SPACING ((255 + COMB_BLOCKS * COMB_TEETH) / (COMB_BLOCKS * COMB_TEETH))\n+/* - The number of bits covered by all the combs; must be at least 256. */",
      "path": "src/ecmult_gen.h",
      "position": null,
      "original_position": 73,
      "commit_id": "dcc846f18518f77770b6a1fc9e39683c63685d39",
      "original_commit_id": "a7f0d0e5dec0b88676b9b6c79f21e12405f7befb",
      "in_reply_to_id": null,
      "user": {
        "login": "peterdettman",
        "id": 3423981,
        "node_id": "MDQ6VXNlcjM0MjM5ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3423981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/peterdettman",
        "html_url": "https://github.com/peterdettman",
        "followers_url": "https://api.github.com/users/peterdettman/followers",
        "following_url": "https://api.github.com/users/peterdettman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/peterdettman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/peterdettman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/peterdettman/subscriptions",
        "organizations_url": "https://api.github.com/users/peterdettman/orgs",
        "repos_url": "https://api.github.com/users/peterdettman/repos",
        "events_url": "https://api.github.com/users/peterdettman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/peterdettman/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "\"by all the blocks\" is maybe better.",
      "created_at": "2021-12-31T06:46:43Z",
      "updated_at": "2021-12-31T06:46:43Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1058#discussion_r776938364",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/776938364"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1058"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 73,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/776938488",
      "pull_request_review_id": 842171911,
      "id": 776938488,
      "node_id": "PRRC_kwDOAP4Jqs4uTyP4",
      "diff_hunk": "@@ -10,19 +10,90 @@\n #include \"scalar.h\"\n #include \"group.h\"\n \n-#if ECMULT_GEN_PREC_BITS != 2 && ECMULT_GEN_PREC_BITS != 4 && ECMULT_GEN_PREC_BITS != 8\n-#  error \"Set ECMULT_GEN_PREC_BITS to 2, 4 or 8.\"\n+/* Configuration parameters for the signed-digit multi-comb algorithm:\n+ *\n+ * - COMB_BLOCKS is the number of lookup tables.\n+ * - COMB_TEETH is the number of bits covered by one table.\n+ *\n+ * The comb's spacing (COMB_SPACING), or the distance between the teeth,\n+ * is defined as ceil(256 / (COMB_BLOCKS * COMB_TEETH)).\n+ *\n+ * The size of the precomputed table is COMB_BLOCKS * (1 << (COMB_TEETH - 1))\n+ * secp256k1_ge_storages.\n+ *\n+ * The number of point additions equals COMB_BLOCKS * COMB_SPACING. Each point\n+ * addition involves a cmov from (1 << (COMB_TEETH - 1)) table entries and a\n+ * conditional negation.\n+ *\n+ * The number of point doublings is COMB_SPACING - 1. */\n+\n+#if defined(EXHAUSTIVE_TEST_ORDER)\n+/* We need to control these values for exhaustive tests because\n+ * the tables cannot have infinities in them (secp256k1_ge_storage\n+ * doesn't support infinities) */\n+#  undef COMB_BLOCKS\n+#  undef COMB_TEETH\n+#  if EXHAUSTIVE_TEST_ORDER > 32\n+#    define COMB_BLOCKS 52\n+#    define COMB_TEETH 5\n+#  elif EXHAUSTIVE_TEST_ORDER > 16\n+#    define COMB_BLOCKS 64\n+#    define COMB_TEETH 4\n+#  elif EXHAUSTIVE_TEST_ORDER > 8\n+#    define COMB_BLOCKS 86\n+#    define COMB_TEETH 3\n+#  elif EXHAUSTIVE_TEST_ORDER > 4\n+#    define COMB_BLOCKS 128\n+#    define COMB_TEETH 2\n+#  else\n+#    define COMB_BLOCKS 256\n+#    define COMB_TEETH 1\n+#  endif\n+#else /* !defined(EXHAUSTIVE_TEST_ORDER) */\n+/* Use (11, 6) as default configuration, which results in a 22 kB table. */\n+#  ifndef COMB_BLOCKS\n+#    define COMB_BLOCKS 11\n+#  endif\n+#  ifndef COMB_TEETH\n+#    define COMB_TEETH 6\n+#  endif\n+#endif /* defined(EXHAUSTIVE_TEST_ORDER) */\n+\n+/* Range checks on the parameters. */\n+#if !(1 <= COMB_BLOCKS && COMB_BLOCKS <= 256)\n+#  error \"COMB_BLOCKS must be in the range [1, 256]\"\n+#endif\n+#if !(1 <= COMB_TEETH && COMB_TEETH <= 8)\n+#  error \"COMB_TEETH must be in the range [1, 8]\"\n+#endif\n+\n+/* The remaining COMB_* parameters are derived values, don't modify these. */\n+/* - The distance between the teeth of the comb. */",
      "path": "src/ecmult_gen.h",
      "position": null,
      "original_position": 71,
      "commit_id": "dcc846f18518f77770b6a1fc9e39683c63685d39",
      "original_commit_id": "a7f0d0e5dec0b88676b9b6c79f21e12405f7befb",
      "in_reply_to_id": null,
      "user": {
        "login": "peterdettman",
        "id": 3423981,
        "node_id": "MDQ6VXNlcjM0MjM5ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3423981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/peterdettman",
        "html_url": "https://github.com/peterdettman",
        "followers_url": "https://api.github.com/users/peterdettman/followers",
        "following_url": "https://api.github.com/users/peterdettman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/peterdettman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/peterdettman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/peterdettman/subscriptions",
        "organizations_url": "https://api.github.com/users/peterdettman/orgs",
        "repos_url": "https://api.github.com/users/peterdettman/repos",
        "events_url": "https://api.github.com/users/peterdettman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/peterdettman/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "\"in each comb\"?",
      "created_at": "2021-12-31T06:47:29Z",
      "updated_at": "2021-12-31T06:47:29Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1058#discussion_r776938488",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/776938488"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1058"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 71,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/776979140",
      "pull_request_review_id": 842221384,
      "id": 776979140,
      "node_id": "PRRC_kwDOAP4Jqs4uT8LE",
      "diff_hunk": "@@ -307,20 +306,31 @@ case $set_ecmult_window in\n esac\n \n # Set ecmult gen precision\n-if test x\"$req_ecmult_gen_precision\" = x\"auto\"; then\n-  set_ecmult_gen_precision=4\n+if test x\"$req_ecmult_gen_kb\" = x\"auto\"; then\n+  set_ecmult_gen_kb=86",
      "path": "configure.ac",
      "position": null,
      "original_position": 26,
      "commit_id": "dcc846f18518f77770b6a1fc9e39683c63685d39",
      "original_commit_id": "a7f0d0e5dec0b88676b9b6c79f21e12405f7befb",
      "in_reply_to_id": 776937622,
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "With https://github.com/bitcoin-core/secp256k1/issues/929, it may be good idea to handle the logic in the preprocessor in the case of \"auto\". \r\n\r\nIf you agree, I think it's both ok to do it in this PR, or postpone it to a separate PR that also cares about all other setting/parameters (which we should do anyway).",
      "created_at": "2021-12-31T10:43:23Z",
      "updated_at": "2021-12-31T10:43:23Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1058#discussion_r776979140",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/776979140"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1058"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 310,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/777020423",
      "pull_request_review_id": 842268454,
      "id": 777020423,
      "node_id": "PRRC_kwDOAP4Jqs4uUGQH",
      "diff_hunk": "@@ -307,20 +306,31 @@ case $set_ecmult_window in\n esac\n \n # Set ecmult gen precision\n-if test x\"$req_ecmult_gen_precision\" = x\"auto\"; then\n-  set_ecmult_gen_precision=4\n+if test x\"$req_ecmult_gen_kb\" = x\"auto\"; then\n+  set_ecmult_gen_kb=86",
      "path": "configure.ac",
      "position": null,
      "original_position": 26,
      "commit_id": "dcc846f18518f77770b6a1fc9e39683c63685d39",
      "original_commit_id": "a7f0d0e5dec0b88676b9b6c79f21e12405f7befb",
      "in_reply_to_id": 776937622,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I'm not convinced about what the defaults should be, but given that ecmult already defaults to 1 MiB precomputed table, I see little harm in picking an 86 KiB one here.\r\n\r\nI agree we can easily revisit defaults later (especially in combination with #929).",
      "created_at": "2021-12-31T15:09:15Z",
      "updated_at": "2021-12-31T15:09:15Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1058#discussion_r777020423",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/777020423"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1058"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 310,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/777026163",
      "pull_request_review_id": 842274452,
      "id": 777026163,
      "node_id": "PRRC_kwDOAP4Jqs4uUHpz",
      "diff_hunk": "@@ -10,19 +10,90 @@\n #include \"scalar.h\"\n #include \"group.h\"\n \n-#if ECMULT_GEN_PREC_BITS != 2 && ECMULT_GEN_PREC_BITS != 4 && ECMULT_GEN_PREC_BITS != 8\n-#  error \"Set ECMULT_GEN_PREC_BITS to 2, 4 or 8.\"\n+/* Configuration parameters for the signed-digit multi-comb algorithm:\n+ *\n+ * - COMB_BLOCKS is the number of lookup tables.\n+ * - COMB_TEETH is the number of bits covered by one table.\n+ *\n+ * The comb's spacing (COMB_SPACING), or the distance between the teeth,\n+ * is defined as ceil(256 / (COMB_BLOCKS * COMB_TEETH)).\n+ *\n+ * The size of the precomputed table is COMB_BLOCKS * (1 << (COMB_TEETH - 1))\n+ * secp256k1_ge_storages.\n+ *\n+ * The number of point additions equals COMB_BLOCKS * COMB_SPACING. Each point\n+ * addition involves a cmov from (1 << (COMB_TEETH - 1)) table entries and a\n+ * conditional negation.\n+ *\n+ * The number of point doublings is COMB_SPACING - 1. */\n+\n+#if defined(EXHAUSTIVE_TEST_ORDER)\n+/* We need to control these values for exhaustive tests because\n+ * the tables cannot have infinities in them (secp256k1_ge_storage\n+ * doesn't support infinities) */\n+#  undef COMB_BLOCKS\n+#  undef COMB_TEETH\n+#  if EXHAUSTIVE_TEST_ORDER > 32\n+#    define COMB_BLOCKS 52\n+#    define COMB_TEETH 5\n+#  elif EXHAUSTIVE_TEST_ORDER > 16\n+#    define COMB_BLOCKS 64\n+#    define COMB_TEETH 4\n+#  elif EXHAUSTIVE_TEST_ORDER > 8\n+#    define COMB_BLOCKS 86\n+#    define COMB_TEETH 3\n+#  elif EXHAUSTIVE_TEST_ORDER > 4\n+#    define COMB_BLOCKS 128\n+#    define COMB_TEETH 2\n+#  else\n+#    define COMB_BLOCKS 256\n+#    define COMB_TEETH 1\n+#  endif\n+#else /* !defined(EXHAUSTIVE_TEST_ORDER) */\n+/* Use (11, 6) as default configuration, which results in a 22 kB table. */\n+#  ifndef COMB_BLOCKS\n+#    define COMB_BLOCKS 11\n+#  endif\n+#  ifndef COMB_TEETH\n+#    define COMB_TEETH 6\n+#  endif\n+#endif /* defined(EXHAUSTIVE_TEST_ORDER) */\n+\n+/* Range checks on the parameters. */\n+#if !(1 <= COMB_BLOCKS && COMB_BLOCKS <= 256)\n+#  error \"COMB_BLOCKS must be in the range [1, 256]\"\n+#endif\n+#if !(1 <= COMB_TEETH && COMB_TEETH <= 8)\n+#  error \"COMB_TEETH must be in the range [1, 8]\"\n+#endif\n+\n+/* The remaining COMB_* parameters are derived values, don't modify these. */\n+/* - The distance between the teeth of the comb. */",
      "path": "src/ecmult_gen.h",
      "position": null,
      "original_position": 71,
      "commit_id": "dcc846f18518f77770b6a1fc9e39683c63685d39",
      "original_commit_id": "a7f0d0e5dec0b88676b9b6c79f21e12405f7befb",
      "in_reply_to_id": 776938488,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done.",
      "created_at": "2021-12-31T15:51:51Z",
      "updated_at": "2021-12-31T15:51:51Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1058#discussion_r777026163",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/777026163"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1058"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 71,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/777026180",
      "pull_request_review_id": 842274464,
      "id": 777026180,
      "node_id": "PRRC_kwDOAP4Jqs4uUHqE",
      "diff_hunk": "@@ -10,19 +10,90 @@\n #include \"scalar.h\"\n #include \"group.h\"\n \n-#if ECMULT_GEN_PREC_BITS != 2 && ECMULT_GEN_PREC_BITS != 4 && ECMULT_GEN_PREC_BITS != 8\n-#  error \"Set ECMULT_GEN_PREC_BITS to 2, 4 or 8.\"\n+/* Configuration parameters for the signed-digit multi-comb algorithm:\n+ *\n+ * - COMB_BLOCKS is the number of lookup tables.\n+ * - COMB_TEETH is the number of bits covered by one table.\n+ *\n+ * The comb's spacing (COMB_SPACING), or the distance between the teeth,\n+ * is defined as ceil(256 / (COMB_BLOCKS * COMB_TEETH)).\n+ *\n+ * The size of the precomputed table is COMB_BLOCKS * (1 << (COMB_TEETH - 1))\n+ * secp256k1_ge_storages.\n+ *\n+ * The number of point additions equals COMB_BLOCKS * COMB_SPACING. Each point\n+ * addition involves a cmov from (1 << (COMB_TEETH - 1)) table entries and a\n+ * conditional negation.\n+ *\n+ * The number of point doublings is COMB_SPACING - 1. */\n+\n+#if defined(EXHAUSTIVE_TEST_ORDER)\n+/* We need to control these values for exhaustive tests because\n+ * the tables cannot have infinities in them (secp256k1_ge_storage\n+ * doesn't support infinities) */\n+#  undef COMB_BLOCKS\n+#  undef COMB_TEETH\n+#  if EXHAUSTIVE_TEST_ORDER > 32\n+#    define COMB_BLOCKS 52\n+#    define COMB_TEETH 5\n+#  elif EXHAUSTIVE_TEST_ORDER > 16\n+#    define COMB_BLOCKS 64\n+#    define COMB_TEETH 4\n+#  elif EXHAUSTIVE_TEST_ORDER > 8\n+#    define COMB_BLOCKS 86\n+#    define COMB_TEETH 3\n+#  elif EXHAUSTIVE_TEST_ORDER > 4\n+#    define COMB_BLOCKS 128\n+#    define COMB_TEETH 2\n+#  else\n+#    define COMB_BLOCKS 256\n+#    define COMB_TEETH 1\n+#  endif\n+#else /* !defined(EXHAUSTIVE_TEST_ORDER) */\n+/* Use (11, 6) as default configuration, which results in a 22 kB table. */\n+#  ifndef COMB_BLOCKS\n+#    define COMB_BLOCKS 11\n+#  endif\n+#  ifndef COMB_TEETH\n+#    define COMB_TEETH 6\n+#  endif\n+#endif /* defined(EXHAUSTIVE_TEST_ORDER) */\n+\n+/* Range checks on the parameters. */\n+#if !(1 <= COMB_BLOCKS && COMB_BLOCKS <= 256)\n+#  error \"COMB_BLOCKS must be in the range [1, 256]\"\n+#endif\n+#if !(1 <= COMB_TEETH && COMB_TEETH <= 8)\n+#  error \"COMB_TEETH must be in the range [1, 8]\"\n+#endif\n+\n+/* The remaining COMB_* parameters are derived values, don't modify these. */\n+/* - The distance between the teeth of the comb. */\n+#define COMB_SPACING ((255 + COMB_BLOCKS * COMB_TEETH) / (COMB_BLOCKS * COMB_TEETH))\n+/* - The number of bits covered by all the combs; must be at least 256. */",
      "path": "src/ecmult_gen.h",
      "position": null,
      "original_position": 73,
      "commit_id": "dcc846f18518f77770b6a1fc9e39683c63685d39",
      "original_commit_id": "a7f0d0e5dec0b88676b9b6c79f21e12405f7befb",
      "in_reply_to_id": 776938364,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done.",
      "created_at": "2021-12-31T15:52:00Z",
      "updated_at": "2021-12-31T15:52:00Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1058#discussion_r777026180",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/777026180"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1058"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 73,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/777026230",
      "pull_request_review_id": 842274535,
      "id": 777026230,
      "node_id": "PRRC_kwDOAP4Jqs4uUHq2",
      "diff_hunk": "@@ -10,19 +10,90 @@\n #include \"scalar.h\"\n #include \"group.h\"\n \n-#if ECMULT_GEN_PREC_BITS != 2 && ECMULT_GEN_PREC_BITS != 4 && ECMULT_GEN_PREC_BITS != 8\n-#  error \"Set ECMULT_GEN_PREC_BITS to 2, 4 or 8.\"\n+/* Configuration parameters for the signed-digit multi-comb algorithm:\n+ *\n+ * - COMB_BLOCKS is the number of lookup tables.\n+ * - COMB_TEETH is the number of bits covered by one table.\n+ *\n+ * The comb's spacing (COMB_SPACING), or the distance between the teeth,\n+ * is defined as ceil(256 / (COMB_BLOCKS * COMB_TEETH)).\n+ *\n+ * The size of the precomputed table is COMB_BLOCKS * (1 << (COMB_TEETH - 1))\n+ * secp256k1_ge_storages.\n+ *\n+ * The number of point additions equals COMB_BLOCKS * COMB_SPACING. Each point\n+ * addition involves a cmov from (1 << (COMB_TEETH - 1)) table entries and a\n+ * conditional negation.\n+ *\n+ * The number of point doublings is COMB_SPACING - 1. */\n+\n+#if defined(EXHAUSTIVE_TEST_ORDER)\n+/* We need to control these values for exhaustive tests because\n+ * the tables cannot have infinities in them (secp256k1_ge_storage\n+ * doesn't support infinities) */\n+#  undef COMB_BLOCKS\n+#  undef COMB_TEETH\n+#  if EXHAUSTIVE_TEST_ORDER > 32\n+#    define COMB_BLOCKS 52\n+#    define COMB_TEETH 5\n+#  elif EXHAUSTIVE_TEST_ORDER > 16\n+#    define COMB_BLOCKS 64\n+#    define COMB_TEETH 4\n+#  elif EXHAUSTIVE_TEST_ORDER > 8\n+#    define COMB_BLOCKS 86\n+#    define COMB_TEETH 3\n+#  elif EXHAUSTIVE_TEST_ORDER > 4\n+#    define COMB_BLOCKS 128\n+#    define COMB_TEETH 2\n+#  else\n+#    define COMB_BLOCKS 256\n+#    define COMB_TEETH 1\n+#  endif\n+#else /* !defined(EXHAUSTIVE_TEST_ORDER) */\n+/* Use (11, 6) as default configuration, which results in a 22 kB table. */\n+#  ifndef COMB_BLOCKS\n+#    define COMB_BLOCKS 11",
      "path": "src/ecmult_gen.h",
      "position": null,
      "original_position": 55,
      "commit_id": "dcc846f18518f77770b6a1fc9e39683c63685d39",
      "original_commit_id": "a7f0d0e5dec0b88676b9b6c79f21e12405f7befb",
      "in_reply_to_id": 776937824,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I changed the configure-driver default to also be 22 kB; we can revisit the defaults later.",
      "created_at": "2021-12-31T15:52:29Z",
      "updated_at": "2021-12-31T15:52:29Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1058#discussion_r777026230",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/777026230"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1058"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 57,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/777026255",
      "pull_request_review_id": 842274548,
      "id": 777026255,
      "node_id": "PRRC_kwDOAP4Jqs4uUHrP",
      "diff_hunk": "@@ -307,20 +306,31 @@ case $set_ecmult_window in\n esac\n \n # Set ecmult gen precision\n-if test x\"$req_ecmult_gen_precision\" = x\"auto\"; then\n-  set_ecmult_gen_precision=4\n+if test x\"$req_ecmult_gen_kb\" = x\"auto\"; then\n+  set_ecmult_gen_kb=86",
      "path": "configure.ac",
      "position": null,
      "original_position": 26,
      "commit_id": "dcc846f18518f77770b6a1fc9e39683c63685d39",
      "original_commit_id": "a7f0d0e5dec0b88676b9b6c79f21e12405f7befb",
      "in_reply_to_id": 776937622,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I changed the configure-driver default to also be 22 kB; we can revisit the defaults later.",
      "created_at": "2021-12-31T15:52:34Z",
      "updated_at": "2021-12-31T15:52:34Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1058#discussion_r777026255",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/777026255"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1058"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 310,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/777026291",
      "pull_request_review_id": 842274572,
      "id": 777026291,
      "node_id": "PRRC_kwDOAP4Jqs4uUHrz",
      "diff_hunk": "@@ -10,19 +10,90 @@\n #include \"scalar.h\"\n #include \"group.h\"\n \n-#if ECMULT_GEN_PREC_BITS != 2 && ECMULT_GEN_PREC_BITS != 4 && ECMULT_GEN_PREC_BITS != 8\n-#  error \"Set ECMULT_GEN_PREC_BITS to 2, 4 or 8.\"\n+/* Configuration parameters for the signed-digit multi-comb algorithm:\n+ *\n+ * - COMB_BLOCKS is the number of lookup tables.\n+ * - COMB_TEETH is the number of bits covered by one table.\n+ *\n+ * The comb's spacing (COMB_SPACING), or the distance between the teeth,\n+ * is defined as ceil(256 / (COMB_BLOCKS * COMB_TEETH)).\n+ *\n+ * The size of the precomputed table is COMB_BLOCKS * (1 << (COMB_TEETH - 1))\n+ * secp256k1_ge_storages.\n+ *\n+ * The number of point additions equals COMB_BLOCKS * COMB_SPACING. Each point\n+ * addition involves a cmov from (1 << (COMB_TEETH - 1)) table entries and a\n+ * conditional negation.\n+ *\n+ * The number of point doublings is COMB_SPACING - 1. */\n+\n+#if defined(EXHAUSTIVE_TEST_ORDER)\n+/* We need to control these values for exhaustive tests because\n+ * the tables cannot have infinities in them (secp256k1_ge_storage\n+ * doesn't support infinities) */\n+#  undef COMB_BLOCKS\n+#  undef COMB_TEETH\n+#  if EXHAUSTIVE_TEST_ORDER > 32\n+#    define COMB_BLOCKS 52\n+#    define COMB_TEETH 5\n+#  elif EXHAUSTIVE_TEST_ORDER > 16\n+#    define COMB_BLOCKS 64\n+#    define COMB_TEETH 4\n+#  elif EXHAUSTIVE_TEST_ORDER > 8\n+#    define COMB_BLOCKS 86\n+#    define COMB_TEETH 3\n+#  elif EXHAUSTIVE_TEST_ORDER > 4\n+#    define COMB_BLOCKS 128\n+#    define COMB_TEETH 2\n+#  else\n+#    define COMB_BLOCKS 256\n+#    define COMB_TEETH 1\n+#  endif\n+#else /* !defined(EXHAUSTIVE_TEST_ORDER) */\n+/* Use (11, 6) as default configuration, which results in a 22 kB table. */\n+#  ifndef COMB_BLOCKS\n+#    define COMB_BLOCKS 11\n+#  endif\n+#  ifndef COMB_TEETH\n+#    define COMB_TEETH 6\n+#  endif\n+#endif /* defined(EXHAUSTIVE_TEST_ORDER) */\n+\n+/* Range checks on the parameters. */\n+#if !(1 <= COMB_BLOCKS && COMB_BLOCKS <= 256)\n+#  error \"COMB_BLOCKS must be in the range [1, 256]\"\n+#endif\n+#if !(1 <= COMB_TEETH && COMB_TEETH <= 8)\n+#  error \"COMB_TEETH must be in the range [1, 8]\"\n+#endif\n+\n+/* The remaining COMB_* parameters are derived values, don't modify these. */\n+/* - The distance between the teeth of the comb. */\n+#define COMB_SPACING ((255 + COMB_BLOCKS * COMB_TEETH) / (COMB_BLOCKS * COMB_TEETH))\n+/* - The number of bits covered by all the combs; must be at least 256. */\n+#define COMB_BITS (COMB_BLOCKS * COMB_TEETH * COMB_SPACING)\n+/* - The number of points per table. */\n+#define COMB_POINTS (1 << (COMB_TEETH - 1))\n+\n+/* Additional sanity checks. */\n+#if (COMB_BLOCKS - 1) * COMB_TEETH * COMB_SPACING >= 256\n+#  error \"COMB_BLOCKS can be reduced\"\n+#endif\n+#if COMB_BLOCKS * (COMB_TEETH - 1) * COMB_SPACING >= 256\n+#  error \"COMB_TEETH can be reduced\"\n #endif\n-#define ECMULT_GEN_PREC_G(bits) (1 << bits)\n-#define ECMULT_GEN_PREC_N(bits) (256 / bits)\n \n typedef struct {\n     /* Whether the context has been built. */\n     int built;\n \n-    /* Blinding values used when computing (n-b)G + bG. */\n-    secp256k1_scalar blind; /* -b */\n-    secp256k1_gej initial;  /* bG */\n+    /* Blinding values used when computing nG as (n-b)G + bG. */\n+    secp256k1_scalar scalar_offset; /* -b */\n+    secp256k1_ge final_point_add;  /* bG */",
      "path": "src/ecmult_gen.h",
      "position": null,
      "original_position": 97,
      "commit_id": "dcc846f18518f77770b6a1fc9e39683c63685d39",
      "original_commit_id": "a7f0d0e5dec0b88676b9b6c79f21e12405f7befb",
      "in_reply_to_id": 776926428,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done.",
      "created_at": "2021-12-31T15:52:40Z",
      "updated_at": "2021-12-31T15:52:40Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1058#discussion_r777026291",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/777026291"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1058"
        }
      },
      "start_line": null,
      "original_start_line": 90,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 92,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/777167352",
      "pull_request_review_id": 842381071,
      "id": 777167352,
      "node_id": "PRRC_kwDOAP4Jqs4uUqH4",
      "diff_hunk": "@@ -177,13 +177,12 @@ AC_ARG_WITH([ecmult-window], [AS_HELP_STRING([--with-ecmult-window=SIZE|auto],\n )],\n [req_ecmult_window=$withval], [req_ecmult_window=auto])\n \n-AC_ARG_WITH([ecmult-gen-precision], [AS_HELP_STRING([--with-ecmult-gen-precision=2|4|8|auto],\n-[Precision bits to tune the precomputed table size for signing.]\n-[The size of the table is 32kB for 2 bits, 64kB for 4 bits, 512kB for 8 bits of precision.]\n-[A larger table size usually results in possible faster signing.]\n-[\"auto\" is a reasonable setting for desktop machines (currently 4). [default=auto]]\n+AC_ARG_WITH([ecmult-gen-kb], [AS_HELP_STRING([--with-ecmult-gen-kb=2|22|86|auto],\n+[The size of the precomputed table for signing in multiples of 1024 bytes (on typical platforms).]\n+[Larger values result in possibly better signing/keygeneration performance at the cost of a larger table.]\n+[\"auto\" is a reasonable setting for desktop machines (currently 86). [default=auto]]",
      "path": "configure.ac",
      "position": null,
      "original_position": 12,
      "commit_id": "dcc846f18518f77770b6a1fc9e39683c63685d39",
      "original_commit_id": "a98735b09a14d4d644504c3a9b2b989f62221051",
      "in_reply_to_id": null,
      "user": {
        "login": "peterdettman",
        "id": 3423981,
        "node_id": "MDQ6VXNlcjM0MjM5ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3423981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/peterdettman",
        "html_url": "https://github.com/peterdettman",
        "followers_url": "https://api.github.com/users/peterdettman/followers",
        "following_url": "https://api.github.com/users/peterdettman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/peterdettman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/peterdettman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/peterdettman/subscriptions",
        "organizations_url": "https://api.github.com/users/peterdettman/orgs",
        "repos_url": "https://api.github.com/users/peterdettman/repos",
        "events_url": "https://api.github.com/users/peterdettman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/peterdettman/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "86 -> 22?",
      "created_at": "2022-01-02T05:22:15Z",
      "updated_at": "2022-01-02T05:22:15Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1058#discussion_r777167352",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/777167352"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1058"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 183,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/777167453",
      "pull_request_review_id": 842381195,
      "id": 777167453,
      "node_id": "PRRC_kwDOAP4Jqs4uUqJd",
      "diff_hunk": "@@ -10,19 +10,94 @@\n #include \"scalar.h\"\n #include \"group.h\"\n \n-#if ECMULT_GEN_PREC_BITS != 2 && ECMULT_GEN_PREC_BITS != 4 && ECMULT_GEN_PREC_BITS != 8\n-#  error \"Set ECMULT_GEN_PREC_BITS to 2, 4 or 8.\"\n+/* Configuration parameters for the signed-digit multi-comb algorithm:\n+ *\n+ * - COMB_BLOCKS is the number of blocks the input is split into. Each\n+ *   has a corresponding table.\n+ * - COMB_TEETH is the number of bits simultaneously covered by one table.\n+ *\n+ * The comb's spacing (COMB_SPACING), or the distance between the teeth,\n+ * is defined as ceil(256 / (COMB_BLOCKS * COMB_TEETH)). Each block covers\n+ * COMB_SPACING * COMB_TEETH consecutive bits in the input.\n+ *\n+ * The size of the precomputed table is COMB_BLOCKS * (1 << (COMB_TEETH - 1))\n+ * secp256k1_ge_storages.\n+ *\n+ * The number of point additions equals COMB_BLOCKS * COMB_SPACING. Each point\n+ * addition involves a cmov from (1 << (COMB_TEETH - 1)) table entries and a\n+ * conditional negation.\n+ *\n+ * The number of point doublings is COMB_SPACING - 1. */\n+\n+#if defined(EXHAUSTIVE_TEST_ORDER)\n+/* We need to control these values for exhaustive tests because\n+ * the tables cannot have infinities in them (secp256k1_ge_storage\n+ * doesn't support infinities) */\n+#  undef COMB_BLOCKS\n+#  undef COMB_TEETH\n+#  if EXHAUSTIVE_TEST_ORDER > 32\n+#    define COMB_BLOCKS 52\n+#    define COMB_TEETH 5\n+#  elif EXHAUSTIVE_TEST_ORDER > 16\n+#    define COMB_BLOCKS 64\n+#    define COMB_TEETH 4\n+#  elif EXHAUSTIVE_TEST_ORDER > 8\n+#    define COMB_BLOCKS 86\n+#    define COMB_TEETH 3\n+#  elif EXHAUSTIVE_TEST_ORDER > 4\n+#    define COMB_BLOCKS 128\n+#    define COMB_TEETH 2\n+#  else\n+#    define COMB_BLOCKS 256\n+#    define COMB_TEETH 1\n+#  endif\n+#else /* !defined(EXHAUSTIVE_TEST_ORDER) */\n+/* Use (11, 6) as default configuration, which results in a 22 kB table. */\n+#  ifndef COMB_BLOCKS\n+#    define COMB_BLOCKS 11\n+#  endif\n+#  ifndef COMB_TEETH\n+#    define COMB_TEETH 6\n+#  endif\n+#endif /* defined(EXHAUSTIVE_TEST_ORDER) */\n+\n+/* Range checks on the parameters. */\n+#if !(1 <= COMB_BLOCKS && COMB_BLOCKS <= 256)\n+#  error \"COMB_BLOCKS must be in the range [1, 256]\"\n+#endif\n+#if !(1 <= COMB_TEETH && COMB_TEETH <= 8)\n+#  error \"COMB_TEETH must be in the range [1, 8]\"\n+#endif\n+\n+/* The remaining COMB_* parameters are derived values, don't modify these. */\n+/* - The distance between the teeth of each comb. */\n+#define COMB_SPACING ((255 + COMB_BLOCKS * COMB_TEETH) / (COMB_BLOCKS * COMB_TEETH))\n+/* - The number of bits covered by all the blocks; must be at least 256. */\n+#define COMB_BITS (COMB_BLOCKS * COMB_TEETH * COMB_SPACING)\n+/* - The number of entries per table. */\n+#define COMB_POINTS (1 << (COMB_TEETH - 1))\n+\n+/* Additional sanity checks. */\n+#if (COMB_BLOCKS - 1) * COMB_TEETH * COMB_SPACING >= 256\n+#  error \"COMB_BLOCKS can be reduced\"\n+#endif\n+#if COMB_BLOCKS * (COMB_TEETH - 1) * COMB_SPACING >= 256\n+#  error \"COMB_TEETH can be reduced\"\n #endif\n-#define ECMULT_GEN_PREC_G(bits) (1 << bits)\n-#define ECMULT_GEN_PREC_N(bits) (256 / bits)\n \n typedef struct {\n     /* Whether the context has been built. */\n     int built;\n \n-    /* Blinding values used when computing (n-b)G + bG. */\n-    secp256k1_scalar blind; /* -b */\n-    secp256k1_gej initial;  /* bG */\n+    /* Values chosen such that n*G == comb(n + scalar_offset, G) + final_point_add.",
      "path": "src/ecmult_gen.h",
      "position": null,
      "original_position": 97,
      "commit_id": "dcc846f18518f77770b6a1fc9e39683c63685d39",
      "original_commit_id": "a98735b09a14d4d644504c3a9b2b989f62221051",
      "in_reply_to_id": null,
      "user": {
        "login": "peterdettman",
        "id": 3423981,
        "node_id": "MDQ6VXNlcjM0MjM5ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3423981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/peterdettman",
        "html_url": "https://github.com/peterdettman",
        "followers_url": "https://api.github.com/users/peterdettman/followers",
        "following_url": "https://api.github.com/users/peterdettman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/peterdettman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/peterdettman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/peterdettman/subscriptions",
        "organizations_url": "https://api.github.com/users/peterdettman/orgs",
        "repos_url": "https://api.github.com/users/peterdettman/repos",
        "events_url": "https://api.github.com/users/peterdettman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/peterdettman/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I guess it should be G/2 in the comb now?",
      "created_at": "2022-01-02T05:24:33Z",
      "updated_at": "2022-01-02T05:24:33Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1058#discussion_r777167453",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/777167453"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1058"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 92,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/777241380",
      "pull_request_review_id": 842436680,
      "id": 777241380,
      "node_id": "PRRC_kwDOAP4Jqs4uU8Mk",
      "diff_hunk": "@@ -10,19 +10,94 @@\n #include \"scalar.h\"\n #include \"group.h\"\n \n-#if ECMULT_GEN_PREC_BITS != 2 && ECMULT_GEN_PREC_BITS != 4 && ECMULT_GEN_PREC_BITS != 8\n-#  error \"Set ECMULT_GEN_PREC_BITS to 2, 4 or 8.\"\n+/* Configuration parameters for the signed-digit multi-comb algorithm:\n+ *\n+ * - COMB_BLOCKS is the number of blocks the input is split into. Each\n+ *   has a corresponding table.\n+ * - COMB_TEETH is the number of bits simultaneously covered by one table.\n+ *\n+ * The comb's spacing (COMB_SPACING), or the distance between the teeth,\n+ * is defined as ceil(256 / (COMB_BLOCKS * COMB_TEETH)). Each block covers\n+ * COMB_SPACING * COMB_TEETH consecutive bits in the input.\n+ *\n+ * The size of the precomputed table is COMB_BLOCKS * (1 << (COMB_TEETH - 1))\n+ * secp256k1_ge_storages.\n+ *\n+ * The number of point additions equals COMB_BLOCKS * COMB_SPACING. Each point\n+ * addition involves a cmov from (1 << (COMB_TEETH - 1)) table entries and a\n+ * conditional negation.\n+ *\n+ * The number of point doublings is COMB_SPACING - 1. */\n+\n+#if defined(EXHAUSTIVE_TEST_ORDER)\n+/* We need to control these values for exhaustive tests because\n+ * the tables cannot have infinities in them (secp256k1_ge_storage\n+ * doesn't support infinities) */\n+#  undef COMB_BLOCKS\n+#  undef COMB_TEETH\n+#  if EXHAUSTIVE_TEST_ORDER > 32\n+#    define COMB_BLOCKS 52\n+#    define COMB_TEETH 5\n+#  elif EXHAUSTIVE_TEST_ORDER > 16\n+#    define COMB_BLOCKS 64\n+#    define COMB_TEETH 4\n+#  elif EXHAUSTIVE_TEST_ORDER > 8\n+#    define COMB_BLOCKS 86\n+#    define COMB_TEETH 3\n+#  elif EXHAUSTIVE_TEST_ORDER > 4\n+#    define COMB_BLOCKS 128\n+#    define COMB_TEETH 2\n+#  else\n+#    define COMB_BLOCKS 256\n+#    define COMB_TEETH 1\n+#  endif\n+#else /* !defined(EXHAUSTIVE_TEST_ORDER) */\n+/* Use (11, 6) as default configuration, which results in a 22 kB table. */\n+#  ifndef COMB_BLOCKS\n+#    define COMB_BLOCKS 11\n+#  endif\n+#  ifndef COMB_TEETH\n+#    define COMB_TEETH 6\n+#  endif\n+#endif /* defined(EXHAUSTIVE_TEST_ORDER) */\n+\n+/* Range checks on the parameters. */\n+#if !(1 <= COMB_BLOCKS && COMB_BLOCKS <= 256)\n+#  error \"COMB_BLOCKS must be in the range [1, 256]\"\n+#endif\n+#if !(1 <= COMB_TEETH && COMB_TEETH <= 8)\n+#  error \"COMB_TEETH must be in the range [1, 8]\"\n+#endif\n+\n+/* The remaining COMB_* parameters are derived values, don't modify these. */\n+/* - The distance between the teeth of each comb. */\n+#define COMB_SPACING ((255 + COMB_BLOCKS * COMB_TEETH) / (COMB_BLOCKS * COMB_TEETH))\n+/* - The number of bits covered by all the blocks; must be at least 256. */\n+#define COMB_BITS (COMB_BLOCKS * COMB_TEETH * COMB_SPACING)\n+/* - The number of entries per table. */\n+#define COMB_POINTS (1 << (COMB_TEETH - 1))\n+\n+/* Additional sanity checks. */\n+#if (COMB_BLOCKS - 1) * COMB_TEETH * COMB_SPACING >= 256\n+#  error \"COMB_BLOCKS can be reduced\"\n+#endif\n+#if COMB_BLOCKS * (COMB_TEETH - 1) * COMB_SPACING >= 256\n+#  error \"COMB_TEETH can be reduced\"\n #endif\n-#define ECMULT_GEN_PREC_G(bits) (1 << bits)\n-#define ECMULT_GEN_PREC_N(bits) (256 / bits)\n \n typedef struct {\n     /* Whether the context has been built. */\n     int built;\n \n-    /* Blinding values used when computing (n-b)G + bG. */\n-    secp256k1_scalar blind; /* -b */\n-    secp256k1_gej initial;  /* bG */\n+    /* Values chosen such that n*G == comb(n + scalar_offset, G) + final_point_add.",
      "path": "src/ecmult_gen.h",
      "position": null,
      "original_position": 97,
      "commit_id": "dcc846f18518f77770b6a1fc9e39683c63685d39",
      "original_commit_id": "a98735b09a14d4d644504c3a9b2b989f62221051",
      "in_reply_to_id": 777167453,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "FIxed. I though of \"comb()\" here as a more abstract \"the comb multiplication algorithm\", but I've now just aligned the ecmult_gen.h and ecmult_gen_impl.h descriptions (also switched to other from `c()` to `comb()`).",
      "created_at": "2022-01-02T18:35:42Z",
      "updated_at": "2022-01-02T18:35:42Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1058#discussion_r777241380",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/777241380"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1058"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 92,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/777241416",
      "pull_request_review_id": 842436718,
      "id": 777241416,
      "node_id": "PRRC_kwDOAP4Jqs4uU8NI",
      "diff_hunk": "@@ -177,13 +177,12 @@ AC_ARG_WITH([ecmult-window], [AS_HELP_STRING([--with-ecmult-window=SIZE|auto],\n )],\n [req_ecmult_window=$withval], [req_ecmult_window=auto])\n \n-AC_ARG_WITH([ecmult-gen-precision], [AS_HELP_STRING([--with-ecmult-gen-precision=2|4|8|auto],\n-[Precision bits to tune the precomputed table size for signing.]\n-[The size of the table is 32kB for 2 bits, 64kB for 4 bits, 512kB for 8 bits of precision.]\n-[A larger table size usually results in possible faster signing.]\n-[\"auto\" is a reasonable setting for desktop machines (currently 4). [default=auto]]\n+AC_ARG_WITH([ecmult-gen-kb], [AS_HELP_STRING([--with-ecmult-gen-kb=2|22|86|auto],\n+[The size of the precomputed table for signing in multiples of 1024 bytes (on typical platforms).]\n+[Larger values result in possibly better signing/keygeneration performance at the cost of a larger table.]\n+[\"auto\" is a reasonable setting for desktop machines (currently 86). [default=auto]]",
      "path": "configure.ac",
      "position": null,
      "original_position": 12,
      "commit_id": "dcc846f18518f77770b6a1fc9e39683c63685d39",
      "original_commit_id": "a98735b09a14d4d644504c3a9b2b989f62221051",
      "in_reply_to_id": 777167352,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Fixed.",
      "created_at": "2022-01-02T18:36:26Z",
      "updated_at": "2022-01-02T18:36:26Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1058#discussion_r777241416",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/777241416"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1058"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 183,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1411626664",
      "pull_request_review_id": 1759044478,
      "id": 1411626664,
      "node_id": "PRRC_kwDOAP4Jqs5UI7ao",
      "diff_hunk": "@@ -5548,32 +5561,35 @@ static void test_ecmult_gen_blind(void) {\n     unsigned char seed32[32];\n     secp256k1_gej pgej;\n     secp256k1_gej pgej2;\n-    secp256k1_gej i;\n+    secp256k1_ge f;\n     secp256k1_ge pge;\n     random_scalar_order_test(&key);\n     secp256k1_ecmult_gen(&CTX->ecmult_gen_ctx, &pgej, &key);\n     secp256k1_testrand256(seed32);\n-    b = CTX->ecmult_gen_ctx.blind;\n-    i = CTX->ecmult_gen_ctx.initial;\n+    b = CTX->ecmult_gen_ctx.scalar_offset;\n+    f = CTX->ecmult_gen_ctx.final_point_add;\n     secp256k1_ecmult_gen_blind(&CTX->ecmult_gen_ctx, seed32);\n-    CHECK(!secp256k1_scalar_eq(&b, &CTX->ecmult_gen_ctx.blind));\n+    CHECK(!secp256k1_scalar_eq(&b, &CTX->ecmult_gen_ctx.scalar_offset));\n     secp256k1_ecmult_gen(&CTX->ecmult_gen_ctx, &pgej2, &key);\n     CHECK(!gej_xyz_equals_gej(&pgej, &pgej2));\n-    CHECK(!gej_xyz_equals_gej(&i, &CTX->ecmult_gen_ctx.initial));\n+    CHECK(!ge_cmp_ge(&f, &CTX->ecmult_gen_ctx.final_point_add));\n     secp256k1_ge_set_gej(&pge, &pgej);\n     ge_equals_gej(&pge, &pgej2);\n }\n \n static void test_ecmult_gen_blind_reset(void) {\n     /* Test ecmult_gen() blinding reset and confirm that the blinding is consistent. */\n     secp256k1_scalar b;\n-    secp256k1_gej initial;\n+    secp256k1_ge final1, final2;\n     secp256k1_ecmult_gen_blind(&CTX->ecmult_gen_ctx, 0);\n-    b = CTX->ecmult_gen_ctx.blind;\n-    initial = CTX->ecmult_gen_ctx.initial;\n+    b = CTX->ecmult_gen_ctx.scalar_offset;\n+    final1 = CTX->ecmult_gen_ctx.final_point_add;\n+    secp256k1_fe_normalize_var(&final1.y);\n     secp256k1_ecmult_gen_blind(&CTX->ecmult_gen_ctx, 0);\n-    CHECK(secp256k1_scalar_eq(&b, &CTX->ecmult_gen_ctx.blind));\n-    CHECK(gej_xyz_equals_gej(&initial, &CTX->ecmult_gen_ctx.initial));\n+    CHECK(secp256k1_scalar_eq(&b, &CTX->ecmult_gen_ctx.scalar_offset));\n+    final2 = CTX->ecmult_gen_ctx.final_point_add;\n+    secp256k1_fe_normalize_var(&final2.y);\n+    ge_equals_ge(&final1, &final2);",
      "path": "src/tests.c",
      "position": null,
      "original_position": 73,
      "commit_id": "dcc846f18518f77770b6a1fc9e39683c63685d39",
      "original_commit_id": "764efa4eb4bd6ddc18262e79192ed9802c3f8eb1",
      "in_reply_to_id": null,
      "user": {
        "login": "stratospher",
        "id": 44024636,
        "node_id": "MDQ6VXNlcjQ0MDI0NjM2",
        "avatar_url": "https://avatars.githubusercontent.com/u/44024636?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stratospher",
        "html_url": "https://github.com/stratospher",
        "followers_url": "https://api.github.com/users/stratospher/followers",
        "following_url": "https://api.github.com/users/stratospher/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stratospher/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stratospher/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stratospher/subscriptions",
        "organizations_url": "https://api.github.com/users/stratospher/orgs",
        "repos_url": "https://api.github.com/users/stratospher/repos",
        "events_url": "https://api.github.com/users/stratospher/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stratospher/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "764efa4: the new function introduced - `ge_cmp_ge(a, b)` is `ge_equals_ge(a, b)` with more safety checks to make sure that the first `ge` argument (`a`) passed has both `a->x` and `a->y` normalised right? (for `secp256k1_fe_equal` verify checks)\r\n\r\n1. can't we use `ge_cmp_ge` here?\r\n2. if we're using `ge_equals_ge`, shouldn't `final1.x` and `final1.y` be normalised instead of `final1.y` and `final2.y`?",
      "created_at": "2023-12-01T05:26:53Z",
      "updated_at": "2023-12-01T06:06:32Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1058#discussion_r1411626664",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1411626664"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1058"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 5592,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1411645481",
      "pull_request_review_id": 1759044478,
      "id": 1411645481,
      "node_id": "PRRC_kwDOAP4Jqs5UJAAp",
      "diff_hunk": "@@ -171,17 +171,19 @@ static SECP256K1_INLINE void secp256k1_scalar_cmov(secp256k1_scalar *r, const se\n \n static void secp256k1_scalar_inverse(secp256k1_scalar *r, const secp256k1_scalar *x) {\n     int i;\n-    *r = 0;\n+    uint32_t res = 0;\n     secp256k1_scalar_verify(x);\n \n-    for (i = 0; i < EXHAUSTIVE_TEST_ORDER; i++)\n-        if ((i * *x) % EXHAUSTIVE_TEST_ORDER == 1)\n-            *r = i;\n-\n-    secp256k1_scalar_verify(r);\n+    for (i = 0; i < EXHAUSTIVE_TEST_ORDER; i++) {\n+        if ((i * *x) % EXHAUSTIVE_TEST_ORDER == 1) {\n+            res = i;\n+            break;\n+        }\n+    }\n     /* If this VERIFY_CHECK triggers we were given a noninvertible scalar (and thus\n      * have a composite group order; fix it in exhaustive_tests.c). */\n-    VERIFY_CHECK(*r != 0);\n+    VERIFY_CHECK(res != 0);\n+    *r = res;",
      "path": "src/scalar_low_impl.h",
      "position": 51,
      "original_position": 23,
      "commit_id": "dcc846f18518f77770b6a1fc9e39683c63685d39",
      "original_commit_id": "0cfa60b503c3fe10f471d9335d277a31a0b2bf7d",
      "in_reply_to_id": null,
      "user": {
        "login": "stratospher",
        "id": 44024636,
        "node_id": "MDQ6VXNlcjQ0MDI0NjM2",
        "avatar_url": "https://avatars.githubusercontent.com/u/44024636?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stratospher",
        "html_url": "https://github.com/stratospher",
        "followers_url": "https://api.github.com/users/stratospher/followers",
        "following_url": "https://api.github.com/users/stratospher/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stratospher/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stratospher/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stratospher/subscriptions",
        "organizations_url": "https://api.github.com/users/stratospher/orgs",
        "repos_url": "https://api.github.com/users/stratospher/repos",
        "events_url": "https://api.github.com/users/stratospher/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stratospher/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "0cfa60b: we could keep `secp256k1_scalar_verify(r);` in the end.",
      "created_at": "2023-12-01T05:56:39Z",
      "updated_at": "2023-12-01T06:06:32Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1058#discussion_r1411645481",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1411645481"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1058"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 187,
      "original_line": 187,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1412350546",
      "pull_request_review_id": 1760207865,
      "id": 1412350546,
      "node_id": "PRRC_kwDOAP4Jqs5ULsJS",
      "diff_hunk": "@@ -5548,32 +5561,35 @@ static void test_ecmult_gen_blind(void) {\n     unsigned char seed32[32];\n     secp256k1_gej pgej;\n     secp256k1_gej pgej2;\n-    secp256k1_gej i;\n+    secp256k1_ge f;\n     secp256k1_ge pge;\n     random_scalar_order_test(&key);\n     secp256k1_ecmult_gen(&CTX->ecmult_gen_ctx, &pgej, &key);\n     secp256k1_testrand256(seed32);\n-    b = CTX->ecmult_gen_ctx.blind;\n-    i = CTX->ecmult_gen_ctx.initial;\n+    b = CTX->ecmult_gen_ctx.scalar_offset;\n+    f = CTX->ecmult_gen_ctx.final_point_add;\n     secp256k1_ecmult_gen_blind(&CTX->ecmult_gen_ctx, seed32);\n-    CHECK(!secp256k1_scalar_eq(&b, &CTX->ecmult_gen_ctx.blind));\n+    CHECK(!secp256k1_scalar_eq(&b, &CTX->ecmult_gen_ctx.scalar_offset));\n     secp256k1_ecmult_gen(&CTX->ecmult_gen_ctx, &pgej2, &key);\n     CHECK(!gej_xyz_equals_gej(&pgej, &pgej2));\n-    CHECK(!gej_xyz_equals_gej(&i, &CTX->ecmult_gen_ctx.initial));\n+    CHECK(!ge_cmp_ge(&f, &CTX->ecmult_gen_ctx.final_point_add));\n     secp256k1_ge_set_gej(&pge, &pgej);\n     ge_equals_gej(&pge, &pgej2);\n }\n \n static void test_ecmult_gen_blind_reset(void) {\n     /* Test ecmult_gen() blinding reset and confirm that the blinding is consistent. */\n     secp256k1_scalar b;\n-    secp256k1_gej initial;\n+    secp256k1_ge final1, final2;\n     secp256k1_ecmult_gen_blind(&CTX->ecmult_gen_ctx, 0);\n-    b = CTX->ecmult_gen_ctx.blind;\n-    initial = CTX->ecmult_gen_ctx.initial;\n+    b = CTX->ecmult_gen_ctx.scalar_offset;\n+    final1 = CTX->ecmult_gen_ctx.final_point_add;\n+    secp256k1_fe_normalize_var(&final1.y);\n     secp256k1_ecmult_gen_blind(&CTX->ecmult_gen_ctx, 0);\n-    CHECK(secp256k1_scalar_eq(&b, &CTX->ecmult_gen_ctx.blind));\n-    CHECK(gej_xyz_equals_gej(&initial, &CTX->ecmult_gen_ctx.initial));\n+    CHECK(secp256k1_scalar_eq(&b, &CTX->ecmult_gen_ctx.scalar_offset));\n+    final2 = CTX->ecmult_gen_ctx.final_point_add;\n+    secp256k1_fe_normalize_var(&final2.y);\n+    ge_equals_ge(&final1, &final2);",
      "path": "src/tests.c",
      "position": null,
      "original_position": 73,
      "commit_id": "dcc846f18518f77770b6a1fc9e39683c63685d39",
      "original_commit_id": "764efa4eb4bd6ddc18262e79192ed9802c3f8eb1",
      "in_reply_to_id": 1411626664,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Ok, this comment made me take the time to just get rid of these strange test-only functions. See #1450.",
      "created_at": "2023-12-01T16:45:28Z",
      "updated_at": "2023-12-01T16:45:29Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1058#discussion_r1412350546",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1412350546"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1058"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 5592,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1412811395",
      "pull_request_review_id": 1760882853,
      "id": 1412811395,
      "node_id": "PRRC_kwDOAP4Jqs5UNcqD",
      "diff_hunk": "@@ -171,17 +171,19 @@ static SECP256K1_INLINE void secp256k1_scalar_cmov(secp256k1_scalar *r, const se\n \n static void secp256k1_scalar_inverse(secp256k1_scalar *r, const secp256k1_scalar *x) {\n     int i;\n-    *r = 0;\n+    uint32_t res = 0;\n     secp256k1_scalar_verify(x);\n \n-    for (i = 0; i < EXHAUSTIVE_TEST_ORDER; i++)\n-        if ((i * *x) % EXHAUSTIVE_TEST_ORDER == 1)\n-            *r = i;\n-\n-    secp256k1_scalar_verify(r);\n+    for (i = 0; i < EXHAUSTIVE_TEST_ORDER; i++) {\n+        if ((i * *x) % EXHAUSTIVE_TEST_ORDER == 1) {\n+            res = i;\n+            break;\n+        }\n+    }\n     /* If this VERIFY_CHECK triggers we were given a noninvertible scalar (and thus\n      * have a composite group order; fix it in exhaustive_tests.c). */\n-    VERIFY_CHECK(*r != 0);\n+    VERIFY_CHECK(res != 0);\n+    *r = res;",
      "path": "src/scalar_low_impl.h",
      "position": 51,
      "original_position": 23,
      "commit_id": "dcc846f18518f77770b6a1fc9e39683c63685d39",
      "original_commit_id": "0cfa60b503c3fe10f471d9335d277a31a0b2bf7d",
      "in_reply_to_id": 1411645481,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done.",
      "created_at": "2023-12-02T14:57:17Z",
      "updated_at": "2023-12-02T14:57:17Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1058#discussion_r1412811395",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1412811395"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1058"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 187,
      "original_line": 187,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1413425449",
      "pull_request_review_id": 1761684466,
      "id": 1413425449,
      "node_id": "PRRC_kwDOAP4Jqs5UPykp",
      "diff_hunk": "@@ -29,38 +29,154 @@ static void secp256k1_ecmult_gen_context_clear(secp256k1_ecmult_gen_context *ctx\n     secp256k1_ge_clear(&ctx->final_point_add);\n }\n \n-/* For accelerating the computation of a*G:\n- * To harden against timing attacks, use the following mechanism:\n- * * Break up the multiplicand into groups of PREC_BITS bits, called n_0, n_1, n_2, ..., n_(PREC_N-1).\n- * * Compute sum(n_i * (PREC_G)^i * G + U_i, i=0 ... PREC_N-1), where:\n- *   * U_i = U * 2^i, for i=0 ... PREC_N-2\n- *   * U_i = U * (1-2^(PREC_N-1)), for i=PREC_N-1\n- *   where U is a point with no known corresponding scalar. Note that sum(U_i, i=0 ... PREC_N-1) = 0.\n- * For each i, and each of the PREC_G possible values of n_i, (n_i * (PREC_G)^i * G + U_i) is\n- * precomputed (call it prec(i, n_i)). The formula now becomes sum(prec(i, n_i), i=0 ... PREC_N-1).\n- * None of the resulting prec group elements have a known scalar, and neither do any of\n- * the intermediate sums while computing a*G.\n- * The prec values are stored in secp256k1_ecmult_gen_prec_table[i][n_i] = n_i * (PREC_G)^i * G + U_i.\n- */\n-static void secp256k1_ecmult_gen(const secp256k1_ecmult_gen_context *ctx, secp256k1_gej *r, const secp256k1_scalar *gn) {\n-    int bits = ECMULT_GEN_PREC_BITS;\n-    int g = ECMULT_GEN_PREC_G(bits);\n-    int n = ECMULT_GEN_PREC_N(bits);\n+/* Compute the scalar (2^COMB_BITS - 1) / 2. */\n+static void secp256k1_ecmult_gen_scalar_diff(secp256k1_scalar* diff) {\n+    int i;\n+\n+    /* Compute scalar -1/2. */\n+    secp256k1_scalar neghalf = SECP256K1_SCALAR_CONST(0, 0, 0, 0, 0, 0, 0, 2);\n+    secp256k1_scalar_inverse_var(&neghalf, &neghalf);\n+    secp256k1_scalar_negate(&neghalf, &neghalf);\n+\n+    /* Compute offset = 2^(COMB_BITS - 1). */\n+    secp256k1_scalar_set_int(diff, 1);\n+    for (i = 0; i < COMB_BITS - 1; ++i) {\n+        secp256k1_scalar_add(diff, diff, diff);\n+    }\n \n+    /* The result is the sum of 2^(COMB_BITS - 1) + (-1/2). */\n+    secp256k1_scalar_add(diff, diff, &neghalf);\n+}\n+\n+static void secp256k1_ecmult_gen(const secp256k1_ecmult_gen_context *ctx, secp256k1_gej *r, const secp256k1_scalar *gn) {\n+    uint32_t comb_off;\n     secp256k1_ge add;\n+    secp256k1_fe neg;\n     secp256k1_ge_storage adds;\n-    secp256k1_scalar gnb;\n-    int i, j, n_i;\n+    secp256k1_scalar recoded;\n \n     memset(&adds, 0, sizeof(adds));\n     secp256k1_gej_set_infinity(r);\n \n-    /* Blind scalar/point multiplication by computing (gn-b)*G + b*G instead of gn*G. */\n-    secp256k1_scalar_add(&gnb, gn, &ctx->scalar_offset);\n+    /* We want to compute R = gn*G.\n+     *\n+     * To blind the scalar used in the computation, we rewrite this to be R = (gn-b)*G + b*G, with\n+     * a value b determined by the context. b*G is precomputed as ctx->final_point_add, so we're\n+     * left with computing R = (gn-b)*G + ctx->final_point_add.\n+     *\n+     * The multiplication (gn-b)*G will be performed using a signed-digit multi-comb (see Section\n+     * 3.3 of \"Fast and compact elliptic-curve cryptography\" by Mike Hamburg\n+     * (https://eprint.iacr.org/2012/309).\n+     *\n+     * Let comb(s,P) = sum((2*s_i-1)*2^i*P for i=0..COMB_BITS-1), where s_i is the i'th bit of the\n+     * binary representation of scalar s. So the s_i values determine whether -2^i*P (s_i=0) or\n+     * +2^i*P (s_1) are added together. By manipulating:\n+     *\n+     *     comb(s,P) = sum((2*s_i-1)*2^i*P for i=0..COMB_BITS-1)\n+     * <=> comb(s,P) = sum((2*s_i-1)*2^i for i=0..COMB_BITS-1) * P\n+     * <=> comb(s,P) = (2*sum(s_i*2^i for i=0..COMB_BITS-1) - sum(2^i for i=0..COMB_BITS-1)) * P\n+     * <=> comb(s,P) = (2*s - (2^COMB_BITS - 1)) * P\n+     *\n+     * Thus (gn-b)*G can be written as comb(s,G) if gn-b = 2*s - (2^COMB_BITS - 1), or\n+     * s = (gn - b + (2^COMB_BITS - 1))/2 mod order.\n+     *\n+     * We use an alternative that avoids the modular division by two: we write (gn-b)*G =\n+     * comb(d,G/2). For that to hold it must be the case that\n+     * (gn-b)*G = (2*d + 2^COMB_BITS - 1) * (G/2), or",
      "path": "src/ecmult_gen_impl.h",
      "position": null,
      "original_position": 92,
      "commit_id": "dcc846f18518f77770b6a1fc9e39683c63685d39",
      "original_commit_id": "9fccdf352911d8a463aba09e3ece5e01d5c226c4",
      "in_reply_to_id": null,
      "user": {
        "login": "stratospher",
        "id": 44024636,
        "node_id": "MDQ6VXNlcjQ0MDI0NjM2",
        "avatar_url": "https://avatars.githubusercontent.com/u/44024636?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stratospher",
        "html_url": "https://github.com/stratospher",
        "followers_url": "https://api.github.com/users/stratospher/followers",
        "following_url": "https://api.github.com/users/stratospher/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stratospher/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stratospher/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stratospher/subscriptions",
        "organizations_url": "https://api.github.com/users/stratospher/orgs",
        "repos_url": "https://api.github.com/users/stratospher/repos",
        "events_url": "https://api.github.com/users/stratospher/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stratospher/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "9fccdf3:\r\n```suggestion\r\n     * (gn-b)*G = (2*d - 2^COMB_BITS + 1) * (G/2), or\r\n```",
      "created_at": "2023-12-04T06:37:49Z",
      "updated_at": "2024-03-10T14:19:56Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1058#discussion_r1413425449",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1413425449"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1058"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 89,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1446984133",
      "pull_request_review_id": 1761684466,
      "id": 1446984133,
      "node_id": "PRRC_kwDOAP4Jqs5WPznF",
      "diff_hunk": "@@ -1,83 +1,94 @@\n-/***********************************************************************\n- * Copyright (c) 2013, 2014, 2015 Pieter Wuille, Gregory Maxwell       *\n- * Distributed under the MIT software license, see the accompanying    *\n- * file COPYING or https://www.opensource.org/licenses/mit-license.php.*\n- ***********************************************************************/\n+/*******************************************************************************\n+ * Copyright (c) 2013-2015, 2021 Pieter Wuille, Gregory Maxwell, Peter Dettman *\n+ * Distributed under the MIT software license, see the accompanying            *\n+ * file COPYING or https://www.opensource.org/licenses/mit-license.php.        *\n+ *******************************************************************************/\n \n #ifndef SECP256K1_ECMULT_GEN_COMPUTE_TABLE_IMPL_H\n #define SECP256K1_ECMULT_GEN_COMPUTE_TABLE_IMPL_H\n \n #include \"ecmult_gen_compute_table.h\"\n #include \"group_impl.h\"\n #include \"field_impl.h\"\n+#include \"scalar_impl.h\"\n #include \"ecmult_gen.h\"\n #include \"util.h\"\n \n-static void secp256k1_ecmult_gen_compute_table(secp256k1_ge_storage* table, const secp256k1_ge* gen, int bits) {\n-    int g = ECMULT_GEN_PREC_G(bits);\n-    int n = ECMULT_GEN_PREC_N(bits);\n+static void secp256k1_ecmult_gen_compute_table(secp256k1_ge_storage* table, const secp256k1_ge* gen, int blocks, int teeth) {\n+    size_t points = ((size_t)1) << (teeth - 1);\n+    size_t points_total = points * blocks;\n+    int spacing = (256 + blocks * teeth - 1) / (blocks * teeth);\n+    secp256k1_ge* prec = checked_malloc(&default_error_callback, points_total * sizeof(*prec));\n+    secp256k1_gej* ds = checked_malloc(&default_error_callback, teeth * sizeof(*ds));\n+    secp256k1_gej* vs = checked_malloc(&default_error_callback, points_total * sizeof(*vs));\n+    secp256k1_gej u;\n+    size_t vs_pos = 0;\n+    secp256k1_scalar half = SECP256K1_SCALAR_CONST(0, 0, 0, 0, 0, 0, 0, 2);\n+    int block, i;\n \n-    secp256k1_ge* prec = checked_malloc(&default_error_callback, n * g * sizeof(*prec));\n-    secp256k1_gej gj;\n-    secp256k1_gej nums_gej;\n-    int i, j;\n-\n-    VERIFY_CHECK(g > 0);\n-    VERIFY_CHECK(n > 0);\n-\n-    /* get the generator */\n-    secp256k1_gej_set_ge(&gj, gen);\n-\n-    /* Construct a group element with no known corresponding scalar (nothing up my sleeve). */\n-    {\n-        static const unsigned char nums_b32[33] = \"The scalar for this x is unknown\";\n-        secp256k1_fe nums_x;\n-        secp256k1_ge nums_ge;\n-        int r;\n-        r = secp256k1_fe_set_b32_limit(&nums_x, nums_b32);\n-        (void)r;\n-        VERIFY_CHECK(r);\n-        r = secp256k1_ge_set_xo_var(&nums_ge, &nums_x, 0);\n-        (void)r;\n-        VERIFY_CHECK(r);\n-        secp256k1_gej_set_ge(&nums_gej, &nums_ge);\n-        /* Add G to make the bits in x uniformly distributed. */\n-        secp256k1_gej_add_ge_var(&nums_gej, &nums_gej, gen, NULL);\n+    /* u is the running power of two times gen we're working with, initially gen/2. */\n+    secp256k1_scalar_inverse_var(&half, &half);\n+    secp256k1_gej_set_infinity(&u);\n+    for (i = 255; i >= 0; --i) {\n+        /* Use a very simple multiplication ladder to avoid dependency on ecmult. */\n+        secp256k1_gej_double_var(&u, &u, NULL);\n+        if (secp256k1_scalar_get_bits(&half, i, 1)) {\n+            secp256k1_gej_add_ge_var(&u, &u, gen, NULL);\n+        }\n     }\n \n-    /* compute prec. */\n-    {\n-        secp256k1_gej gbase;\n-        secp256k1_gej numsbase;\n-        secp256k1_gej* precj = checked_malloc(&default_error_callback, n * g * sizeof(*precj));  /* Jacobian versions of prec. */\n-        gbase = gj; /* PREC_G^j * G */\n-        numsbase = nums_gej; /* 2^j * nums. */\n-        for (j = 0; j < n; j++) {\n-            /* Set precj[j*PREC_G .. j*PREC_G+(PREC_G-1)] to (numsbase, numsbase + gbase, ..., numsbase + (PREC_G-1)*gbase). */\n-            precj[j*g] = numsbase;\n-            for (i = 1; i < g; i++) {\n-                secp256k1_gej_add_var(&precj[j*g + i], &precj[j*g + i - 1], &gbase, NULL);\n-            }\n-            /* Multiply gbase by PREC_G. */\n-            for (i = 0; i < bits; i++) {\n-                secp256k1_gej_double_var(&gbase, &gbase, NULL);\n+    for (block = 0; block < blocks; ++block) {\n+        int tooth;\n+        /* Here u = 2^(block*teeth*spacing) * gen/2. */\n+        secp256k1_gej sum;\n+        secp256k1_gej_set_infinity(&sum);\n+        for (tooth = 0; tooth < teeth; ++tooth) {\n+            /* Here u = 2^((block*teeth + tooth)*spacing) * gen/2. */\n+            int bit_off;\n+            /* Make sum = sum(2^((block*teeth + t)*spacing), t=0..tooth). */\n+            secp256k1_gej_add_var(&sum, &sum, &u, NULL);\n+            /* Make u = 2^((block*teeth + tooth)*spacing + 1) * gen/2. */\n+            secp256k1_gej_double_var(&u, &u, NULL);\n+            /* Make ds[tooth] = u = 2^((block*teeth + tooth)*spacing + 1) * gen/2. */\n+            ds[tooth] = u;\n+            /* Make u = 2^((block*teeth + tooth + 1)*spacing). */\n+            for (bit_off = 1; bit_off < spacing; ++bit_off) {\n+                secp256k1_gej_double_var(&u, &u, NULL);\n             }\n-            /* Multiply numbase by 2. */\n-            secp256k1_gej_double_var(&numsbase, &numsbase, NULL);\n-            if (j == n - 2) {\n-                /* In the last iteration, numsbase is (1 - 2^j) * nums instead. */\n-                secp256k1_gej_neg(&numsbase, &numsbase);\n-                secp256k1_gej_add_var(&numsbase, &numsbase, &nums_gej, NULL);\n+        }\n+        /* Now u = 2^(block*(teeth + 1)*spacing) * gen/2. */",
      "path": "src/ecmult_gen_compute_table_impl.h",
      "position": null,
      "original_position": 115,
      "commit_id": "dcc846f18518f77770b6a1fc9e39683c63685d39",
      "original_commit_id": "da73fd9d51137e59f2a4f13807501ee23cc64956",
      "in_reply_to_id": null,
      "user": {
        "login": "stratospher",
        "id": 44024636,
        "node_id": "MDQ6VXNlcjQ0MDI0NjM2",
        "avatar_url": "https://avatars.githubusercontent.com/u/44024636?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stratospher",
        "html_url": "https://github.com/stratospher",
        "followers_url": "https://api.github.com/users/stratospher/followers",
        "following_url": "https://api.github.com/users/stratospher/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stratospher/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stratospher/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stratospher/subscriptions",
        "organizations_url": "https://api.github.com/users/stratospher/orgs",
        "repos_url": "https://api.github.com/users/stratospher/repos",
        "events_url": "https://api.github.com/users/stratospher/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stratospher/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "da73fd9: block+1 would become next iteration's block\r\n```suggestion\r\n        /* Now u = 2^((block + 1)*teeth*spacing) * gen/2. */\r\n```",
      "created_at": "2024-01-10T07:32:42Z",
      "updated_at": "2024-03-10T14:19:56Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1058#discussion_r1446984133",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1446984133"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1058"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 59,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1448201103",
      "pull_request_review_id": 1761684466,
      "id": 1448201103,
      "node_id": "PRRC_kwDOAP4Jqs5WUcuP",
      "diff_hunk": "@@ -29,38 +29,154 @@ static void secp256k1_ecmult_gen_context_clear(secp256k1_ecmult_gen_context *ctx\n     secp256k1_ge_clear(&ctx->final_point_add);\n }\n \n-/* For accelerating the computation of a*G:\n- * To harden against timing attacks, use the following mechanism:\n- * * Break up the multiplicand into groups of PREC_BITS bits, called n_0, n_1, n_2, ..., n_(PREC_N-1).\n- * * Compute sum(n_i * (PREC_G)^i * G + U_i, i=0 ... PREC_N-1), where:\n- *   * U_i = U * 2^i, for i=0 ... PREC_N-2\n- *   * U_i = U * (1-2^(PREC_N-1)), for i=PREC_N-1\n- *   where U is a point with no known corresponding scalar. Note that sum(U_i, i=0 ... PREC_N-1) = 0.\n- * For each i, and each of the PREC_G possible values of n_i, (n_i * (PREC_G)^i * G + U_i) is\n- * precomputed (call it prec(i, n_i)). The formula now becomes sum(prec(i, n_i), i=0 ... PREC_N-1).\n- * None of the resulting prec group elements have a known scalar, and neither do any of\n- * the intermediate sums while computing a*G.\n- * The prec values are stored in secp256k1_ecmult_gen_prec_table[i][n_i] = n_i * (PREC_G)^i * G + U_i.\n- */\n-static void secp256k1_ecmult_gen(const secp256k1_ecmult_gen_context *ctx, secp256k1_gej *r, const secp256k1_scalar *gn) {\n-    int bits = ECMULT_GEN_PREC_BITS;\n-    int g = ECMULT_GEN_PREC_G(bits);\n-    int n = ECMULT_GEN_PREC_N(bits);\n+/* Compute the scalar (2^COMB_BITS - 1) / 2. */\n+static void secp256k1_ecmult_gen_scalar_diff(secp256k1_scalar* diff) {\n+    int i;\n+\n+    /* Compute scalar -1/2. */\n+    secp256k1_scalar neghalf = SECP256K1_SCALAR_CONST(0, 0, 0, 0, 0, 0, 0, 2);\n+    secp256k1_scalar_inverse_var(&neghalf, &neghalf);\n+    secp256k1_scalar_negate(&neghalf, &neghalf);\n+\n+    /* Compute offset = 2^(COMB_BITS - 1). */\n+    secp256k1_scalar_set_int(diff, 1);\n+    for (i = 0; i < COMB_BITS - 1; ++i) {\n+        secp256k1_scalar_add(diff, diff, diff);\n+    }\n \n+    /* The result is the sum of 2^(COMB_BITS - 1) + (-1/2). */\n+    secp256k1_scalar_add(diff, diff, &neghalf);\n+}\n+\n+static void secp256k1_ecmult_gen(const secp256k1_ecmult_gen_context *ctx, secp256k1_gej *r, const secp256k1_scalar *gn) {\n+    uint32_t comb_off;\n     secp256k1_ge add;\n+    secp256k1_fe neg;\n     secp256k1_ge_storage adds;\n-    secp256k1_scalar gnb;\n-    int i, j, n_i;\n+    secp256k1_scalar recoded;\n \n     memset(&adds, 0, sizeof(adds));\n     secp256k1_gej_set_infinity(r);\n \n-    /* Blind scalar/point multiplication by computing (gn-b)*G + b*G instead of gn*G. */\n-    secp256k1_scalar_add(&gnb, gn, &ctx->scalar_offset);\n+    /* We want to compute R = gn*G.\n+     *\n+     * To blind the scalar used in the computation, we rewrite this to be R = (gn-b)*G + b*G, with\n+     * a value b determined by the context. b*G is precomputed as ctx->final_point_add, so we're\n+     * left with computing R = (gn-b)*G + ctx->final_point_add.\n+     *\n+     * The multiplication (gn-b)*G will be performed using a signed-digit multi-comb (see Section\n+     * 3.3 of \"Fast and compact elliptic-curve cryptography\" by Mike Hamburg\n+     * (https://eprint.iacr.org/2012/309).\n+     *\n+     * Let comb(s,P) = sum((2*s_i-1)*2^i*P for i=0..COMB_BITS-1), where s_i is the i'th bit of the\n+     * binary representation of scalar s. So the s_i values determine whether -2^i*P (s_i=0) or\n+     * +2^i*P (s_1) are added together. By manipulating:\n+     *\n+     *     comb(s,P) = sum((2*s_i-1)*2^i*P for i=0..COMB_BITS-1)\n+     * <=> comb(s,P) = sum((2*s_i-1)*2^i for i=0..COMB_BITS-1) * P\n+     * <=> comb(s,P) = (2*sum(s_i*2^i for i=0..COMB_BITS-1) - sum(2^i for i=0..COMB_BITS-1)) * P\n+     * <=> comb(s,P) = (2*s - (2^COMB_BITS - 1)) * P\n+     *\n+     * Thus (gn-b)*G can be written as comb(s,G) if gn-b = 2*s - (2^COMB_BITS - 1), or\n+     * s = (gn - b + (2^COMB_BITS - 1))/2 mod order.\n+     *\n+     * We use an alternative that avoids the modular division by two: we write (gn-b)*G =\n+     * comb(d,G/2). For that to hold it must be the case that\n+     * (gn-b)*G = (2*d + 2^COMB_BITS - 1) * (G/2), or\n+     * d = (gn + (2^COMB_BITS - 1)/2 - b) mod order.\n+     *\n+     * -b is precomputed as ctx->scalar_offset, so our final equations become:\n+     *\n+     *   d = gn + ctx->scalar_offset + (2^COMB_BITS - 1)/2 (mod order)\n+     *   R = comb(d, G/2) + ctx->final_point_add.\n+     *\n+     * The comb function is computed by summing + or - 2^(i-1)*G, for i=0..COMB_BITS-1, depending\n+     * on the value of the bits d_i of the binary representation of scalar d.\n+     */\n+\n+    /* Compute the scalar (gn + ctx->scalar_offset + (2^COMB_BITS - 1)/2). */\n+    secp256k1_ecmult_gen_scalar_diff(&recoded);\n+    secp256k1_scalar_add(&recoded, &recoded, &ctx->scalar_offset);\n+    secp256k1_scalar_add(&recoded, &recoded, gn);\n+\n+    /* In secp256k1_ecmult_gen_prec_table we have precomputed sums of the\n+     * (2*d_i-1) * 2^(i-1) * G points, for various combinations of i positions.\n+     * We rewrite our equation in terms of these table entries.\n+     *\n+     * Let mask(b) = sum(2^(b*COMB_TEETH + t)*COMB_SPACING for t=0..COMB_TEETH-1),",
      "path": "src/ecmult_gen_impl.h",
      "position": null,
      "original_position": 113,
      "commit_id": "dcc846f18518f77770b6a1fc9e39683c63685d39",
      "original_commit_id": "da73fd9d51137e59f2a4f13807501ee23cc64956",
      "in_reply_to_id": null,
      "user": {
        "login": "stratospher",
        "id": 44024636,
        "node_id": "MDQ6VXNlcjQ0MDI0NjM2",
        "avatar_url": "https://avatars.githubusercontent.com/u/44024636?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stratospher",
        "html_url": "https://github.com/stratospher",
        "followers_url": "https://api.github.com/users/stratospher/followers",
        "following_url": "https://api.github.com/users/stratospher/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stratospher/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stratospher/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stratospher/subscriptions",
        "organizations_url": "https://api.github.com/users/stratospher/orgs",
        "repos_url": "https://api.github.com/users/stratospher/repos",
        "events_url": "https://api.github.com/users/stratospher/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stratospher/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "da73fd9:\r\n```suggestion\r\n     * Let mask(b) = sum(2^((b*COMB_TEETH + t)*COMB_SPACING) for t=0..COMB_TEETH-1),\r\n```",
      "created_at": "2024-01-11T02:10:58Z",
      "updated_at": "2024-03-10T14:19:56Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1058#discussion_r1448201103",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1448201103"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1058"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 106,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1518533789",
      "pull_request_review_id": 1761684466,
      "id": 1518533789,
      "node_id": "PRRC_kwDOAP4Jqs5agvyd",
      "diff_hunk": "@@ -1,83 +1,94 @@\n-/***********************************************************************\n- * Copyright (c) 2013, 2014, 2015 Pieter Wuille, Gregory Maxwell       *\n- * Distributed under the MIT software license, see the accompanying    *\n- * file COPYING or https://www.opensource.org/licenses/mit-license.php.*\n- ***********************************************************************/\n+/*******************************************************************************\n+ * Copyright (c) 2013-2015, 2021 Pieter Wuille, Gregory Maxwell, Peter Dettman *\n+ * Distributed under the MIT software license, see the accompanying            *\n+ * file COPYING or https://www.opensource.org/licenses/mit-license.php.        *\n+ *******************************************************************************/\n \n #ifndef SECP256K1_ECMULT_GEN_COMPUTE_TABLE_IMPL_H\n #define SECP256K1_ECMULT_GEN_COMPUTE_TABLE_IMPL_H\n \n #include \"ecmult_gen_compute_table.h\"\n #include \"group_impl.h\"\n #include \"field_impl.h\"\n+#include \"scalar_impl.h\"\n #include \"ecmult_gen.h\"\n #include \"util.h\"\n \n-static void secp256k1_ecmult_gen_compute_table(secp256k1_ge_storage* table, const secp256k1_ge* gen, int bits) {\n-    int g = ECMULT_GEN_PREC_G(bits);\n-    int n = ECMULT_GEN_PREC_N(bits);\n+static void secp256k1_ecmult_gen_compute_table(secp256k1_ge_storage* table, const secp256k1_ge* gen, int blocks, int teeth) {\n+    size_t points = ((size_t)1) << (teeth - 1);\n+    size_t points_total = points * blocks;\n+    int spacing = (256 + blocks * teeth - 1) / (blocks * teeth);\n+    secp256k1_ge* prec = checked_malloc(&default_error_callback, points_total * sizeof(*prec));\n+    secp256k1_gej* ds = checked_malloc(&default_error_callback, teeth * sizeof(*ds));\n+    secp256k1_gej* vs = checked_malloc(&default_error_callback, points_total * sizeof(*vs));\n+    secp256k1_gej u;\n+    size_t vs_pos = 0;\n+    secp256k1_scalar half = SECP256K1_SCALAR_CONST(0, 0, 0, 0, 0, 0, 0, 2);\n+    int block, i;\n \n-    secp256k1_ge* prec = checked_malloc(&default_error_callback, n * g * sizeof(*prec));\n-    secp256k1_gej gj;\n-    secp256k1_gej nums_gej;\n-    int i, j;\n-\n-    VERIFY_CHECK(g > 0);\n-    VERIFY_CHECK(n > 0);\n-\n-    /* get the generator */\n-    secp256k1_gej_set_ge(&gj, gen);\n-\n-    /* Construct a group element with no known corresponding scalar (nothing up my sleeve). */\n-    {\n-        static const unsigned char nums_b32[33] = \"The scalar for this x is unknown\";\n-        secp256k1_fe nums_x;\n-        secp256k1_ge nums_ge;\n-        int r;\n-        r = secp256k1_fe_set_b32_limit(&nums_x, nums_b32);\n-        (void)r;\n-        VERIFY_CHECK(r);\n-        r = secp256k1_ge_set_xo_var(&nums_ge, &nums_x, 0);\n-        (void)r;\n-        VERIFY_CHECK(r);\n-        secp256k1_gej_set_ge(&nums_gej, &nums_ge);\n-        /* Add G to make the bits in x uniformly distributed. */\n-        secp256k1_gej_add_ge_var(&nums_gej, &nums_gej, gen, NULL);\n+    /* u is the running power of two times gen we're working with, initially gen/2. */\n+    secp256k1_scalar_inverse_var(&half, &half);\n+    secp256k1_gej_set_infinity(&u);\n+    for (i = 255; i >= 0; --i) {\n+        /* Use a very simple multiplication ladder to avoid dependency on ecmult. */\n+        secp256k1_gej_double_var(&u, &u, NULL);\n+        if (secp256k1_scalar_get_bits(&half, i, 1)) {\n+            secp256k1_gej_add_ge_var(&u, &u, gen, NULL);\n+        }\n     }\n \n-    /* compute prec. */\n-    {\n-        secp256k1_gej gbase;\n-        secp256k1_gej numsbase;\n-        secp256k1_gej* precj = checked_malloc(&default_error_callback, n * g * sizeof(*precj));  /* Jacobian versions of prec. */\n-        gbase = gj; /* PREC_G^j * G */\n-        numsbase = nums_gej; /* 2^j * nums. */\n-        for (j = 0; j < n; j++) {\n-            /* Set precj[j*PREC_G .. j*PREC_G+(PREC_G-1)] to (numsbase, numsbase + gbase, ..., numsbase + (PREC_G-1)*gbase). */\n-            precj[j*g] = numsbase;\n-            for (i = 1; i < g; i++) {\n-                secp256k1_gej_add_var(&precj[j*g + i], &precj[j*g + i - 1], &gbase, NULL);\n-            }\n-            /* Multiply gbase by PREC_G. */\n-            for (i = 0; i < bits; i++) {\n-                secp256k1_gej_double_var(&gbase, &gbase, NULL);\n+    for (block = 0; block < blocks; ++block) {\n+        int tooth;\n+        /* Here u = 2^(block*teeth*spacing) * gen/2. */\n+        secp256k1_gej sum;\n+        secp256k1_gej_set_infinity(&sum);\n+        for (tooth = 0; tooth < teeth; ++tooth) {\n+            /* Here u = 2^((block*teeth + tooth)*spacing) * gen/2. */\n+            int bit_off;\n+            /* Make sum = sum(2^((block*teeth + t)*spacing), t=0..tooth). */\n+            secp256k1_gej_add_var(&sum, &sum, &u, NULL);\n+            /* Make u = 2^((block*teeth + tooth)*spacing + 1) * gen/2. */\n+            secp256k1_gej_double_var(&u, &u, NULL);\n+            /* Make ds[tooth] = u = 2^((block*teeth + tooth)*spacing + 1) * gen/2. */\n+            ds[tooth] = u;\n+            /* Make u = 2^((block*teeth + tooth + 1)*spacing). */",
      "path": "src/ecmult_gen_compute_table_impl.h",
      "position": null,
      "original_position": 104,
      "commit_id": "dcc846f18518f77770b6a1fc9e39683c63685d39",
      "original_commit_id": "da73fd9d51137e59f2a4f13807501ee23cc64956",
      "in_reply_to_id": null,
      "user": {
        "login": "stratospher",
        "id": 44024636,
        "node_id": "MDQ6VXNlcjQ0MDI0NjM2",
        "avatar_url": "https://avatars.githubusercontent.com/u/44024636?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stratospher",
        "html_url": "https://github.com/stratospher",
        "followers_url": "https://api.github.com/users/stratospher/followers",
        "following_url": "https://api.github.com/users/stratospher/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stratospher/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stratospher/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stratospher/subscriptions",
        "organizations_url": "https://api.github.com/users/stratospher/orgs",
        "repos_url": "https://api.github.com/users/stratospher/repos",
        "events_url": "https://api.github.com/users/stratospher/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stratospher/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "da73fd9: micro-nit:\r\n```suggestion\r\n            /* Make u = 2^((block*teeth + tooth + 1)*spacing) * gen/2. */\r\n```",
      "created_at": "2024-03-09T08:15:28Z",
      "updated_at": "2024-03-10T14:19:56Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1058#discussion_r1518533789",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1518533789"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1058"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 54,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1518863439",
      "pull_request_review_id": 1761684466,
      "id": 1518863439,
      "node_id": "PRRC_kwDOAP4Jqs5aiARP",
      "diff_hunk": "@@ -1,83 +1,94 @@\n-/***********************************************************************\n- * Copyright (c) 2013, 2014, 2015 Pieter Wuille, Gregory Maxwell       *\n- * Distributed under the MIT software license, see the accompanying    *\n- * file COPYING or https://www.opensource.org/licenses/mit-license.php.*\n- ***********************************************************************/\n+/*******************************************************************************\n+ * Copyright (c) 2013-2015, 2021 Pieter Wuille, Gregory Maxwell, Peter Dettman *\n+ * Distributed under the MIT software license, see the accompanying            *\n+ * file COPYING or https://www.opensource.org/licenses/mit-license.php.        *\n+ *******************************************************************************/\n \n #ifndef SECP256K1_ECMULT_GEN_COMPUTE_TABLE_IMPL_H\n #define SECP256K1_ECMULT_GEN_COMPUTE_TABLE_IMPL_H\n \n #include \"ecmult_gen_compute_table.h\"\n #include \"group_impl.h\"\n #include \"field_impl.h\"\n+#include \"scalar_impl.h\"\n #include \"ecmult_gen.h\"\n #include \"util.h\"\n \n-static void secp256k1_ecmult_gen_compute_table(secp256k1_ge_storage* table, const secp256k1_ge* gen, int bits) {\n-    int g = ECMULT_GEN_PREC_G(bits);\n-    int n = ECMULT_GEN_PREC_N(bits);\n+static void secp256k1_ecmult_gen_compute_table(secp256k1_ge_storage* table, const secp256k1_ge* gen, int blocks, int teeth) {\n+    size_t points = ((size_t)1) << (teeth - 1);\n+    size_t points_total = points * blocks;\n+    int spacing = (256 + blocks * teeth - 1) / (blocks * teeth);\n+    secp256k1_ge* prec = checked_malloc(&default_error_callback, points_total * sizeof(*prec));\n+    secp256k1_gej* ds = checked_malloc(&default_error_callback, teeth * sizeof(*ds));\n+    secp256k1_gej* vs = checked_malloc(&default_error_callback, points_total * sizeof(*vs));\n+    secp256k1_gej u;\n+    size_t vs_pos = 0;\n+    secp256k1_scalar half = SECP256K1_SCALAR_CONST(0, 0, 0, 0, 0, 0, 0, 2);\n+    int block, i;\n \n-    secp256k1_ge* prec = checked_malloc(&default_error_callback, n * g * sizeof(*prec));\n-    secp256k1_gej gj;\n-    secp256k1_gej nums_gej;\n-    int i, j;\n-\n-    VERIFY_CHECK(g > 0);\n-    VERIFY_CHECK(n > 0);\n-\n-    /* get the generator */\n-    secp256k1_gej_set_ge(&gj, gen);\n-\n-    /* Construct a group element with no known corresponding scalar (nothing up my sleeve). */\n-    {\n-        static const unsigned char nums_b32[33] = \"The scalar for this x is unknown\";\n-        secp256k1_fe nums_x;\n-        secp256k1_ge nums_ge;\n-        int r;\n-        r = secp256k1_fe_set_b32_limit(&nums_x, nums_b32);\n-        (void)r;\n-        VERIFY_CHECK(r);\n-        r = secp256k1_ge_set_xo_var(&nums_ge, &nums_x, 0);\n-        (void)r;\n-        VERIFY_CHECK(r);\n-        secp256k1_gej_set_ge(&nums_gej, &nums_ge);\n-        /* Add G to make the bits in x uniformly distributed. */\n-        secp256k1_gej_add_ge_var(&nums_gej, &nums_gej, gen, NULL);\n+    /* u is the running power of two times gen we're working with, initially gen/2. */\n+    secp256k1_scalar_inverse_var(&half, &half);\n+    secp256k1_gej_set_infinity(&u);\n+    for (i = 255; i >= 0; --i) {\n+        /* Use a very simple multiplication ladder to avoid dependency on ecmult. */\n+        secp256k1_gej_double_var(&u, &u, NULL);\n+        if (secp256k1_scalar_get_bits(&half, i, 1)) {\n+            secp256k1_gej_add_ge_var(&u, &u, gen, NULL);\n+        }\n     }\n \n-    /* compute prec. */\n-    {\n-        secp256k1_gej gbase;\n-        secp256k1_gej numsbase;\n-        secp256k1_gej* precj = checked_malloc(&default_error_callback, n * g * sizeof(*precj));  /* Jacobian versions of prec. */\n-        gbase = gj; /* PREC_G^j * G */\n-        numsbase = nums_gej; /* 2^j * nums. */\n-        for (j = 0; j < n; j++) {\n-            /* Set precj[j*PREC_G .. j*PREC_G+(PREC_G-1)] to (numsbase, numsbase + gbase, ..., numsbase + (PREC_G-1)*gbase). */\n-            precj[j*g] = numsbase;\n-            for (i = 1; i < g; i++) {\n-                secp256k1_gej_add_var(&precj[j*g + i], &precj[j*g + i - 1], &gbase, NULL);\n-            }\n-            /* Multiply gbase by PREC_G. */\n-            for (i = 0; i < bits; i++) {\n-                secp256k1_gej_double_var(&gbase, &gbase, NULL);\n+    for (block = 0; block < blocks; ++block) {\n+        int tooth;\n+        /* Here u = 2^(block*teeth*spacing) * gen/2. */\n+        secp256k1_gej sum;\n+        secp256k1_gej_set_infinity(&sum);\n+        for (tooth = 0; tooth < teeth; ++tooth) {\n+            /* Here u = 2^((block*teeth + tooth)*spacing) * gen/2. */\n+            int bit_off;\n+            /* Make sum = sum(2^((block*teeth + t)*spacing), t=0..tooth). */\n+            secp256k1_gej_add_var(&sum, &sum, &u, NULL);\n+            /* Make u = 2^((block*teeth + tooth)*spacing + 1) * gen/2. */\n+            secp256k1_gej_double_var(&u, &u, NULL);\n+            /* Make ds[tooth] = u = 2^((block*teeth + tooth)*spacing + 1) * gen/2. */\n+            ds[tooth] = u;\n+            /* Make u = 2^((block*teeth + tooth + 1)*spacing). */\n+            for (bit_off = 1; bit_off < spacing; ++bit_off) {\n+                secp256k1_gej_double_var(&u, &u, NULL);\n             }\n-            /* Multiply numbase by 2. */\n-            secp256k1_gej_double_var(&numsbase, &numsbase, NULL);\n-            if (j == n - 2) {\n-                /* In the last iteration, numsbase is (1 - 2^j) * nums instead. */\n-                secp256k1_gej_neg(&numsbase, &numsbase);\n-                secp256k1_gej_add_var(&numsbase, &numsbase, &nums_gej, NULL);\n+        }\n+        /* Now u = 2^(block*(teeth + 1)*spacing) * gen/2. */\n+\n+        /* Next, compute the table entries for block block in Jacobian coordinates.\n+         * The entries will occupy vs[block*points + i] for i=0..points-1.\n+         * We start by computing the first (i=0) value corresponding to all summed\n+         * powers of two times G being negative. */\n+        secp256k1_gej_neg(&vs[vs_pos++], &sum);\n+        /* And then teeth-1 times \"double\" the range of i values for which the table\n+         * is computed: in each iteration, double the table by taking an existing\n+         * table entry and adding ds[tooth]. */\n+        for (tooth = 0; tooth < teeth - 1; ++tooth) {\n+            size_t stride = ((size_t)1) << tooth;\n+            size_t index;\n+            for (index = 0; index < stride; ++index, ++vs_pos) {\n+                secp256k1_gej_add_var(&vs[vs_pos], &vs[vs_pos - stride], &ds[tooth], NULL);",
      "path": "src/ecmult_gen_compute_table_impl.h",
      "position": 132,
      "original_position": 129,
      "commit_id": "dcc846f18518f77770b6a1fc9e39683c63685d39",
      "original_commit_id": "da73fd9d51137e59f2a4f13807501ee23cc64956",
      "in_reply_to_id": null,
      "user": {
        "login": "stratospher",
        "id": 44024636,
        "node_id": "MDQ6VXNlcjQ0MDI0NjM2",
        "avatar_url": "https://avatars.githubusercontent.com/u/44024636?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stratospher",
        "html_url": "https://github.com/stratospher",
        "followers_url": "https://api.github.com/users/stratospher/followers",
        "following_url": "https://api.github.com/users/stratospher/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stratospher/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stratospher/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stratospher/subscriptions",
        "organizations_url": "https://api.github.com/users/stratospher/orgs",
        "repos_url": "https://api.github.com/users/stratospher/repos",
        "events_url": "https://api.github.com/users/stratospher/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stratospher/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "da73fd9: so for vs_pos = [256, 263] - since those bits are always set to 0. their possible combinations are computed and kept but never end up being used? also wondering if those big powers of 2 (maybe something like - 2\\*\\*263 - 2\\*\\*259 - 2\\*\\*255 - 2\\*\\*251 - 2\\*\\*247 - 2\\*\\*243) are safe to add in `secp256k1_gej_add_var`.\r\n\r\n(talking about default configuration with blocks=11, teeth=6) ",
      "created_at": "2024-03-10T14:08:30Z",
      "updated_at": "2024-03-10T14:19:56Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1058#discussion_r1518863439",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1518863439"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1058"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 85,
      "original_line": 85,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1518874202",
      "pull_request_review_id": 1926564069,
      "id": 1518874202,
      "node_id": "PRRC_kwDOAP4Jqs5aiC5a",
      "diff_hunk": "@@ -85,19 +85,17 @@ static void secp256k1_ecmult_gen(const secp256k1_ecmult_gen_context *ctx, secp25\n      * (gn-b)*G = (2*d + 2^COMB_BITS - 1) * (G/2), or\n      * d = (gn + (2^COMB_BITS - 1)/2 - b) mod order.\n      *\n-     * -b is precomputed as ctx->scalar_offset, so our final equations become:\n+     * 2^COMB_BITS - 1)/2 - b is precomputed as ctx->scalar_offset, so our final equations become:",
      "path": "src/ecmult_gen_impl.h",
      "position": null,
      "original_position": 5,
      "commit_id": "dcc846f18518f77770b6a1fc9e39683c63685d39",
      "original_commit_id": "65f580e931e74709c19662afbabcfd4d4fcaf727",
      "in_reply_to_id": null,
      "user": {
        "login": "stratospher",
        "id": 44024636,
        "node_id": "MDQ6VXNlcjQ0MDI0NjM2",
        "avatar_url": "https://avatars.githubusercontent.com/u/44024636?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stratospher",
        "html_url": "https://github.com/stratospher",
        "followers_url": "https://api.github.com/users/stratospher/followers",
        "following_url": "https://api.github.com/users/stratospher/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stratospher/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stratospher/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stratospher/subscriptions",
        "organizations_url": "https://api.github.com/users/stratospher/orgs",
        "repos_url": "https://api.github.com/users/stratospher/repos",
        "events_url": "https://api.github.com/users/stratospher/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stratospher/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "65f580e:\r\n```suggestion\r\n     * 2^(COMB_BITS - 1)/2 - b is precomputed as ctx->scalar_offset, so our final equations become:\r\n```",
      "created_at": "2024-03-10T14:54:30Z",
      "updated_at": "2024-03-10T15:02:03Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1058#discussion_r1518874202",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1518874202"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1058"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 88,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1527600026",
      "pull_request_review_id": 1941573933,
      "id": 1527600026,
      "node_id": "PRRC_kwDOAP4Jqs5bDVOa",
      "diff_hunk": "@@ -1,83 +1,94 @@\n-/***********************************************************************\n- * Copyright (c) 2013, 2014, 2015 Pieter Wuille, Gregory Maxwell       *\n- * Distributed under the MIT software license, see the accompanying    *\n- * file COPYING or https://www.opensource.org/licenses/mit-license.php.*\n- ***********************************************************************/\n+/*******************************************************************************\n+ * Copyright (c) 2013-2015, 2021 Pieter Wuille, Gregory Maxwell, Peter Dettman *\n+ * Distributed under the MIT software license, see the accompanying            *\n+ * file COPYING or https://www.opensource.org/licenses/mit-license.php.        *\n+ *******************************************************************************/\n \n #ifndef SECP256K1_ECMULT_GEN_COMPUTE_TABLE_IMPL_H\n #define SECP256K1_ECMULT_GEN_COMPUTE_TABLE_IMPL_H\n \n #include \"ecmult_gen_compute_table.h\"\n #include \"group_impl.h\"\n #include \"field_impl.h\"\n+#include \"scalar_impl.h\"\n #include \"ecmult_gen.h\"\n #include \"util.h\"\n \n-static void secp256k1_ecmult_gen_compute_table(secp256k1_ge_storage* table, const secp256k1_ge* gen, int bits) {\n-    int g = ECMULT_GEN_PREC_G(bits);\n-    int n = ECMULT_GEN_PREC_N(bits);\n+static void secp256k1_ecmult_gen_compute_table(secp256k1_ge_storage* table, const secp256k1_ge* gen, int blocks, int teeth) {\n+    size_t points = ((size_t)1) << (teeth - 1);\n+    size_t points_total = points * blocks;\n+    int spacing = (256 + blocks * teeth - 1) / (blocks * teeth);\n+    secp256k1_ge* prec = checked_malloc(&default_error_callback, points_total * sizeof(*prec));\n+    secp256k1_gej* ds = checked_malloc(&default_error_callback, teeth * sizeof(*ds));\n+    secp256k1_gej* vs = checked_malloc(&default_error_callback, points_total * sizeof(*vs));\n+    secp256k1_gej u;\n+    size_t vs_pos = 0;\n+    secp256k1_scalar half = SECP256K1_SCALAR_CONST(0, 0, 0, 0, 0, 0, 0, 2);\n+    int block, i;\n \n-    secp256k1_ge* prec = checked_malloc(&default_error_callback, n * g * sizeof(*prec));\n-    secp256k1_gej gj;\n-    secp256k1_gej nums_gej;\n-    int i, j;\n-\n-    VERIFY_CHECK(g > 0);\n-    VERIFY_CHECK(n > 0);\n-\n-    /* get the generator */\n-    secp256k1_gej_set_ge(&gj, gen);\n-\n-    /* Construct a group element with no known corresponding scalar (nothing up my sleeve). */\n-    {\n-        static const unsigned char nums_b32[33] = \"The scalar for this x is unknown\";\n-        secp256k1_fe nums_x;\n-        secp256k1_ge nums_ge;\n-        int r;\n-        r = secp256k1_fe_set_b32_limit(&nums_x, nums_b32);\n-        (void)r;\n-        VERIFY_CHECK(r);\n-        r = secp256k1_ge_set_xo_var(&nums_ge, &nums_x, 0);\n-        (void)r;\n-        VERIFY_CHECK(r);\n-        secp256k1_gej_set_ge(&nums_gej, &nums_ge);\n-        /* Add G to make the bits in x uniformly distributed. */\n-        secp256k1_gej_add_ge_var(&nums_gej, &nums_gej, gen, NULL);\n+    /* u is the running power of two times gen we're working with, initially gen/2. */\n+    secp256k1_scalar_inverse_var(&half, &half);\n+    secp256k1_gej_set_infinity(&u);\n+    for (i = 255; i >= 0; --i) {\n+        /* Use a very simple multiplication ladder to avoid dependency on ecmult. */\n+        secp256k1_gej_double_var(&u, &u, NULL);\n+        if (secp256k1_scalar_get_bits(&half, i, 1)) {\n+            secp256k1_gej_add_ge_var(&u, &u, gen, NULL);\n+        }\n     }\n \n-    /* compute prec. */\n-    {\n-        secp256k1_gej gbase;\n-        secp256k1_gej numsbase;\n-        secp256k1_gej* precj = checked_malloc(&default_error_callback, n * g * sizeof(*precj));  /* Jacobian versions of prec. */\n-        gbase = gj; /* PREC_G^j * G */\n-        numsbase = nums_gej; /* 2^j * nums. */\n-        for (j = 0; j < n; j++) {\n-            /* Set precj[j*PREC_G .. j*PREC_G+(PREC_G-1)] to (numsbase, numsbase + gbase, ..., numsbase + (PREC_G-1)*gbase). */\n-            precj[j*g] = numsbase;\n-            for (i = 1; i < g; i++) {\n-                secp256k1_gej_add_var(&precj[j*g + i], &precj[j*g + i - 1], &gbase, NULL);\n-            }\n-            /* Multiply gbase by PREC_G. */\n-            for (i = 0; i < bits; i++) {\n-                secp256k1_gej_double_var(&gbase, &gbase, NULL);\n+    for (block = 0; block < blocks; ++block) {\n+        int tooth;\n+        /* Here u = 2^(block*teeth*spacing) * gen/2. */\n+        secp256k1_gej sum;\n+        secp256k1_gej_set_infinity(&sum);\n+        for (tooth = 0; tooth < teeth; ++tooth) {\n+            /* Here u = 2^((block*teeth + tooth)*spacing) * gen/2. */\n+            int bit_off;\n+            /* Make sum = sum(2^((block*teeth + t)*spacing), t=0..tooth). */\n+            secp256k1_gej_add_var(&sum, &sum, &u, NULL);\n+            /* Make u = 2^((block*teeth + tooth)*spacing + 1) * gen/2. */\n+            secp256k1_gej_double_var(&u, &u, NULL);\n+            /* Make ds[tooth] = u = 2^((block*teeth + tooth)*spacing + 1) * gen/2. */\n+            ds[tooth] = u;\n+            /* Make u = 2^((block*teeth + tooth + 1)*spacing). */\n+            for (bit_off = 1; bit_off < spacing; ++bit_off) {\n+                secp256k1_gej_double_var(&u, &u, NULL);\n             }\n-            /* Multiply numbase by 2. */\n-            secp256k1_gej_double_var(&numsbase, &numsbase, NULL);\n-            if (j == n - 2) {\n-                /* In the last iteration, numsbase is (1 - 2^j) * nums instead. */\n-                secp256k1_gej_neg(&numsbase, &numsbase);\n-                secp256k1_gej_add_var(&numsbase, &numsbase, &nums_gej, NULL);\n+        }\n+        /* Now u = 2^(block*(teeth + 1)*spacing) * gen/2. */\n+\n+        /* Next, compute the table entries for block block in Jacobian coordinates.\n+         * The entries will occupy vs[block*points + i] for i=0..points-1.\n+         * We start by computing the first (i=0) value corresponding to all summed\n+         * powers of two times G being negative. */\n+        secp256k1_gej_neg(&vs[vs_pos++], &sum);\n+        /* And then teeth-1 times \"double\" the range of i values for which the table\n+         * is computed: in each iteration, double the table by taking an existing\n+         * table entry and adding ds[tooth]. */\n+        for (tooth = 0; tooth < teeth - 1; ++tooth) {\n+            size_t stride = ((size_t)1) << tooth;\n+            size_t index;\n+            for (index = 0; index < stride; ++index, ++vs_pos) {\n+                secp256k1_gej_add_var(&vs[vs_pos], &vs[vs_pos - stride], &ds[tooth], NULL);",
      "path": "src/ecmult_gen_compute_table_impl.h",
      "position": 132,
      "original_position": 129,
      "commit_id": "dcc846f18518f77770b6a1fc9e39683c63685d39",
      "original_commit_id": "da73fd9d51137e59f2a4f13807501ee23cc64956",
      "in_reply_to_id": 1518863439,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> so for vs_pos = [256, 263] - since those bits are always set to 0. their possible combinations are computed and kept but never end up being used?\r\n\r\nI believe that's correct. We could avoid computing them, but this is just table generation code. There is no particular reason for it to be efficient (I've suggested replacing it with a Python script in the past...).\r\n\r\n> also wondering if those big powers of 2 (maybe something like - 2**263 - 2**259 - 2**255 - 2**251 - 2**247 - 2**243) are safe to add in `secp256k1_gej_add_var`.\r\n\r\nThat function operates on points, and clearly cannot know what multiple of G is being added (doing so would require breaking DLP!). The group of points is cyclic with order equal to the curve order, so e.g. `2**264 * gen/2` is $2^{263} G = (2^{263} \\mod n) G$ = 55349809480404436077109870898555922636672 G.",
      "created_at": "2024-03-17T19:39:28Z",
      "updated_at": "2024-03-17T19:39:29Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1058#discussion_r1527600026",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1527600026"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1058"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 85,
      "original_line": 85,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1527602172",
      "pull_request_review_id": 1941575867,
      "id": 1527602172,
      "node_id": "PRRC_kwDOAP4Jqs5bDVv8",
      "diff_hunk": "@@ -85,19 +85,17 @@ static void secp256k1_ecmult_gen(const secp256k1_ecmult_gen_context *ctx, secp25\n      * (gn-b)*G = (2*d + 2^COMB_BITS - 1) * (G/2), or\n      * d = (gn + (2^COMB_BITS - 1)/2 - b) mod order.\n      *\n-     * -b is precomputed as ctx->scalar_offset, so our final equations become:\n+     * 2^COMB_BITS - 1)/2 - b is precomputed as ctx->scalar_offset, so our final equations become:",
      "path": "src/ecmult_gen_impl.h",
      "position": null,
      "original_position": 5,
      "commit_id": "dcc846f18518f77770b6a1fc9e39683c63685d39",
      "original_commit_id": "65f580e931e74709c19662afbabcfd4d4fcaf727",
      "in_reply_to_id": 1518874202,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done.",
      "created_at": "2024-03-17T19:46:35Z",
      "updated_at": "2024-03-17T19:46:35Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1058#discussion_r1527602172",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1527602172"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1058"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 88,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1527602209",
      "pull_request_review_id": 1941575887,
      "id": 1527602209,
      "node_id": "PRRC_kwDOAP4Jqs5bDVwh",
      "diff_hunk": "@@ -1,83 +1,94 @@\n-/***********************************************************************\n- * Copyright (c) 2013, 2014, 2015 Pieter Wuille, Gregory Maxwell       *\n- * Distributed under the MIT software license, see the accompanying    *\n- * file COPYING or https://www.opensource.org/licenses/mit-license.php.*\n- ***********************************************************************/\n+/*******************************************************************************\n+ * Copyright (c) 2013-2015, 2021 Pieter Wuille, Gregory Maxwell, Peter Dettman *\n+ * Distributed under the MIT software license, see the accompanying            *\n+ * file COPYING or https://www.opensource.org/licenses/mit-license.php.        *\n+ *******************************************************************************/\n \n #ifndef SECP256K1_ECMULT_GEN_COMPUTE_TABLE_IMPL_H\n #define SECP256K1_ECMULT_GEN_COMPUTE_TABLE_IMPL_H\n \n #include \"ecmult_gen_compute_table.h\"\n #include \"group_impl.h\"\n #include \"field_impl.h\"\n+#include \"scalar_impl.h\"\n #include \"ecmult_gen.h\"\n #include \"util.h\"\n \n-static void secp256k1_ecmult_gen_compute_table(secp256k1_ge_storage* table, const secp256k1_ge* gen, int bits) {\n-    int g = ECMULT_GEN_PREC_G(bits);\n-    int n = ECMULT_GEN_PREC_N(bits);\n+static void secp256k1_ecmult_gen_compute_table(secp256k1_ge_storage* table, const secp256k1_ge* gen, int blocks, int teeth) {\n+    size_t points = ((size_t)1) << (teeth - 1);\n+    size_t points_total = points * blocks;\n+    int spacing = (256 + blocks * teeth - 1) / (blocks * teeth);\n+    secp256k1_ge* prec = checked_malloc(&default_error_callback, points_total * sizeof(*prec));\n+    secp256k1_gej* ds = checked_malloc(&default_error_callback, teeth * sizeof(*ds));\n+    secp256k1_gej* vs = checked_malloc(&default_error_callback, points_total * sizeof(*vs));\n+    secp256k1_gej u;\n+    size_t vs_pos = 0;\n+    secp256k1_scalar half = SECP256K1_SCALAR_CONST(0, 0, 0, 0, 0, 0, 0, 2);\n+    int block, i;\n \n-    secp256k1_ge* prec = checked_malloc(&default_error_callback, n * g * sizeof(*prec));\n-    secp256k1_gej gj;\n-    secp256k1_gej nums_gej;\n-    int i, j;\n-\n-    VERIFY_CHECK(g > 0);\n-    VERIFY_CHECK(n > 0);\n-\n-    /* get the generator */\n-    secp256k1_gej_set_ge(&gj, gen);\n-\n-    /* Construct a group element with no known corresponding scalar (nothing up my sleeve). */\n-    {\n-        static const unsigned char nums_b32[33] = \"The scalar for this x is unknown\";\n-        secp256k1_fe nums_x;\n-        secp256k1_ge nums_ge;\n-        int r;\n-        r = secp256k1_fe_set_b32_limit(&nums_x, nums_b32);\n-        (void)r;\n-        VERIFY_CHECK(r);\n-        r = secp256k1_ge_set_xo_var(&nums_ge, &nums_x, 0);\n-        (void)r;\n-        VERIFY_CHECK(r);\n-        secp256k1_gej_set_ge(&nums_gej, &nums_ge);\n-        /* Add G to make the bits in x uniformly distributed. */\n-        secp256k1_gej_add_ge_var(&nums_gej, &nums_gej, gen, NULL);\n+    /* u is the running power of two times gen we're working with, initially gen/2. */\n+    secp256k1_scalar_inverse_var(&half, &half);\n+    secp256k1_gej_set_infinity(&u);\n+    for (i = 255; i >= 0; --i) {\n+        /* Use a very simple multiplication ladder to avoid dependency on ecmult. */\n+        secp256k1_gej_double_var(&u, &u, NULL);\n+        if (secp256k1_scalar_get_bits(&half, i, 1)) {\n+            secp256k1_gej_add_ge_var(&u, &u, gen, NULL);\n+        }\n     }\n \n-    /* compute prec. */\n-    {\n-        secp256k1_gej gbase;\n-        secp256k1_gej numsbase;\n-        secp256k1_gej* precj = checked_malloc(&default_error_callback, n * g * sizeof(*precj));  /* Jacobian versions of prec. */\n-        gbase = gj; /* PREC_G^j * G */\n-        numsbase = nums_gej; /* 2^j * nums. */\n-        for (j = 0; j < n; j++) {\n-            /* Set precj[j*PREC_G .. j*PREC_G+(PREC_G-1)] to (numsbase, numsbase + gbase, ..., numsbase + (PREC_G-1)*gbase). */\n-            precj[j*g] = numsbase;\n-            for (i = 1; i < g; i++) {\n-                secp256k1_gej_add_var(&precj[j*g + i], &precj[j*g + i - 1], &gbase, NULL);\n-            }\n-            /* Multiply gbase by PREC_G. */\n-            for (i = 0; i < bits; i++) {\n-                secp256k1_gej_double_var(&gbase, &gbase, NULL);\n+    for (block = 0; block < blocks; ++block) {\n+        int tooth;\n+        /* Here u = 2^(block*teeth*spacing) * gen/2. */\n+        secp256k1_gej sum;\n+        secp256k1_gej_set_infinity(&sum);\n+        for (tooth = 0; tooth < teeth; ++tooth) {\n+            /* Here u = 2^((block*teeth + tooth)*spacing) * gen/2. */\n+            int bit_off;\n+            /* Make sum = sum(2^((block*teeth + t)*spacing), t=0..tooth). */\n+            secp256k1_gej_add_var(&sum, &sum, &u, NULL);\n+            /* Make u = 2^((block*teeth + tooth)*spacing + 1) * gen/2. */\n+            secp256k1_gej_double_var(&u, &u, NULL);\n+            /* Make ds[tooth] = u = 2^((block*teeth + tooth)*spacing + 1) * gen/2. */\n+            ds[tooth] = u;\n+            /* Make u = 2^((block*teeth + tooth + 1)*spacing). */",
      "path": "src/ecmult_gen_compute_table_impl.h",
      "position": null,
      "original_position": 104,
      "commit_id": "dcc846f18518f77770b6a1fc9e39683c63685d39",
      "original_commit_id": "da73fd9d51137e59f2a4f13807501ee23cc64956",
      "in_reply_to_id": 1518533789,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done.",
      "created_at": "2024-03-17T19:46:43Z",
      "updated_at": "2024-03-17T19:46:44Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1058#discussion_r1527602209",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1527602209"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1058"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 54,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1527602221",
      "pull_request_review_id": 1941575902,
      "id": 1527602221,
      "node_id": "PRRC_kwDOAP4Jqs5bDVwt",
      "diff_hunk": "@@ -29,38 +29,154 @@ static void secp256k1_ecmult_gen_context_clear(secp256k1_ecmult_gen_context *ctx\n     secp256k1_ge_clear(&ctx->final_point_add);\n }\n \n-/* For accelerating the computation of a*G:\n- * To harden against timing attacks, use the following mechanism:\n- * * Break up the multiplicand into groups of PREC_BITS bits, called n_0, n_1, n_2, ..., n_(PREC_N-1).\n- * * Compute sum(n_i * (PREC_G)^i * G + U_i, i=0 ... PREC_N-1), where:\n- *   * U_i = U * 2^i, for i=0 ... PREC_N-2\n- *   * U_i = U * (1-2^(PREC_N-1)), for i=PREC_N-1\n- *   where U is a point with no known corresponding scalar. Note that sum(U_i, i=0 ... PREC_N-1) = 0.\n- * For each i, and each of the PREC_G possible values of n_i, (n_i * (PREC_G)^i * G + U_i) is\n- * precomputed (call it prec(i, n_i)). The formula now becomes sum(prec(i, n_i), i=0 ... PREC_N-1).\n- * None of the resulting prec group elements have a known scalar, and neither do any of\n- * the intermediate sums while computing a*G.\n- * The prec values are stored in secp256k1_ecmult_gen_prec_table[i][n_i] = n_i * (PREC_G)^i * G + U_i.\n- */\n-static void secp256k1_ecmult_gen(const secp256k1_ecmult_gen_context *ctx, secp256k1_gej *r, const secp256k1_scalar *gn) {\n-    int bits = ECMULT_GEN_PREC_BITS;\n-    int g = ECMULT_GEN_PREC_G(bits);\n-    int n = ECMULT_GEN_PREC_N(bits);\n+/* Compute the scalar (2^COMB_BITS - 1) / 2. */\n+static void secp256k1_ecmult_gen_scalar_diff(secp256k1_scalar* diff) {\n+    int i;\n+\n+    /* Compute scalar -1/2. */\n+    secp256k1_scalar neghalf = SECP256K1_SCALAR_CONST(0, 0, 0, 0, 0, 0, 0, 2);\n+    secp256k1_scalar_inverse_var(&neghalf, &neghalf);\n+    secp256k1_scalar_negate(&neghalf, &neghalf);\n+\n+    /* Compute offset = 2^(COMB_BITS - 1). */\n+    secp256k1_scalar_set_int(diff, 1);\n+    for (i = 0; i < COMB_BITS - 1; ++i) {\n+        secp256k1_scalar_add(diff, diff, diff);\n+    }\n \n+    /* The result is the sum of 2^(COMB_BITS - 1) + (-1/2). */\n+    secp256k1_scalar_add(diff, diff, &neghalf);\n+}\n+\n+static void secp256k1_ecmult_gen(const secp256k1_ecmult_gen_context *ctx, secp256k1_gej *r, const secp256k1_scalar *gn) {\n+    uint32_t comb_off;\n     secp256k1_ge add;\n+    secp256k1_fe neg;\n     secp256k1_ge_storage adds;\n-    secp256k1_scalar gnb;\n-    int i, j, n_i;\n+    secp256k1_scalar recoded;\n \n     memset(&adds, 0, sizeof(adds));\n     secp256k1_gej_set_infinity(r);\n \n-    /* Blind scalar/point multiplication by computing (gn-b)*G + b*G instead of gn*G. */\n-    secp256k1_scalar_add(&gnb, gn, &ctx->scalar_offset);\n+    /* We want to compute R = gn*G.\n+     *\n+     * To blind the scalar used in the computation, we rewrite this to be R = (gn-b)*G + b*G, with\n+     * a value b determined by the context. b*G is precomputed as ctx->final_point_add, so we're\n+     * left with computing R = (gn-b)*G + ctx->final_point_add.\n+     *\n+     * The multiplication (gn-b)*G will be performed using a signed-digit multi-comb (see Section\n+     * 3.3 of \"Fast and compact elliptic-curve cryptography\" by Mike Hamburg\n+     * (https://eprint.iacr.org/2012/309).\n+     *\n+     * Let comb(s,P) = sum((2*s_i-1)*2^i*P for i=0..COMB_BITS-1), where s_i is the i'th bit of the\n+     * binary representation of scalar s. So the s_i values determine whether -2^i*P (s_i=0) or\n+     * +2^i*P (s_1) are added together. By manipulating:\n+     *\n+     *     comb(s,P) = sum((2*s_i-1)*2^i*P for i=0..COMB_BITS-1)\n+     * <=> comb(s,P) = sum((2*s_i-1)*2^i for i=0..COMB_BITS-1) * P\n+     * <=> comb(s,P) = (2*sum(s_i*2^i for i=0..COMB_BITS-1) - sum(2^i for i=0..COMB_BITS-1)) * P\n+     * <=> comb(s,P) = (2*s - (2^COMB_BITS - 1)) * P\n+     *\n+     * Thus (gn-b)*G can be written as comb(s,G) if gn-b = 2*s - (2^COMB_BITS - 1), or\n+     * s = (gn - b + (2^COMB_BITS - 1))/2 mod order.\n+     *\n+     * We use an alternative that avoids the modular division by two: we write (gn-b)*G =\n+     * comb(d,G/2). For that to hold it must be the case that\n+     * (gn-b)*G = (2*d + 2^COMB_BITS - 1) * (G/2), or\n+     * d = (gn + (2^COMB_BITS - 1)/2 - b) mod order.\n+     *\n+     * -b is precomputed as ctx->scalar_offset, so our final equations become:\n+     *\n+     *   d = gn + ctx->scalar_offset + (2^COMB_BITS - 1)/2 (mod order)\n+     *   R = comb(d, G/2) + ctx->final_point_add.\n+     *\n+     * The comb function is computed by summing + or - 2^(i-1)*G, for i=0..COMB_BITS-1, depending\n+     * on the value of the bits d_i of the binary representation of scalar d.\n+     */\n+\n+    /* Compute the scalar (gn + ctx->scalar_offset + (2^COMB_BITS - 1)/2). */\n+    secp256k1_ecmult_gen_scalar_diff(&recoded);\n+    secp256k1_scalar_add(&recoded, &recoded, &ctx->scalar_offset);\n+    secp256k1_scalar_add(&recoded, &recoded, gn);\n+\n+    /* In secp256k1_ecmult_gen_prec_table we have precomputed sums of the\n+     * (2*d_i-1) * 2^(i-1) * G points, for various combinations of i positions.\n+     * We rewrite our equation in terms of these table entries.\n+     *\n+     * Let mask(b) = sum(2^(b*COMB_TEETH + t)*COMB_SPACING for t=0..COMB_TEETH-1),",
      "path": "src/ecmult_gen_impl.h",
      "position": null,
      "original_position": 113,
      "commit_id": "dcc846f18518f77770b6a1fc9e39683c63685d39",
      "original_commit_id": "da73fd9d51137e59f2a4f13807501ee23cc64956",
      "in_reply_to_id": 1448201103,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done.",
      "created_at": "2024-03-17T19:46:51Z",
      "updated_at": "2024-03-17T19:46:51Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1058#discussion_r1527602221",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1527602221"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1058"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 106,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1527602245",
      "pull_request_review_id": 1941575936,
      "id": 1527602245,
      "node_id": "PRRC_kwDOAP4Jqs5bDVxF",
      "diff_hunk": "@@ -1,83 +1,94 @@\n-/***********************************************************************\n- * Copyright (c) 2013, 2014, 2015 Pieter Wuille, Gregory Maxwell       *\n- * Distributed under the MIT software license, see the accompanying    *\n- * file COPYING or https://www.opensource.org/licenses/mit-license.php.*\n- ***********************************************************************/\n+/*******************************************************************************\n+ * Copyright (c) 2013-2015, 2021 Pieter Wuille, Gregory Maxwell, Peter Dettman *\n+ * Distributed under the MIT software license, see the accompanying            *\n+ * file COPYING or https://www.opensource.org/licenses/mit-license.php.        *\n+ *******************************************************************************/\n \n #ifndef SECP256K1_ECMULT_GEN_COMPUTE_TABLE_IMPL_H\n #define SECP256K1_ECMULT_GEN_COMPUTE_TABLE_IMPL_H\n \n #include \"ecmult_gen_compute_table.h\"\n #include \"group_impl.h\"\n #include \"field_impl.h\"\n+#include \"scalar_impl.h\"\n #include \"ecmult_gen.h\"\n #include \"util.h\"\n \n-static void secp256k1_ecmult_gen_compute_table(secp256k1_ge_storage* table, const secp256k1_ge* gen, int bits) {\n-    int g = ECMULT_GEN_PREC_G(bits);\n-    int n = ECMULT_GEN_PREC_N(bits);\n+static void secp256k1_ecmult_gen_compute_table(secp256k1_ge_storage* table, const secp256k1_ge* gen, int blocks, int teeth) {\n+    size_t points = ((size_t)1) << (teeth - 1);\n+    size_t points_total = points * blocks;\n+    int spacing = (256 + blocks * teeth - 1) / (blocks * teeth);\n+    secp256k1_ge* prec = checked_malloc(&default_error_callback, points_total * sizeof(*prec));\n+    secp256k1_gej* ds = checked_malloc(&default_error_callback, teeth * sizeof(*ds));\n+    secp256k1_gej* vs = checked_malloc(&default_error_callback, points_total * sizeof(*vs));\n+    secp256k1_gej u;\n+    size_t vs_pos = 0;\n+    secp256k1_scalar half = SECP256K1_SCALAR_CONST(0, 0, 0, 0, 0, 0, 0, 2);\n+    int block, i;\n \n-    secp256k1_ge* prec = checked_malloc(&default_error_callback, n * g * sizeof(*prec));\n-    secp256k1_gej gj;\n-    secp256k1_gej nums_gej;\n-    int i, j;\n-\n-    VERIFY_CHECK(g > 0);\n-    VERIFY_CHECK(n > 0);\n-\n-    /* get the generator */\n-    secp256k1_gej_set_ge(&gj, gen);\n-\n-    /* Construct a group element with no known corresponding scalar (nothing up my sleeve). */\n-    {\n-        static const unsigned char nums_b32[33] = \"The scalar for this x is unknown\";\n-        secp256k1_fe nums_x;\n-        secp256k1_ge nums_ge;\n-        int r;\n-        r = secp256k1_fe_set_b32_limit(&nums_x, nums_b32);\n-        (void)r;\n-        VERIFY_CHECK(r);\n-        r = secp256k1_ge_set_xo_var(&nums_ge, &nums_x, 0);\n-        (void)r;\n-        VERIFY_CHECK(r);\n-        secp256k1_gej_set_ge(&nums_gej, &nums_ge);\n-        /* Add G to make the bits in x uniformly distributed. */\n-        secp256k1_gej_add_ge_var(&nums_gej, &nums_gej, gen, NULL);\n+    /* u is the running power of two times gen we're working with, initially gen/2. */\n+    secp256k1_scalar_inverse_var(&half, &half);\n+    secp256k1_gej_set_infinity(&u);\n+    for (i = 255; i >= 0; --i) {\n+        /* Use a very simple multiplication ladder to avoid dependency on ecmult. */\n+        secp256k1_gej_double_var(&u, &u, NULL);\n+        if (secp256k1_scalar_get_bits(&half, i, 1)) {\n+            secp256k1_gej_add_ge_var(&u, &u, gen, NULL);\n+        }\n     }\n \n-    /* compute prec. */\n-    {\n-        secp256k1_gej gbase;\n-        secp256k1_gej numsbase;\n-        secp256k1_gej* precj = checked_malloc(&default_error_callback, n * g * sizeof(*precj));  /* Jacobian versions of prec. */\n-        gbase = gj; /* PREC_G^j * G */\n-        numsbase = nums_gej; /* 2^j * nums. */\n-        for (j = 0; j < n; j++) {\n-            /* Set precj[j*PREC_G .. j*PREC_G+(PREC_G-1)] to (numsbase, numsbase + gbase, ..., numsbase + (PREC_G-1)*gbase). */\n-            precj[j*g] = numsbase;\n-            for (i = 1; i < g; i++) {\n-                secp256k1_gej_add_var(&precj[j*g + i], &precj[j*g + i - 1], &gbase, NULL);\n-            }\n-            /* Multiply gbase by PREC_G. */\n-            for (i = 0; i < bits; i++) {\n-                secp256k1_gej_double_var(&gbase, &gbase, NULL);\n+    for (block = 0; block < blocks; ++block) {\n+        int tooth;\n+        /* Here u = 2^(block*teeth*spacing) * gen/2. */\n+        secp256k1_gej sum;\n+        secp256k1_gej_set_infinity(&sum);\n+        for (tooth = 0; tooth < teeth; ++tooth) {\n+            /* Here u = 2^((block*teeth + tooth)*spacing) * gen/2. */\n+            int bit_off;\n+            /* Make sum = sum(2^((block*teeth + t)*spacing), t=0..tooth). */\n+            secp256k1_gej_add_var(&sum, &sum, &u, NULL);\n+            /* Make u = 2^((block*teeth + tooth)*spacing + 1) * gen/2. */\n+            secp256k1_gej_double_var(&u, &u, NULL);\n+            /* Make ds[tooth] = u = 2^((block*teeth + tooth)*spacing + 1) * gen/2. */\n+            ds[tooth] = u;\n+            /* Make u = 2^((block*teeth + tooth + 1)*spacing). */\n+            for (bit_off = 1; bit_off < spacing; ++bit_off) {\n+                secp256k1_gej_double_var(&u, &u, NULL);\n             }\n-            /* Multiply numbase by 2. */\n-            secp256k1_gej_double_var(&numsbase, &numsbase, NULL);\n-            if (j == n - 2) {\n-                /* In the last iteration, numsbase is (1 - 2^j) * nums instead. */\n-                secp256k1_gej_neg(&numsbase, &numsbase);\n-                secp256k1_gej_add_var(&numsbase, &numsbase, &nums_gej, NULL);\n+        }\n+        /* Now u = 2^(block*(teeth + 1)*spacing) * gen/2. */",
      "path": "src/ecmult_gen_compute_table_impl.h",
      "position": null,
      "original_position": 115,
      "commit_id": "dcc846f18518f77770b6a1fc9e39683c63685d39",
      "original_commit_id": "da73fd9d51137e59f2a4f13807501ee23cc64956",
      "in_reply_to_id": 1446984133,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Indeed! Done.",
      "created_at": "2024-03-17T19:47:00Z",
      "updated_at": "2024-03-17T19:47:00Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1058#discussion_r1527602245",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1527602245"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1058"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 59,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1527602446",
      "pull_request_review_id": 1941576191,
      "id": 1527602446,
      "node_id": "PRRC_kwDOAP4Jqs5bDV0O",
      "diff_hunk": "@@ -29,38 +29,154 @@ static void secp256k1_ecmult_gen_context_clear(secp256k1_ecmult_gen_context *ctx\n     secp256k1_ge_clear(&ctx->final_point_add);\n }\n \n-/* For accelerating the computation of a*G:\n- * To harden against timing attacks, use the following mechanism:\n- * * Break up the multiplicand into groups of PREC_BITS bits, called n_0, n_1, n_2, ..., n_(PREC_N-1).\n- * * Compute sum(n_i * (PREC_G)^i * G + U_i, i=0 ... PREC_N-1), where:\n- *   * U_i = U * 2^i, for i=0 ... PREC_N-2\n- *   * U_i = U * (1-2^(PREC_N-1)), for i=PREC_N-1\n- *   where U is a point with no known corresponding scalar. Note that sum(U_i, i=0 ... PREC_N-1) = 0.\n- * For each i, and each of the PREC_G possible values of n_i, (n_i * (PREC_G)^i * G + U_i) is\n- * precomputed (call it prec(i, n_i)). The formula now becomes sum(prec(i, n_i), i=0 ... PREC_N-1).\n- * None of the resulting prec group elements have a known scalar, and neither do any of\n- * the intermediate sums while computing a*G.\n- * The prec values are stored in secp256k1_ecmult_gen_prec_table[i][n_i] = n_i * (PREC_G)^i * G + U_i.\n- */\n-static void secp256k1_ecmult_gen(const secp256k1_ecmult_gen_context *ctx, secp256k1_gej *r, const secp256k1_scalar *gn) {\n-    int bits = ECMULT_GEN_PREC_BITS;\n-    int g = ECMULT_GEN_PREC_G(bits);\n-    int n = ECMULT_GEN_PREC_N(bits);\n+/* Compute the scalar (2^COMB_BITS - 1) / 2. */\n+static void secp256k1_ecmult_gen_scalar_diff(secp256k1_scalar* diff) {\n+    int i;\n+\n+    /* Compute scalar -1/2. */\n+    secp256k1_scalar neghalf = SECP256K1_SCALAR_CONST(0, 0, 0, 0, 0, 0, 0, 2);\n+    secp256k1_scalar_inverse_var(&neghalf, &neghalf);\n+    secp256k1_scalar_negate(&neghalf, &neghalf);\n+\n+    /* Compute offset = 2^(COMB_BITS - 1). */\n+    secp256k1_scalar_set_int(diff, 1);\n+    for (i = 0; i < COMB_BITS - 1; ++i) {\n+        secp256k1_scalar_add(diff, diff, diff);\n+    }\n \n+    /* The result is the sum of 2^(COMB_BITS - 1) + (-1/2). */\n+    secp256k1_scalar_add(diff, diff, &neghalf);\n+}\n+\n+static void secp256k1_ecmult_gen(const secp256k1_ecmult_gen_context *ctx, secp256k1_gej *r, const secp256k1_scalar *gn) {\n+    uint32_t comb_off;\n     secp256k1_ge add;\n+    secp256k1_fe neg;\n     secp256k1_ge_storage adds;\n-    secp256k1_scalar gnb;\n-    int i, j, n_i;\n+    secp256k1_scalar recoded;\n \n     memset(&adds, 0, sizeof(adds));\n     secp256k1_gej_set_infinity(r);\n \n-    /* Blind scalar/point multiplication by computing (gn-b)*G + b*G instead of gn*G. */\n-    secp256k1_scalar_add(&gnb, gn, &ctx->scalar_offset);\n+    /* We want to compute R = gn*G.\n+     *\n+     * To blind the scalar used in the computation, we rewrite this to be R = (gn-b)*G + b*G, with\n+     * a value b determined by the context. b*G is precomputed as ctx->final_point_add, so we're\n+     * left with computing R = (gn-b)*G + ctx->final_point_add.\n+     *\n+     * The multiplication (gn-b)*G will be performed using a signed-digit multi-comb (see Section\n+     * 3.3 of \"Fast and compact elliptic-curve cryptography\" by Mike Hamburg\n+     * (https://eprint.iacr.org/2012/309).\n+     *\n+     * Let comb(s,P) = sum((2*s_i-1)*2^i*P for i=0..COMB_BITS-1), where s_i is the i'th bit of the\n+     * binary representation of scalar s. So the s_i values determine whether -2^i*P (s_i=0) or\n+     * +2^i*P (s_1) are added together. By manipulating:\n+     *\n+     *     comb(s,P) = sum((2*s_i-1)*2^i*P for i=0..COMB_BITS-1)\n+     * <=> comb(s,P) = sum((2*s_i-1)*2^i for i=0..COMB_BITS-1) * P\n+     * <=> comb(s,P) = (2*sum(s_i*2^i for i=0..COMB_BITS-1) - sum(2^i for i=0..COMB_BITS-1)) * P\n+     * <=> comb(s,P) = (2*s - (2^COMB_BITS - 1)) * P\n+     *\n+     * Thus (gn-b)*G can be written as comb(s,G) if gn-b = 2*s - (2^COMB_BITS - 1), or\n+     * s = (gn - b + (2^COMB_BITS - 1))/2 mod order.\n+     *\n+     * We use an alternative that avoids the modular division by two: we write (gn-b)*G =\n+     * comb(d,G/2). For that to hold it must be the case that\n+     * (gn-b)*G = (2*d + 2^COMB_BITS - 1) * (G/2), or",
      "path": "src/ecmult_gen_impl.h",
      "position": null,
      "original_position": 92,
      "commit_id": "dcc846f18518f77770b6a1fc9e39683c63685d39",
      "original_commit_id": "9fccdf352911d8a463aba09e3ece5e01d5c226c4",
      "in_reply_to_id": 1413425449,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done, as `(gn-b)*G = (2*d - (2^COMB_BITS - 1)) * (G / 2), or`",
      "created_at": "2024-03-17T19:47:45Z",
      "updated_at": "2024-03-17T19:47:45Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1058#discussion_r1527602446",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1527602446"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1058"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 89,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1547395175",
      "pull_request_review_id": 1973018764,
      "id": 1547395175,
      "node_id": "PRRC_kwDOAP4Jqs5cO2Bn",
      "diff_hunk": "@@ -53,8 +53,12 @@ static void secp256k1_ecmult_gen(const secp256k1_ecmult_gen_context *ctx, secp25\n     secp256k1_ge add;\n     secp256k1_fe neg;\n     secp256k1_ge_storage adds;\n-    secp256k1_scalar recoded;\n-    int first = 1;\n+    secp256k1_scalar tmp;\n+    /* Array of uint32_t values large enough to store COMB_BITS bits. Only the bottom\n+     * 8 are ever nonzero, but having the zero padding at the end if COMB_BITS>256\n+     * avoids the need to deal with out-of-bounds reads from a scalar. */\n+    uint32_t recoded[(COMB_BITS + 31) >> 5] = {0};\n+    int first = 1, i;",
      "path": "src/ecmult_gen_impl.h",
      "position": 69,
      "original_position": 11,
      "commit_id": "dcc846f18518f77770b6a1fc9e39683c63685d39",
      "original_commit_id": "1b218b3dca1f4f5ff7870229a312422059635723",
      "in_reply_to_id": null,
      "user": {
        "login": "stratospher",
        "id": 44024636,
        "node_id": "MDQ6VXNlcjQ0MDI0NjM2",
        "avatar_url": "https://avatars.githubusercontent.com/u/44024636?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stratospher",
        "html_url": "https://github.com/stratospher",
        "followers_url": "https://api.github.com/users/stratospher/followers",
        "following_url": "https://api.github.com/users/stratospher/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stratospher/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stratospher/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stratospher/subscriptions",
        "organizations_url": "https://api.github.com/users/stratospher/orgs",
        "repos_url": "https://api.github.com/users/stratospher/repos",
        "events_url": "https://api.github.com/users/stratospher/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stratospher/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "1b218b3: accidental but i'm surprised it compiles.",
      "created_at": "2024-04-02T08:28:32Z",
      "updated_at": "2024-04-02T16:38:13Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1058#discussion_r1547395175",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1547395175"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1058"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 64,
      "original_line": 64,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1547438775",
      "pull_request_review_id": 1973018764,
      "id": 1547438775,
      "node_id": "PRRC_kwDOAP4Jqs5cPAq3",
      "diff_hunk": "@@ -95,7 +99,12 @@ static void secp256k1_ecmult_gen(const secp256k1_ecmult_gen_context *ctx, secp25\n      */\n \n     /* Compute the scalar (gn + ctx->scalar_offset). */\n-    secp256k1_scalar_add(&recoded, &ctx->scalar_offset, gn);\n+    secp256k1_scalar_add(&tmp, &ctx->scalar_offset, gn);\n+    /* Convert to recoded array. */\n+    for (i = 0; i < 8; ++i) {",
      "path": "src/ecmult_gen_impl.h",
      "position": null,
      "original_position": 22,
      "commit_id": "dcc846f18518f77770b6a1fc9e39683c63685d39",
      "original_commit_id": "1b218b3dca1f4f5ff7870229a312422059635723",
      "in_reply_to_id": null,
      "user": {
        "login": "stratospher",
        "id": 44024636,
        "node_id": "MDQ6VXNlcjQ0MDI0NjM2",
        "avatar_url": "https://avatars.githubusercontent.com/u/44024636?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stratospher",
        "html_url": "https://github.com/stratospher",
        "followers_url": "https://api.github.com/users/stratospher/followers",
        "following_url": "https://api.github.com/users/stratospher/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stratospher/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stratospher/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stratospher/subscriptions",
        "organizations_url": "https://api.github.com/users/stratospher/orgs",
        "repos_url": "https://api.github.com/users/stratospher/repos",
        "events_url": "https://api.github.com/users/stratospher/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stratospher/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "1b218b3: don't we still need to read the last 8 non-zero bits here? maybe just `i < (COMB_BITS + 31) >> 5` instead of `i < 8`.",
      "created_at": "2024-04-02T08:55:45Z",
      "updated_at": "2024-04-02T16:38:13Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1058#discussion_r1547438775",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1547438775"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1058"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 104,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1548076815",
      "pull_request_review_id": 1973018764,
      "id": 1548076815,
      "node_id": "PRRC_kwDOAP4Jqs5cRccP",
      "diff_hunk": "@@ -109,6 +109,10 @@ typedef struct {\n      * ecmult_gen_impl.h for more details. */\n     secp256k1_scalar scalar_offset;\n     secp256k1_ge final_point_add;\n+\n+    /* Factor used for projective blinding. This value is used to rescale the Z\n+     * coordinate of the first table lookup. */\n+    secp256k1_fe proj_blind;",
      "path": "src/ecmult_gen.h",
      "position": 144,
      "original_position": 7,
      "commit_id": "dcc846f18518f77770b6a1fc9e39683c63685d39",
      "original_commit_id": "b368086dae46d4da4817cbc12205b5d4ad0c0a5c",
      "in_reply_to_id": null,
      "user": {
        "login": "stratospher",
        "id": 44024636,
        "node_id": "MDQ6VXNlcjQ0MDI0NjM2",
        "avatar_url": "https://avatars.githubusercontent.com/u/44024636?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stratospher",
        "html_url": "https://github.com/stratospher",
        "followers_url": "https://api.github.com/users/stratospher/followers",
        "following_url": "https://api.github.com/users/stratospher/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stratospher/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stratospher/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stratospher/subscriptions",
        "organizations_url": "https://api.github.com/users/stratospher/orgs",
        "repos_url": "https://api.github.com/users/stratospher/repos",
        "events_url": "https://api.github.com/users/stratospher/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stratospher/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "b368086: we could clear this in `secp256k1_ecmult_gen_context_clear`",
      "created_at": "2024-04-02T15:06:43Z",
      "updated_at": "2024-04-02T16:38:13Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1058#discussion_r1548076815",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1548076815"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1058"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 134,
      "original_line": 134,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1548118010",
      "pull_request_review_id": 1973018764,
      "id": 1548118010,
      "node_id": "PRRC_kwDOAP4Jqs5cRmf6",
      "diff_hunk": "@@ -265,7 +269,11 @@ static void secp256k1_ecmult_gen_blind(secp256k1_ecmult_gen_context *ctx, const\n     secp256k1_rfc6979_hmac_sha256_initialize(&rng, keydata, 64);\n     memset(keydata, 0, sizeof(keydata));\n \n-    /* TODO: reintroduce projective blinding. */\n+    /* Compute projective blinding factor (cannot be 0). */\n+    secp256k1_rfc6979_hmac_sha256_generate(&rng, nonce32, 32);\n+    secp256k1_fe_set_b32_mod(&f, nonce32);\n+    secp256k1_fe_cmov(&f, &secp256k1_fe_one, secp256k1_fe_normalizes_to_zero(&f));\n+    ctx->proj_blind = f;",
      "path": "src/ecmult_gen_impl.h",
      "position": 345,
      "original_position": 34,
      "commit_id": "dcc846f18518f77770b6a1fc9e39683c63685d39",
      "original_commit_id": "b368086dae46d4da4817cbc12205b5d4ad0c0a5c",
      "in_reply_to_id": null,
      "user": {
        "login": "stratospher",
        "id": 44024636,
        "node_id": "MDQ6VXNlcjQ0MDI0NjM2",
        "avatar_url": "https://avatars.githubusercontent.com/u/44024636?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stratospher",
        "html_url": "https://github.com/stratospher",
        "followers_url": "https://api.github.com/users/stratospher/followers",
        "following_url": "https://api.github.com/users/stratospher/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stratospher/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stratospher/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stratospher/subscriptions",
        "organizations_url": "https://api.github.com/users/stratospher/orgs",
        "repos_url": "https://api.github.com/users/stratospher/repos",
        "events_url": "https://api.github.com/users/stratospher/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stratospher/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "b368086: maybe clear `f` too.",
      "created_at": "2024-04-02T15:31:59Z",
      "updated_at": "2024-04-02T16:38:13Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1058#discussion_r1548118010",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1548118010"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1058"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 320,
      "original_line": 320,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1548218208",
      "pull_request_review_id": 1974372150,
      "id": 1548218208,
      "node_id": "PRRC_kwDOAP4Jqs5cR-9g",
      "diff_hunk": "@@ -1,83 +1,94 @@\n-/***********************************************************************\n- * Copyright (c) 2013, 2014, 2015 Pieter Wuille, Gregory Maxwell       *\n- * Distributed under the MIT software license, see the accompanying    *\n- * file COPYING or https://www.opensource.org/licenses/mit-license.php.*\n- ***********************************************************************/\n+/*******************************************************************************\n+ * Copyright (c) 2013-2015, 2021 Pieter Wuille, Gregory Maxwell, Peter Dettman *\n+ * Distributed under the MIT software license, see the accompanying            *\n+ * file COPYING or https://www.opensource.org/licenses/mit-license.php.        *\n+ *******************************************************************************/\n \n #ifndef SECP256K1_ECMULT_GEN_COMPUTE_TABLE_IMPL_H\n #define SECP256K1_ECMULT_GEN_COMPUTE_TABLE_IMPL_H\n \n #include \"ecmult_gen_compute_table.h\"\n #include \"group_impl.h\"\n #include \"field_impl.h\"\n+#include \"scalar_impl.h\"\n #include \"ecmult_gen.h\"\n #include \"util.h\"\n \n-static void secp256k1_ecmult_gen_compute_table(secp256k1_ge_storage* table, const secp256k1_ge* gen, int bits) {\n-    int g = ECMULT_GEN_PREC_G(bits);\n-    int n = ECMULT_GEN_PREC_N(bits);\n+static void secp256k1_ecmult_gen_compute_table(secp256k1_ge_storage* table, const secp256k1_ge* gen, int blocks, int teeth) {\n+    size_t points = ((size_t)1) << (teeth - 1);\n+    size_t points_total = points * blocks;\n+    int spacing = (256 + blocks * teeth - 1) / (blocks * teeth);\n+    secp256k1_ge* prec = checked_malloc(&default_error_callback, points_total * sizeof(*prec));\n+    secp256k1_gej* ds = checked_malloc(&default_error_callback, teeth * sizeof(*ds));\n+    secp256k1_gej* vs = checked_malloc(&default_error_callback, points_total * sizeof(*vs));\n+    secp256k1_gej u;\n+    size_t vs_pos = 0;\n+    secp256k1_scalar half = SECP256K1_SCALAR_CONST(0, 0, 0, 0, 0, 0, 0, 2);\n+    int block, i;\n \n-    secp256k1_ge* prec = checked_malloc(&default_error_callback, n * g * sizeof(*prec));\n-    secp256k1_gej gj;\n-    secp256k1_gej nums_gej;\n-    int i, j;\n-\n-    VERIFY_CHECK(g > 0);\n-    VERIFY_CHECK(n > 0);\n-\n-    /* get the generator */\n-    secp256k1_gej_set_ge(&gj, gen);\n-\n-    /* Construct a group element with no known corresponding scalar (nothing up my sleeve). */\n-    {\n-        static const unsigned char nums_b32[33] = \"The scalar for this x is unknown\";\n-        secp256k1_fe nums_x;\n-        secp256k1_ge nums_ge;\n-        int r;\n-        r = secp256k1_fe_set_b32_limit(&nums_x, nums_b32);\n-        (void)r;\n-        VERIFY_CHECK(r);\n-        r = secp256k1_ge_set_xo_var(&nums_ge, &nums_x, 0);\n-        (void)r;\n-        VERIFY_CHECK(r);\n-        secp256k1_gej_set_ge(&nums_gej, &nums_ge);\n-        /* Add G to make the bits in x uniformly distributed. */\n-        secp256k1_gej_add_ge_var(&nums_gej, &nums_gej, gen, NULL);\n+    /* u is the running power of two times gen we're working with, initially gen/2. */\n+    secp256k1_scalar_inverse_var(&half, &half);\n+    secp256k1_gej_set_infinity(&u);\n+    for (i = 255; i >= 0; --i) {\n+        /* Use a very simple multiplication ladder to avoid dependency on ecmult. */\n+        secp256k1_gej_double_var(&u, &u, NULL);\n+        if (secp256k1_scalar_get_bits(&half, i, 1)) {\n+            secp256k1_gej_add_ge_var(&u, &u, gen, NULL);\n+        }\n     }\n \n-    /* compute prec. */\n-    {\n-        secp256k1_gej gbase;\n-        secp256k1_gej numsbase;\n-        secp256k1_gej* precj = checked_malloc(&default_error_callback, n * g * sizeof(*precj));  /* Jacobian versions of prec. */\n-        gbase = gj; /* PREC_G^j * G */\n-        numsbase = nums_gej; /* 2^j * nums. */\n-        for (j = 0; j < n; j++) {\n-            /* Set precj[j*PREC_G .. j*PREC_G+(PREC_G-1)] to (numsbase, numsbase + gbase, ..., numsbase + (PREC_G-1)*gbase). */\n-            precj[j*g] = numsbase;\n-            for (i = 1; i < g; i++) {\n-                secp256k1_gej_add_var(&precj[j*g + i], &precj[j*g + i - 1], &gbase, NULL);\n-            }\n-            /* Multiply gbase by PREC_G. */\n-            for (i = 0; i < bits; i++) {\n-                secp256k1_gej_double_var(&gbase, &gbase, NULL);\n+    for (block = 0; block < blocks; ++block) {\n+        int tooth;\n+        /* Here u = 2^(block*teeth*spacing) * gen/2. */\n+        secp256k1_gej sum;\n+        secp256k1_gej_set_infinity(&sum);\n+        for (tooth = 0; tooth < teeth; ++tooth) {\n+            /* Here u = 2^((block*teeth + tooth)*spacing) * gen/2. */\n+            int bit_off;\n+            /* Make sum = sum(2^((block*teeth + t)*spacing), t=0..tooth). */\n+            secp256k1_gej_add_var(&sum, &sum, &u, NULL);\n+            /* Make u = 2^((block*teeth + tooth)*spacing + 1) * gen/2. */\n+            secp256k1_gej_double_var(&u, &u, NULL);\n+            /* Make ds[tooth] = u = 2^((block*teeth + tooth)*spacing + 1) * gen/2. */\n+            ds[tooth] = u;\n+            /* Make u = 2^((block*teeth + tooth + 1)*spacing). */\n+            for (bit_off = 1; bit_off < spacing; ++bit_off) {\n+                secp256k1_gej_double_var(&u, &u, NULL);\n             }\n-            /* Multiply numbase by 2. */\n-            secp256k1_gej_double_var(&numsbase, &numsbase, NULL);\n-            if (j == n - 2) {\n-                /* In the last iteration, numsbase is (1 - 2^j) * nums instead. */\n-                secp256k1_gej_neg(&numsbase, &numsbase);\n-                secp256k1_gej_add_var(&numsbase, &numsbase, &nums_gej, NULL);\n+        }\n+        /* Now u = 2^(block*(teeth + 1)*spacing) * gen/2. */\n+\n+        /* Next, compute the table entries for block block in Jacobian coordinates.\n+         * The entries will occupy vs[block*points + i] for i=0..points-1.\n+         * We start by computing the first (i=0) value corresponding to all summed\n+         * powers of two times G being negative. */\n+        secp256k1_gej_neg(&vs[vs_pos++], &sum);\n+        /* And then teeth-1 times \"double\" the range of i values for which the table\n+         * is computed: in each iteration, double the table by taking an existing\n+         * table entry and adding ds[tooth]. */\n+        for (tooth = 0; tooth < teeth - 1; ++tooth) {\n+            size_t stride = ((size_t)1) << tooth;\n+            size_t index;\n+            for (index = 0; index < stride; ++index, ++vs_pos) {\n+                secp256k1_gej_add_var(&vs[vs_pos], &vs[vs_pos - stride], &ds[tooth], NULL);",
      "path": "src/ecmult_gen_compute_table_impl.h",
      "position": 132,
      "original_position": 129,
      "commit_id": "dcc846f18518f77770b6a1fc9e39683c63685d39",
      "original_commit_id": "da73fd9d51137e59f2a4f13807501ee23cc64956",
      "in_reply_to_id": 1518863439,
      "user": {
        "login": "stratospher",
        "id": 44024636,
        "node_id": "MDQ6VXNlcjQ0MDI0NjM2",
        "avatar_url": "https://avatars.githubusercontent.com/u/44024636?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stratospher",
        "html_url": "https://github.com/stratospher",
        "followers_url": "https://api.github.com/users/stratospher/followers",
        "following_url": "https://api.github.com/users/stratospher/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stratospher/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stratospher/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stratospher/subscriptions",
        "organizations_url": "https://api.github.com/users/stratospher/orgs",
        "repos_url": "https://api.github.com/users/stratospher/repos",
        "events_url": "https://api.github.com/users/stratospher/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stratospher/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "oh makes sense.",
      "created_at": "2024-04-02T16:38:46Z",
      "updated_at": "2024-04-02T16:38:46Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1058#discussion_r1548218208",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1548218208"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1058"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 85,
      "original_line": 85,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1549065858",
      "pull_request_review_id": 1975763139,
      "id": 1549065858,
      "node_id": "PRRC_kwDOAP4Jqs5cVN6C",
      "diff_hunk": "@@ -10,19 +10,90 @@\n #include \"scalar.h\"\n #include \"group.h\"\n \n-#if ECMULT_GEN_PREC_BITS != 2 && ECMULT_GEN_PREC_BITS != 4 && ECMULT_GEN_PREC_BITS != 8\n-#  error \"Set ECMULT_GEN_PREC_BITS to 2, 4 or 8.\"\n+/* Configuration parameters for the signed-digit multi-comb algorithm:\n+ *\n+ * - COMB_BLOCKS is the number of lookup tables.\n+ * - COMB_TEETH is the number of bits covered by one table.\n+ *\n+ * The comb's spacing (COMB_SPACING), or the distance between the teeth,\n+ * is defined as ceil(256 / (COMB_BLOCKS * COMB_TEETH)).\n+ *\n+ * The size of the precomputed table is COMB_BLOCKS * (1 << (COMB_TEETH - 1))\n+ * secp256k1_ge_storages.\n+ *\n+ * The number of point additions equals COMB_BLOCKS * COMB_SPACING. Each point\n+ * addition involves a cmov from (1 << (COMB_TEETH - 1)) table entries and a\n+ * conditional negation.\n+ *\n+ * The number of point doublings is COMB_SPACING - 1. */\n+\n+#if defined(EXHAUSTIVE_TEST_ORDER)\n+/* We need to control these values for exhaustive tests because\n+ * the tables cannot have infinities in them (secp256k1_ge_storage\n+ * doesn't support infinities) */\n+#  undef COMB_BLOCKS\n+#  undef COMB_TEETH\n+#  if EXHAUSTIVE_TEST_ORDER > 32\n+#    define COMB_BLOCKS 52\n+#    define COMB_TEETH 5\n+#  elif EXHAUSTIVE_TEST_ORDER > 16\n+#    define COMB_BLOCKS 64\n+#    define COMB_TEETH 4\n+#  elif EXHAUSTIVE_TEST_ORDER > 8\n+#    define COMB_BLOCKS 86\n+#    define COMB_TEETH 3\n+#  elif EXHAUSTIVE_TEST_ORDER > 4\n+#    define COMB_BLOCKS 128\n+#    define COMB_TEETH 2\n+#  else\n+#    define COMB_BLOCKS 256\n+#    define COMB_TEETH 1\n+#  endif\n+#else /* !defined(EXHAUSTIVE_TEST_ORDER) */\n+/* Use (11, 6) as default configuration, which results in a 22 kB table. */\n+#  ifndef COMB_BLOCKS\n+#    define COMB_BLOCKS 11\n+#  endif\n+#  ifndef COMB_TEETH\n+#    define COMB_TEETH 6\n+#  endif\n+#endif /* defined(EXHAUSTIVE_TEST_ORDER) */\n+\n+/* Range checks on the parameters. */\n+#if !(1 <= COMB_BLOCKS && COMB_BLOCKS <= 256)\n+#  error \"COMB_BLOCKS must be in the range [1, 256]\"\n+#endif\n+#if !(1 <= COMB_TEETH && COMB_TEETH <= 8)\n+#  error \"COMB_TEETH must be in the range [1, 8]\"\n+#endif\n+\n+/* The remaining COMB_* parameters are derived values, don't modify these. */\n+/* - The distance between the teeth of the comb. */\n+#define COMB_SPACING ((255 + COMB_BLOCKS * COMB_TEETH) / (COMB_BLOCKS * COMB_TEETH))\n+/* - The number of bits covered by all the combs; must be at least 256. */\n+#define COMB_BITS (COMB_BLOCKS * COMB_TEETH * COMB_SPACING)\n+/* - The number of points per table. */\n+#define COMB_POINTS (1 << (COMB_TEETH - 1))\n+\n+/* Additional sanity checks. */\n+#if (COMB_BLOCKS - 1) * COMB_TEETH * COMB_SPACING >= 256\n+#  error \"COMB_BLOCKS can be reduced\"\n+#endif\n+#if COMB_BLOCKS * (COMB_TEETH - 1) * COMB_SPACING >= 256\n+#  error \"COMB_TEETH can be reduced\"\n #endif\n-#define ECMULT_GEN_PREC_G(bits) (1 << bits)\n-#define ECMULT_GEN_PREC_N(bits) (256 / bits)\n \n typedef struct {\n     /* Whether the context has been built. */\n     int built;\n \n-    /* Blinding values used when computing (n-b)G + bG. */\n-    secp256k1_scalar blind; /* -b */\n-    secp256k1_gej initial;  /* bG */\n+    /* Blinding values used when computing nG as (n-b)G + bG. */\n+    secp256k1_scalar scalar_offset; /* -b */\n+    secp256k1_ge final_point_add;  /* bG */",
      "path": "src/ecmult_gen.h",
      "position": null,
      "original_position": 97,
      "commit_id": "dcc846f18518f77770b6a1fc9e39683c63685d39",
      "original_commit_id": "a7f0d0e5dec0b88676b9b6c79f21e12405f7befb",
      "in_reply_to_id": 776926428,
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "16beb95db60757bbf559e97c3d0cef519355f410  Initial gej blinding -> final ge blinding \r\n\r\nnit: I suggest renaming to `ge_offset`.\r\n - `s/_add/_offset` to make this consistent with `scalar_offset`.\r\n -  drop `final` to uncouple the naming from whether the blinding is applied at the beginning or at the end\r\n - `s/point/ge` because that's more common in our code\r\n\r\n(feel free to pick just any of these transforms if you don't like all of them) \r\n\r\nIf you accept this, you'll probably also want to rename `f`, `final1`, `final2` in the `tests.c` then.\r\n\r\nedit: After looking at all the commits, I see that this could be a rebase mess... I think, it's okay to add a rename commit if you like the suggestion.",
      "created_at": "2024-04-03T07:19:29Z",
      "updated_at": "2024-04-03T09:13:23Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1058#discussion_r1549065858",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1549065858"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1058"
        }
      },
      "start_line": null,
      "original_start_line": 90,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 92,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1549282824",
      "pull_request_review_id": 1975763139,
      "id": 1549282824,
      "node_id": "PRRC_kwDOAP4Jqs5cWC4I",
      "diff_hunk": "@@ -1,83 +1,95 @@\n-/***********************************************************************\n- * Copyright (c) 2013, 2014, 2015 Pieter Wuille, Gregory Maxwell       *\n- * Distributed under the MIT software license, see the accompanying    *\n- * file COPYING or https://www.opensource.org/licenses/mit-license.php.*\n- ***********************************************************************/\n+/*******************************************************************************\n+ * Copyright (c) 2013-2015, 2021 Pieter Wuille, Gregory Maxwell, Peter Dettman *\n+ * Distributed under the MIT software license, see the accompanying            *\n+ * file COPYING or https://www.opensource.org/licenses/mit-license.php.        *\n+ *******************************************************************************/\n \n #ifndef SECP256K1_ECMULT_GEN_COMPUTE_TABLE_IMPL_H\n #define SECP256K1_ECMULT_GEN_COMPUTE_TABLE_IMPL_H\n \n #include \"ecmult_gen_compute_table.h\"\n #include \"group_impl.h\"\n #include \"field_impl.h\"\n+#include \"scalar_impl.h\"\n #include \"ecmult_gen.h\"\n #include \"util.h\"\n \n-static void secp256k1_ecmult_gen_compute_table(secp256k1_ge_storage* table, const secp256k1_ge* gen, int bits) {\n-    int g = ECMULT_GEN_PREC_G(bits);\n-    int n = ECMULT_GEN_PREC_N(bits);\n+static void secp256k1_ecmult_gen_compute_table(secp256k1_ge_storage* table, const secp256k1_ge* gen, int blocks, int teeth) {\n+    size_t points = ((size_t)1) << (teeth - 1);\n+    size_t points_total = points * blocks;\n+    int spacing = (256 + blocks * teeth - 1) / (blocks * teeth);\n+    secp256k1_ge* prec = checked_malloc(&default_error_callback, points_total * sizeof(*prec));\n+    secp256k1_gej* ds = checked_malloc(&default_error_callback, teeth * sizeof(*ds));\n+    secp256k1_gej* vs = checked_malloc(&default_error_callback, points_total * sizeof(*vs));\n+    secp256k1_gej u;\n+    size_t vs_pos = 0;\n+    secp256k1_scalar half = SECP256K1_SCALAR_CONST(0, 0, 0, 0, 0, 0, 0, 2);\n+    int block, i;\n \n-    secp256k1_ge* prec = checked_malloc(&default_error_callback, n * g * sizeof(*prec));\n-    secp256k1_gej gj;\n-    secp256k1_gej nums_gej;\n-    int i, j;\n-\n-    VERIFY_CHECK(g > 0);\n-    VERIFY_CHECK(n > 0);\n-\n-    /* get the generator */\n-    secp256k1_gej_set_ge(&gj, gen);\n-\n-    /* Construct a group element with no known corresponding scalar (nothing up my sleeve). */\n-    {\n-        static const unsigned char nums_b32[33] = \"The scalar for this x is unknown\";\n-        secp256k1_fe nums_x;\n-        secp256k1_ge nums_ge;\n-        int r;\n-        r = secp256k1_fe_set_b32_limit(&nums_x, nums_b32);\n-        (void)r;\n-        VERIFY_CHECK(r);\n-        r = secp256k1_ge_set_xo_var(&nums_ge, &nums_x, 0);\n-        (void)r;\n-        VERIFY_CHECK(r);\n-        secp256k1_gej_set_ge(&nums_gej, &nums_ge);\n-        /* Add G to make the bits in x uniformly distributed. */\n-        secp256k1_gej_add_ge_var(&nums_gej, &nums_gej, gen, NULL);\n+    /* u is the running power of two times gen we're working with, initially gen/2. */",
      "path": "src/ecmult_gen_compute_table_impl.h",
      "position": 42,
      "original_position": 63,
      "commit_id": "dcc846f18518f77770b6a1fc9e39683c63685d39",
      "original_commit_id": "0a63916f36b92a0508aa7f1df7b8e659bc42bfa4",
      "in_reply_to_id": null,
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "https://github.com/bitcoin-core/secp256k1/commit/0a63916f36b92a0508aa7f1df7b8e659bc42bfa4 Signed-digit multi-comb ecmult_gen algorithm\r\n\r\nWant to assert that 2*u == gen?",
      "created_at": "2024-04-03T08:55:15Z",
      "updated_at": "2024-04-03T09:13:23Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1058#discussion_r1549282824",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1549282824"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1058"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 30,
      "original_line": 30,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1550128420",
      "pull_request_review_id": 1977449834,
      "id": 1550128420,
      "node_id": "PRRC_kwDOAP4Jqs5cZRUk",
      "diff_hunk": "@@ -53,8 +53,12 @@ static void secp256k1_ecmult_gen(const secp256k1_ecmult_gen_context *ctx, secp25\n     secp256k1_ge add;\n     secp256k1_fe neg;\n     secp256k1_ge_storage adds;\n-    secp256k1_scalar recoded;\n-    int first = 1;\n+    secp256k1_scalar tmp;\n+    /* Array of uint32_t values large enough to store COMB_BITS bits. Only the bottom\n+     * 8 are ever nonzero, but having the zero padding at the end if COMB_BITS>256\n+     * avoids the need to deal with out-of-bounds reads from a scalar. */\n+    uint32_t recoded[(COMB_BITS + 31) >> 5] = {0};\n+    int first = 1, i;",
      "path": "src/ecmult_gen_impl.h",
      "position": 69,
      "original_position": 11,
      "commit_id": "dcc846f18518f77770b6a1fc9e39683c63685d39",
      "original_commit_id": "1b218b3dca1f4f5ff7870229a312422059635723",
      "in_reply_to_id": 1547395175,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This line defines two variables, `first` and `i`, and initializes `first` to 1. Is this surprising?",
      "created_at": "2024-04-03T17:04:19Z",
      "updated_at": "2024-04-03T17:04:19Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1058#discussion_r1550128420",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1550128420"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1058"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 64,
      "original_line": 64,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1550137382",
      "pull_request_review_id": 1977460769,
      "id": 1550137382,
      "node_id": "PRRC_kwDOAP4Jqs5cZTgm",
      "diff_hunk": "@@ -95,7 +99,12 @@ static void secp256k1_ecmult_gen(const secp256k1_ecmult_gen_context *ctx, secp25\n      */\n \n     /* Compute the scalar (gn + ctx->scalar_offset). */\n-    secp256k1_scalar_add(&recoded, &ctx->scalar_offset, gn);\n+    secp256k1_scalar_add(&tmp, &ctx->scalar_offset, gn);\n+    /* Convert to recoded array. */\n+    for (i = 0; i < 8; ++i) {",
      "path": "src/ecmult_gen_impl.h",
      "position": null,
      "original_position": 22,
      "commit_id": "dcc846f18518f77770b6a1fc9e39683c63685d39",
      "original_commit_id": "1b218b3dca1f4f5ff7870229a312422059635723",
      "in_reply_to_id": 1547438775,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Well a scalar cannot contain more than 256 bits, and asking about higher bits than that is illegal, so `i` cannot exceed 7. The `recoded` array may be larger if the combs straddle the 256-bit boundary, but in that case the last `recoded` element will just always be 0, and thus loop doesn't need to touch it.\r\n\r\nIn commit \"Permit COMB_BITS < 256 for exhaustive tests\" a condition is added to this loop that makes it `i < 8 && i < ((COMB_BITS + 31) >> 5)`.",
      "created_at": "2024-04-03T17:09:23Z",
      "updated_at": "2024-04-03T17:09:23Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1058#discussion_r1550137382",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1550137382"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1058"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 104,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1550173943",
      "pull_request_review_id": 1977520511,
      "id": 1550173943,
      "node_id": "PRRC_kwDOAP4Jqs5cZcb3",
      "diff_hunk": "@@ -109,6 +109,10 @@ typedef struct {\n      * ecmult_gen_impl.h for more details. */\n     secp256k1_scalar scalar_offset;\n     secp256k1_ge final_point_add;\n+\n+    /* Factor used for projective blinding. This value is used to rescale the Z\n+     * coordinate of the first table lookup. */\n+    secp256k1_fe proj_blind;",
      "path": "src/ecmult_gen.h",
      "position": 144,
      "original_position": 7,
      "commit_id": "dcc846f18518f77770b6a1fc9e39683c63685d39",
      "original_commit_id": "b368086dae46d4da4817cbc12205b5d4ad0c0a5c",
      "in_reply_to_id": 1548076815,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Good point, done.",
      "created_at": "2024-04-03T17:27:30Z",
      "updated_at": "2024-04-03T17:27:30Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1058#discussion_r1550173943",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1550173943"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1058"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 134,
      "original_line": 134,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1550174081",
      "pull_request_review_id": 1977520806,
      "id": 1550174081,
      "node_id": "PRRC_kwDOAP4Jqs5cZceB",
      "diff_hunk": "@@ -265,7 +269,11 @@ static void secp256k1_ecmult_gen_blind(secp256k1_ecmult_gen_context *ctx, const\n     secp256k1_rfc6979_hmac_sha256_initialize(&rng, keydata, 64);\n     memset(keydata, 0, sizeof(keydata));\n \n-    /* TODO: reintroduce projective blinding. */\n+    /* Compute projective blinding factor (cannot be 0). */\n+    secp256k1_rfc6979_hmac_sha256_generate(&rng, nonce32, 32);\n+    secp256k1_fe_set_b32_mod(&f, nonce32);\n+    secp256k1_fe_cmov(&f, &secp256k1_fe_one, secp256k1_fe_normalizes_to_zero(&f));\n+    ctx->proj_blind = f;",
      "path": "src/ecmult_gen_impl.h",
      "position": 345,
      "original_position": 34,
      "commit_id": "dcc846f18518f77770b6a1fc9e39683c63685d39",
      "original_commit_id": "b368086dae46d4da4817cbc12205b5d4ad0c0a5c",
      "in_reply_to_id": 1548118010,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done.",
      "created_at": "2024-04-03T17:27:34Z",
      "updated_at": "2024-04-03T17:27:34Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1058#discussion_r1550174081",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1550174081"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1058"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 320,
      "original_line": 320,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1550176640",
      "pull_request_review_id": 1977523606,
      "id": 1550176640,
      "node_id": "PRRC_kwDOAP4Jqs5cZdGA",
      "diff_hunk": "@@ -10,19 +10,90 @@\n #include \"scalar.h\"\n #include \"group.h\"\n \n-#if ECMULT_GEN_PREC_BITS != 2 && ECMULT_GEN_PREC_BITS != 4 && ECMULT_GEN_PREC_BITS != 8\n-#  error \"Set ECMULT_GEN_PREC_BITS to 2, 4 or 8.\"\n+/* Configuration parameters for the signed-digit multi-comb algorithm:\n+ *\n+ * - COMB_BLOCKS is the number of lookup tables.\n+ * - COMB_TEETH is the number of bits covered by one table.\n+ *\n+ * The comb's spacing (COMB_SPACING), or the distance between the teeth,\n+ * is defined as ceil(256 / (COMB_BLOCKS * COMB_TEETH)).\n+ *\n+ * The size of the precomputed table is COMB_BLOCKS * (1 << (COMB_TEETH - 1))\n+ * secp256k1_ge_storages.\n+ *\n+ * The number of point additions equals COMB_BLOCKS * COMB_SPACING. Each point\n+ * addition involves a cmov from (1 << (COMB_TEETH - 1)) table entries and a\n+ * conditional negation.\n+ *\n+ * The number of point doublings is COMB_SPACING - 1. */\n+\n+#if defined(EXHAUSTIVE_TEST_ORDER)\n+/* We need to control these values for exhaustive tests because\n+ * the tables cannot have infinities in them (secp256k1_ge_storage\n+ * doesn't support infinities) */\n+#  undef COMB_BLOCKS\n+#  undef COMB_TEETH\n+#  if EXHAUSTIVE_TEST_ORDER > 32\n+#    define COMB_BLOCKS 52\n+#    define COMB_TEETH 5\n+#  elif EXHAUSTIVE_TEST_ORDER > 16\n+#    define COMB_BLOCKS 64\n+#    define COMB_TEETH 4\n+#  elif EXHAUSTIVE_TEST_ORDER > 8\n+#    define COMB_BLOCKS 86\n+#    define COMB_TEETH 3\n+#  elif EXHAUSTIVE_TEST_ORDER > 4\n+#    define COMB_BLOCKS 128\n+#    define COMB_TEETH 2\n+#  else\n+#    define COMB_BLOCKS 256\n+#    define COMB_TEETH 1\n+#  endif\n+#else /* !defined(EXHAUSTIVE_TEST_ORDER) */\n+/* Use (11, 6) as default configuration, which results in a 22 kB table. */\n+#  ifndef COMB_BLOCKS\n+#    define COMB_BLOCKS 11\n+#  endif\n+#  ifndef COMB_TEETH\n+#    define COMB_TEETH 6\n+#  endif\n+#endif /* defined(EXHAUSTIVE_TEST_ORDER) */\n+\n+/* Range checks on the parameters. */\n+#if !(1 <= COMB_BLOCKS && COMB_BLOCKS <= 256)\n+#  error \"COMB_BLOCKS must be in the range [1, 256]\"\n+#endif\n+#if !(1 <= COMB_TEETH && COMB_TEETH <= 8)\n+#  error \"COMB_TEETH must be in the range [1, 8]\"\n+#endif\n+\n+/* The remaining COMB_* parameters are derived values, don't modify these. */\n+/* - The distance between the teeth of the comb. */\n+#define COMB_SPACING ((255 + COMB_BLOCKS * COMB_TEETH) / (COMB_BLOCKS * COMB_TEETH))\n+/* - The number of bits covered by all the combs; must be at least 256. */\n+#define COMB_BITS (COMB_BLOCKS * COMB_TEETH * COMB_SPACING)\n+/* - The number of points per table. */\n+#define COMB_POINTS (1 << (COMB_TEETH - 1))\n+\n+/* Additional sanity checks. */\n+#if (COMB_BLOCKS - 1) * COMB_TEETH * COMB_SPACING >= 256\n+#  error \"COMB_BLOCKS can be reduced\"\n+#endif\n+#if COMB_BLOCKS * (COMB_TEETH - 1) * COMB_SPACING >= 256\n+#  error \"COMB_TEETH can be reduced\"\n #endif\n-#define ECMULT_GEN_PREC_G(bits) (1 << bits)\n-#define ECMULT_GEN_PREC_N(bits) (256 / bits)\n \n typedef struct {\n     /* Whether the context has been built. */\n     int built;\n \n-    /* Blinding values used when computing (n-b)G + bG. */\n-    secp256k1_scalar blind; /* -b */\n-    secp256k1_gej initial;  /* bG */\n+    /* Blinding values used when computing nG as (n-b)G + bG. */\n+    secp256k1_scalar scalar_offset; /* -b */\n+    secp256k1_ge final_point_add;  /* bG */",
      "path": "src/ecmult_gen.h",
      "position": null,
      "original_position": 97,
      "commit_id": "dcc846f18518f77770b6a1fc9e39683c63685d39",
      "original_commit_id": "a7f0d0e5dec0b88676b9b6c79f21e12405f7befb",
      "in_reply_to_id": 776926428,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done, renamed it to `ge_offset` across all commits. `f`, `final1`, `final2` were renamed to `p`, `p1`, `p2` respectively.",
      "created_at": "2024-04-03T17:28:56Z",
      "updated_at": "2024-04-03T17:28:56Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1058#discussion_r1550176640",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1550176640"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1058"
        }
      },
      "start_line": null,
      "original_start_line": 90,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 92,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1550180223",
      "pull_request_review_id": 1977526982,
      "id": 1550180223,
      "node_id": "PRRC_kwDOAP4Jqs5cZd9_",
      "diff_hunk": "@@ -1,83 +1,95 @@\n-/***********************************************************************\n- * Copyright (c) 2013, 2014, 2015 Pieter Wuille, Gregory Maxwell       *\n- * Distributed under the MIT software license, see the accompanying    *\n- * file COPYING or https://www.opensource.org/licenses/mit-license.php.*\n- ***********************************************************************/\n+/*******************************************************************************\n+ * Copyright (c) 2013-2015, 2021 Pieter Wuille, Gregory Maxwell, Peter Dettman *\n+ * Distributed under the MIT software license, see the accompanying            *\n+ * file COPYING or https://www.opensource.org/licenses/mit-license.php.        *\n+ *******************************************************************************/\n \n #ifndef SECP256K1_ECMULT_GEN_COMPUTE_TABLE_IMPL_H\n #define SECP256K1_ECMULT_GEN_COMPUTE_TABLE_IMPL_H\n \n #include \"ecmult_gen_compute_table.h\"\n #include \"group_impl.h\"\n #include \"field_impl.h\"\n+#include \"scalar_impl.h\"\n #include \"ecmult_gen.h\"\n #include \"util.h\"\n \n-static void secp256k1_ecmult_gen_compute_table(secp256k1_ge_storage* table, const secp256k1_ge* gen, int bits) {\n-    int g = ECMULT_GEN_PREC_G(bits);\n-    int n = ECMULT_GEN_PREC_N(bits);\n+static void secp256k1_ecmult_gen_compute_table(secp256k1_ge_storage* table, const secp256k1_ge* gen, int blocks, int teeth) {\n+    size_t points = ((size_t)1) << (teeth - 1);\n+    size_t points_total = points * blocks;\n+    int spacing = (256 + blocks * teeth - 1) / (blocks * teeth);\n+    secp256k1_ge* prec = checked_malloc(&default_error_callback, points_total * sizeof(*prec));\n+    secp256k1_gej* ds = checked_malloc(&default_error_callback, teeth * sizeof(*ds));\n+    secp256k1_gej* vs = checked_malloc(&default_error_callback, points_total * sizeof(*vs));\n+    secp256k1_gej u;\n+    size_t vs_pos = 0;\n+    secp256k1_scalar half = SECP256K1_SCALAR_CONST(0, 0, 0, 0, 0, 0, 0, 2);\n+    int block, i;\n \n-    secp256k1_ge* prec = checked_malloc(&default_error_callback, n * g * sizeof(*prec));\n-    secp256k1_gej gj;\n-    secp256k1_gej nums_gej;\n-    int i, j;\n-\n-    VERIFY_CHECK(g > 0);\n-    VERIFY_CHECK(n > 0);\n-\n-    /* get the generator */\n-    secp256k1_gej_set_ge(&gj, gen);\n-\n-    /* Construct a group element with no known corresponding scalar (nothing up my sleeve). */\n-    {\n-        static const unsigned char nums_b32[33] = \"The scalar for this x is unknown\";\n-        secp256k1_fe nums_x;\n-        secp256k1_ge nums_ge;\n-        int r;\n-        r = secp256k1_fe_set_b32_limit(&nums_x, nums_b32);\n-        (void)r;\n-        VERIFY_CHECK(r);\n-        r = secp256k1_ge_set_xo_var(&nums_ge, &nums_x, 0);\n-        (void)r;\n-        VERIFY_CHECK(r);\n-        secp256k1_gej_set_ge(&nums_gej, &nums_ge);\n-        /* Add G to make the bits in x uniformly distributed. */\n-        secp256k1_gej_add_ge_var(&nums_gej, &nums_gej, gen, NULL);\n+    /* u is the running power of two times gen we're working with, initially gen/2. */",
      "path": "src/ecmult_gen_compute_table_impl.h",
      "position": 42,
      "original_position": 63,
      "commit_id": "dcc846f18518f77770b6a1fc9e39683c63685d39",
      "original_commit_id": "0a63916f36b92a0508aa7f1df7b8e659bc42bfa4",
      "in_reply_to_id": 1549282824,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I'm not sure that we want assertions inside the table generation tool code. We don't have VERIFY and non-VERIFY modes of those etc. Do you suggest just using normal C `assert`? I guess we could do that.",
      "created_at": "2024-04-03T17:30:50Z",
      "updated_at": "2024-04-03T17:30:50Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1058#discussion_r1550180223",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1550180223"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1058"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 30,
      "original_line": 30,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1550269300",
      "pull_request_review_id": 1977668978,
      "id": 1550269300,
      "node_id": "PRRC_kwDOAP4Jqs5cZzt0",
      "diff_hunk": "@@ -1,83 +1,95 @@\n-/***********************************************************************\n- * Copyright (c) 2013, 2014, 2015 Pieter Wuille, Gregory Maxwell       *\n- * Distributed under the MIT software license, see the accompanying    *\n- * file COPYING or https://www.opensource.org/licenses/mit-license.php.*\n- ***********************************************************************/\n+/*******************************************************************************\n+ * Copyright (c) 2013-2015, 2021 Pieter Wuille, Gregory Maxwell, Peter Dettman *\n+ * Distributed under the MIT software license, see the accompanying            *\n+ * file COPYING or https://www.opensource.org/licenses/mit-license.php.        *\n+ *******************************************************************************/\n \n #ifndef SECP256K1_ECMULT_GEN_COMPUTE_TABLE_IMPL_H\n #define SECP256K1_ECMULT_GEN_COMPUTE_TABLE_IMPL_H\n \n #include \"ecmult_gen_compute_table.h\"\n #include \"group_impl.h\"\n #include \"field_impl.h\"\n+#include \"scalar_impl.h\"\n #include \"ecmult_gen.h\"\n #include \"util.h\"\n \n-static void secp256k1_ecmult_gen_compute_table(secp256k1_ge_storage* table, const secp256k1_ge* gen, int bits) {\n-    int g = ECMULT_GEN_PREC_G(bits);\n-    int n = ECMULT_GEN_PREC_N(bits);\n+static void secp256k1_ecmult_gen_compute_table(secp256k1_ge_storage* table, const secp256k1_ge* gen, int blocks, int teeth) {\n+    size_t points = ((size_t)1) << (teeth - 1);\n+    size_t points_total = points * blocks;\n+    int spacing = (256 + blocks * teeth - 1) / (blocks * teeth);\n+    secp256k1_ge* prec = checked_malloc(&default_error_callback, points_total * sizeof(*prec));\n+    secp256k1_gej* ds = checked_malloc(&default_error_callback, teeth * sizeof(*ds));\n+    secp256k1_gej* vs = checked_malloc(&default_error_callback, points_total * sizeof(*vs));\n+    secp256k1_gej u;\n+    size_t vs_pos = 0;\n+    secp256k1_scalar half = SECP256K1_SCALAR_CONST(0, 0, 0, 0, 0, 0, 0, 2);\n+    int block, i;\n \n-    secp256k1_ge* prec = checked_malloc(&default_error_callback, n * g * sizeof(*prec));\n-    secp256k1_gej gj;\n-    secp256k1_gej nums_gej;\n-    int i, j;\n-\n-    VERIFY_CHECK(g > 0);\n-    VERIFY_CHECK(n > 0);\n-\n-    /* get the generator */\n-    secp256k1_gej_set_ge(&gj, gen);\n-\n-    /* Construct a group element with no known corresponding scalar (nothing up my sleeve). */\n-    {\n-        static const unsigned char nums_b32[33] = \"The scalar for this x is unknown\";\n-        secp256k1_fe nums_x;\n-        secp256k1_ge nums_ge;\n-        int r;\n-        r = secp256k1_fe_set_b32_limit(&nums_x, nums_b32);\n-        (void)r;\n-        VERIFY_CHECK(r);\n-        r = secp256k1_ge_set_xo_var(&nums_ge, &nums_x, 0);\n-        (void)r;\n-        VERIFY_CHECK(r);\n-        secp256k1_gej_set_ge(&nums_gej, &nums_ge);\n-        /* Add G to make the bits in x uniformly distributed. */\n-        secp256k1_gej_add_ge_var(&nums_gej, &nums_gej, gen, NULL);\n+    /* u is the running power of two times gen we're working with, initially gen/2. */",
      "path": "src/ecmult_gen_compute_table_impl.h",
      "position": 42,
      "original_position": 63,
      "commit_id": "dcc846f18518f77770b6a1fc9e39683c63685d39",
      "original_commit_id": "0a63916f36b92a0508aa7f1df7b8e659bc42bfa4",
      "in_reply_to_id": 1549282824,
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yeah, okay, it had simply occurred to me that this piece is easy to check without adding a dependency on `ecmult`... But checking that particular condition is not too interesting. So never mind, ignore my comment.\r\n\r\nBut having said this, do you think it makes sense to add some code in tests.c that does some basic checks on the generated table values? The advantage is that `ecmult`/`ecmult_const` won't add a dependency there.",
      "created_at": "2024-04-03T18:36:52Z",
      "updated_at": "2024-04-03T18:39:43Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1058#discussion_r1550269300",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1550269300"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1058"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 30,
      "original_line": 30,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1550786508",
      "pull_request_review_id": 1978534633,
      "id": 1550786508,
      "node_id": "PRRC_kwDOAP4Jqs5cbx_M",
      "diff_hunk": "@@ -53,8 +53,12 @@ static void secp256k1_ecmult_gen(const secp256k1_ecmult_gen_context *ctx, secp25\n     secp256k1_ge add;\n     secp256k1_fe neg;\n     secp256k1_ge_storage adds;\n-    secp256k1_scalar recoded;\n-    int first = 1;\n+    secp256k1_scalar tmp;\n+    /* Array of uint32_t values large enough to store COMB_BITS bits. Only the bottom\n+     * 8 are ever nonzero, but having the zero padding at the end if COMB_BITS>256\n+     * avoids the need to deal with out-of-bounds reads from a scalar. */\n+    uint32_t recoded[(COMB_BITS + 31) >> 5] = {0};\n+    int first = 1, i;",
      "path": "src/ecmult_gen_impl.h",
      "position": 69,
      "original_position": 11,
      "commit_id": "dcc846f18518f77770b6a1fc9e39683c63685d39",
      "original_commit_id": "1b218b3dca1f4f5ff7870229a312422059635723",
      "in_reply_to_id": 1547395175,
      "user": {
        "login": "stratospher",
        "id": 44024636,
        "node_id": "MDQ6VXNlcjQ0MDI0NjM2",
        "avatar_url": "https://avatars.githubusercontent.com/u/44024636?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stratospher",
        "html_url": "https://github.com/stratospher",
        "followers_url": "https://api.github.com/users/stratospher/followers",
        "following_url": "https://api.github.com/users/stratospher/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stratospher/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stratospher/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stratospher/subscriptions",
        "organizations_url": "https://api.github.com/users/stratospher/orgs",
        "repos_url": "https://api.github.com/users/stratospher/repos",
        "events_url": "https://api.github.com/users/stratospher/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stratospher/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "oops never mind! confused it with something else.",
      "created_at": "2024-04-04T02:36:44Z",
      "updated_at": "2024-04-04T02:36:45Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1058#discussion_r1550786508",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1550786508"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1058"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 64,
      "original_line": 64,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1551931537",
      "pull_request_review_id": 1980314810,
      "id": 1551931537,
      "node_id": "PRRC_kwDOAP4Jqs5cgJiR",
      "diff_hunk": "@@ -29,38 +29,154 @@ static void secp256k1_ecmult_gen_context_clear(secp256k1_ecmult_gen_context *ctx\n     secp256k1_ge_clear(&ctx->ge_offset);\n }\n \n-/* For accelerating the computation of a*G:\n- * To harden against timing attacks, use the following mechanism:\n- * * Break up the multiplicand into groups of PREC_BITS bits, called n_0, n_1, n_2, ..., n_(PREC_N-1).\n- * * Compute sum(n_i * (PREC_G)^i * G + U_i, i=0 ... PREC_N-1), where:\n- *   * U_i = U * 2^i, for i=0 ... PREC_N-2\n- *   * U_i = U * (1-2^(PREC_N-1)), for i=PREC_N-1\n- *   where U is a point with no known corresponding scalar. Note that sum(U_i, i=0 ... PREC_N-1) = 0.\n- * For each i, and each of the PREC_G possible values of n_i, (n_i * (PREC_G)^i * G + U_i) is\n- * precomputed (call it prec(i, n_i)). The formula now becomes sum(prec(i, n_i), i=0 ... PREC_N-1).\n- * None of the resulting prec group elements have a known scalar, and neither do any of\n- * the intermediate sums while computing a*G.\n- * The prec values are stored in secp256k1_ecmult_gen_prec_table[i][n_i] = n_i * (PREC_G)^i * G + U_i.\n- */\n-static void secp256k1_ecmult_gen(const secp256k1_ecmult_gen_context *ctx, secp256k1_gej *r, const secp256k1_scalar *gn) {\n-    int bits = ECMULT_GEN_PREC_BITS;\n-    int g = ECMULT_GEN_PREC_G(bits);\n-    int n = ECMULT_GEN_PREC_N(bits);\n+/* Compute the scalar (2^COMB_BITS - 1) / 2. */\n+static void secp256k1_ecmult_gen_scalar_diff(secp256k1_scalar* diff) {\n+    int i;\n+\n+    /* Compute scalar -1/2. */\n+    secp256k1_scalar neghalf = SECP256K1_SCALAR_CONST(0, 0, 0, 0, 0, 0, 0, 2);\n+    secp256k1_scalar_inverse_var(&neghalf, &neghalf);\n+    secp256k1_scalar_negate(&neghalf, &neghalf);\n+\n+    /* Compute offset = 2^(COMB_BITS - 1). */\n+    secp256k1_scalar_set_int(diff, 1);\n+    for (i = 0; i < COMB_BITS - 1; ++i) {\n+        secp256k1_scalar_add(diff, diff, diff);\n+    }\n \n+    /* The result is the sum of 2^(COMB_BITS - 1) + (-1/2). */\n+    secp256k1_scalar_add(diff, diff, &neghalf);\n+}\n+\n+static void secp256k1_ecmult_gen(const secp256k1_ecmult_gen_context *ctx, secp256k1_gej *r, const secp256k1_scalar *gn) {\n+    uint32_t comb_off;\n     secp256k1_ge add;\n+    secp256k1_fe neg;\n     secp256k1_ge_storage adds;\n-    secp256k1_scalar gnb;\n-    int i, j, n_i;\n+    secp256k1_scalar recoded;\n \n     memset(&adds, 0, sizeof(adds));\n     secp256k1_gej_set_infinity(r);\n \n-    /* Blind scalar/point multiplication by computing (gn-b)*G + b*G instead of gn*G. */\n-    secp256k1_scalar_add(&gnb, gn, &ctx->scalar_offset);\n+    /* We want to compute R = gn*G.\n+     *\n+     * To blind the scalar used in the computation, we rewrite this to be R = (gn-b)*G + b*G, with\n+     * a value b determined by the context. b*G is precomputed as ctx->ge_offset, so we're\n+     * left with computing R = (gn-b)*G + ctx->ge_offset.\n+     *\n+     * The multiplication (gn-b)*G will be performed using a signed-digit multi-comb (see Section\n+     * 3.3 of \"Fast and compact elliptic-curve cryptography\" by Mike Hamburg\n+     * (https://eprint.iacr.org/2012/309).",
      "path": "src/ecmult_gen_impl.h",
      "position": null,
      "original_position": 76,
      "commit_id": "dcc846f18518f77770b6a1fc9e39683c63685d39",
      "original_commit_id": "62601920bee3b57456a130d1c10a4e7fc08f3866",
      "in_reply_to_id": null,
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: you want a `,` instead of a `(` before `see Section`",
      "created_at": "2024-04-04T15:34:03Z",
      "updated_at": "2024-04-04T16:51:09Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1058#discussion_r1551931537",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1551931537"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1058"
        }
      },
      "start_line": null,
      "original_start_line": 67,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 69,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1551935014",
      "pull_request_review_id": 1980314810,
      "id": 1551935014,
      "node_id": "PRRC_kwDOAP4Jqs5cgKYm",
      "diff_hunk": "@@ -29,38 +29,154 @@ static void secp256k1_ecmult_gen_context_clear(secp256k1_ecmult_gen_context *ctx\n     secp256k1_ge_clear(&ctx->ge_offset);\n }\n \n-/* For accelerating the computation of a*G:\n- * To harden against timing attacks, use the following mechanism:\n- * * Break up the multiplicand into groups of PREC_BITS bits, called n_0, n_1, n_2, ..., n_(PREC_N-1).\n- * * Compute sum(n_i * (PREC_G)^i * G + U_i, i=0 ... PREC_N-1), where:\n- *   * U_i = U * 2^i, for i=0 ... PREC_N-2\n- *   * U_i = U * (1-2^(PREC_N-1)), for i=PREC_N-1\n- *   where U is a point with no known corresponding scalar. Note that sum(U_i, i=0 ... PREC_N-1) = 0.\n- * For each i, and each of the PREC_G possible values of n_i, (n_i * (PREC_G)^i * G + U_i) is\n- * precomputed (call it prec(i, n_i)). The formula now becomes sum(prec(i, n_i), i=0 ... PREC_N-1).\n- * None of the resulting prec group elements have a known scalar, and neither do any of\n- * the intermediate sums while computing a*G.\n- * The prec values are stored in secp256k1_ecmult_gen_prec_table[i][n_i] = n_i * (PREC_G)^i * G + U_i.\n- */\n-static void secp256k1_ecmult_gen(const secp256k1_ecmult_gen_context *ctx, secp256k1_gej *r, const secp256k1_scalar *gn) {\n-    int bits = ECMULT_GEN_PREC_BITS;\n-    int g = ECMULT_GEN_PREC_G(bits);\n-    int n = ECMULT_GEN_PREC_N(bits);\n+/* Compute the scalar (2^COMB_BITS - 1) / 2. */\n+static void secp256k1_ecmult_gen_scalar_diff(secp256k1_scalar* diff) {\n+    int i;\n+\n+    /* Compute scalar -1/2. */\n+    secp256k1_scalar neghalf = SECP256K1_SCALAR_CONST(0, 0, 0, 0, 0, 0, 0, 2);\n+    secp256k1_scalar_inverse_var(&neghalf, &neghalf);\n+    secp256k1_scalar_negate(&neghalf, &neghalf);\n+\n+    /* Compute offset = 2^(COMB_BITS - 1). */\n+    secp256k1_scalar_set_int(diff, 1);\n+    for (i = 0; i < COMB_BITS - 1; ++i) {\n+        secp256k1_scalar_add(diff, diff, diff);\n+    }\n \n+    /* The result is the sum of 2^(COMB_BITS - 1) + (-1/2). */\n+    secp256k1_scalar_add(diff, diff, &neghalf);\n+}\n+\n+static void secp256k1_ecmult_gen(const secp256k1_ecmult_gen_context *ctx, secp256k1_gej *r, const secp256k1_scalar *gn) {\n+    uint32_t comb_off;\n     secp256k1_ge add;\n+    secp256k1_fe neg;\n     secp256k1_ge_storage adds;\n-    secp256k1_scalar gnb;\n-    int i, j, n_i;\n+    secp256k1_scalar recoded;\n \n     memset(&adds, 0, sizeof(adds));\n     secp256k1_gej_set_infinity(r);\n \n-    /* Blind scalar/point multiplication by computing (gn-b)*G + b*G instead of gn*G. */\n-    secp256k1_scalar_add(&gnb, gn, &ctx->scalar_offset);\n+    /* We want to compute R = gn*G.\n+     *\n+     * To blind the scalar used in the computation, we rewrite this to be R = (gn-b)*G + b*G, with\n+     * a value b determined by the context. b*G is precomputed as ctx->ge_offset, so we're\n+     * left with computing R = (gn-b)*G + ctx->ge_offset.\n+     *\n+     * The multiplication (gn-b)*G will be performed using a signed-digit multi-comb (see Section\n+     * 3.3 of \"Fast and compact elliptic-curve cryptography\" by Mike Hamburg\n+     * (https://eprint.iacr.org/2012/309).\n+     *\n+     * Let comb(s,P) = sum((2*s_i-1)*2^i*P for i=0..COMB_BITS-1), where s_i is the i'th bit of the\n+     * binary representation of scalar s. So the s_i values determine whether -2^i*P (s_i=0) or\n+     * +2^i*P (s_1) are added together. By manipulating:",
      "path": "src/ecmult_gen_impl.h",
      "position": null,
      "original_position": 80,
      "commit_id": "dcc846f18518f77770b6a1fc9e39683c63685d39",
      "original_commit_id": "62601920bee3b57456a130d1c10a4e7fc08f3866",
      "in_reply_to_id": null,
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "`s/s_1/s_0=1`",
      "created_at": "2024-04-04T15:35:46Z",
      "updated_at": "2024-04-04T16:51:09Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1058#discussion_r1551935014",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1551935014"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1058"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 73,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1551959311",
      "pull_request_review_id": 1980314810,
      "id": 1551959311,
      "node_id": "PRRC_kwDOAP4Jqs5cgQUP",
      "diff_hunk": "@@ -29,38 +29,154 @@ static void secp256k1_ecmult_gen_context_clear(secp256k1_ecmult_gen_context *ctx\n     secp256k1_ge_clear(&ctx->ge_offset);\n }\n \n-/* For accelerating the computation of a*G:\n- * To harden against timing attacks, use the following mechanism:\n- * * Break up the multiplicand into groups of PREC_BITS bits, called n_0, n_1, n_2, ..., n_(PREC_N-1).\n- * * Compute sum(n_i * (PREC_G)^i * G + U_i, i=0 ... PREC_N-1), where:\n- *   * U_i = U * 2^i, for i=0 ... PREC_N-2\n- *   * U_i = U * (1-2^(PREC_N-1)), for i=PREC_N-1\n- *   where U is a point with no known corresponding scalar. Note that sum(U_i, i=0 ... PREC_N-1) = 0.\n- * For each i, and each of the PREC_G possible values of n_i, (n_i * (PREC_G)^i * G + U_i) is\n- * precomputed (call it prec(i, n_i)). The formula now becomes sum(prec(i, n_i), i=0 ... PREC_N-1).\n- * None of the resulting prec group elements have a known scalar, and neither do any of\n- * the intermediate sums while computing a*G.\n- * The prec values are stored in secp256k1_ecmult_gen_prec_table[i][n_i] = n_i * (PREC_G)^i * G + U_i.\n- */\n-static void secp256k1_ecmult_gen(const secp256k1_ecmult_gen_context *ctx, secp256k1_gej *r, const secp256k1_scalar *gn) {\n-    int bits = ECMULT_GEN_PREC_BITS;\n-    int g = ECMULT_GEN_PREC_G(bits);\n-    int n = ECMULT_GEN_PREC_N(bits);\n+/* Compute the scalar (2^COMB_BITS - 1) / 2. */\n+static void secp256k1_ecmult_gen_scalar_diff(secp256k1_scalar* diff) {",
      "path": "src/ecmult_gen_impl.h",
      "position": 38,
      "original_position": 36,
      "commit_id": "dcc846f18518f77770b6a1fc9e39683c63685d39",
      "original_commit_id": "62601920bee3b57456a130d1c10a4e7fc08f3866",
      "in_reply_to_id": null,
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I'm not saying that it matters, but why is this called diff?",
      "created_at": "2024-04-04T15:47:27Z",
      "updated_at": "2024-04-04T16:51:09Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1058#discussion_r1551959311",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1551959311"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1058"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 36,
      "original_line": 36,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1552021153",
      "pull_request_review_id": 1980314810,
      "id": 1552021153,
      "node_id": "PRRC_kwDOAP4Jqs5cgfah",
      "diff_hunk": "@@ -29,38 +29,154 @@ static void secp256k1_ecmult_gen_context_clear(secp256k1_ecmult_gen_context *ctx\n     secp256k1_ge_clear(&ctx->ge_offset);\n }\n \n-/* For accelerating the computation of a*G:\n- * To harden against timing attacks, use the following mechanism:\n- * * Break up the multiplicand into groups of PREC_BITS bits, called n_0, n_1, n_2, ..., n_(PREC_N-1).\n- * * Compute sum(n_i * (PREC_G)^i * G + U_i, i=0 ... PREC_N-1), where:\n- *   * U_i = U * 2^i, for i=0 ... PREC_N-2\n- *   * U_i = U * (1-2^(PREC_N-1)), for i=PREC_N-1\n- *   where U is a point with no known corresponding scalar. Note that sum(U_i, i=0 ... PREC_N-1) = 0.\n- * For each i, and each of the PREC_G possible values of n_i, (n_i * (PREC_G)^i * G + U_i) is\n- * precomputed (call it prec(i, n_i)). The formula now becomes sum(prec(i, n_i), i=0 ... PREC_N-1).\n- * None of the resulting prec group elements have a known scalar, and neither do any of\n- * the intermediate sums while computing a*G.\n- * The prec values are stored in secp256k1_ecmult_gen_prec_table[i][n_i] = n_i * (PREC_G)^i * G + U_i.\n- */\n-static void secp256k1_ecmult_gen(const secp256k1_ecmult_gen_context *ctx, secp256k1_gej *r, const secp256k1_scalar *gn) {\n-    int bits = ECMULT_GEN_PREC_BITS;\n-    int g = ECMULT_GEN_PREC_G(bits);\n-    int n = ECMULT_GEN_PREC_N(bits);\n+/* Compute the scalar (2^COMB_BITS - 1) / 2. */\n+static void secp256k1_ecmult_gen_scalar_diff(secp256k1_scalar* diff) {\n+    int i;\n+\n+    /* Compute scalar -1/2. */\n+    secp256k1_scalar neghalf = SECP256K1_SCALAR_CONST(0, 0, 0, 0, 0, 0, 0, 2);\n+    secp256k1_scalar_inverse_var(&neghalf, &neghalf);\n+    secp256k1_scalar_negate(&neghalf, &neghalf);\n+\n+    /* Compute offset = 2^(COMB_BITS - 1). */\n+    secp256k1_scalar_set_int(diff, 1);\n+    for (i = 0; i < COMB_BITS - 1; ++i) {\n+        secp256k1_scalar_add(diff, diff, diff);\n+    }\n \n+    /* The result is the sum of 2^(COMB_BITS - 1) + (-1/2). */\n+    secp256k1_scalar_add(diff, diff, &neghalf);\n+}\n+\n+static void secp256k1_ecmult_gen(const secp256k1_ecmult_gen_context *ctx, secp256k1_gej *r, const secp256k1_scalar *gn) {\n+    uint32_t comb_off;\n     secp256k1_ge add;\n+    secp256k1_fe neg;\n     secp256k1_ge_storage adds;\n-    secp256k1_scalar gnb;\n-    int i, j, n_i;\n+    secp256k1_scalar recoded;\n \n     memset(&adds, 0, sizeof(adds));\n     secp256k1_gej_set_infinity(r);\n \n-    /* Blind scalar/point multiplication by computing (gn-b)*G + b*G instead of gn*G. */\n-    secp256k1_scalar_add(&gnb, gn, &ctx->scalar_offset);\n+    /* We want to compute R = gn*G.\n+     *\n+     * To blind the scalar used in the computation, we rewrite this to be R = (gn-b)*G + b*G, with\n+     * a value b determined by the context. b*G is precomputed as ctx->ge_offset, so we're\n+     * left with computing R = (gn-b)*G + ctx->ge_offset.\n+     *\n+     * The multiplication (gn-b)*G will be performed using a signed-digit multi-comb (see Section\n+     * 3.3 of \"Fast and compact elliptic-curve cryptography\" by Mike Hamburg\n+     * (https://eprint.iacr.org/2012/309).\n+     *\n+     * Let comb(s,P) = sum((2*s_i-1)*2^i*P for i=0..COMB_BITS-1), where s_i is the i'th bit of the\n+     * binary representation of scalar s. So the s_i values determine whether -2^i*P (s_i=0) or\n+     * +2^i*P (s_1) are added together. By manipulating:\n+     *\n+     *     comb(s,P) = sum((2*s_i-1)*2^i*P for i=0..COMB_BITS-1)\n+     * <=> comb(s,P) = sum((2*s_i-1)*2^i for i=0..COMB_BITS-1) * P\n+     * <=> comb(s,P) = (2*sum(s_i*2^i for i=0..COMB_BITS-1) - sum(2^i for i=0..COMB_BITS-1)) * P\n+     * <=> comb(s,P) = (2*s - (2^COMB_BITS - 1)) * P\n+     *\n+     * Thus (gn-b)*G can be written as comb(s,G) if gn-b = 2*s - (2^COMB_BITS - 1), or\n+     * s = (gn - b + (2^COMB_BITS - 1))/2 mod order.\n+     *\n+     * We use an alternative that avoids the modular division by two: we write (gn-b)*G =\n+     * comb(d,G/2). For that to hold it must be the case that\n+     * (gn-b)*G = (2*d - (2^COMB_BITS - 1)) * (G/2), or\n+     * d = (gn + (2^COMB_BITS - 1)/2 - b) mod order.\n+     *\n+     * -b is precomputed as ctx->scalar_offset, so our final equations become:\n+     *\n+     *   d = gn + ctx->scalar_offset + (2^COMB_BITS - 1)/2 (mod order)\n+     *   R = comb(d, G/2) + ctx->ge_offset.\n+     *\n+     * The comb function is computed by summing + or - 2^(i-1)*G, for i=0..COMB_BITS-1, depending\n+     * on the value of the bits d_i of the binary representation of scalar d.\n+     */\n+\n+    /* Compute the scalar (gn + ctx->scalar_offset + (2^COMB_BITS - 1)/2). */\n+    secp256k1_ecmult_gen_scalar_diff(&recoded);\n+    secp256k1_scalar_add(&recoded, &recoded, &ctx->scalar_offset);\n+    secp256k1_scalar_add(&recoded, &recoded, gn);\n+\n+    /* In secp256k1_ecmult_gen_prec_table we have precomputed sums of the\n+     * (2*d_i-1) * 2^(i-1) * G points, for various combinations of i positions.\n+     * We rewrite our equation in terms of these table entries.\n+     *\n+     * Let mask(b) = sum(2^((b*COMB_TEETH + t)*COMB_SPACING) for t=0..COMB_TEETH-1),\n+     * with b ranging from 0 to COMB_BLOCKS-1. So for example with COMB_BLOCKS=11,\n+     * COMB_TEETH=6, COMB_SPACING=4, we would have:\n+     *   mask(0)  = 2^0   + 2^4   + 2^8   + 2^12  + 2^16  + 2^20,\n+     *   mask(1)  = 2^24  + 2^28  + 2^32  + 2^36  + 2^40  + 2^44,\n+     *   mask(2)  = 2^48  + 2^52  + 2^56  + 2^60  + 2^64  + 2^68,\n+     *   ...\n+     *   mask(10) = 2^240 + 2^244 + 2^248 + 2^252 + 2^256 + 2^260\n+     *\n+     * Imagine we have a table(b,m) function which can look up, given b and\n+     * m=(recoded & mask(b)), the sum of (2*d_i-1)*2^(i-1)*G for all bit positions\n+     * i set in mask(b). In our example, table(0, 1 + 2^8 + 2^20) would be equal to\n+     * (2^-1 - 2^3 + 2^7 - 2^11 - 2^15 + 2^19)*G.",
      "path": "src/ecmult_gen_impl.h",
      "position": null,
      "original_position": 125,
      "commit_id": "dcc846f18518f77770b6a1fc9e39683c63685d39",
      "original_commit_id": "62601920bee3b57456a130d1c10a4e7fc08f3866",
      "in_reply_to_id": null,
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Hm, this took me a while to follow. Let me explain in my own words. So you assume that the relevant bits of `d` are `1...0...0...1...0...1`, or `1...0...1...0...0...1` in reverse, which is `1 + 2^8 + 2^20`, which determines the positive summands in the G factor (decremented because the formula says so). Is this right? Want to elaborate in the comment?",
      "created_at": "2024-04-04T16:14:23Z",
      "updated_at": "2024-04-04T16:51:09Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1058#discussion_r1552021153",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1552021153"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1058"
        }
      },
      "start_line": null,
      "original_start_line": 115,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 118,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1552022485",
      "pull_request_review_id": 1980314810,
      "id": 1552022485,
      "node_id": "PRRC_kwDOAP4Jqs5cgfvV",
      "diff_hunk": "@@ -29,38 +29,154 @@ static void secp256k1_ecmult_gen_context_clear(secp256k1_ecmult_gen_context *ctx\n     secp256k1_ge_clear(&ctx->ge_offset);\n }\n \n-/* For accelerating the computation of a*G:\n- * To harden against timing attacks, use the following mechanism:\n- * * Break up the multiplicand into groups of PREC_BITS bits, called n_0, n_1, n_2, ..., n_(PREC_N-1).\n- * * Compute sum(n_i * (PREC_G)^i * G + U_i, i=0 ... PREC_N-1), where:\n- *   * U_i = U * 2^i, for i=0 ... PREC_N-2\n- *   * U_i = U * (1-2^(PREC_N-1)), for i=PREC_N-1\n- *   where U is a point with no known corresponding scalar. Note that sum(U_i, i=0 ... PREC_N-1) = 0.\n- * For each i, and each of the PREC_G possible values of n_i, (n_i * (PREC_G)^i * G + U_i) is\n- * precomputed (call it prec(i, n_i)). The formula now becomes sum(prec(i, n_i), i=0 ... PREC_N-1).\n- * None of the resulting prec group elements have a known scalar, and neither do any of\n- * the intermediate sums while computing a*G.\n- * The prec values are stored in secp256k1_ecmult_gen_prec_table[i][n_i] = n_i * (PREC_G)^i * G + U_i.\n- */\n-static void secp256k1_ecmult_gen(const secp256k1_ecmult_gen_context *ctx, secp256k1_gej *r, const secp256k1_scalar *gn) {\n-    int bits = ECMULT_GEN_PREC_BITS;\n-    int g = ECMULT_GEN_PREC_G(bits);\n-    int n = ECMULT_GEN_PREC_N(bits);\n+/* Compute the scalar (2^COMB_BITS - 1) / 2. */\n+static void secp256k1_ecmult_gen_scalar_diff(secp256k1_scalar* diff) {\n+    int i;\n+\n+    /* Compute scalar -1/2. */\n+    secp256k1_scalar neghalf = SECP256K1_SCALAR_CONST(0, 0, 0, 0, 0, 0, 0, 2);\n+    secp256k1_scalar_inverse_var(&neghalf, &neghalf);\n+    secp256k1_scalar_negate(&neghalf, &neghalf);\n+\n+    /* Compute offset = 2^(COMB_BITS - 1). */\n+    secp256k1_scalar_set_int(diff, 1);\n+    for (i = 0; i < COMB_BITS - 1; ++i) {\n+        secp256k1_scalar_add(diff, diff, diff);\n+    }\n \n+    /* The result is the sum of 2^(COMB_BITS - 1) + (-1/2). */\n+    secp256k1_scalar_add(diff, diff, &neghalf);\n+}\n+\n+static void secp256k1_ecmult_gen(const secp256k1_ecmult_gen_context *ctx, secp256k1_gej *r, const secp256k1_scalar *gn) {\n+    uint32_t comb_off;\n     secp256k1_ge add;\n+    secp256k1_fe neg;\n     secp256k1_ge_storage adds;\n-    secp256k1_scalar gnb;\n-    int i, j, n_i;\n+    secp256k1_scalar recoded;\n \n     memset(&adds, 0, sizeof(adds));\n     secp256k1_gej_set_infinity(r);\n \n-    /* Blind scalar/point multiplication by computing (gn-b)*G + b*G instead of gn*G. */\n-    secp256k1_scalar_add(&gnb, gn, &ctx->scalar_offset);\n+    /* We want to compute R = gn*G.\n+     *\n+     * To blind the scalar used in the computation, we rewrite this to be R = (gn-b)*G + b*G, with\n+     * a value b determined by the context. b*G is precomputed as ctx->ge_offset, so we're\n+     * left with computing R = (gn-b)*G + ctx->ge_offset.\n+     *\n+     * The multiplication (gn-b)*G will be performed using a signed-digit multi-comb (see Section\n+     * 3.3 of \"Fast and compact elliptic-curve cryptography\" by Mike Hamburg\n+     * (https://eprint.iacr.org/2012/309).\n+     *\n+     * Let comb(s,P) = sum((2*s_i-1)*2^i*P for i=0..COMB_BITS-1), where s_i is the i'th bit of the\n+     * binary representation of scalar s. So the s_i values determine whether -2^i*P (s_i=0) or\n+     * +2^i*P (s_1) are added together. By manipulating:\n+     *\n+     *     comb(s,P) = sum((2*s_i-1)*2^i*P for i=0..COMB_BITS-1)\n+     * <=> comb(s,P) = sum((2*s_i-1)*2^i for i=0..COMB_BITS-1) * P\n+     * <=> comb(s,P) = (2*sum(s_i*2^i for i=0..COMB_BITS-1) - sum(2^i for i=0..COMB_BITS-1)) * P\n+     * <=> comb(s,P) = (2*s - (2^COMB_BITS - 1)) * P\n+     *\n+     * Thus (gn-b)*G can be written as comb(s,G) if gn-b = 2*s - (2^COMB_BITS - 1), or\n+     * s = (gn - b + (2^COMB_BITS - 1))/2 mod order.\n+     *\n+     * We use an alternative that avoids the modular division by two: we write (gn-b)*G =\n+     * comb(d,G/2). For that to hold it must be the case that\n+     * (gn-b)*G = (2*d - (2^COMB_BITS - 1)) * (G/2), or\n+     * d = (gn + (2^COMB_BITS - 1)/2 - b) mod order.\n+     *\n+     * -b is precomputed as ctx->scalar_offset, so our final equations become:\n+     *\n+     *   d = gn + ctx->scalar_offset + (2^COMB_BITS - 1)/2 (mod order)\n+     *   R = comb(d, G/2) + ctx->ge_offset.\n+     *\n+     * The comb function is computed by summing + or - 2^(i-1)*G, for i=0..COMB_BITS-1, depending\n+     * on the value of the bits d_i of the binary representation of scalar d.\n+     */\n+\n+    /* Compute the scalar (gn + ctx->scalar_offset + (2^COMB_BITS - 1)/2). */\n+    secp256k1_ecmult_gen_scalar_diff(&recoded);\n+    secp256k1_scalar_add(&recoded, &recoded, &ctx->scalar_offset);\n+    secp256k1_scalar_add(&recoded, &recoded, gn);\n+\n+    /* In secp256k1_ecmult_gen_prec_table we have precomputed sums of the\n+     * (2*d_i-1) * 2^(i-1) * G points, for various combinations of i positions.\n+     * We rewrite our equation in terms of these table entries.\n+     *\n+     * Let mask(b) = sum(2^((b*COMB_TEETH + t)*COMB_SPACING) for t=0..COMB_TEETH-1),\n+     * with b ranging from 0 to COMB_BLOCKS-1. So for example with COMB_BLOCKS=11,\n+     * COMB_TEETH=6, COMB_SPACING=4, we would have:\n+     *   mask(0)  = 2^0   + 2^4   + 2^8   + 2^12  + 2^16  + 2^20,\n+     *   mask(1)  = 2^24  + 2^28  + 2^32  + 2^36  + 2^40  + 2^44,\n+     *   mask(2)  = 2^48  + 2^52  + 2^56  + 2^60  + 2^64  + 2^68,\n+     *   ...\n+     *   mask(10) = 2^240 + 2^244 + 2^248 + 2^252 + 2^256 + 2^260\n+     *\n+     * Imagine we have a table(b,m) function which can look up, given b and\n+     * m=(recoded & mask(b)), the sum of (2*d_i-1)*2^(i-1)*G for all bit positions\n+     * i set in mask(b). In our example, table(0, 1 + 2^8 + 2^20) would be equal to\n+     * (2^-1 - 2^3 + 2^7 - 2^11 - 2^15 + 2^19)*G.\n+     *\n+     * With that, we can rewrite R as:\n+     *   1*(table(0, recoded & mask(0)) + table(1, recoded & mask(1)) + ...)\n+     * + 2*(table(0, (recoded/2) & mask(0)) + table(1, (recoded/2) & mask(1)) + ...)\n+     * + 4*(table(0, (recoded/4) & mask(0)) + table(1, (recoded/4) & mask(1)) + ...)\n+     * + ...\n+     * + 2^(COMB_SPACING-1)*(table(0, (recoded/2^(COMB_SPACING-1)) & mask(0)) + ...)\n+     * + ctx->ge_offset.",
      "path": "src/ecmult_gen_impl.h",
      "position": null,
      "original_position": 133,
      "commit_id": "dcc846f18518f77770b6a1fc9e39683c63685d39",
      "original_commit_id": "62601920bee3b57456a130d1c10a4e7fc08f3866",
      "in_reply_to_id": null,
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: indent the display formula ",
      "created_at": "2024-04-04T16:15:29Z",
      "updated_at": "2024-04-04T16:51:09Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1058#discussion_r1552022485",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1552022485"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1058"
        }
      },
      "start_line": null,
      "original_start_line": 121,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 126,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1552031020",
      "pull_request_review_id": 1980314810,
      "id": 1552031020,
      "node_id": "PRRC_kwDOAP4Jqs5cgh0s",
      "diff_hunk": "@@ -29,38 +29,154 @@ static void secp256k1_ecmult_gen_context_clear(secp256k1_ecmult_gen_context *ctx\n     secp256k1_ge_clear(&ctx->ge_offset);\n }\n \n-/* For accelerating the computation of a*G:\n- * To harden against timing attacks, use the following mechanism:\n- * * Break up the multiplicand into groups of PREC_BITS bits, called n_0, n_1, n_2, ..., n_(PREC_N-1).\n- * * Compute sum(n_i * (PREC_G)^i * G + U_i, i=0 ... PREC_N-1), where:\n- *   * U_i = U * 2^i, for i=0 ... PREC_N-2\n- *   * U_i = U * (1-2^(PREC_N-1)), for i=PREC_N-1\n- *   where U is a point with no known corresponding scalar. Note that sum(U_i, i=0 ... PREC_N-1) = 0.\n- * For each i, and each of the PREC_G possible values of n_i, (n_i * (PREC_G)^i * G + U_i) is\n- * precomputed (call it prec(i, n_i)). The formula now becomes sum(prec(i, n_i), i=0 ... PREC_N-1).\n- * None of the resulting prec group elements have a known scalar, and neither do any of\n- * the intermediate sums while computing a*G.\n- * The prec values are stored in secp256k1_ecmult_gen_prec_table[i][n_i] = n_i * (PREC_G)^i * G + U_i.\n- */\n-static void secp256k1_ecmult_gen(const secp256k1_ecmult_gen_context *ctx, secp256k1_gej *r, const secp256k1_scalar *gn) {\n-    int bits = ECMULT_GEN_PREC_BITS;\n-    int g = ECMULT_GEN_PREC_G(bits);\n-    int n = ECMULT_GEN_PREC_N(bits);\n+/* Compute the scalar (2^COMB_BITS - 1) / 2. */\n+static void secp256k1_ecmult_gen_scalar_diff(secp256k1_scalar* diff) {\n+    int i;\n+\n+    /* Compute scalar -1/2. */\n+    secp256k1_scalar neghalf = SECP256K1_SCALAR_CONST(0, 0, 0, 0, 0, 0, 0, 2);\n+    secp256k1_scalar_inverse_var(&neghalf, &neghalf);\n+    secp256k1_scalar_negate(&neghalf, &neghalf);\n+\n+    /* Compute offset = 2^(COMB_BITS - 1). */\n+    secp256k1_scalar_set_int(diff, 1);\n+    for (i = 0; i < COMB_BITS - 1; ++i) {\n+        secp256k1_scalar_add(diff, diff, diff);\n+    }\n \n+    /* The result is the sum of 2^(COMB_BITS - 1) + (-1/2). */\n+    secp256k1_scalar_add(diff, diff, &neghalf);\n+}\n+\n+static void secp256k1_ecmult_gen(const secp256k1_ecmult_gen_context *ctx, secp256k1_gej *r, const secp256k1_scalar *gn) {\n+    uint32_t comb_off;\n     secp256k1_ge add;\n+    secp256k1_fe neg;\n     secp256k1_ge_storage adds;\n-    secp256k1_scalar gnb;\n-    int i, j, n_i;\n+    secp256k1_scalar recoded;\n \n     memset(&adds, 0, sizeof(adds));\n     secp256k1_gej_set_infinity(r);\n \n-    /* Blind scalar/point multiplication by computing (gn-b)*G + b*G instead of gn*G. */\n-    secp256k1_scalar_add(&gnb, gn, &ctx->scalar_offset);\n+    /* We want to compute R = gn*G.\n+     *\n+     * To blind the scalar used in the computation, we rewrite this to be R = (gn-b)*G + b*G, with\n+     * a value b determined by the context. b*G is precomputed as ctx->ge_offset, so we're\n+     * left with computing R = (gn-b)*G + ctx->ge_offset.\n+     *\n+     * The multiplication (gn-b)*G will be performed using a signed-digit multi-comb (see Section\n+     * 3.3 of \"Fast and compact elliptic-curve cryptography\" by Mike Hamburg\n+     * (https://eprint.iacr.org/2012/309).\n+     *\n+     * Let comb(s,P) = sum((2*s_i-1)*2^i*P for i=0..COMB_BITS-1), where s_i is the i'th bit of the\n+     * binary representation of scalar s. So the s_i values determine whether -2^i*P (s_i=0) or\n+     * +2^i*P (s_1) are added together. By manipulating:\n+     *\n+     *     comb(s,P) = sum((2*s_i-1)*2^i*P for i=0..COMB_BITS-1)\n+     * <=> comb(s,P) = sum((2*s_i-1)*2^i for i=0..COMB_BITS-1) * P\n+     * <=> comb(s,P) = (2*sum(s_i*2^i for i=0..COMB_BITS-1) - sum(2^i for i=0..COMB_BITS-1)) * P\n+     * <=> comb(s,P) = (2*s - (2^COMB_BITS - 1)) * P\n+     *\n+     * Thus (gn-b)*G can be written as comb(s,G) if gn-b = 2*s - (2^COMB_BITS - 1), or\n+     * s = (gn - b + (2^COMB_BITS - 1))/2 mod order.\n+     *\n+     * We use an alternative that avoids the modular division by two: we write (gn-b)*G =\n+     * comb(d,G/2). For that to hold it must be the case that\n+     * (gn-b)*G = (2*d - (2^COMB_BITS - 1)) * (G/2), or\n+     * d = (gn + (2^COMB_BITS - 1)/2 - b) mod order.\n+     *\n+     * -b is precomputed as ctx->scalar_offset, so our final equations become:\n+     *\n+     *   d = gn + ctx->scalar_offset + (2^COMB_BITS - 1)/2 (mod order)\n+     *   R = comb(d, G/2) + ctx->ge_offset.\n+     *\n+     * The comb function is computed by summing + or - 2^(i-1)*G, for i=0..COMB_BITS-1, depending\n+     * on the value of the bits d_i of the binary representation of scalar d.\n+     */\n+\n+    /* Compute the scalar (gn + ctx->scalar_offset + (2^COMB_BITS - 1)/2). */\n+    secp256k1_ecmult_gen_scalar_diff(&recoded);\n+    secp256k1_scalar_add(&recoded, &recoded, &ctx->scalar_offset);\n+    secp256k1_scalar_add(&recoded, &recoded, gn);\n+\n+    /* In secp256k1_ecmult_gen_prec_table we have precomputed sums of the\n+     * (2*d_i-1) * 2^(i-1) * G points, for various combinations of i positions.\n+     * We rewrite our equation in terms of these table entries.\n+     *\n+     * Let mask(b) = sum(2^((b*COMB_TEETH + t)*COMB_SPACING) for t=0..COMB_TEETH-1),\n+     * with b ranging from 0 to COMB_BLOCKS-1. So for example with COMB_BLOCKS=11,\n+     * COMB_TEETH=6, COMB_SPACING=4, we would have:\n+     *   mask(0)  = 2^0   + 2^4   + 2^8   + 2^12  + 2^16  + 2^20,\n+     *   mask(1)  = 2^24  + 2^28  + 2^32  + 2^36  + 2^40  + 2^44,\n+     *   mask(2)  = 2^48  + 2^52  + 2^56  + 2^60  + 2^64  + 2^68,\n+     *   ...\n+     *   mask(10) = 2^240 + 2^244 + 2^248 + 2^252 + 2^256 + 2^260\n+     *\n+     * Imagine we have a table(b,m) function which can look up, given b and\n+     * m=(recoded & mask(b)), the sum of (2*d_i-1)*2^(i-1)*G for all bit positions\n+     * i set in mask(b). In our example, table(0, 1 + 2^8 + 2^20) would be equal to\n+     * (2^-1 - 2^3 + 2^7 - 2^11 - 2^15 + 2^19)*G.\n+     *\n+     * With that, we can rewrite R as:\n+     *   1*(table(0, recoded & mask(0)) + table(1, recoded & mask(1)) + ...)\n+     * + 2*(table(0, (recoded/2) & mask(0)) + table(1, (recoded/2) & mask(1)) + ...)\n+     * + 4*(table(0, (recoded/4) & mask(0)) + table(1, (recoded/4) & mask(1)) + ...)\n+     * + ...\n+     * + 2^(COMB_SPACING-1)*(table(0, (recoded/2^(COMB_SPACING-1)) & mask(0)) + ...)\n+     * + ctx->ge_offset.\n+     *\n+     * This is implemented using an outer loop that runs in reverse order over the lines\n+     * of this equation, which in each iteration runs an inner loop that adds the terms\n+     * of that line and the doubles the result before proceeding to the next line.\n+     * In pseudocode:\n+     *   R = infinity\n+     *   for comb_off in range(COMB_SPACING - 1, -1, -1):\n+     *     for block in range(COMB_BLOCKS):\n+     *       R += table(block, (recoded >> comb_off) & mask(block))\n+     *     if comb_off > 0:\n+     *       R = 2*R\n+     *   R += ge_offset\n+     *   return R",
      "path": "src/ecmult_gen_impl.h",
      "position": null,
      "original_position": 146,
      "commit_id": "dcc846f18518f77770b6a1fc9e39683c63685d39",
      "original_commit_id": "62601920bee3b57456a130d1c10a4e7fc08f3866",
      "in_reply_to_id": null,
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "It may be a good idea to explain here why we `ge_offset` is added at the end, instead of using it as initial value for the variable R. ",
      "created_at": "2024-04-04T16:21:26Z",
      "updated_at": "2024-04-04T16:51:09Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1058#discussion_r1552031020",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1552031020"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1058"
        }
      },
      "start_line": null,
      "original_start_line": 128,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 139,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1552033780",
      "pull_request_review_id": 1980314810,
      "id": 1552033780,
      "node_id": "PRRC_kwDOAP4Jqs5cgif0",
      "diff_hunk": "@@ -29,38 +29,154 @@ static void secp256k1_ecmult_gen_context_clear(secp256k1_ecmult_gen_context *ctx\n     secp256k1_ge_clear(&ctx->ge_offset);\n }\n \n-/* For accelerating the computation of a*G:\n- * To harden against timing attacks, use the following mechanism:\n- * * Break up the multiplicand into groups of PREC_BITS bits, called n_0, n_1, n_2, ..., n_(PREC_N-1).\n- * * Compute sum(n_i * (PREC_G)^i * G + U_i, i=0 ... PREC_N-1), where:\n- *   * U_i = U * 2^i, for i=0 ... PREC_N-2\n- *   * U_i = U * (1-2^(PREC_N-1)), for i=PREC_N-1\n- *   where U is a point with no known corresponding scalar. Note that sum(U_i, i=0 ... PREC_N-1) = 0.\n- * For each i, and each of the PREC_G possible values of n_i, (n_i * (PREC_G)^i * G + U_i) is\n- * precomputed (call it prec(i, n_i)). The formula now becomes sum(prec(i, n_i), i=0 ... PREC_N-1).\n- * None of the resulting prec group elements have a known scalar, and neither do any of\n- * the intermediate sums while computing a*G.\n- * The prec values are stored in secp256k1_ecmult_gen_prec_table[i][n_i] = n_i * (PREC_G)^i * G + U_i.\n- */\n-static void secp256k1_ecmult_gen(const secp256k1_ecmult_gen_context *ctx, secp256k1_gej *r, const secp256k1_scalar *gn) {\n-    int bits = ECMULT_GEN_PREC_BITS;\n-    int g = ECMULT_GEN_PREC_G(bits);\n-    int n = ECMULT_GEN_PREC_N(bits);\n+/* Compute the scalar (2^COMB_BITS - 1) / 2. */\n+static void secp256k1_ecmult_gen_scalar_diff(secp256k1_scalar* diff) {\n+    int i;\n+\n+    /* Compute scalar -1/2. */\n+    secp256k1_scalar neghalf = SECP256K1_SCALAR_CONST(0, 0, 0, 0, 0, 0, 0, 2);\n+    secp256k1_scalar_inverse_var(&neghalf, &neghalf);\n+    secp256k1_scalar_negate(&neghalf, &neghalf);\n+\n+    /* Compute offset = 2^(COMB_BITS - 1). */\n+    secp256k1_scalar_set_int(diff, 1);\n+    for (i = 0; i < COMB_BITS - 1; ++i) {\n+        secp256k1_scalar_add(diff, diff, diff);\n+    }\n \n+    /* The result is the sum of 2^(COMB_BITS - 1) + (-1/2). */\n+    secp256k1_scalar_add(diff, diff, &neghalf);\n+}\n+\n+static void secp256k1_ecmult_gen(const secp256k1_ecmult_gen_context *ctx, secp256k1_gej *r, const secp256k1_scalar *gn) {\n+    uint32_t comb_off;\n     secp256k1_ge add;\n+    secp256k1_fe neg;\n     secp256k1_ge_storage adds;\n-    secp256k1_scalar gnb;\n-    int i, j, n_i;\n+    secp256k1_scalar recoded;\n \n     memset(&adds, 0, sizeof(adds));\n     secp256k1_gej_set_infinity(r);\n \n-    /* Blind scalar/point multiplication by computing (gn-b)*G + b*G instead of gn*G. */\n-    secp256k1_scalar_add(&gnb, gn, &ctx->scalar_offset);\n+    /* We want to compute R = gn*G.\n+     *\n+     * To blind the scalar used in the computation, we rewrite this to be R = (gn-b)*G + b*G, with\n+     * a value b determined by the context. b*G is precomputed as ctx->ge_offset, so we're\n+     * left with computing R = (gn-b)*G + ctx->ge_offset.\n+     *\n+     * The multiplication (gn-b)*G will be performed using a signed-digit multi-comb (see Section\n+     * 3.3 of \"Fast and compact elliptic-curve cryptography\" by Mike Hamburg\n+     * (https://eprint.iacr.org/2012/309).\n+     *\n+     * Let comb(s,P) = sum((2*s_i-1)*2^i*P for i=0..COMB_BITS-1), where s_i is the i'th bit of the\n+     * binary representation of scalar s. So the s_i values determine whether -2^i*P (s_i=0) or\n+     * +2^i*P (s_1) are added together. By manipulating:\n+     *\n+     *     comb(s,P) = sum((2*s_i-1)*2^i*P for i=0..COMB_BITS-1)\n+     * <=> comb(s,P) = sum((2*s_i-1)*2^i for i=0..COMB_BITS-1) * P\n+     * <=> comb(s,P) = (2*sum(s_i*2^i for i=0..COMB_BITS-1) - sum(2^i for i=0..COMB_BITS-1)) * P\n+     * <=> comb(s,P) = (2*s - (2^COMB_BITS - 1)) * P\n+     *\n+     * Thus (gn-b)*G can be written as comb(s,G) if gn-b = 2*s - (2^COMB_BITS - 1), or\n+     * s = (gn - b + (2^COMB_BITS - 1))/2 mod order.\n+     *\n+     * We use an alternative that avoids the modular division by two: we write (gn-b)*G =\n+     * comb(d,G/2). For that to hold it must be the case that\n+     * (gn-b)*G = (2*d - (2^COMB_BITS - 1)) * (G/2), or\n+     * d = (gn + (2^COMB_BITS - 1)/2 - b) mod order.\n+     *\n+     * -b is precomputed as ctx->scalar_offset, so our final equations become:\n+     *\n+     *   d = gn + ctx->scalar_offset + (2^COMB_BITS - 1)/2 (mod order)\n+     *   R = comb(d, G/2) + ctx->ge_offset.\n+     *\n+     * The comb function is computed by summing + or - 2^(i-1)*G, for i=0..COMB_BITS-1, depending\n+     * on the value of the bits d_i of the binary representation of scalar d.\n+     */\n+\n+    /* Compute the scalar (gn + ctx->scalar_offset + (2^COMB_BITS - 1)/2). */\n+    secp256k1_ecmult_gen_scalar_diff(&recoded);\n+    secp256k1_scalar_add(&recoded, &recoded, &ctx->scalar_offset);\n+    secp256k1_scalar_add(&recoded, &recoded, gn);\n+\n+    /* In secp256k1_ecmult_gen_prec_table we have precomputed sums of the\n+     * (2*d_i-1) * 2^(i-1) * G points, for various combinations of i positions.\n+     * We rewrite our equation in terms of these table entries.\n+     *\n+     * Let mask(b) = sum(2^((b*COMB_TEETH + t)*COMB_SPACING) for t=0..COMB_TEETH-1),\n+     * with b ranging from 0 to COMB_BLOCKS-1. So for example with COMB_BLOCKS=11,\n+     * COMB_TEETH=6, COMB_SPACING=4, we would have:\n+     *   mask(0)  = 2^0   + 2^4   + 2^8   + 2^12  + 2^16  + 2^20,\n+     *   mask(1)  = 2^24  + 2^28  + 2^32  + 2^36  + 2^40  + 2^44,\n+     *   mask(2)  = 2^48  + 2^52  + 2^56  + 2^60  + 2^64  + 2^68,\n+     *   ...\n+     *   mask(10) = 2^240 + 2^244 + 2^248 + 2^252 + 2^256 + 2^260\n+     *\n+     * Imagine we have a table(b,m) function which can look up, given b and\n+     * m=(recoded & mask(b)), the sum of (2*d_i-1)*2^(i-1)*G for all bit positions\n+     * i set in mask(b). In our example, table(0, 1 + 2^8 + 2^20) would be equal to\n+     * (2^-1 - 2^3 + 2^7 - 2^11 - 2^15 + 2^19)*G.\n+     *\n+     * With that, we can rewrite R as:\n+     *   1*(table(0, recoded & mask(0)) + table(1, recoded & mask(1)) + ...)\n+     * + 2*(table(0, (recoded/2) & mask(0)) + table(1, (recoded/2) & mask(1)) + ...)\n+     * + 4*(table(0, (recoded/4) & mask(0)) + table(1, (recoded/4) & mask(1)) + ...)\n+     * + ...\n+     * + 2^(COMB_SPACING-1)*(table(0, (recoded/2^(COMB_SPACING-1)) & mask(0)) + ...)\n+     * + ctx->ge_offset.\n+     *\n+     * This is implemented using an outer loop that runs in reverse order over the lines\n+     * of this equation, which in each iteration runs an inner loop that adds the terms\n+     * of that line and the doubles the result before proceeding to the next line.\n+     * In pseudocode:\n+     *   R = infinity\n+     *   for comb_off in range(COMB_SPACING - 1, -1, -1):\n+     *     for block in range(COMB_BLOCKS):\n+     *       R += table(block, (recoded >> comb_off) & mask(block))\n+     *     if comb_off > 0:\n+     *       R = 2*R\n+     *   R += ge_offset\n+     *   return R\n+     *\n+     * The last question is how to implement the table(b,m) function. For any value of\n+     * b, m=(recoded & mask(b)) can only take on at most 2^COMB_TEETH possible values\n+     * (the last one may have fewer as there mask(b) may the curve order). So we could\n+     * create COMB_BLOCK tables which contain a value for each such m value.",
      "path": "src/ecmult_gen_impl.h",
      "position": null,
      "original_position": 151,
      "commit_id": "dcc846f18518f77770b6a1fc9e39683c63685d39",
      "original_commit_id": "62601920bee3b57456a130d1c10a4e7fc08f3866",
      "in_reply_to_id": null,
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: grammar in parantheses",
      "created_at": "2024-04-04T16:22:57Z",
      "updated_at": "2024-04-04T16:51:09Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1058#discussion_r1552033780",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1552033780"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1058"
        }
      },
      "start_line": null,
      "original_start_line": 141,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 144,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1552039814",
      "pull_request_review_id": 1980314810,
      "id": 1552039814,
      "node_id": "PRRC_kwDOAP4Jqs5cgj-G",
      "diff_hunk": "@@ -29,38 +29,154 @@ static void secp256k1_ecmult_gen_context_clear(secp256k1_ecmult_gen_context *ctx\n     secp256k1_ge_clear(&ctx->ge_offset);\n }\n \n-/* For accelerating the computation of a*G:\n- * To harden against timing attacks, use the following mechanism:\n- * * Break up the multiplicand into groups of PREC_BITS bits, called n_0, n_1, n_2, ..., n_(PREC_N-1).\n- * * Compute sum(n_i * (PREC_G)^i * G + U_i, i=0 ... PREC_N-1), where:\n- *   * U_i = U * 2^i, for i=0 ... PREC_N-2\n- *   * U_i = U * (1-2^(PREC_N-1)), for i=PREC_N-1\n- *   where U is a point with no known corresponding scalar. Note that sum(U_i, i=0 ... PREC_N-1) = 0.\n- * For each i, and each of the PREC_G possible values of n_i, (n_i * (PREC_G)^i * G + U_i) is\n- * precomputed (call it prec(i, n_i)). The formula now becomes sum(prec(i, n_i), i=0 ... PREC_N-1).\n- * None of the resulting prec group elements have a known scalar, and neither do any of\n- * the intermediate sums while computing a*G.\n- * The prec values are stored in secp256k1_ecmult_gen_prec_table[i][n_i] = n_i * (PREC_G)^i * G + U_i.\n- */\n-static void secp256k1_ecmult_gen(const secp256k1_ecmult_gen_context *ctx, secp256k1_gej *r, const secp256k1_scalar *gn) {\n-    int bits = ECMULT_GEN_PREC_BITS;\n-    int g = ECMULT_GEN_PREC_G(bits);\n-    int n = ECMULT_GEN_PREC_N(bits);\n+/* Compute the scalar (2^COMB_BITS - 1) / 2. */\n+static void secp256k1_ecmult_gen_scalar_diff(secp256k1_scalar* diff) {\n+    int i;\n+\n+    /* Compute scalar -1/2. */\n+    secp256k1_scalar neghalf = SECP256K1_SCALAR_CONST(0, 0, 0, 0, 0, 0, 0, 2);\n+    secp256k1_scalar_inverse_var(&neghalf, &neghalf);\n+    secp256k1_scalar_negate(&neghalf, &neghalf);\n+\n+    /* Compute offset = 2^(COMB_BITS - 1). */\n+    secp256k1_scalar_set_int(diff, 1);\n+    for (i = 0; i < COMB_BITS - 1; ++i) {\n+        secp256k1_scalar_add(diff, diff, diff);\n+    }\n \n+    /* The result is the sum of 2^(COMB_BITS - 1) + (-1/2). */\n+    secp256k1_scalar_add(diff, diff, &neghalf);\n+}\n+\n+static void secp256k1_ecmult_gen(const secp256k1_ecmult_gen_context *ctx, secp256k1_gej *r, const secp256k1_scalar *gn) {\n+    uint32_t comb_off;\n     secp256k1_ge add;\n+    secp256k1_fe neg;\n     secp256k1_ge_storage adds;\n-    secp256k1_scalar gnb;\n-    int i, j, n_i;\n+    secp256k1_scalar recoded;\n \n     memset(&adds, 0, sizeof(adds));\n     secp256k1_gej_set_infinity(r);\n \n-    /* Blind scalar/point multiplication by computing (gn-b)*G + b*G instead of gn*G. */\n-    secp256k1_scalar_add(&gnb, gn, &ctx->scalar_offset);\n+    /* We want to compute R = gn*G.\n+     *\n+     * To blind the scalar used in the computation, we rewrite this to be R = (gn-b)*G + b*G, with\n+     * a value b determined by the context. b*G is precomputed as ctx->ge_offset, so we're\n+     * left with computing R = (gn-b)*G + ctx->ge_offset.\n+     *\n+     * The multiplication (gn-b)*G will be performed using a signed-digit multi-comb (see Section\n+     * 3.3 of \"Fast and compact elliptic-curve cryptography\" by Mike Hamburg\n+     * (https://eprint.iacr.org/2012/309).\n+     *\n+     * Let comb(s,P) = sum((2*s_i-1)*2^i*P for i=0..COMB_BITS-1), where s_i is the i'th bit of the\n+     * binary representation of scalar s. So the s_i values determine whether -2^i*P (s_i=0) or\n+     * +2^i*P (s_1) are added together. By manipulating:\n+     *\n+     *     comb(s,P) = sum((2*s_i-1)*2^i*P for i=0..COMB_BITS-1)\n+     * <=> comb(s,P) = sum((2*s_i-1)*2^i for i=0..COMB_BITS-1) * P\n+     * <=> comb(s,P) = (2*sum(s_i*2^i for i=0..COMB_BITS-1) - sum(2^i for i=0..COMB_BITS-1)) * P\n+     * <=> comb(s,P) = (2*s - (2^COMB_BITS - 1)) * P\n+     *\n+     * Thus (gn-b)*G can be written as comb(s,G) if gn-b = 2*s - (2^COMB_BITS - 1), or\n+     * s = (gn - b + (2^COMB_BITS - 1))/2 mod order.\n+     *\n+     * We use an alternative that avoids the modular division by two: we write (gn-b)*G =\n+     * comb(d,G/2). For that to hold it must be the case that\n+     * (gn-b)*G = (2*d - (2^COMB_BITS - 1)) * (G/2), or\n+     * d = (gn + (2^COMB_BITS - 1)/2 - b) mod order.\n+     *\n+     * -b is precomputed as ctx->scalar_offset, so our final equations become:\n+     *\n+     *   d = gn + ctx->scalar_offset + (2^COMB_BITS - 1)/2 (mod order)\n+     *   R = comb(d, G/2) + ctx->ge_offset.\n+     *\n+     * The comb function is computed by summing + or - 2^(i-1)*G, for i=0..COMB_BITS-1, depending\n+     * on the value of the bits d_i of the binary representation of scalar d.\n+     */\n+\n+    /* Compute the scalar (gn + ctx->scalar_offset + (2^COMB_BITS - 1)/2). */\n+    secp256k1_ecmult_gen_scalar_diff(&recoded);\n+    secp256k1_scalar_add(&recoded, &recoded, &ctx->scalar_offset);\n+    secp256k1_scalar_add(&recoded, &recoded, gn);\n+\n+    /* In secp256k1_ecmult_gen_prec_table we have precomputed sums of the\n+     * (2*d_i-1) * 2^(i-1) * G points, for various combinations of i positions.\n+     * We rewrite our equation in terms of these table entries.\n+     *\n+     * Let mask(b) = sum(2^((b*COMB_TEETH + t)*COMB_SPACING) for t=0..COMB_TEETH-1),\n+     * with b ranging from 0 to COMB_BLOCKS-1. So for example with COMB_BLOCKS=11,\n+     * COMB_TEETH=6, COMB_SPACING=4, we would have:\n+     *   mask(0)  = 2^0   + 2^4   + 2^8   + 2^12  + 2^16  + 2^20,\n+     *   mask(1)  = 2^24  + 2^28  + 2^32  + 2^36  + 2^40  + 2^44,\n+     *   mask(2)  = 2^48  + 2^52  + 2^56  + 2^60  + 2^64  + 2^68,\n+     *   ...\n+     *   mask(10) = 2^240 + 2^244 + 2^248 + 2^252 + 2^256 + 2^260\n+     *\n+     * Imagine we have a table(b,m) function which can look up, given b and\n+     * m=(recoded & mask(b)), the sum of (2*d_i-1)*2^(i-1)*G for all bit positions\n+     * i set in mask(b). In our example, table(0, 1 + 2^8 + 2^20) would be equal to\n+     * (2^-1 - 2^3 + 2^7 - 2^11 - 2^15 + 2^19)*G.\n+     *\n+     * With that, we can rewrite R as:\n+     *   1*(table(0, recoded & mask(0)) + table(1, recoded & mask(1)) + ...)\n+     * + 2*(table(0, (recoded/2) & mask(0)) + table(1, (recoded/2) & mask(1)) + ...)\n+     * + 4*(table(0, (recoded/4) & mask(0)) + table(1, (recoded/4) & mask(1)) + ...)\n+     * + ...\n+     * + 2^(COMB_SPACING-1)*(table(0, (recoded/2^(COMB_SPACING-1)) & mask(0)) + ...)\n+     * + ctx->ge_offset.\n+     *\n+     * This is implemented using an outer loop that runs in reverse order over the lines\n+     * of this equation, which in each iteration runs an inner loop that adds the terms\n+     * of that line and the doubles the result before proceeding to the next line.\n+     * In pseudocode:\n+     *   R = infinity\n+     *   for comb_off in range(COMB_SPACING - 1, -1, -1):\n+     *     for block in range(COMB_BLOCKS):\n+     *       R += table(block, (recoded >> comb_off) & mask(block))\n+     *     if comb_off > 0:\n+     *       R = 2*R\n+     *   R += ge_offset\n+     *   return R\n+     *\n+     * The last question is how to implement the table(b,m) function. For any value of\n+     * b, m=(recoded & mask(b)) can only take on at most 2^COMB_TEETH possible values\n+     * (the last one may have fewer as there mask(b) may the curve order). So we could\n+     * create COMB_BLOCK tables which contain a value for each such m value.\n+     *\n+     * Due to the fact that every table entry is a sum of positive and negative powers\n+     * of two multiplied by G, every table will contains pairs of negated points:\n+     * if all the masked bits in m flip, the table value is negated. We can exploit this\n+     * to only store the first half of every table. If an entry from the second half is\n+     * needed, we look up its bit-flipped version instead, and conditionally negate it.",
      "path": "src/ecmult_gen_impl.h",
      "position": null,
      "original_position": 157,
      "commit_id": "dcc846f18518f77770b6a1fc9e39683c63685d39",
      "original_commit_id": "62601920bee3b57456a130d1c10a4e7fc08f3866",
      "in_reply_to_id": null,
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: remove \"conditionally\"? (the entire clause is already conditional)",
      "created_at": "2024-04-04T16:27:10Z",
      "updated_at": "2024-04-04T16:51:09Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1058#discussion_r1552039814",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1552039814"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1058"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 150,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1552045255",
      "pull_request_review_id": 1980314810,
      "id": 1552045255,
      "node_id": "PRRC_kwDOAP4Jqs5cglTH",
      "diff_hunk": "@@ -29,38 +29,154 @@ static void secp256k1_ecmult_gen_context_clear(secp256k1_ecmult_gen_context *ctx\n     secp256k1_ge_clear(&ctx->ge_offset);\n }\n \n-/* For accelerating the computation of a*G:\n- * To harden against timing attacks, use the following mechanism:\n- * * Break up the multiplicand into groups of PREC_BITS bits, called n_0, n_1, n_2, ..., n_(PREC_N-1).\n- * * Compute sum(n_i * (PREC_G)^i * G + U_i, i=0 ... PREC_N-1), where:\n- *   * U_i = U * 2^i, for i=0 ... PREC_N-2\n- *   * U_i = U * (1-2^(PREC_N-1)), for i=PREC_N-1\n- *   where U is a point with no known corresponding scalar. Note that sum(U_i, i=0 ... PREC_N-1) = 0.\n- * For each i, and each of the PREC_G possible values of n_i, (n_i * (PREC_G)^i * G + U_i) is\n- * precomputed (call it prec(i, n_i)). The formula now becomes sum(prec(i, n_i), i=0 ... PREC_N-1).\n- * None of the resulting prec group elements have a known scalar, and neither do any of\n- * the intermediate sums while computing a*G.\n- * The prec values are stored in secp256k1_ecmult_gen_prec_table[i][n_i] = n_i * (PREC_G)^i * G + U_i.\n- */\n-static void secp256k1_ecmult_gen(const secp256k1_ecmult_gen_context *ctx, secp256k1_gej *r, const secp256k1_scalar *gn) {\n-    int bits = ECMULT_GEN_PREC_BITS;\n-    int g = ECMULT_GEN_PREC_G(bits);\n-    int n = ECMULT_GEN_PREC_N(bits);\n+/* Compute the scalar (2^COMB_BITS - 1) / 2. */\n+static void secp256k1_ecmult_gen_scalar_diff(secp256k1_scalar* diff) {\n+    int i;\n+\n+    /* Compute scalar -1/2. */\n+    secp256k1_scalar neghalf = SECP256K1_SCALAR_CONST(0, 0, 0, 0, 0, 0, 0, 2);\n+    secp256k1_scalar_inverse_var(&neghalf, &neghalf);\n+    secp256k1_scalar_negate(&neghalf, &neghalf);\n+\n+    /* Compute offset = 2^(COMB_BITS - 1). */\n+    secp256k1_scalar_set_int(diff, 1);\n+    for (i = 0; i < COMB_BITS - 1; ++i) {\n+        secp256k1_scalar_add(diff, diff, diff);\n+    }\n \n+    /* The result is the sum of 2^(COMB_BITS - 1) + (-1/2). */\n+    secp256k1_scalar_add(diff, diff, &neghalf);\n+}\n+\n+static void secp256k1_ecmult_gen(const secp256k1_ecmult_gen_context *ctx, secp256k1_gej *r, const secp256k1_scalar *gn) {\n+    uint32_t comb_off;\n     secp256k1_ge add;\n+    secp256k1_fe neg;\n     secp256k1_ge_storage adds;\n-    secp256k1_scalar gnb;\n-    int i, j, n_i;\n+    secp256k1_scalar recoded;\n \n     memset(&adds, 0, sizeof(adds));\n     secp256k1_gej_set_infinity(r);\n \n-    /* Blind scalar/point multiplication by computing (gn-b)*G + b*G instead of gn*G. */\n-    secp256k1_scalar_add(&gnb, gn, &ctx->scalar_offset);\n+    /* We want to compute R = gn*G.\n+     *\n+     * To blind the scalar used in the computation, we rewrite this to be R = (gn-b)*G + b*G, with\n+     * a value b determined by the context. b*G is precomputed as ctx->ge_offset, so we're\n+     * left with computing R = (gn-b)*G + ctx->ge_offset.\n+     *\n+     * The multiplication (gn-b)*G will be performed using a signed-digit multi-comb (see Section\n+     * 3.3 of \"Fast and compact elliptic-curve cryptography\" by Mike Hamburg\n+     * (https://eprint.iacr.org/2012/309).\n+     *\n+     * Let comb(s,P) = sum((2*s_i-1)*2^i*P for i=0..COMB_BITS-1), where s_i is the i'th bit of the\n+     * binary representation of scalar s. So the s_i values determine whether -2^i*P (s_i=0) or\n+     * +2^i*P (s_1) are added together. By manipulating:\n+     *\n+     *     comb(s,P) = sum((2*s_i-1)*2^i*P for i=0..COMB_BITS-1)\n+     * <=> comb(s,P) = sum((2*s_i-1)*2^i for i=0..COMB_BITS-1) * P\n+     * <=> comb(s,P) = (2*sum(s_i*2^i for i=0..COMB_BITS-1) - sum(2^i for i=0..COMB_BITS-1)) * P\n+     * <=> comb(s,P) = (2*s - (2^COMB_BITS - 1)) * P\n+     *\n+     * Thus (gn-b)*G can be written as comb(s,G) if gn-b = 2*s - (2^COMB_BITS - 1), or\n+     * s = (gn - b + (2^COMB_BITS - 1))/2 mod order.\n+     *\n+     * We use an alternative that avoids the modular division by two: we write (gn-b)*G =\n+     * comb(d,G/2). For that to hold it must be the case that\n+     * (gn-b)*G = (2*d - (2^COMB_BITS - 1)) * (G/2), or\n+     * d = (gn + (2^COMB_BITS - 1)/2 - b) mod order.\n+     *\n+     * -b is precomputed as ctx->scalar_offset, so our final equations become:\n+     *\n+     *   d = gn + ctx->scalar_offset + (2^COMB_BITS - 1)/2 (mod order)\n+     *   R = comb(d, G/2) + ctx->ge_offset.\n+     *\n+     * The comb function is computed by summing + or - 2^(i-1)*G, for i=0..COMB_BITS-1, depending\n+     * on the value of the bits d_i of the binary representation of scalar d.\n+     */\n+\n+    /* Compute the scalar (gn + ctx->scalar_offset + (2^COMB_BITS - 1)/2). */\n+    secp256k1_ecmult_gen_scalar_diff(&recoded);\n+    secp256k1_scalar_add(&recoded, &recoded, &ctx->scalar_offset);\n+    secp256k1_scalar_add(&recoded, &recoded, gn);\n+\n+    /* In secp256k1_ecmult_gen_prec_table we have precomputed sums of the\n+     * (2*d_i-1) * 2^(i-1) * G points, for various combinations of i positions.\n+     * We rewrite our equation in terms of these table entries.\n+     *\n+     * Let mask(b) = sum(2^((b*COMB_TEETH + t)*COMB_SPACING) for t=0..COMB_TEETH-1),\n+     * with b ranging from 0 to COMB_BLOCKS-1. So for example with COMB_BLOCKS=11,\n+     * COMB_TEETH=6, COMB_SPACING=4, we would have:\n+     *   mask(0)  = 2^0   + 2^4   + 2^8   + 2^12  + 2^16  + 2^20,\n+     *   mask(1)  = 2^24  + 2^28  + 2^32  + 2^36  + 2^40  + 2^44,\n+     *   mask(2)  = 2^48  + 2^52  + 2^56  + 2^60  + 2^64  + 2^68,\n+     *   ...\n+     *   mask(10) = 2^240 + 2^244 + 2^248 + 2^252 + 2^256 + 2^260\n+     *\n+     * Imagine we have a table(b,m) function which can look up, given b and\n+     * m=(recoded & mask(b)), the sum of (2*d_i-1)*2^(i-1)*G for all bit positions\n+     * i set in mask(b). In our example, table(0, 1 + 2^8 + 2^20) would be equal to\n+     * (2^-1 - 2^3 + 2^7 - 2^11 - 2^15 + 2^19)*G.\n+     *\n+     * With that, we can rewrite R as:\n+     *   1*(table(0, recoded & mask(0)) + table(1, recoded & mask(1)) + ...)\n+     * + 2*(table(0, (recoded/2) & mask(0)) + table(1, (recoded/2) & mask(1)) + ...)\n+     * + 4*(table(0, (recoded/4) & mask(0)) + table(1, (recoded/4) & mask(1)) + ...)\n+     * + ...\n+     * + 2^(COMB_SPACING-1)*(table(0, (recoded/2^(COMB_SPACING-1)) & mask(0)) + ...)\n+     * + ctx->ge_offset.\n+     *\n+     * This is implemented using an outer loop that runs in reverse order over the lines\n+     * of this equation, which in each iteration runs an inner loop that adds the terms\n+     * of that line and the doubles the result before proceeding to the next line.\n+     * In pseudocode:\n+     *   R = infinity\n+     *   for comb_off in range(COMB_SPACING - 1, -1, -1):\n+     *     for block in range(COMB_BLOCKS):\n+     *       R += table(block, (recoded >> comb_off) & mask(block))\n+     *     if comb_off > 0:\n+     *       R = 2*R\n+     *   R += ge_offset\n+     *   return R\n+     *\n+     * The last question is how to implement the table(b,m) function. For any value of\n+     * b, m=(recoded & mask(b)) can only take on at most 2^COMB_TEETH possible values\n+     * (the last one may have fewer as there mask(b) may the curve order). So we could\n+     * create COMB_BLOCK tables which contain a value for each such m value.\n+     *\n+     * Due to the fact that every table entry is a sum of positive and negative powers\n+     * of two multiplied by G, every table will contains pairs of negated points:\n+     * if all the masked bits in m flip, the table value is negated. We can exploit this\n+     * to only store the first half of every table. If an entry from the second half is\n+     * needed, we look up its bit-flipped version instead, and conditionally negate it.\n+     *\n+     * secp256k1_ecmult_gen_prec_table[b][index] stores the table(b,m) entries. Index\n+     * is the relevant bits of m packed together without gaps. */\n+\n+    /* Outer loop: iterate over comb_off from COMB_SPACING - 1 down to 0. */\n+    comb_off = COMB_SPACING - 1;\n+    while (1) {\n+        uint32_t block;\n+        uint32_t bit_pos = comb_off;\n+        /* Inner loop: for each block, add table entries to the result. */\n+        for (block = 0; block < COMB_BLOCKS; ++block) {\n+            /* Gather the mask(block)-selected bits of recoded into bits. They're packed\n+             * together: bit (tooth) of bits = bit\n+             * ((block*COMB_TEETH + tooth)*COMB_SPACING + comb_off) of recoded. */\n+            uint32_t bits = 0, sign, abs, index, tooth;\n+            for (tooth = 0; tooth < COMB_TEETH && bit_pos < 256; ++tooth) {\n+                uint32_t bit = secp256k1_scalar_get_bits(&recoded, bit_pos, 1);\n+                bits |= bit << tooth;\n+                bit_pos += COMB_SPACING;\n+            }\n+\n+            /* If the top bit of bits is 1, conditionally flip them all (corresponding",
      "path": "src/ecmult_gen_impl.h",
      "position": null,
      "original_position": 179,
      "commit_id": "dcc846f18518f77770b6a1fc9e39683c63685d39",
      "original_commit_id": "62601920bee3b57456a130d1c10a4e7fc08f3866",
      "in_reply_to_id": null,
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: same here, remove \"conditionally\" (or do I have this wrong?)",
      "created_at": "2024-04-04T16:31:06Z",
      "updated_at": "2024-04-04T16:51:09Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1058#discussion_r1552045255",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1552045255"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1058"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 172,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1552052731",
      "pull_request_review_id": 1980314810,
      "id": 1552052731,
      "node_id": "PRRC_kwDOAP4Jqs5cgnH7",
      "diff_hunk": "@@ -29,38 +29,154 @@ static void secp256k1_ecmult_gen_context_clear(secp256k1_ecmult_gen_context *ctx\n     secp256k1_ge_clear(&ctx->ge_offset);\n }\n \n-/* For accelerating the computation of a*G:\n- * To harden against timing attacks, use the following mechanism:\n- * * Break up the multiplicand into groups of PREC_BITS bits, called n_0, n_1, n_2, ..., n_(PREC_N-1).\n- * * Compute sum(n_i * (PREC_G)^i * G + U_i, i=0 ... PREC_N-1), where:\n- *   * U_i = U * 2^i, for i=0 ... PREC_N-2\n- *   * U_i = U * (1-2^(PREC_N-1)), for i=PREC_N-1\n- *   where U is a point with no known corresponding scalar. Note that sum(U_i, i=0 ... PREC_N-1) = 0.\n- * For each i, and each of the PREC_G possible values of n_i, (n_i * (PREC_G)^i * G + U_i) is\n- * precomputed (call it prec(i, n_i)). The formula now becomes sum(prec(i, n_i), i=0 ... PREC_N-1).\n- * None of the resulting prec group elements have a known scalar, and neither do any of\n- * the intermediate sums while computing a*G.\n- * The prec values are stored in secp256k1_ecmult_gen_prec_table[i][n_i] = n_i * (PREC_G)^i * G + U_i.\n- */\n-static void secp256k1_ecmult_gen(const secp256k1_ecmult_gen_context *ctx, secp256k1_gej *r, const secp256k1_scalar *gn) {\n-    int bits = ECMULT_GEN_PREC_BITS;\n-    int g = ECMULT_GEN_PREC_G(bits);\n-    int n = ECMULT_GEN_PREC_N(bits);\n+/* Compute the scalar (2^COMB_BITS - 1) / 2. */\n+static void secp256k1_ecmult_gen_scalar_diff(secp256k1_scalar* diff) {\n+    int i;\n+\n+    /* Compute scalar -1/2. */\n+    secp256k1_scalar neghalf = SECP256K1_SCALAR_CONST(0, 0, 0, 0, 0, 0, 0, 2);\n+    secp256k1_scalar_inverse_var(&neghalf, &neghalf);\n+    secp256k1_scalar_negate(&neghalf, &neghalf);\n+\n+    /* Compute offset = 2^(COMB_BITS - 1). */\n+    secp256k1_scalar_set_int(diff, 1);\n+    for (i = 0; i < COMB_BITS - 1; ++i) {\n+        secp256k1_scalar_add(diff, diff, diff);\n+    }\n \n+    /* The result is the sum of 2^(COMB_BITS - 1) + (-1/2). */\n+    secp256k1_scalar_add(diff, diff, &neghalf);\n+}\n+\n+static void secp256k1_ecmult_gen(const secp256k1_ecmult_gen_context *ctx, secp256k1_gej *r, const secp256k1_scalar *gn) {\n+    uint32_t comb_off;\n     secp256k1_ge add;\n+    secp256k1_fe neg;\n     secp256k1_ge_storage adds;\n-    secp256k1_scalar gnb;\n-    int i, j, n_i;\n+    secp256k1_scalar recoded;\n \n     memset(&adds, 0, sizeof(adds));\n     secp256k1_gej_set_infinity(r);\n \n-    /* Blind scalar/point multiplication by computing (gn-b)*G + b*G instead of gn*G. */\n-    secp256k1_scalar_add(&gnb, gn, &ctx->scalar_offset);\n+    /* We want to compute R = gn*G.\n+     *\n+     * To blind the scalar used in the computation, we rewrite this to be R = (gn-b)*G + b*G, with\n+     * a value b determined by the context. b*G is precomputed as ctx->ge_offset, so we're\n+     * left with computing R = (gn-b)*G + ctx->ge_offset.\n+     *\n+     * The multiplication (gn-b)*G will be performed using a signed-digit multi-comb (see Section\n+     * 3.3 of \"Fast and compact elliptic-curve cryptography\" by Mike Hamburg\n+     * (https://eprint.iacr.org/2012/309).\n+     *\n+     * Let comb(s,P) = sum((2*s_i-1)*2^i*P for i=0..COMB_BITS-1), where s_i is the i'th bit of the\n+     * binary representation of scalar s. So the s_i values determine whether -2^i*P (s_i=0) or\n+     * +2^i*P (s_1) are added together. By manipulating:\n+     *\n+     *     comb(s,P) = sum((2*s_i-1)*2^i*P for i=0..COMB_BITS-1)\n+     * <=> comb(s,P) = sum((2*s_i-1)*2^i for i=0..COMB_BITS-1) * P\n+     * <=> comb(s,P) = (2*sum(s_i*2^i for i=0..COMB_BITS-1) - sum(2^i for i=0..COMB_BITS-1)) * P\n+     * <=> comb(s,P) = (2*s - (2^COMB_BITS - 1)) * P\n+     *\n+     * Thus (gn-b)*G can be written as comb(s,G) if gn-b = 2*s - (2^COMB_BITS - 1), or\n+     * s = (gn - b + (2^COMB_BITS - 1))/2 mod order.\n+     *\n+     * We use an alternative that avoids the modular division by two: we write (gn-b)*G =\n+     * comb(d,G/2). For that to hold it must be the case that\n+     * (gn-b)*G = (2*d - (2^COMB_BITS - 1)) * (G/2), or\n+     * d = (gn + (2^COMB_BITS - 1)/2 - b) mod order.\n+     *\n+     * -b is precomputed as ctx->scalar_offset, so our final equations become:\n+     *\n+     *   d = gn + ctx->scalar_offset + (2^COMB_BITS - 1)/2 (mod order)\n+     *   R = comb(d, G/2) + ctx->ge_offset.\n+     *\n+     * The comb function is computed by summing + or - 2^(i-1)*G, for i=0..COMB_BITS-1, depending\n+     * on the value of the bits d_i of the binary representation of scalar d.\n+     */\n+\n+    /* Compute the scalar (gn + ctx->scalar_offset + (2^COMB_BITS - 1)/2). */\n+    secp256k1_ecmult_gen_scalar_diff(&recoded);\n+    secp256k1_scalar_add(&recoded, &recoded, &ctx->scalar_offset);\n+    secp256k1_scalar_add(&recoded, &recoded, gn);\n+\n+    /* In secp256k1_ecmult_gen_prec_table we have precomputed sums of the\n+     * (2*d_i-1) * 2^(i-1) * G points, for various combinations of i positions.\n+     * We rewrite our equation in terms of these table entries.\n+     *\n+     * Let mask(b) = sum(2^((b*COMB_TEETH + t)*COMB_SPACING) for t=0..COMB_TEETH-1),\n+     * with b ranging from 0 to COMB_BLOCKS-1. So for example with COMB_BLOCKS=11,\n+     * COMB_TEETH=6, COMB_SPACING=4, we would have:\n+     *   mask(0)  = 2^0   + 2^4   + 2^8   + 2^12  + 2^16  + 2^20,\n+     *   mask(1)  = 2^24  + 2^28  + 2^32  + 2^36  + 2^40  + 2^44,\n+     *   mask(2)  = 2^48  + 2^52  + 2^56  + 2^60  + 2^64  + 2^68,\n+     *   ...\n+     *   mask(10) = 2^240 + 2^244 + 2^248 + 2^252 + 2^256 + 2^260\n+     *\n+     * Imagine we have a table(b,m) function which can look up, given b and\n+     * m=(recoded & mask(b)), the sum of (2*d_i-1)*2^(i-1)*G for all bit positions\n+     * i set in mask(b). In our example, table(0, 1 + 2^8 + 2^20) would be equal to\n+     * (2^-1 - 2^3 + 2^7 - 2^11 - 2^15 + 2^19)*G.\n+     *\n+     * With that, we can rewrite R as:\n+     *   1*(table(0, recoded & mask(0)) + table(1, recoded & mask(1)) + ...)\n+     * + 2*(table(0, (recoded/2) & mask(0)) + table(1, (recoded/2) & mask(1)) + ...)\n+     * + 4*(table(0, (recoded/4) & mask(0)) + table(1, (recoded/4) & mask(1)) + ...)\n+     * + ...\n+     * + 2^(COMB_SPACING-1)*(table(0, (recoded/2^(COMB_SPACING-1)) & mask(0)) + ...)\n+     * + ctx->ge_offset.\n+     *\n+     * This is implemented using an outer loop that runs in reverse order over the lines\n+     * of this equation, which in each iteration runs an inner loop that adds the terms\n+     * of that line and the doubles the result before proceeding to the next line.\n+     * In pseudocode:\n+     *   R = infinity\n+     *   for comb_off in range(COMB_SPACING - 1, -1, -1):\n+     *     for block in range(COMB_BLOCKS):\n+     *       R += table(block, (recoded >> comb_off) & mask(block))\n+     *     if comb_off > 0:\n+     *       R = 2*R\n+     *   R += ge_offset\n+     *   return R\n+     *\n+     * The last question is how to implement the table(b,m) function. For any value of\n+     * b, m=(recoded & mask(b)) can only take on at most 2^COMB_TEETH possible values\n+     * (the last one may have fewer as there mask(b) may the curve order). So we could\n+     * create COMB_BLOCK tables which contain a value for each such m value.\n+     *\n+     * Due to the fact that every table entry is a sum of positive and negative powers\n+     * of two multiplied by G, every table will contains pairs of negated points:\n+     * if all the masked bits in m flip, the table value is negated. We can exploit this\n+     * to only store the first half of every table. If an entry from the second half is\n+     * needed, we look up its bit-flipped version instead, and conditionally negate it.\n+     *\n+     * secp256k1_ecmult_gen_prec_table[b][index] stores the table(b,m) entries. Index\n+     * is the relevant bits of m packed together without gaps. */\n+\n+    /* Outer loop: iterate over comb_off from COMB_SPACING - 1 down to 0. */\n+    comb_off = COMB_SPACING - 1;\n+    while (1) {\n+        uint32_t block;\n+        uint32_t bit_pos = comb_off;\n+        /* Inner loop: for each block, add table entries to the result. */\n+        for (block = 0; block < COMB_BLOCKS; ++block) {\n+            /* Gather the mask(block)-selected bits of recoded into bits. They're packed\n+             * together: bit (tooth) of bits = bit\n+             * ((block*COMB_TEETH + tooth)*COMB_SPACING + comb_off) of recoded. */\n+            uint32_t bits = 0, sign, abs, index, tooth;\n+            for (tooth = 0; tooth < COMB_TEETH && bit_pos < 256; ++tooth) {\n+                uint32_t bit = secp256k1_scalar_get_bits(&recoded, bit_pos, 1);\n+                bits |= bit << tooth;\n+                bit_pos += COMB_SPACING;\n+            }",
      "path": "src/ecmult_gen_impl.h",
      "position": null,
      "original_position": 177,
      "commit_id": "dcc846f18518f77770b6a1fc9e39683c63685d39",
      "original_commit_id": "62601920bee3b57456a130d1c10a4e7fc08f3866",
      "in_reply_to_id": null,
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "IIUC this relies on `COMB_TEETH <= 32`. Want to `VERIFY_CHECK` this?\r\n\r\nI guess it will be more natural to declare `tooth` as `int`, it's not involved in all the bit magic/masking. I thought the same is true for `index`, but it's compared against `abs`, so it's probably better to keep it.\r\n\r\nOn a related note, it may be a good idea to change the return value of `secp256k1_scalar_get_bits to` `uint32_t` ? It's currently `unsigned int`. We kind of assert in `assumptions.h` that this type is at least 32 bits, but I think the implicit conversion to `uint32_t` is unexpected for readers. Plus, only the `_t` types are guaranteed to be \"sane\" (2's complement, no padding bits, ...).  (Sorry, I haven't checked the other callers...)",
      "created_at": "2024-04-04T16:37:12Z",
      "updated_at": "2024-04-04T16:51:09Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1058#discussion_r1552052731",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1552052731"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1058"
        }
      },
      "start_line": null,
      "original_start_line": 165,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 229,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1552136347",
      "pull_request_review_id": 1980698833,
      "id": 1552136347,
      "node_id": "PRRC_kwDOAP4Jqs5cg7ib",
      "diff_hunk": "@@ -29,38 +29,154 @@ static void secp256k1_ecmult_gen_context_clear(secp256k1_ecmult_gen_context *ctx\n     secp256k1_ge_clear(&ctx->ge_offset);\n }\n \n-/* For accelerating the computation of a*G:\n- * To harden against timing attacks, use the following mechanism:\n- * * Break up the multiplicand into groups of PREC_BITS bits, called n_0, n_1, n_2, ..., n_(PREC_N-1).\n- * * Compute sum(n_i * (PREC_G)^i * G + U_i, i=0 ... PREC_N-1), where:\n- *   * U_i = U * 2^i, for i=0 ... PREC_N-2\n- *   * U_i = U * (1-2^(PREC_N-1)), for i=PREC_N-1\n- *   where U is a point with no known corresponding scalar. Note that sum(U_i, i=0 ... PREC_N-1) = 0.\n- * For each i, and each of the PREC_G possible values of n_i, (n_i * (PREC_G)^i * G + U_i) is\n- * precomputed (call it prec(i, n_i)). The formula now becomes sum(prec(i, n_i), i=0 ... PREC_N-1).\n- * None of the resulting prec group elements have a known scalar, and neither do any of\n- * the intermediate sums while computing a*G.\n- * The prec values are stored in secp256k1_ecmult_gen_prec_table[i][n_i] = n_i * (PREC_G)^i * G + U_i.\n- */\n-static void secp256k1_ecmult_gen(const secp256k1_ecmult_gen_context *ctx, secp256k1_gej *r, const secp256k1_scalar *gn) {\n-    int bits = ECMULT_GEN_PREC_BITS;\n-    int g = ECMULT_GEN_PREC_G(bits);\n-    int n = ECMULT_GEN_PREC_N(bits);\n+/* Compute the scalar (2^COMB_BITS - 1) / 2. */\n+static void secp256k1_ecmult_gen_scalar_diff(secp256k1_scalar* diff) {",
      "path": "src/ecmult_gen_impl.h",
      "position": 38,
      "original_position": 36,
      "commit_id": "dcc846f18518f77770b6a1fc9e39683c63685d39",
      "original_commit_id": "62601920bee3b57456a130d1c10a4e7fc08f3866",
      "in_reply_to_id": 1551959311,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "It's the difference between the multiplicand scalar and the scalar whose encoding the table lookup bits are drawn from (before adding the blinding offset).",
      "created_at": "2024-04-04T17:34:44Z",
      "updated_at": "2024-04-04T17:34:44Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1058#discussion_r1552136347",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1552136347"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1058"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 36,
      "original_line": 36,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1552768402",
      "pull_request_review_id": 1981654274,
      "id": 1552768402,
      "node_id": "PRRC_kwDOAP4Jqs5cjV2S",
      "diff_hunk": "@@ -29,38 +29,154 @@ static void secp256k1_ecmult_gen_context_clear(secp256k1_ecmult_gen_context *ctx\n     secp256k1_ge_clear(&ctx->ge_offset);\n }\n \n-/* For accelerating the computation of a*G:\n- * To harden against timing attacks, use the following mechanism:\n- * * Break up the multiplicand into groups of PREC_BITS bits, called n_0, n_1, n_2, ..., n_(PREC_N-1).\n- * * Compute sum(n_i * (PREC_G)^i * G + U_i, i=0 ... PREC_N-1), where:\n- *   * U_i = U * 2^i, for i=0 ... PREC_N-2\n- *   * U_i = U * (1-2^(PREC_N-1)), for i=PREC_N-1\n- *   where U is a point with no known corresponding scalar. Note that sum(U_i, i=0 ... PREC_N-1) = 0.\n- * For each i, and each of the PREC_G possible values of n_i, (n_i * (PREC_G)^i * G + U_i) is\n- * precomputed (call it prec(i, n_i)). The formula now becomes sum(prec(i, n_i), i=0 ... PREC_N-1).\n- * None of the resulting prec group elements have a known scalar, and neither do any of\n- * the intermediate sums while computing a*G.\n- * The prec values are stored in secp256k1_ecmult_gen_prec_table[i][n_i] = n_i * (PREC_G)^i * G + U_i.\n- */\n-static void secp256k1_ecmult_gen(const secp256k1_ecmult_gen_context *ctx, secp256k1_gej *r, const secp256k1_scalar *gn) {\n-    int bits = ECMULT_GEN_PREC_BITS;\n-    int g = ECMULT_GEN_PREC_G(bits);\n-    int n = ECMULT_GEN_PREC_N(bits);\n+/* Compute the scalar (2^COMB_BITS - 1) / 2. */\n+static void secp256k1_ecmult_gen_scalar_diff(secp256k1_scalar* diff) {\n+    int i;\n+\n+    /* Compute scalar -1/2. */\n+    secp256k1_scalar neghalf = SECP256K1_SCALAR_CONST(0, 0, 0, 0, 0, 0, 0, 2);\n+    secp256k1_scalar_inverse_var(&neghalf, &neghalf);\n+    secp256k1_scalar_negate(&neghalf, &neghalf);\n+\n+    /* Compute offset = 2^(COMB_BITS - 1). */\n+    secp256k1_scalar_set_int(diff, 1);\n+    for (i = 0; i < COMB_BITS - 1; ++i) {\n+        secp256k1_scalar_add(diff, diff, diff);\n+    }\n \n+    /* The result is the sum of 2^(COMB_BITS - 1) + (-1/2). */\n+    secp256k1_scalar_add(diff, diff, &neghalf);\n+}\n+\n+static void secp256k1_ecmult_gen(const secp256k1_ecmult_gen_context *ctx, secp256k1_gej *r, const secp256k1_scalar *gn) {\n+    uint32_t comb_off;\n     secp256k1_ge add;\n+    secp256k1_fe neg;\n     secp256k1_ge_storage adds;\n-    secp256k1_scalar gnb;\n-    int i, j, n_i;\n+    secp256k1_scalar recoded;\n \n     memset(&adds, 0, sizeof(adds));\n     secp256k1_gej_set_infinity(r);\n \n-    /* Blind scalar/point multiplication by computing (gn-b)*G + b*G instead of gn*G. */\n-    secp256k1_scalar_add(&gnb, gn, &ctx->scalar_offset);\n+    /* We want to compute R = gn*G.\n+     *\n+     * To blind the scalar used in the computation, we rewrite this to be R = (gn-b)*G + b*G, with\n+     * a value b determined by the context. b*G is precomputed as ctx->ge_offset, so we're\n+     * left with computing R = (gn-b)*G + ctx->ge_offset.\n+     *\n+     * The multiplication (gn-b)*G will be performed using a signed-digit multi-comb (see Section\n+     * 3.3 of \"Fast and compact elliptic-curve cryptography\" by Mike Hamburg\n+     * (https://eprint.iacr.org/2012/309).",
      "path": "src/ecmult_gen_impl.h",
      "position": null,
      "original_position": 76,
      "commit_id": "dcc846f18518f77770b6a1fc9e39683c63685d39",
      "original_commit_id": "62601920bee3b57456a130d1c10a4e7fc08f3866",
      "in_reply_to_id": 1551931537,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done.",
      "created_at": "2024-04-05T03:35:30Z",
      "updated_at": "2024-04-05T03:35:30Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1058#discussion_r1552768402",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1552768402"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1058"
        }
      },
      "start_line": null,
      "original_start_line": 67,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 69,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1552770323",
      "pull_request_review_id": 1981658047,
      "id": 1552770323,
      "node_id": "PRRC_kwDOAP4Jqs5cjWUT",
      "diff_hunk": "@@ -29,38 +29,154 @@ static void secp256k1_ecmult_gen_context_clear(secp256k1_ecmult_gen_context *ctx\n     secp256k1_ge_clear(&ctx->ge_offset);\n }\n \n-/* For accelerating the computation of a*G:\n- * To harden against timing attacks, use the following mechanism:\n- * * Break up the multiplicand into groups of PREC_BITS bits, called n_0, n_1, n_2, ..., n_(PREC_N-1).\n- * * Compute sum(n_i * (PREC_G)^i * G + U_i, i=0 ... PREC_N-1), where:\n- *   * U_i = U * 2^i, for i=0 ... PREC_N-2\n- *   * U_i = U * (1-2^(PREC_N-1)), for i=PREC_N-1\n- *   where U is a point with no known corresponding scalar. Note that sum(U_i, i=0 ... PREC_N-1) = 0.\n- * For each i, and each of the PREC_G possible values of n_i, (n_i * (PREC_G)^i * G + U_i) is\n- * precomputed (call it prec(i, n_i)). The formula now becomes sum(prec(i, n_i), i=0 ... PREC_N-1).\n- * None of the resulting prec group elements have a known scalar, and neither do any of\n- * the intermediate sums while computing a*G.\n- * The prec values are stored in secp256k1_ecmult_gen_prec_table[i][n_i] = n_i * (PREC_G)^i * G + U_i.\n- */\n-static void secp256k1_ecmult_gen(const secp256k1_ecmult_gen_context *ctx, secp256k1_gej *r, const secp256k1_scalar *gn) {\n-    int bits = ECMULT_GEN_PREC_BITS;\n-    int g = ECMULT_GEN_PREC_G(bits);\n-    int n = ECMULT_GEN_PREC_N(bits);\n+/* Compute the scalar (2^COMB_BITS - 1) / 2. */\n+static void secp256k1_ecmult_gen_scalar_diff(secp256k1_scalar* diff) {\n+    int i;\n+\n+    /* Compute scalar -1/2. */\n+    secp256k1_scalar neghalf = SECP256K1_SCALAR_CONST(0, 0, 0, 0, 0, 0, 0, 2);\n+    secp256k1_scalar_inverse_var(&neghalf, &neghalf);\n+    secp256k1_scalar_negate(&neghalf, &neghalf);\n+\n+    /* Compute offset = 2^(COMB_BITS - 1). */\n+    secp256k1_scalar_set_int(diff, 1);\n+    for (i = 0; i < COMB_BITS - 1; ++i) {\n+        secp256k1_scalar_add(diff, diff, diff);\n+    }\n \n+    /* The result is the sum of 2^(COMB_BITS - 1) + (-1/2). */\n+    secp256k1_scalar_add(diff, diff, &neghalf);\n+}\n+\n+static void secp256k1_ecmult_gen(const secp256k1_ecmult_gen_context *ctx, secp256k1_gej *r, const secp256k1_scalar *gn) {\n+    uint32_t comb_off;\n     secp256k1_ge add;\n+    secp256k1_fe neg;\n     secp256k1_ge_storage adds;\n-    secp256k1_scalar gnb;\n-    int i, j, n_i;\n+    secp256k1_scalar recoded;\n \n     memset(&adds, 0, sizeof(adds));\n     secp256k1_gej_set_infinity(r);\n \n-    /* Blind scalar/point multiplication by computing (gn-b)*G + b*G instead of gn*G. */\n-    secp256k1_scalar_add(&gnb, gn, &ctx->scalar_offset);\n+    /* We want to compute R = gn*G.\n+     *\n+     * To blind the scalar used in the computation, we rewrite this to be R = (gn-b)*G + b*G, with\n+     * a value b determined by the context. b*G is precomputed as ctx->ge_offset, so we're\n+     * left with computing R = (gn-b)*G + ctx->ge_offset.\n+     *\n+     * The multiplication (gn-b)*G will be performed using a signed-digit multi-comb (see Section\n+     * 3.3 of \"Fast and compact elliptic-curve cryptography\" by Mike Hamburg\n+     * (https://eprint.iacr.org/2012/309).\n+     *\n+     * Let comb(s,P) = sum((2*s_i-1)*2^i*P for i=0..COMB_BITS-1), where s_i is the i'th bit of the\n+     * binary representation of scalar s. So the s_i values determine whether -2^i*P (s_i=0) or\n+     * +2^i*P (s_1) are added together. By manipulating:",
      "path": "src/ecmult_gen_impl.h",
      "position": null,
      "original_position": 80,
      "commit_id": "dcc846f18518f77770b6a1fc9e39683c63685d39",
      "original_commit_id": "62601920bee3b57456a130d1c10a4e7fc08f3866",
      "in_reply_to_id": 1551935014,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done. Also changed notation to match that used in #1184 (`s[i]` instead of `s_i`).",
      "created_at": "2024-04-05T03:36:22Z",
      "updated_at": "2024-04-05T03:36:22Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1058#discussion_r1552770323",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1552770323"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1058"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 73,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1552771402",
      "pull_request_review_id": 1981659944,
      "id": 1552771402,
      "node_id": "PRRC_kwDOAP4Jqs5cjWlK",
      "diff_hunk": "@@ -29,38 +29,154 @@ static void secp256k1_ecmult_gen_context_clear(secp256k1_ecmult_gen_context *ctx\n     secp256k1_ge_clear(&ctx->ge_offset);\n }\n \n-/* For accelerating the computation of a*G:\n- * To harden against timing attacks, use the following mechanism:\n- * * Break up the multiplicand into groups of PREC_BITS bits, called n_0, n_1, n_2, ..., n_(PREC_N-1).\n- * * Compute sum(n_i * (PREC_G)^i * G + U_i, i=0 ... PREC_N-1), where:\n- *   * U_i = U * 2^i, for i=0 ... PREC_N-2\n- *   * U_i = U * (1-2^(PREC_N-1)), for i=PREC_N-1\n- *   where U is a point with no known corresponding scalar. Note that sum(U_i, i=0 ... PREC_N-1) = 0.\n- * For each i, and each of the PREC_G possible values of n_i, (n_i * (PREC_G)^i * G + U_i) is\n- * precomputed (call it prec(i, n_i)). The formula now becomes sum(prec(i, n_i), i=0 ... PREC_N-1).\n- * None of the resulting prec group elements have a known scalar, and neither do any of\n- * the intermediate sums while computing a*G.\n- * The prec values are stored in secp256k1_ecmult_gen_prec_table[i][n_i] = n_i * (PREC_G)^i * G + U_i.\n- */\n-static void secp256k1_ecmult_gen(const secp256k1_ecmult_gen_context *ctx, secp256k1_gej *r, const secp256k1_scalar *gn) {\n-    int bits = ECMULT_GEN_PREC_BITS;\n-    int g = ECMULT_GEN_PREC_G(bits);\n-    int n = ECMULT_GEN_PREC_N(bits);\n+/* Compute the scalar (2^COMB_BITS - 1) / 2. */\n+static void secp256k1_ecmult_gen_scalar_diff(secp256k1_scalar* diff) {\n+    int i;\n+\n+    /* Compute scalar -1/2. */\n+    secp256k1_scalar neghalf = SECP256K1_SCALAR_CONST(0, 0, 0, 0, 0, 0, 0, 2);\n+    secp256k1_scalar_inverse_var(&neghalf, &neghalf);\n+    secp256k1_scalar_negate(&neghalf, &neghalf);\n+\n+    /* Compute offset = 2^(COMB_BITS - 1). */\n+    secp256k1_scalar_set_int(diff, 1);\n+    for (i = 0; i < COMB_BITS - 1; ++i) {\n+        secp256k1_scalar_add(diff, diff, diff);\n+    }\n \n+    /* The result is the sum of 2^(COMB_BITS - 1) + (-1/2). */\n+    secp256k1_scalar_add(diff, diff, &neghalf);\n+}\n+\n+static void secp256k1_ecmult_gen(const secp256k1_ecmult_gen_context *ctx, secp256k1_gej *r, const secp256k1_scalar *gn) {\n+    uint32_t comb_off;\n     secp256k1_ge add;\n+    secp256k1_fe neg;\n     secp256k1_ge_storage adds;\n-    secp256k1_scalar gnb;\n-    int i, j, n_i;\n+    secp256k1_scalar recoded;\n \n     memset(&adds, 0, sizeof(adds));\n     secp256k1_gej_set_infinity(r);\n \n-    /* Blind scalar/point multiplication by computing (gn-b)*G + b*G instead of gn*G. */\n-    secp256k1_scalar_add(&gnb, gn, &ctx->scalar_offset);\n+    /* We want to compute R = gn*G.\n+     *\n+     * To blind the scalar used in the computation, we rewrite this to be R = (gn-b)*G + b*G, with\n+     * a value b determined by the context. b*G is precomputed as ctx->ge_offset, so we're\n+     * left with computing R = (gn-b)*G + ctx->ge_offset.\n+     *\n+     * The multiplication (gn-b)*G will be performed using a signed-digit multi-comb (see Section\n+     * 3.3 of \"Fast and compact elliptic-curve cryptography\" by Mike Hamburg\n+     * (https://eprint.iacr.org/2012/309).\n+     *\n+     * Let comb(s,P) = sum((2*s_i-1)*2^i*P for i=0..COMB_BITS-1), where s_i is the i'th bit of the\n+     * binary representation of scalar s. So the s_i values determine whether -2^i*P (s_i=0) or\n+     * +2^i*P (s_1) are added together. By manipulating:\n+     *\n+     *     comb(s,P) = sum((2*s_i-1)*2^i*P for i=0..COMB_BITS-1)\n+     * <=> comb(s,P) = sum((2*s_i-1)*2^i for i=0..COMB_BITS-1) * P\n+     * <=> comb(s,P) = (2*sum(s_i*2^i for i=0..COMB_BITS-1) - sum(2^i for i=0..COMB_BITS-1)) * P\n+     * <=> comb(s,P) = (2*s - (2^COMB_BITS - 1)) * P\n+     *\n+     * Thus (gn-b)*G can be written as comb(s,G) if gn-b = 2*s - (2^COMB_BITS - 1), or\n+     * s = (gn - b + (2^COMB_BITS - 1))/2 mod order.\n+     *\n+     * We use an alternative that avoids the modular division by two: we write (gn-b)*G =\n+     * comb(d,G/2). For that to hold it must be the case that\n+     * (gn-b)*G = (2*d - (2^COMB_BITS - 1)) * (G/2), or\n+     * d = (gn + (2^COMB_BITS - 1)/2 - b) mod order.\n+     *\n+     * -b is precomputed as ctx->scalar_offset, so our final equations become:\n+     *\n+     *   d = gn + ctx->scalar_offset + (2^COMB_BITS - 1)/2 (mod order)\n+     *   R = comb(d, G/2) + ctx->ge_offset.\n+     *\n+     * The comb function is computed by summing + or - 2^(i-1)*G, for i=0..COMB_BITS-1, depending\n+     * on the value of the bits d_i of the binary representation of scalar d.\n+     */\n+\n+    /* Compute the scalar (gn + ctx->scalar_offset + (2^COMB_BITS - 1)/2). */\n+    secp256k1_ecmult_gen_scalar_diff(&recoded);\n+    secp256k1_scalar_add(&recoded, &recoded, &ctx->scalar_offset);\n+    secp256k1_scalar_add(&recoded, &recoded, gn);\n+\n+    /* In secp256k1_ecmult_gen_prec_table we have precomputed sums of the\n+     * (2*d_i-1) * 2^(i-1) * G points, for various combinations of i positions.\n+     * We rewrite our equation in terms of these table entries.\n+     *\n+     * Let mask(b) = sum(2^((b*COMB_TEETH + t)*COMB_SPACING) for t=0..COMB_TEETH-1),\n+     * with b ranging from 0 to COMB_BLOCKS-1. So for example with COMB_BLOCKS=11,\n+     * COMB_TEETH=6, COMB_SPACING=4, we would have:\n+     *   mask(0)  = 2^0   + 2^4   + 2^8   + 2^12  + 2^16  + 2^20,\n+     *   mask(1)  = 2^24  + 2^28  + 2^32  + 2^36  + 2^40  + 2^44,\n+     *   mask(2)  = 2^48  + 2^52  + 2^56  + 2^60  + 2^64  + 2^68,\n+     *   ...\n+     *   mask(10) = 2^240 + 2^244 + 2^248 + 2^252 + 2^256 + 2^260\n+     *\n+     * Imagine we have a table(b,m) function which can look up, given b and\n+     * m=(recoded & mask(b)), the sum of (2*d_i-1)*2^(i-1)*G for all bit positions\n+     * i set in mask(b). In our example, table(0, 1 + 2^8 + 2^20) would be equal to\n+     * (2^-1 - 2^3 + 2^7 - 2^11 - 2^15 + 2^19)*G.",
      "path": "src/ecmult_gen_impl.h",
      "position": null,
      "original_position": 125,
      "commit_id": "dcc846f18518f77770b6a1fc9e39683c63685d39",
      "original_commit_id": "62601920bee3b57456a130d1c10a4e7fc08f3866",
      "in_reply_to_id": 1552021153,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I've made some significant changes to this whole explanation. Let me know if it's any clearer now.",
      "created_at": "2024-04-05T03:36:52Z",
      "updated_at": "2024-04-05T03:36:53Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1058#discussion_r1552771402",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1552771402"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1058"
        }
      },
      "start_line": null,
      "original_start_line": 115,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 118,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1552772001",
      "pull_request_review_id": 1981661104,
      "id": 1552772001,
      "node_id": "PRRC_kwDOAP4Jqs5cjWuh",
      "diff_hunk": "@@ -29,38 +29,154 @@ static void secp256k1_ecmult_gen_context_clear(secp256k1_ecmult_gen_context *ctx\n     secp256k1_ge_clear(&ctx->ge_offset);\n }\n \n-/* For accelerating the computation of a*G:\n- * To harden against timing attacks, use the following mechanism:\n- * * Break up the multiplicand into groups of PREC_BITS bits, called n_0, n_1, n_2, ..., n_(PREC_N-1).\n- * * Compute sum(n_i * (PREC_G)^i * G + U_i, i=0 ... PREC_N-1), where:\n- *   * U_i = U * 2^i, for i=0 ... PREC_N-2\n- *   * U_i = U * (1-2^(PREC_N-1)), for i=PREC_N-1\n- *   where U is a point with no known corresponding scalar. Note that sum(U_i, i=0 ... PREC_N-1) = 0.\n- * For each i, and each of the PREC_G possible values of n_i, (n_i * (PREC_G)^i * G + U_i) is\n- * precomputed (call it prec(i, n_i)). The formula now becomes sum(prec(i, n_i), i=0 ... PREC_N-1).\n- * None of the resulting prec group elements have a known scalar, and neither do any of\n- * the intermediate sums while computing a*G.\n- * The prec values are stored in secp256k1_ecmult_gen_prec_table[i][n_i] = n_i * (PREC_G)^i * G + U_i.\n- */\n-static void secp256k1_ecmult_gen(const secp256k1_ecmult_gen_context *ctx, secp256k1_gej *r, const secp256k1_scalar *gn) {\n-    int bits = ECMULT_GEN_PREC_BITS;\n-    int g = ECMULT_GEN_PREC_G(bits);\n-    int n = ECMULT_GEN_PREC_N(bits);\n+/* Compute the scalar (2^COMB_BITS - 1) / 2. */\n+static void secp256k1_ecmult_gen_scalar_diff(secp256k1_scalar* diff) {\n+    int i;\n+\n+    /* Compute scalar -1/2. */\n+    secp256k1_scalar neghalf = SECP256K1_SCALAR_CONST(0, 0, 0, 0, 0, 0, 0, 2);\n+    secp256k1_scalar_inverse_var(&neghalf, &neghalf);\n+    secp256k1_scalar_negate(&neghalf, &neghalf);\n+\n+    /* Compute offset = 2^(COMB_BITS - 1). */\n+    secp256k1_scalar_set_int(diff, 1);\n+    for (i = 0; i < COMB_BITS - 1; ++i) {\n+        secp256k1_scalar_add(diff, diff, diff);\n+    }\n \n+    /* The result is the sum of 2^(COMB_BITS - 1) + (-1/2). */\n+    secp256k1_scalar_add(diff, diff, &neghalf);\n+}\n+\n+static void secp256k1_ecmult_gen(const secp256k1_ecmult_gen_context *ctx, secp256k1_gej *r, const secp256k1_scalar *gn) {\n+    uint32_t comb_off;\n     secp256k1_ge add;\n+    secp256k1_fe neg;\n     secp256k1_ge_storage adds;\n-    secp256k1_scalar gnb;\n-    int i, j, n_i;\n+    secp256k1_scalar recoded;\n \n     memset(&adds, 0, sizeof(adds));\n     secp256k1_gej_set_infinity(r);\n \n-    /* Blind scalar/point multiplication by computing (gn-b)*G + b*G instead of gn*G. */\n-    secp256k1_scalar_add(&gnb, gn, &ctx->scalar_offset);\n+    /* We want to compute R = gn*G.\n+     *\n+     * To blind the scalar used in the computation, we rewrite this to be R = (gn-b)*G + b*G, with\n+     * a value b determined by the context. b*G is precomputed as ctx->ge_offset, so we're\n+     * left with computing R = (gn-b)*G + ctx->ge_offset.\n+     *\n+     * The multiplication (gn-b)*G will be performed using a signed-digit multi-comb (see Section\n+     * 3.3 of \"Fast and compact elliptic-curve cryptography\" by Mike Hamburg\n+     * (https://eprint.iacr.org/2012/309).\n+     *\n+     * Let comb(s,P) = sum((2*s_i-1)*2^i*P for i=0..COMB_BITS-1), where s_i is the i'th bit of the\n+     * binary representation of scalar s. So the s_i values determine whether -2^i*P (s_i=0) or\n+     * +2^i*P (s_1) are added together. By manipulating:\n+     *\n+     *     comb(s,P) = sum((2*s_i-1)*2^i*P for i=0..COMB_BITS-1)\n+     * <=> comb(s,P) = sum((2*s_i-1)*2^i for i=0..COMB_BITS-1) * P\n+     * <=> comb(s,P) = (2*sum(s_i*2^i for i=0..COMB_BITS-1) - sum(2^i for i=0..COMB_BITS-1)) * P\n+     * <=> comb(s,P) = (2*s - (2^COMB_BITS - 1)) * P\n+     *\n+     * Thus (gn-b)*G can be written as comb(s,G) if gn-b = 2*s - (2^COMB_BITS - 1), or\n+     * s = (gn - b + (2^COMB_BITS - 1))/2 mod order.\n+     *\n+     * We use an alternative that avoids the modular division by two: we write (gn-b)*G =\n+     * comb(d,G/2). For that to hold it must be the case that\n+     * (gn-b)*G = (2*d - (2^COMB_BITS - 1)) * (G/2), or\n+     * d = (gn + (2^COMB_BITS - 1)/2 - b) mod order.\n+     *\n+     * -b is precomputed as ctx->scalar_offset, so our final equations become:\n+     *\n+     *   d = gn + ctx->scalar_offset + (2^COMB_BITS - 1)/2 (mod order)\n+     *   R = comb(d, G/2) + ctx->ge_offset.\n+     *\n+     * The comb function is computed by summing + or - 2^(i-1)*G, for i=0..COMB_BITS-1, depending\n+     * on the value of the bits d_i of the binary representation of scalar d.\n+     */\n+\n+    /* Compute the scalar (gn + ctx->scalar_offset + (2^COMB_BITS - 1)/2). */\n+    secp256k1_ecmult_gen_scalar_diff(&recoded);\n+    secp256k1_scalar_add(&recoded, &recoded, &ctx->scalar_offset);\n+    secp256k1_scalar_add(&recoded, &recoded, gn);\n+\n+    /* In secp256k1_ecmult_gen_prec_table we have precomputed sums of the\n+     * (2*d_i-1) * 2^(i-1) * G points, for various combinations of i positions.\n+     * We rewrite our equation in terms of these table entries.\n+     *\n+     * Let mask(b) = sum(2^((b*COMB_TEETH + t)*COMB_SPACING) for t=0..COMB_TEETH-1),\n+     * with b ranging from 0 to COMB_BLOCKS-1. So for example with COMB_BLOCKS=11,\n+     * COMB_TEETH=6, COMB_SPACING=4, we would have:\n+     *   mask(0)  = 2^0   + 2^4   + 2^8   + 2^12  + 2^16  + 2^20,\n+     *   mask(1)  = 2^24  + 2^28  + 2^32  + 2^36  + 2^40  + 2^44,\n+     *   mask(2)  = 2^48  + 2^52  + 2^56  + 2^60  + 2^64  + 2^68,\n+     *   ...\n+     *   mask(10) = 2^240 + 2^244 + 2^248 + 2^252 + 2^256 + 2^260\n+     *\n+     * Imagine we have a table(b,m) function which can look up, given b and\n+     * m=(recoded & mask(b)), the sum of (2*d_i-1)*2^(i-1)*G for all bit positions\n+     * i set in mask(b). In our example, table(0, 1 + 2^8 + 2^20) would be equal to\n+     * (2^-1 - 2^3 + 2^7 - 2^11 - 2^15 + 2^19)*G.\n+     *\n+     * With that, we can rewrite R as:\n+     *   1*(table(0, recoded & mask(0)) + table(1, recoded & mask(1)) + ...)\n+     * + 2*(table(0, (recoded/2) & mask(0)) + table(1, (recoded/2) & mask(1)) + ...)\n+     * + 4*(table(0, (recoded/4) & mask(0)) + table(1, (recoded/4) & mask(1)) + ...)\n+     * + ...\n+     * + 2^(COMB_SPACING-1)*(table(0, (recoded/2^(COMB_SPACING-1)) & mask(0)) + ...)\n+     * + ctx->ge_offset.",
      "path": "src/ecmult_gen_impl.h",
      "position": null,
      "original_position": 133,
      "commit_id": "dcc846f18518f77770b6a1fc9e39683c63685d39",
      "original_commit_id": "62601920bee3b57456a130d1c10a4e7fc08f3866",
      "in_reply_to_id": 1552022485,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Rewrote this.",
      "created_at": "2024-04-05T03:37:11Z",
      "updated_at": "2024-04-05T03:37:11Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1058#discussion_r1552772001",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1552772001"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1058"
        }
      },
      "start_line": null,
      "original_start_line": 121,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 126,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1552772263",
      "pull_request_review_id": 1981661644,
      "id": 1552772263,
      "node_id": "PRRC_kwDOAP4Jqs5cjWyn",
      "diff_hunk": "@@ -29,38 +29,154 @@ static void secp256k1_ecmult_gen_context_clear(secp256k1_ecmult_gen_context *ctx\n     secp256k1_ge_clear(&ctx->ge_offset);\n }\n \n-/* For accelerating the computation of a*G:\n- * To harden against timing attacks, use the following mechanism:\n- * * Break up the multiplicand into groups of PREC_BITS bits, called n_0, n_1, n_2, ..., n_(PREC_N-1).\n- * * Compute sum(n_i * (PREC_G)^i * G + U_i, i=0 ... PREC_N-1), where:\n- *   * U_i = U * 2^i, for i=0 ... PREC_N-2\n- *   * U_i = U * (1-2^(PREC_N-1)), for i=PREC_N-1\n- *   where U is a point with no known corresponding scalar. Note that sum(U_i, i=0 ... PREC_N-1) = 0.\n- * For each i, and each of the PREC_G possible values of n_i, (n_i * (PREC_G)^i * G + U_i) is\n- * precomputed (call it prec(i, n_i)). The formula now becomes sum(prec(i, n_i), i=0 ... PREC_N-1).\n- * None of the resulting prec group elements have a known scalar, and neither do any of\n- * the intermediate sums while computing a*G.\n- * The prec values are stored in secp256k1_ecmult_gen_prec_table[i][n_i] = n_i * (PREC_G)^i * G + U_i.\n- */\n-static void secp256k1_ecmult_gen(const secp256k1_ecmult_gen_context *ctx, secp256k1_gej *r, const secp256k1_scalar *gn) {\n-    int bits = ECMULT_GEN_PREC_BITS;\n-    int g = ECMULT_GEN_PREC_G(bits);\n-    int n = ECMULT_GEN_PREC_N(bits);\n+/* Compute the scalar (2^COMB_BITS - 1) / 2. */\n+static void secp256k1_ecmult_gen_scalar_diff(secp256k1_scalar* diff) {\n+    int i;\n+\n+    /* Compute scalar -1/2. */\n+    secp256k1_scalar neghalf = SECP256K1_SCALAR_CONST(0, 0, 0, 0, 0, 0, 0, 2);\n+    secp256k1_scalar_inverse_var(&neghalf, &neghalf);\n+    secp256k1_scalar_negate(&neghalf, &neghalf);\n+\n+    /* Compute offset = 2^(COMB_BITS - 1). */\n+    secp256k1_scalar_set_int(diff, 1);\n+    for (i = 0; i < COMB_BITS - 1; ++i) {\n+        secp256k1_scalar_add(diff, diff, diff);\n+    }\n \n+    /* The result is the sum of 2^(COMB_BITS - 1) + (-1/2). */\n+    secp256k1_scalar_add(diff, diff, &neghalf);\n+}\n+\n+static void secp256k1_ecmult_gen(const secp256k1_ecmult_gen_context *ctx, secp256k1_gej *r, const secp256k1_scalar *gn) {\n+    uint32_t comb_off;\n     secp256k1_ge add;\n+    secp256k1_fe neg;\n     secp256k1_ge_storage adds;\n-    secp256k1_scalar gnb;\n-    int i, j, n_i;\n+    secp256k1_scalar recoded;\n \n     memset(&adds, 0, sizeof(adds));\n     secp256k1_gej_set_infinity(r);\n \n-    /* Blind scalar/point multiplication by computing (gn-b)*G + b*G instead of gn*G. */\n-    secp256k1_scalar_add(&gnb, gn, &ctx->scalar_offset);\n+    /* We want to compute R = gn*G.\n+     *\n+     * To blind the scalar used in the computation, we rewrite this to be R = (gn-b)*G + b*G, with\n+     * a value b determined by the context. b*G is precomputed as ctx->ge_offset, so we're\n+     * left with computing R = (gn-b)*G + ctx->ge_offset.\n+     *\n+     * The multiplication (gn-b)*G will be performed using a signed-digit multi-comb (see Section\n+     * 3.3 of \"Fast and compact elliptic-curve cryptography\" by Mike Hamburg\n+     * (https://eprint.iacr.org/2012/309).\n+     *\n+     * Let comb(s,P) = sum((2*s_i-1)*2^i*P for i=0..COMB_BITS-1), where s_i is the i'th bit of the\n+     * binary representation of scalar s. So the s_i values determine whether -2^i*P (s_i=0) or\n+     * +2^i*P (s_1) are added together. By manipulating:\n+     *\n+     *     comb(s,P) = sum((2*s_i-1)*2^i*P for i=0..COMB_BITS-1)\n+     * <=> comb(s,P) = sum((2*s_i-1)*2^i for i=0..COMB_BITS-1) * P\n+     * <=> comb(s,P) = (2*sum(s_i*2^i for i=0..COMB_BITS-1) - sum(2^i for i=0..COMB_BITS-1)) * P\n+     * <=> comb(s,P) = (2*s - (2^COMB_BITS - 1)) * P\n+     *\n+     * Thus (gn-b)*G can be written as comb(s,G) if gn-b = 2*s - (2^COMB_BITS - 1), or\n+     * s = (gn - b + (2^COMB_BITS - 1))/2 mod order.\n+     *\n+     * We use an alternative that avoids the modular division by two: we write (gn-b)*G =\n+     * comb(d,G/2). For that to hold it must be the case that\n+     * (gn-b)*G = (2*d - (2^COMB_BITS - 1)) * (G/2), or\n+     * d = (gn + (2^COMB_BITS - 1)/2 - b) mod order.\n+     *\n+     * -b is precomputed as ctx->scalar_offset, so our final equations become:\n+     *\n+     *   d = gn + ctx->scalar_offset + (2^COMB_BITS - 1)/2 (mod order)\n+     *   R = comb(d, G/2) + ctx->ge_offset.\n+     *\n+     * The comb function is computed by summing + or - 2^(i-1)*G, for i=0..COMB_BITS-1, depending\n+     * on the value of the bits d_i of the binary representation of scalar d.\n+     */\n+\n+    /* Compute the scalar (gn + ctx->scalar_offset + (2^COMB_BITS - 1)/2). */\n+    secp256k1_ecmult_gen_scalar_diff(&recoded);\n+    secp256k1_scalar_add(&recoded, &recoded, &ctx->scalar_offset);\n+    secp256k1_scalar_add(&recoded, &recoded, gn);\n+\n+    /* In secp256k1_ecmult_gen_prec_table we have precomputed sums of the\n+     * (2*d_i-1) * 2^(i-1) * G points, for various combinations of i positions.\n+     * We rewrite our equation in terms of these table entries.\n+     *\n+     * Let mask(b) = sum(2^((b*COMB_TEETH + t)*COMB_SPACING) for t=0..COMB_TEETH-1),\n+     * with b ranging from 0 to COMB_BLOCKS-1. So for example with COMB_BLOCKS=11,\n+     * COMB_TEETH=6, COMB_SPACING=4, we would have:\n+     *   mask(0)  = 2^0   + 2^4   + 2^8   + 2^12  + 2^16  + 2^20,\n+     *   mask(1)  = 2^24  + 2^28  + 2^32  + 2^36  + 2^40  + 2^44,\n+     *   mask(2)  = 2^48  + 2^52  + 2^56  + 2^60  + 2^64  + 2^68,\n+     *   ...\n+     *   mask(10) = 2^240 + 2^244 + 2^248 + 2^252 + 2^256 + 2^260\n+     *\n+     * Imagine we have a table(b,m) function which can look up, given b and\n+     * m=(recoded & mask(b)), the sum of (2*d_i-1)*2^(i-1)*G for all bit positions\n+     * i set in mask(b). In our example, table(0, 1 + 2^8 + 2^20) would be equal to\n+     * (2^-1 - 2^3 + 2^7 - 2^11 - 2^15 + 2^19)*G.\n+     *\n+     * With that, we can rewrite R as:\n+     *   1*(table(0, recoded & mask(0)) + table(1, recoded & mask(1)) + ...)\n+     * + 2*(table(0, (recoded/2) & mask(0)) + table(1, (recoded/2) & mask(1)) + ...)\n+     * + 4*(table(0, (recoded/4) & mask(0)) + table(1, (recoded/4) & mask(1)) + ...)\n+     * + ...\n+     * + 2^(COMB_SPACING-1)*(table(0, (recoded/2^(COMB_SPACING-1)) & mask(0)) + ...)\n+     * + ctx->ge_offset.\n+     *\n+     * This is implemented using an outer loop that runs in reverse order over the lines\n+     * of this equation, which in each iteration runs an inner loop that adds the terms\n+     * of that line and the doubles the result before proceeding to the next line.\n+     * In pseudocode:\n+     *   R = infinity\n+     *   for comb_off in range(COMB_SPACING - 1, -1, -1):\n+     *     for block in range(COMB_BLOCKS):\n+     *       R += table(block, (recoded >> comb_off) & mask(block))\n+     *     if comb_off > 0:\n+     *       R = 2*R\n+     *   R += ge_offset\n+     *   return R",
      "path": "src/ecmult_gen_impl.h",
      "position": null,
      "original_position": 146,
      "commit_id": "dcc846f18518f77770b6a1fc9e39683c63685d39",
      "original_commit_id": "62601920bee3b57456a130d1c10a4e7fc08f3866",
      "in_reply_to_id": 1552031020,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done.",
      "created_at": "2024-04-05T03:37:18Z",
      "updated_at": "2024-04-05T03:37:19Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1058#discussion_r1552772263",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1552772263"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1058"
        }
      },
      "start_line": null,
      "original_start_line": 128,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 139,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1552772639",
      "pull_request_review_id": 1981662408,
      "id": 1552772639,
      "node_id": "PRRC_kwDOAP4Jqs5cjW4f",
      "diff_hunk": "@@ -29,38 +29,154 @@ static void secp256k1_ecmult_gen_context_clear(secp256k1_ecmult_gen_context *ctx\n     secp256k1_ge_clear(&ctx->ge_offset);\n }\n \n-/* For accelerating the computation of a*G:\n- * To harden against timing attacks, use the following mechanism:\n- * * Break up the multiplicand into groups of PREC_BITS bits, called n_0, n_1, n_2, ..., n_(PREC_N-1).\n- * * Compute sum(n_i * (PREC_G)^i * G + U_i, i=0 ... PREC_N-1), where:\n- *   * U_i = U * 2^i, for i=0 ... PREC_N-2\n- *   * U_i = U * (1-2^(PREC_N-1)), for i=PREC_N-1\n- *   where U is a point with no known corresponding scalar. Note that sum(U_i, i=0 ... PREC_N-1) = 0.\n- * For each i, and each of the PREC_G possible values of n_i, (n_i * (PREC_G)^i * G + U_i) is\n- * precomputed (call it prec(i, n_i)). The formula now becomes sum(prec(i, n_i), i=0 ... PREC_N-1).\n- * None of the resulting prec group elements have a known scalar, and neither do any of\n- * the intermediate sums while computing a*G.\n- * The prec values are stored in secp256k1_ecmult_gen_prec_table[i][n_i] = n_i * (PREC_G)^i * G + U_i.\n- */\n-static void secp256k1_ecmult_gen(const secp256k1_ecmult_gen_context *ctx, secp256k1_gej *r, const secp256k1_scalar *gn) {\n-    int bits = ECMULT_GEN_PREC_BITS;\n-    int g = ECMULT_GEN_PREC_G(bits);\n-    int n = ECMULT_GEN_PREC_N(bits);\n+/* Compute the scalar (2^COMB_BITS - 1) / 2. */\n+static void secp256k1_ecmult_gen_scalar_diff(secp256k1_scalar* diff) {\n+    int i;\n+\n+    /* Compute scalar -1/2. */\n+    secp256k1_scalar neghalf = SECP256K1_SCALAR_CONST(0, 0, 0, 0, 0, 0, 0, 2);\n+    secp256k1_scalar_inverse_var(&neghalf, &neghalf);\n+    secp256k1_scalar_negate(&neghalf, &neghalf);\n+\n+    /* Compute offset = 2^(COMB_BITS - 1). */\n+    secp256k1_scalar_set_int(diff, 1);\n+    for (i = 0; i < COMB_BITS - 1; ++i) {\n+        secp256k1_scalar_add(diff, diff, diff);\n+    }\n \n+    /* The result is the sum of 2^(COMB_BITS - 1) + (-1/2). */\n+    secp256k1_scalar_add(diff, diff, &neghalf);\n+}\n+\n+static void secp256k1_ecmult_gen(const secp256k1_ecmult_gen_context *ctx, secp256k1_gej *r, const secp256k1_scalar *gn) {\n+    uint32_t comb_off;\n     secp256k1_ge add;\n+    secp256k1_fe neg;\n     secp256k1_ge_storage adds;\n-    secp256k1_scalar gnb;\n-    int i, j, n_i;\n+    secp256k1_scalar recoded;\n \n     memset(&adds, 0, sizeof(adds));\n     secp256k1_gej_set_infinity(r);\n \n-    /* Blind scalar/point multiplication by computing (gn-b)*G + b*G instead of gn*G. */\n-    secp256k1_scalar_add(&gnb, gn, &ctx->scalar_offset);\n+    /* We want to compute R = gn*G.\n+     *\n+     * To blind the scalar used in the computation, we rewrite this to be R = (gn-b)*G + b*G, with\n+     * a value b determined by the context. b*G is precomputed as ctx->ge_offset, so we're\n+     * left with computing R = (gn-b)*G + ctx->ge_offset.\n+     *\n+     * The multiplication (gn-b)*G will be performed using a signed-digit multi-comb (see Section\n+     * 3.3 of \"Fast and compact elliptic-curve cryptography\" by Mike Hamburg\n+     * (https://eprint.iacr.org/2012/309).\n+     *\n+     * Let comb(s,P) = sum((2*s_i-1)*2^i*P for i=0..COMB_BITS-1), where s_i is the i'th bit of the\n+     * binary representation of scalar s. So the s_i values determine whether -2^i*P (s_i=0) or\n+     * +2^i*P (s_1) are added together. By manipulating:\n+     *\n+     *     comb(s,P) = sum((2*s_i-1)*2^i*P for i=0..COMB_BITS-1)\n+     * <=> comb(s,P) = sum((2*s_i-1)*2^i for i=0..COMB_BITS-1) * P\n+     * <=> comb(s,P) = (2*sum(s_i*2^i for i=0..COMB_BITS-1) - sum(2^i for i=0..COMB_BITS-1)) * P\n+     * <=> comb(s,P) = (2*s - (2^COMB_BITS - 1)) * P\n+     *\n+     * Thus (gn-b)*G can be written as comb(s,G) if gn-b = 2*s - (2^COMB_BITS - 1), or\n+     * s = (gn - b + (2^COMB_BITS - 1))/2 mod order.\n+     *\n+     * We use an alternative that avoids the modular division by two: we write (gn-b)*G =\n+     * comb(d,G/2). For that to hold it must be the case that\n+     * (gn-b)*G = (2*d - (2^COMB_BITS - 1)) * (G/2), or\n+     * d = (gn + (2^COMB_BITS - 1)/2 - b) mod order.\n+     *\n+     * -b is precomputed as ctx->scalar_offset, so our final equations become:\n+     *\n+     *   d = gn + ctx->scalar_offset + (2^COMB_BITS - 1)/2 (mod order)\n+     *   R = comb(d, G/2) + ctx->ge_offset.\n+     *\n+     * The comb function is computed by summing + or - 2^(i-1)*G, for i=0..COMB_BITS-1, depending\n+     * on the value of the bits d_i of the binary representation of scalar d.\n+     */\n+\n+    /* Compute the scalar (gn + ctx->scalar_offset + (2^COMB_BITS - 1)/2). */\n+    secp256k1_ecmult_gen_scalar_diff(&recoded);\n+    secp256k1_scalar_add(&recoded, &recoded, &ctx->scalar_offset);\n+    secp256k1_scalar_add(&recoded, &recoded, gn);\n+\n+    /* In secp256k1_ecmult_gen_prec_table we have precomputed sums of the\n+     * (2*d_i-1) * 2^(i-1) * G points, for various combinations of i positions.\n+     * We rewrite our equation in terms of these table entries.\n+     *\n+     * Let mask(b) = sum(2^((b*COMB_TEETH + t)*COMB_SPACING) for t=0..COMB_TEETH-1),\n+     * with b ranging from 0 to COMB_BLOCKS-1. So for example with COMB_BLOCKS=11,\n+     * COMB_TEETH=6, COMB_SPACING=4, we would have:\n+     *   mask(0)  = 2^0   + 2^4   + 2^8   + 2^12  + 2^16  + 2^20,\n+     *   mask(1)  = 2^24  + 2^28  + 2^32  + 2^36  + 2^40  + 2^44,\n+     *   mask(2)  = 2^48  + 2^52  + 2^56  + 2^60  + 2^64  + 2^68,\n+     *   ...\n+     *   mask(10) = 2^240 + 2^244 + 2^248 + 2^252 + 2^256 + 2^260\n+     *\n+     * Imagine we have a table(b,m) function which can look up, given b and\n+     * m=(recoded & mask(b)), the sum of (2*d_i-1)*2^(i-1)*G for all bit positions\n+     * i set in mask(b). In our example, table(0, 1 + 2^8 + 2^20) would be equal to\n+     * (2^-1 - 2^3 + 2^7 - 2^11 - 2^15 + 2^19)*G.\n+     *\n+     * With that, we can rewrite R as:\n+     *   1*(table(0, recoded & mask(0)) + table(1, recoded & mask(1)) + ...)\n+     * + 2*(table(0, (recoded/2) & mask(0)) + table(1, (recoded/2) & mask(1)) + ...)\n+     * + 4*(table(0, (recoded/4) & mask(0)) + table(1, (recoded/4) & mask(1)) + ...)\n+     * + ...\n+     * + 2^(COMB_SPACING-1)*(table(0, (recoded/2^(COMB_SPACING-1)) & mask(0)) + ...)\n+     * + ctx->ge_offset.\n+     *\n+     * This is implemented using an outer loop that runs in reverse order over the lines\n+     * of this equation, which in each iteration runs an inner loop that adds the terms\n+     * of that line and the doubles the result before proceeding to the next line.\n+     * In pseudocode:\n+     *   R = infinity\n+     *   for comb_off in range(COMB_SPACING - 1, -1, -1):\n+     *     for block in range(COMB_BLOCKS):\n+     *       R += table(block, (recoded >> comb_off) & mask(block))\n+     *     if comb_off > 0:\n+     *       R = 2*R\n+     *   R += ge_offset\n+     *   return R\n+     *\n+     * The last question is how to implement the table(b,m) function. For any value of\n+     * b, m=(recoded & mask(b)) can only take on at most 2^COMB_TEETH possible values\n+     * (the last one may have fewer as there mask(b) may the curve order). So we could\n+     * create COMB_BLOCK tables which contain a value for each such m value.\n+     *\n+     * Due to the fact that every table entry is a sum of positive and negative powers\n+     * of two multiplied by G, every table will contains pairs of negated points:\n+     * if all the masked bits in m flip, the table value is negated. We can exploit this\n+     * to only store the first half of every table. If an entry from the second half is\n+     * needed, we look up its bit-flipped version instead, and conditionally negate it.",
      "path": "src/ecmult_gen_impl.h",
      "position": null,
      "original_position": 157,
      "commit_id": "dcc846f18518f77770b6a1fc9e39683c63685d39",
      "original_commit_id": "62601920bee3b57456a130d1c10a4e7fc08f3866",
      "in_reply_to_id": 1552039814,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Indeed, fixed.",
      "created_at": "2024-04-05T03:37:28Z",
      "updated_at": "2024-04-05T03:37:28Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1058#discussion_r1552772639",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1552772639"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1058"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 150,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1552773029",
      "pull_request_review_id": 1981663288,
      "id": 1552773029,
      "node_id": "PRRC_kwDOAP4Jqs5cjW-l",
      "diff_hunk": "@@ -29,38 +29,154 @@ static void secp256k1_ecmult_gen_context_clear(secp256k1_ecmult_gen_context *ctx\n     secp256k1_ge_clear(&ctx->ge_offset);\n }\n \n-/* For accelerating the computation of a*G:\n- * To harden against timing attacks, use the following mechanism:\n- * * Break up the multiplicand into groups of PREC_BITS bits, called n_0, n_1, n_2, ..., n_(PREC_N-1).\n- * * Compute sum(n_i * (PREC_G)^i * G + U_i, i=0 ... PREC_N-1), where:\n- *   * U_i = U * 2^i, for i=0 ... PREC_N-2\n- *   * U_i = U * (1-2^(PREC_N-1)), for i=PREC_N-1\n- *   where U is a point with no known corresponding scalar. Note that sum(U_i, i=0 ... PREC_N-1) = 0.\n- * For each i, and each of the PREC_G possible values of n_i, (n_i * (PREC_G)^i * G + U_i) is\n- * precomputed (call it prec(i, n_i)). The formula now becomes sum(prec(i, n_i), i=0 ... PREC_N-1).\n- * None of the resulting prec group elements have a known scalar, and neither do any of\n- * the intermediate sums while computing a*G.\n- * The prec values are stored in secp256k1_ecmult_gen_prec_table[i][n_i] = n_i * (PREC_G)^i * G + U_i.\n- */\n-static void secp256k1_ecmult_gen(const secp256k1_ecmult_gen_context *ctx, secp256k1_gej *r, const secp256k1_scalar *gn) {\n-    int bits = ECMULT_GEN_PREC_BITS;\n-    int g = ECMULT_GEN_PREC_G(bits);\n-    int n = ECMULT_GEN_PREC_N(bits);\n+/* Compute the scalar (2^COMB_BITS - 1) / 2. */\n+static void secp256k1_ecmult_gen_scalar_diff(secp256k1_scalar* diff) {\n+    int i;\n+\n+    /* Compute scalar -1/2. */\n+    secp256k1_scalar neghalf = SECP256K1_SCALAR_CONST(0, 0, 0, 0, 0, 0, 0, 2);\n+    secp256k1_scalar_inverse_var(&neghalf, &neghalf);\n+    secp256k1_scalar_negate(&neghalf, &neghalf);\n+\n+    /* Compute offset = 2^(COMB_BITS - 1). */\n+    secp256k1_scalar_set_int(diff, 1);\n+    for (i = 0; i < COMB_BITS - 1; ++i) {\n+        secp256k1_scalar_add(diff, diff, diff);\n+    }\n \n+    /* The result is the sum of 2^(COMB_BITS - 1) + (-1/2). */\n+    secp256k1_scalar_add(diff, diff, &neghalf);\n+}\n+\n+static void secp256k1_ecmult_gen(const secp256k1_ecmult_gen_context *ctx, secp256k1_gej *r, const secp256k1_scalar *gn) {\n+    uint32_t comb_off;\n     secp256k1_ge add;\n+    secp256k1_fe neg;\n     secp256k1_ge_storage adds;\n-    secp256k1_scalar gnb;\n-    int i, j, n_i;\n+    secp256k1_scalar recoded;\n \n     memset(&adds, 0, sizeof(adds));\n     secp256k1_gej_set_infinity(r);\n \n-    /* Blind scalar/point multiplication by computing (gn-b)*G + b*G instead of gn*G. */\n-    secp256k1_scalar_add(&gnb, gn, &ctx->scalar_offset);\n+    /* We want to compute R = gn*G.\n+     *\n+     * To blind the scalar used in the computation, we rewrite this to be R = (gn-b)*G + b*G, with\n+     * a value b determined by the context. b*G is precomputed as ctx->ge_offset, so we're\n+     * left with computing R = (gn-b)*G + ctx->ge_offset.\n+     *\n+     * The multiplication (gn-b)*G will be performed using a signed-digit multi-comb (see Section\n+     * 3.3 of \"Fast and compact elliptic-curve cryptography\" by Mike Hamburg\n+     * (https://eprint.iacr.org/2012/309).\n+     *\n+     * Let comb(s,P) = sum((2*s_i-1)*2^i*P for i=0..COMB_BITS-1), where s_i is the i'th bit of the\n+     * binary representation of scalar s. So the s_i values determine whether -2^i*P (s_i=0) or\n+     * +2^i*P (s_1) are added together. By manipulating:\n+     *\n+     *     comb(s,P) = sum((2*s_i-1)*2^i*P for i=0..COMB_BITS-1)\n+     * <=> comb(s,P) = sum((2*s_i-1)*2^i for i=0..COMB_BITS-1) * P\n+     * <=> comb(s,P) = (2*sum(s_i*2^i for i=0..COMB_BITS-1) - sum(2^i for i=0..COMB_BITS-1)) * P\n+     * <=> comb(s,P) = (2*s - (2^COMB_BITS - 1)) * P\n+     *\n+     * Thus (gn-b)*G can be written as comb(s,G) if gn-b = 2*s - (2^COMB_BITS - 1), or\n+     * s = (gn - b + (2^COMB_BITS - 1))/2 mod order.\n+     *\n+     * We use an alternative that avoids the modular division by two: we write (gn-b)*G =\n+     * comb(d,G/2). For that to hold it must be the case that\n+     * (gn-b)*G = (2*d - (2^COMB_BITS - 1)) * (G/2), or\n+     * d = (gn + (2^COMB_BITS - 1)/2 - b) mod order.\n+     *\n+     * -b is precomputed as ctx->scalar_offset, so our final equations become:\n+     *\n+     *   d = gn + ctx->scalar_offset + (2^COMB_BITS - 1)/2 (mod order)\n+     *   R = comb(d, G/2) + ctx->ge_offset.\n+     *\n+     * The comb function is computed by summing + or - 2^(i-1)*G, for i=0..COMB_BITS-1, depending\n+     * on the value of the bits d_i of the binary representation of scalar d.\n+     */\n+\n+    /* Compute the scalar (gn + ctx->scalar_offset + (2^COMB_BITS - 1)/2). */\n+    secp256k1_ecmult_gen_scalar_diff(&recoded);\n+    secp256k1_scalar_add(&recoded, &recoded, &ctx->scalar_offset);\n+    secp256k1_scalar_add(&recoded, &recoded, gn);\n+\n+    /* In secp256k1_ecmult_gen_prec_table we have precomputed sums of the\n+     * (2*d_i-1) * 2^(i-1) * G points, for various combinations of i positions.\n+     * We rewrite our equation in terms of these table entries.\n+     *\n+     * Let mask(b) = sum(2^((b*COMB_TEETH + t)*COMB_SPACING) for t=0..COMB_TEETH-1),\n+     * with b ranging from 0 to COMB_BLOCKS-1. So for example with COMB_BLOCKS=11,\n+     * COMB_TEETH=6, COMB_SPACING=4, we would have:\n+     *   mask(0)  = 2^0   + 2^4   + 2^8   + 2^12  + 2^16  + 2^20,\n+     *   mask(1)  = 2^24  + 2^28  + 2^32  + 2^36  + 2^40  + 2^44,\n+     *   mask(2)  = 2^48  + 2^52  + 2^56  + 2^60  + 2^64  + 2^68,\n+     *   ...\n+     *   mask(10) = 2^240 + 2^244 + 2^248 + 2^252 + 2^256 + 2^260\n+     *\n+     * Imagine we have a table(b,m) function which can look up, given b and\n+     * m=(recoded & mask(b)), the sum of (2*d_i-1)*2^(i-1)*G for all bit positions\n+     * i set in mask(b). In our example, table(0, 1 + 2^8 + 2^20) would be equal to\n+     * (2^-1 - 2^3 + 2^7 - 2^11 - 2^15 + 2^19)*G.\n+     *\n+     * With that, we can rewrite R as:\n+     *   1*(table(0, recoded & mask(0)) + table(1, recoded & mask(1)) + ...)\n+     * + 2*(table(0, (recoded/2) & mask(0)) + table(1, (recoded/2) & mask(1)) + ...)\n+     * + 4*(table(0, (recoded/4) & mask(0)) + table(1, (recoded/4) & mask(1)) + ...)\n+     * + ...\n+     * + 2^(COMB_SPACING-1)*(table(0, (recoded/2^(COMB_SPACING-1)) & mask(0)) + ...)\n+     * + ctx->ge_offset.\n+     *\n+     * This is implemented using an outer loop that runs in reverse order over the lines\n+     * of this equation, which in each iteration runs an inner loop that adds the terms\n+     * of that line and the doubles the result before proceeding to the next line.\n+     * In pseudocode:\n+     *   R = infinity\n+     *   for comb_off in range(COMB_SPACING - 1, -1, -1):\n+     *     for block in range(COMB_BLOCKS):\n+     *       R += table(block, (recoded >> comb_off) & mask(block))\n+     *     if comb_off > 0:\n+     *       R = 2*R\n+     *   R += ge_offset\n+     *   return R\n+     *\n+     * The last question is how to implement the table(b,m) function. For any value of\n+     * b, m=(recoded & mask(b)) can only take on at most 2^COMB_TEETH possible values\n+     * (the last one may have fewer as there mask(b) may the curve order). So we could\n+     * create COMB_BLOCK tables which contain a value for each such m value.\n+     *\n+     * Due to the fact that every table entry is a sum of positive and negative powers\n+     * of two multiplied by G, every table will contains pairs of negated points:\n+     * if all the masked bits in m flip, the table value is negated. We can exploit this\n+     * to only store the first half of every table. If an entry from the second half is\n+     * needed, we look up its bit-flipped version instead, and conditionally negate it.\n+     *\n+     * secp256k1_ecmult_gen_prec_table[b][index] stores the table(b,m) entries. Index\n+     * is the relevant bits of m packed together without gaps. */\n+\n+    /* Outer loop: iterate over comb_off from COMB_SPACING - 1 down to 0. */\n+    comb_off = COMB_SPACING - 1;\n+    while (1) {\n+        uint32_t block;\n+        uint32_t bit_pos = comb_off;\n+        /* Inner loop: for each block, add table entries to the result. */\n+        for (block = 0; block < COMB_BLOCKS; ++block) {\n+            /* Gather the mask(block)-selected bits of recoded into bits. They're packed\n+             * together: bit (tooth) of bits = bit\n+             * ((block*COMB_TEETH + tooth)*COMB_SPACING + comb_off) of recoded. */\n+            uint32_t bits = 0, sign, abs, index, tooth;\n+            for (tooth = 0; tooth < COMB_TEETH && bit_pos < 256; ++tooth) {\n+                uint32_t bit = secp256k1_scalar_get_bits(&recoded, bit_pos, 1);\n+                bits |= bit << tooth;\n+                bit_pos += COMB_SPACING;\n+            }\n+\n+            /* If the top bit of bits is 1, conditionally flip them all (corresponding",
      "path": "src/ecmult_gen_impl.h",
      "position": null,
      "original_position": 179,
      "commit_id": "dcc846f18518f77770b6a1fc9e39683c63685d39",
      "original_commit_id": "62601920bee3b57456a130d1c10a4e7fc08f3866",
      "in_reply_to_id": 1552045255,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Fixed.",
      "created_at": "2024-04-05T03:37:38Z",
      "updated_at": "2024-04-05T03:37:38Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1058#discussion_r1552773029",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1552773029"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1058"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 172,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1553284376",
      "pull_request_review_id": 1982504615,
      "id": 1553284376,
      "node_id": "PRRC_kwDOAP4Jqs5clT0Y",
      "diff_hunk": "@@ -29,38 +29,184 @@ static void secp256k1_ecmult_gen_context_clear(secp256k1_ecmult_gen_context *ctx\n     secp256k1_ge_clear(&ctx->ge_offset);\n }\n \n-/* For accelerating the computation of a*G:\n- * To harden against timing attacks, use the following mechanism:\n- * * Break up the multiplicand into groups of PREC_BITS bits, called n_0, n_1, n_2, ..., n_(PREC_N-1).\n- * * Compute sum(n_i * (PREC_G)^i * G + U_i, i=0 ... PREC_N-1), where:\n- *   * U_i = U * 2^i, for i=0 ... PREC_N-2\n- *   * U_i = U * (1-2^(PREC_N-1)), for i=PREC_N-1\n- *   where U is a point with no known corresponding scalar. Note that sum(U_i, i=0 ... PREC_N-1) = 0.\n- * For each i, and each of the PREC_G possible values of n_i, (n_i * (PREC_G)^i * G + U_i) is\n- * precomputed (call it prec(i, n_i)). The formula now becomes sum(prec(i, n_i), i=0 ... PREC_N-1).\n- * None of the resulting prec group elements have a known scalar, and neither do any of\n- * the intermediate sums while computing a*G.\n- * The prec values are stored in secp256k1_ecmult_gen_prec_table[i][n_i] = n_i * (PREC_G)^i * G + U_i.\n- */\n-static void secp256k1_ecmult_gen(const secp256k1_ecmult_gen_context *ctx, secp256k1_gej *r, const secp256k1_scalar *gn) {\n-    int bits = ECMULT_GEN_PREC_BITS;\n-    int g = ECMULT_GEN_PREC_G(bits);\n-    int n = ECMULT_GEN_PREC_N(bits);\n+/* Compute the scalar (2^COMB_BITS - 1) / 2. */\n+static void secp256k1_ecmult_gen_scalar_diff(secp256k1_scalar* diff) {\n+    int i;\n+\n+    /* Compute scalar -1/2. */\n+    secp256k1_scalar neghalf = SECP256K1_SCALAR_CONST(0, 0, 0, 0, 0, 0, 0, 2);\n+    secp256k1_scalar_inverse_var(&neghalf, &neghalf);\n+    secp256k1_scalar_negate(&neghalf, &neghalf);\n+\n+    /* Compute offset = 2^(COMB_BITS - 1). */\n+    secp256k1_scalar_set_int(diff, 1);\n+    for (i = 0; i < COMB_BITS - 1; ++i) {\n+        secp256k1_scalar_add(diff, diff, diff);\n+    }\n \n+    /* The result is the sum of 2^(COMB_BITS - 1) + (-1/2). */\n+    secp256k1_scalar_add(diff, diff, &neghalf);\n+}\n+\n+static void secp256k1_ecmult_gen(const secp256k1_ecmult_gen_context *ctx, secp256k1_gej *r, const secp256k1_scalar *gn) {\n+    uint32_t comb_off;\n     secp256k1_ge add;\n+    secp256k1_fe neg;\n     secp256k1_ge_storage adds;\n-    secp256k1_scalar gnb;\n-    int i, j, n_i;\n+    secp256k1_scalar d;\n \n     memset(&adds, 0, sizeof(adds));\n+\n+    /* We want to compute R = gn*G.\n+     *\n+     * To blind the scalar used in the computation, we rewrite this to be R = (gn-b)*G + b*G, with\n+     * a blinding value b determined by the context.\n+     *\n+     * The multiplication (gn-b)*G will be performed using a signed-digit multi-comb (see Section\n+     * 3.3 of \"Fast and compact elliptic-curve cryptography\" by Mike Hamburg,\n+     * https://eprint.iacr.org/2012/309).\n+     *\n+     * Let comb(s,P) = sum((2*s[i]-1)*2^i*P for i=0..COMB_BITS-1), where s[i] is the i'th bit of\n+     * the binary representation of scalar s. So the s[i] values determine whether -2^i*P (s[i]=0)\n+     * or +2^i*P (s[i]=1) are added together. COMB_BITS is at least 256, so all bits of s are\n+     * covered. By manipulating:\n+     *\n+     *     comb(s,P) = sum((2*s[i]-1)*2^i*P for i=0..COMB_BITS-1)\n+     * <=> comb(s,P) = sum((2*s[i]-1)*2^i for i=0..COMB_BITS-1) * P\n+     * <=> comb(s,P) = (2*sum(s[i]*2^i for i=0..COMB_BITS-1) - sum(2^i for i=0..COMB_BITS-1)) * P\n+     * <=> comb(s,P) = (2*s - (2^COMB_BITS - 1)) * P\n+     *\n+     * If we wanted to compute (gn-b)*G as comb(s,G), it would need to hold that\n+     *\n+     *     gn - b = 2*s - (2^COMB_BITS - 1), or\n+     * <=> s = (gn - b + (2^COMB_BITS - 1))/2 mod order.\n+     *\n+     * We use an alternative here that avoids the modular division by two; instead we compute\n+     * (gn-b)*G as comb(d,G/2). For that to hold it must be the case that\n+     *\n+     *     (gn-b)*G = (2*d - (2^COMB_BITS - 1)) * (G/2)\n+     * <=> d = (gn + (2^COMB_BITS - 1)/2 - b) mod order.\n+     *\n+     * -b is precomputed as ctx->scalar_offset, and b*G as ctx->ge_offset, so our final equations\n+     * become:\n+     *\n+     *     d = gn + ctx->scalar_offset + (2^COMB_BITS - 1)/2 (mod order)\n+     *     R = comb(d, G/2) + ctx->ge_offset.\n+     *\n+     * The comb function is computed by summing + or - 2^(i-1)*G, for i=0..COMB_BITS-1, depending\n+     * on the value of the bits d[i] of the binary representation of scalar d.\n+     */\n+\n+    /* Compute the scalar d = (gn + ctx->scalar_offset + (2^COMB_BITS - 1)/2). */\n+    secp256k1_ecmult_gen_scalar_diff(&d);\n+    secp256k1_scalar_add(&d, &d, &ctx->scalar_offset);\n+    secp256k1_scalar_add(&d, &d, gn);\n+\n+    /* In secp256k1_ecmult_gen_prec_table we have precomputed sums of the\n+     * (2*d[i]-1) * 2^(i-1) * G points, for various combinations of i positions.\n+     * We rewrite our equation in terms of these table entries.\n+     *\n+     * Let mask(b) = sum(2^((b*COMB_TEETH + t)*COMB_SPACING) for t=0..COMB_TEETH-1),\n+     * with b ranging from 0 to COMB_BLOCKS-1. So for example with COMB_BLOCKS=11,\n+     * COMB_TEETH=6, COMB_SPACING=4, we would have:\n+     *   mask(0)  = 2^0   + 2^4   + 2^8   + 2^12  + 2^16  + 2^20,\n+     *   mask(1)  = 2^24  + 2^28  + 2^32  + 2^36  + 2^40  + 2^44,\n+     *   mask(2)  = 2^48  + 2^52  + 2^56  + 2^60  + 2^64  + 2^68,\n+     *   ...\n+     *   mask(10) = 2^240 + 2^244 + 2^248 + 2^252 + 2^256 + 2^260\n+     *\n+     * We will split up the bits d[i] using these masks. Specifically, each mask is\n+     * used COMB_SPACING times, with different shifts:\n+     *\n+     * d = (d & mask(0)<<0) + (d & mask(1)<<0) + ... + (d & mask(COMB_BLOCKS-1)<<0) +\n+     *     (d & mask(0)<<1) + (d & mask(1)<<1) + ... + (d & mask(COMB_BLOCKS-1)<<1) +\n+     *     ...\n+     *     (d & mask(0)<<(COMB_SPACING-1)) + ...\n+     *\n+     * Now define table(b,m) = (m - mask(b)/2) * G, and we will precompute these values for\n+     * b=0..COMB_BLOCKS-1, and for all values m which d & mask(b) can take (so m can take on\n+     * 2^COMB_TEETH distinct values).\n+     *\n+     * If m=(d & mask(b)), then table(b,m) is the sum of 2^i*(2*d[i]-1)*G/2, with i\n+     * iterating over the set bits in mask(b). In our example, table(2, 2^48 + 2^56 + 2^68)\n+     * would equal (2^48 - 2^52 + 2^56 - 2^60 - 2^64 + 2^68) * G/2.\n+     *\n+     * With that, we can rewrite comb(d, G/2) as:\n+     *\n+     *     2^0 * (table(0, d>>0 & mask(0)) + ... + table(1, d>>0 & mask(COMP_BLOCKS-1)))\n+     *   + 2^1 * (table(0, d>>1 & mask(0)) + ... + table(1, d>>1 & mask(COMP_BLOCKS-1)))\n+     *   + 2^2 * (table(0, d>>2 & mask(0)) + ... + table(1, d>>2 & mask(COMP_BLOCKS-1)))\n+     *   + ...\n+     *   + 2^(COMB_SPACING-1) * (table(0, d>>(COMB_SPACING-1) & mask(0)) + ...)\n+     *\n+     * Or more generically as\n+     *\n+     *   sum(2^i * sum(table(b, d>>i & mask(b)), b=0..COMB_BLOCKS-1), i=0..COMB_SPACING-1)\n+     *\n+     * This is implemented using an outer loop that runs in reverse order over the lines of this\n+     * equation, which in each iteration runs an inner loop that adds the terms of that line and\n+     * then doubles the result before proceeding to the next line.\n+     *\n+     * In pseudocode:\n+     *   c = infinity\n+     *   for comb_off in range(COMB_SPACING - 1, -1, -1):\n+     *     for block in range(COMB_BLOCKS):\n+     *       c += table(block, (d >> comb_off) & mask(block))\n+     *     if comb_off > 0:\n+     *       c = 2*c\n+     *   return c\n+     *\n+     * This computes c = comb(d, G/2), and thus finally R = c + ctx->ge_offset. Note that it would\n+     * be possible to apply an initial offset instead of a final offset (moving ge_offset to take\n+     * the place of infinity above), but the chosen approach allows using (in a future improvement)\n+     * an incomplete addition formula for most of the multiplication.\n+     *\n+     * The last question is how to implement the table(b,m) function. For any value of b,\n+     * m=(d & mask(b)) can only take on at most 2^COMB_TEETH possible values (the last one may have\n+     * fewer as there mask(b) may exceed the curve order). So we could create COMB_BLOCK tables\n+     * which contain a value for each such m value.\n+     *\n+     * Now note that\n+     *\n+     *     table(b,m XOR mask(b))\n+     *   = table(b,mask(b) - m)\n+     *   = (mask(b) - m - mask(b)/2)*G\n+     *   = (-m - mask(b)/2)*G\n+     *   = -(m - mask(b)/2)*G\n+     *   = -table(b,m)\n+     *\n+     * Thus flipping all the (relevant) bits in m means negating the table result. Because of this",
      "path": "src/ecmult_gen_impl.h",
      "position": null,
      "original_position": 183,
      "commit_id": "dcc846f18518f77770b6a1fc9e39683c63685d39",
      "original_commit_id": "c30860aa26c6c4a42e359c227e0dab6f5aaa1aef",
      "in_reply_to_id": null,
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "https://github.com/bitcoin-core/secp256k1/commit/62601920bee3b57456a130d1c10a4e7fc08f3866\r\n\r\nIt makes sense to me that flipping the bits means flipping the signs of the summands, and thus flipping the result; I think this argument alone would convince me. \r\n * I can follow the 1st equal sign assuming `m=(d & mask(b))`. Maybe say that the 1st equality needs this, or just substitute `(d & mask(b)` for `m`. \r\n * The 4th line should be `= (-m + mask(b)/2)*G`.",
      "created_at": "2024-04-05T09:44:51Z",
      "updated_at": "2024-04-05T10:21:30Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1058#discussion_r1553284376",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1553284376"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1058"
        }
      },
      "start_line": null,
      "original_start_line": 169,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 178,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1553317120",
      "pull_request_review_id": 1982504615,
      "id": 1553317120,
      "node_id": "PRRC_kwDOAP4Jqs5clb0A",
      "diff_hunk": "@@ -46,16 +47,29 @@ int main(int argc, char **argv) {\n     fprintf(fp, \"#define S(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p) SECP256K1_GE_STORAGE_CONST(0x##a##u,0x##b##u,0x##c##u,0x##d##u,0x##e##u,0x##f##u,0x##g##u,0x##h##u,0x##i##u,0x##j##u,0x##k##u,0x##l##u,0x##m##u,0x##n##u,0x##o##u,0x##p##u)\\n\");\n     fprintf(fp, \"const secp256k1_ge_storage secp256k1_ecmult_gen_prec_table[COMB_BLOCKS][COMB_POINTS] = {\\n\");\n \n-    for (config = 0; config < sizeof(CONFIGS) / sizeof(*CONFIGS); ++config) {\n-        int blocks = CONFIGS[config][0];\n-        int teeth = CONFIGS[config][1];\n-        size_t points = ((size_t)1) << (teeth - 1);\n+    for (config = 0; config < sizeof(CONFIGS) / sizeof(*CONFIGS) + 1; ++config) {\n+        int blocks, teeth;\n+        size_t points;\n         int outer;\n         size_t inner;\n+        secp256k1_ge_storage* table;\n \n-        secp256k1_ge_storage* table = checked_malloc(&default_error_callback, blocks * points * sizeof(secp256k1_ge_storage));\n-        secp256k1_ecmult_gen_compute_table(table, &secp256k1_ge_const_g, blocks, teeth);\n+        if (config < sizeof(CONFIGS) / sizeof(*CONFIGS)) {\n+            /* In all but the last iteration, output the configurations in CONFIGS. */\n+            blocks = CONFIGS[config][0];\n+            teeth = CONFIGS[config][1];\n+            if (blocks == COMB_BLOCKS && teeth == COMB_TEETH) did_current_config = 1;\n+        } else {\n+            /* In the last iteration, output table for (COMB_BLOCKS, COMB_TEETH) if not\n+             * already done. */",
      "path": "src/precompute_ecmult_gen.c",
      "position": null,
      "original_position": 32,
      "commit_id": "dcc846f18518f77770b6a1fc9e39683c63685d39",
      "original_commit_id": "84f5ce761ced5da6c9332279ff491b139e1510c7",
      "in_reply_to_id": null,
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "84f5ce761ced5da6c9332279ff491b139e1510c7  Always generate tables for current (blocks,teeth) config \r\n\r\nI think this is fine for the table generation code in the end, but I smell a refactor here. This code is kind of abusing the loop. I think what you want is to extract the main part into a function and have something like this in main:\r\n```C\r\nfor (config = 0; config < sizeof(CONFIGS) / sizeof(*CONFIGS); ++config) {\r\n    blocks = CONFIGS[config][0];\r\n    teeth = CONFIGS[config][1];\r\n    if (blocks == COMB_BLOCKS && teeth == COMB_TEETH) did_current_config = 1;      \r\n    print_table(fp, blocks, teeth); \r\n}\r\nif (!did_current_config) {\r\n    print_table(fp, COMB_BLOCKS, COMB_TEETH);\r\n}\r\n``` \r\nThe name `print_table` is consistent with `src/precompute_ecmult.c`.\r\n\r\n",
      "created_at": "2024-04-05T10:05:03Z",
      "updated_at": "2024-04-05T10:21:06Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1058#discussion_r1553317120",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1553317120"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1058"
        }
      },
      "start_line": null,
      "original_start_line": 63,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 64,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1553344364",
      "pull_request_review_id": 1982504615,
      "id": 1553344364,
      "node_id": "PRRC_kwDOAP4Jqs5clids",
      "diff_hunk": "@@ -358,19 +357,25 @@ case $set_ecmult_window in\n   ;;\n esac\n \n-# Set ecmult gen precision\n-if test x\"$req_ecmult_gen_precision\" = x\"auto\"; then\n-  set_ecmult_gen_precision=4\n+# Set ecmult gen kb\n+if test x\"$req_ecmult_gen_kb\" = x\"auto\"; then\n+  set_ecmult_gen_kb=22\n else\n-  set_ecmult_gen_precision=$req_ecmult_gen_precision\n+  set_ecmult_gen_kb=$req_ecmult_gen_kb\n fi\n \n-case $set_ecmult_gen_precision in\n-2|4|8)\n-  SECP_CONFIG_DEFINES=\"$SECP_CONFIG_DEFINES -DECMULT_GEN_PREC_BITS=$set_ecmult_gen_precision\"\n+case $set_ecmult_gen_kb in\n+2)\n+  SECP_CONFIG_DEFINES=\"$SECP_CONFIG_DEFINES -DCOMB_BLOCKS=2 -DCOMB_TEETH=5\"\n+  ;;\n+22)\n+  SECP_CONFIG_DEFINES=\"$SECP_CONFIG_DEFINES -DCOMB_BLOCKS=11 -DCOMB_TEETH=6\"\n+  ;;\n+86)\n+  SECP_CONFIG_DEFINES=\"$SECP_CONFIG_DEFINES -DCOMB_BLOCKS=43 -DCOMB_TEETH=6\"",
      "path": "configure.ac",
      "position": 45,
      "original_position": 45,
      "commit_id": "dcc846f18518f77770b6a1fc9e39683c63685d39",
      "original_commit_id": "556938cd27fc307795f4b5f10bbc98111f1d7bb0",
      "in_reply_to_id": null,
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think in the spirit of trying to make manual builds, i.e., without build system, easy (https://github.com/bitcoin-core/secp256k1/issues/929), it would be better to move the selection logic here to the C code, and have `ECMULT_GEN_KB` as the \"exposed\" configuration macro. Then configure, cmake, and manual builds will have the same interface. (We could still allow passing `COMB_BLOCKS` and `COMB_TEETH` directly as long as `ECMULT_GEN_KB` is not defined, to retain the possibility to select a non-standard config.)\r\n\r\nThis shouldn't hold up this PR. It could also be done in a follow-up PR, if you feel that's easier.",
      "created_at": "2024-04-05T10:19:48Z",
      "updated_at": "2024-04-05T10:21:06Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1058#discussion_r1553344364",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1553344364"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1058"
        }
      },
      "start_line": 367,
      "original_start_line": 367,
      "start_side": "RIGHT",
      "line": 375,
      "original_line": 375,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1553346735",
      "pull_request_review_id": 1982624556,
      "id": 1553346735,
      "node_id": "PRRC_kwDOAP4Jqs5cljCv",
      "diff_hunk": "@@ -29,38 +29,154 @@ static void secp256k1_ecmult_gen_context_clear(secp256k1_ecmult_gen_context *ctx\n     secp256k1_ge_clear(&ctx->ge_offset);\n }\n \n-/* For accelerating the computation of a*G:\n- * To harden against timing attacks, use the following mechanism:\n- * * Break up the multiplicand into groups of PREC_BITS bits, called n_0, n_1, n_2, ..., n_(PREC_N-1).\n- * * Compute sum(n_i * (PREC_G)^i * G + U_i, i=0 ... PREC_N-1), where:\n- *   * U_i = U * 2^i, for i=0 ... PREC_N-2\n- *   * U_i = U * (1-2^(PREC_N-1)), for i=PREC_N-1\n- *   where U is a point with no known corresponding scalar. Note that sum(U_i, i=0 ... PREC_N-1) = 0.\n- * For each i, and each of the PREC_G possible values of n_i, (n_i * (PREC_G)^i * G + U_i) is\n- * precomputed (call it prec(i, n_i)). The formula now becomes sum(prec(i, n_i), i=0 ... PREC_N-1).\n- * None of the resulting prec group elements have a known scalar, and neither do any of\n- * the intermediate sums while computing a*G.\n- * The prec values are stored in secp256k1_ecmult_gen_prec_table[i][n_i] = n_i * (PREC_G)^i * G + U_i.\n- */\n-static void secp256k1_ecmult_gen(const secp256k1_ecmult_gen_context *ctx, secp256k1_gej *r, const secp256k1_scalar *gn) {\n-    int bits = ECMULT_GEN_PREC_BITS;\n-    int g = ECMULT_GEN_PREC_G(bits);\n-    int n = ECMULT_GEN_PREC_N(bits);\n+/* Compute the scalar (2^COMB_BITS - 1) / 2. */\n+static void secp256k1_ecmult_gen_scalar_diff(secp256k1_scalar* diff) {\n+    int i;\n+\n+    /* Compute scalar -1/2. */\n+    secp256k1_scalar neghalf = SECP256K1_SCALAR_CONST(0, 0, 0, 0, 0, 0, 0, 2);\n+    secp256k1_scalar_inverse_var(&neghalf, &neghalf);\n+    secp256k1_scalar_negate(&neghalf, &neghalf);\n+\n+    /* Compute offset = 2^(COMB_BITS - 1). */\n+    secp256k1_scalar_set_int(diff, 1);\n+    for (i = 0; i < COMB_BITS - 1; ++i) {\n+        secp256k1_scalar_add(diff, diff, diff);\n+    }\n \n+    /* The result is the sum of 2^(COMB_BITS - 1) + (-1/2). */\n+    secp256k1_scalar_add(diff, diff, &neghalf);\n+}\n+\n+static void secp256k1_ecmult_gen(const secp256k1_ecmult_gen_context *ctx, secp256k1_gej *r, const secp256k1_scalar *gn) {\n+    uint32_t comb_off;\n     secp256k1_ge add;\n+    secp256k1_fe neg;\n     secp256k1_ge_storage adds;\n-    secp256k1_scalar gnb;\n-    int i, j, n_i;\n+    secp256k1_scalar recoded;\n \n     memset(&adds, 0, sizeof(adds));\n     secp256k1_gej_set_infinity(r);\n \n-    /* Blind scalar/point multiplication by computing (gn-b)*G + b*G instead of gn*G. */\n-    secp256k1_scalar_add(&gnb, gn, &ctx->scalar_offset);\n+    /* We want to compute R = gn*G.\n+     *\n+     * To blind the scalar used in the computation, we rewrite this to be R = (gn-b)*G + b*G, with\n+     * a value b determined by the context. b*G is precomputed as ctx->ge_offset, so we're\n+     * left with computing R = (gn-b)*G + ctx->ge_offset.\n+     *\n+     * The multiplication (gn-b)*G will be performed using a signed-digit multi-comb (see Section\n+     * 3.3 of \"Fast and compact elliptic-curve cryptography\" by Mike Hamburg\n+     * (https://eprint.iacr.org/2012/309).\n+     *\n+     * Let comb(s,P) = sum((2*s_i-1)*2^i*P for i=0..COMB_BITS-1), where s_i is the i'th bit of the\n+     * binary representation of scalar s. So the s_i values determine whether -2^i*P (s_i=0) or\n+     * +2^i*P (s_1) are added together. By manipulating:\n+     *\n+     *     comb(s,P) = sum((2*s_i-1)*2^i*P for i=0..COMB_BITS-1)\n+     * <=> comb(s,P) = sum((2*s_i-1)*2^i for i=0..COMB_BITS-1) * P\n+     * <=> comb(s,P) = (2*sum(s_i*2^i for i=0..COMB_BITS-1) - sum(2^i for i=0..COMB_BITS-1)) * P\n+     * <=> comb(s,P) = (2*s - (2^COMB_BITS - 1)) * P\n+     *\n+     * Thus (gn-b)*G can be written as comb(s,G) if gn-b = 2*s - (2^COMB_BITS - 1), or\n+     * s = (gn - b + (2^COMB_BITS - 1))/2 mod order.\n+     *\n+     * We use an alternative that avoids the modular division by two: we write (gn-b)*G =\n+     * comb(d,G/2). For that to hold it must be the case that\n+     * (gn-b)*G = (2*d - (2^COMB_BITS - 1)) * (G/2), or\n+     * d = (gn + (2^COMB_BITS - 1)/2 - b) mod order.\n+     *\n+     * -b is precomputed as ctx->scalar_offset, so our final equations become:\n+     *\n+     *   d = gn + ctx->scalar_offset + (2^COMB_BITS - 1)/2 (mod order)\n+     *   R = comb(d, G/2) + ctx->ge_offset.\n+     *\n+     * The comb function is computed by summing + or - 2^(i-1)*G, for i=0..COMB_BITS-1, depending\n+     * on the value of the bits d_i of the binary representation of scalar d.\n+     */\n+\n+    /* Compute the scalar (gn + ctx->scalar_offset + (2^COMB_BITS - 1)/2). */\n+    secp256k1_ecmult_gen_scalar_diff(&recoded);\n+    secp256k1_scalar_add(&recoded, &recoded, &ctx->scalar_offset);\n+    secp256k1_scalar_add(&recoded, &recoded, gn);\n+\n+    /* In secp256k1_ecmult_gen_prec_table we have precomputed sums of the\n+     * (2*d_i-1) * 2^(i-1) * G points, for various combinations of i positions.\n+     * We rewrite our equation in terms of these table entries.\n+     *\n+     * Let mask(b) = sum(2^((b*COMB_TEETH + t)*COMB_SPACING) for t=0..COMB_TEETH-1),\n+     * with b ranging from 0 to COMB_BLOCKS-1. So for example with COMB_BLOCKS=11,\n+     * COMB_TEETH=6, COMB_SPACING=4, we would have:\n+     *   mask(0)  = 2^0   + 2^4   + 2^8   + 2^12  + 2^16  + 2^20,\n+     *   mask(1)  = 2^24  + 2^28  + 2^32  + 2^36  + 2^40  + 2^44,\n+     *   mask(2)  = 2^48  + 2^52  + 2^56  + 2^60  + 2^64  + 2^68,\n+     *   ...\n+     *   mask(10) = 2^240 + 2^244 + 2^248 + 2^252 + 2^256 + 2^260\n+     *\n+     * Imagine we have a table(b,m) function which can look up, given b and\n+     * m=(recoded & mask(b)), the sum of (2*d_i-1)*2^(i-1)*G for all bit positions\n+     * i set in mask(b). In our example, table(0, 1 + 2^8 + 2^20) would be equal to\n+     * (2^-1 - 2^3 + 2^7 - 2^11 - 2^15 + 2^19)*G.",
      "path": "src/ecmult_gen_impl.h",
      "position": null,
      "original_position": 125,
      "commit_id": "dcc846f18518f77770b6a1fc9e39683c63685d39",
      "original_commit_id": "62601920bee3b57456a130d1c10a4e7fc08f3866",
      "in_reply_to_id": 1552021153,
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yes!",
      "created_at": "2024-04-05T10:22:04Z",
      "updated_at": "2024-04-05T10:22:04Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1058#discussion_r1553346735",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1553346735"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1058"
        }
      },
      "start_line": null,
      "original_start_line": 115,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 118,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1553347610",
      "pull_request_review_id": 1982627032,
      "id": 1553347610,
      "node_id": "PRRC_kwDOAP4Jqs5cljQa",
      "diff_hunk": "@@ -29,38 +29,154 @@ static void secp256k1_ecmult_gen_context_clear(secp256k1_ecmult_gen_context *ctx\n     secp256k1_ge_clear(&ctx->ge_offset);\n }\n \n-/* For accelerating the computation of a*G:\n- * To harden against timing attacks, use the following mechanism:\n- * * Break up the multiplicand into groups of PREC_BITS bits, called n_0, n_1, n_2, ..., n_(PREC_N-1).\n- * * Compute sum(n_i * (PREC_G)^i * G + U_i, i=0 ... PREC_N-1), where:\n- *   * U_i = U * 2^i, for i=0 ... PREC_N-2\n- *   * U_i = U * (1-2^(PREC_N-1)), for i=PREC_N-1\n- *   where U is a point with no known corresponding scalar. Note that sum(U_i, i=0 ... PREC_N-1) = 0.\n- * For each i, and each of the PREC_G possible values of n_i, (n_i * (PREC_G)^i * G + U_i) is\n- * precomputed (call it prec(i, n_i)). The formula now becomes sum(prec(i, n_i), i=0 ... PREC_N-1).\n- * None of the resulting prec group elements have a known scalar, and neither do any of\n- * the intermediate sums while computing a*G.\n- * The prec values are stored in secp256k1_ecmult_gen_prec_table[i][n_i] = n_i * (PREC_G)^i * G + U_i.\n- */\n-static void secp256k1_ecmult_gen(const secp256k1_ecmult_gen_context *ctx, secp256k1_gej *r, const secp256k1_scalar *gn) {\n-    int bits = ECMULT_GEN_PREC_BITS;\n-    int g = ECMULT_GEN_PREC_G(bits);\n-    int n = ECMULT_GEN_PREC_N(bits);\n+/* Compute the scalar (2^COMB_BITS - 1) / 2. */\n+static void secp256k1_ecmult_gen_scalar_diff(secp256k1_scalar* diff) {",
      "path": "src/ecmult_gen_impl.h",
      "position": 38,
      "original_position": 36,
      "commit_id": "dcc846f18518f77770b6a1fc9e39683c63685d39",
      "original_commit_id": "62601920bee3b57456a130d1c10a4e7fc08f3866",
      "in_reply_to_id": 1551959311,
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Makes sense, maybe add this explanation to the \"docstring\".",
      "created_at": "2024-04-05T10:22:50Z",
      "updated_at": "2024-04-05T10:23:07Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1058#discussion_r1553347610",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1553347610"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1058"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 36,
      "original_line": 36,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1553461859",
      "pull_request_review_id": 1982888494,
      "id": 1553461859,
      "node_id": "PRRC_kwDOAP4Jqs5cl_Jj",
      "diff_hunk": "@@ -225,7 +226,13 @@ static void secp256k1_ecmult_gen(const secp256k1_ecmult_gen_context *ctx, secp25\n             secp256k1_fe_cmov(&add.y, &neg, sign);\n \n             /* Add the looked up and conditionally negated value to r. */\n-            secp256k1_gej_add_ge(r, r, &add);\n+            if (EXPECT(first, 0)) {\n+                /* If this is the first table lookup, we can skip addition. */",
      "path": "src/ecmult_gen_impl.h",
      "position": 269,
      "original_position": 14,
      "commit_id": "dcc846f18518f77770b6a1fc9e39683c63685d39",
      "original_commit_id": "9d917a149966ae7849bc9b56175aa26ee5fdaece",
      "in_reply_to_id": null,
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I checked: `EXCEPT` actually yields a `jne` here instead of a `je` on both gcc and clang.  ",
      "created_at": "2024-04-05T11:28:24Z",
      "updated_at": "2024-04-05T14:01:48Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1058#discussion_r1553461859",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1553461859"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1058"
        }
      },
      "start_line": 258,
      "original_start_line": 229,
      "start_side": "RIGHT",
      "line": 259,
      "original_line": 259,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1553470283",
      "pull_request_review_id": 1982888494,
      "id": 1553470283,
      "node_id": "PRRC_kwDOAP4Jqs5cmBNL",
      "diff_hunk": "@@ -62,23 +62,24 @@ SECP256K1_INLINE static void secp256k1_scalar_set_int(secp256k1_scalar *r, unsig\n     SECP256K1_SCALAR_VERIFY(r);\n }\n \n-SECP256K1_INLINE static unsigned int secp256k1_scalar_get_bits(const secp256k1_scalar *a, unsigned int offset, unsigned int count) {\n+SECP256K1_INLINE static uint32_t secp256k1_scalar_get_bits(const secp256k1_scalar *a, unsigned int offset, unsigned int count) {\n     SECP256K1_SCALAR_VERIFY(a);\n+    VERIFY_CHECK(count > 0 && count <= 32);",
      "path": "src/scalar_8x32_impl.h",
      "position": 7,
      "original_position": 7,
      "commit_id": "dcc846f18518f77770b6a1fc9e39683c63685d39",
      "original_commit_id": "1921fd8bcaf29f23303411a64988bd178b8e7c5b",
      "in_reply_to_id": null,
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "https://github.com/bitcoin-core/secp256k1/commit/1921fd8bcaf29f23303411a64988bd178b8e7c5b  Make secp256k1_scalar_get_bits support 32-bit reads \r\n\r\nnit: Add empty line after `SECP256K1_SCALAR_VERIFY(a);`\r\nAlso 1x further below, and the same in the 4x64 file ",
      "created_at": "2024-04-05T11:34:08Z",
      "updated_at": "2024-04-05T14:01:48Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1058#discussion_r1553470283",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1553470283"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1058"
        }
      },
      "start_line": 66,
      "original_start_line": 66,
      "start_side": "RIGHT",
      "line": 67,
      "original_line": 67,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1553495278",
      "pull_request_review_id": 1982888494,
      "id": 1553495278,
      "node_id": "PRRC_kwDOAP4Jqs5cmHTu",
      "diff_hunk": "@@ -23,10 +23,10 @@\n static void secp256k1_scalar_clear(secp256k1_scalar *r);\n \n /** Access bits from a scalar. All requested bits must belong to the same 32-bit limb. */\n-static unsigned int secp256k1_scalar_get_bits(const secp256k1_scalar *a, unsigned int offset, unsigned int count);\n+static uint32_t secp256k1_scalar_get_bits(const secp256k1_scalar *a, unsigned int offset, unsigned int count);\n \n /** Access bits from a scalar. Not constant time in offset and count. */\n-static unsigned int secp256k1_scalar_get_bits_var(const secp256k1_scalar *a, unsigned int offset, unsigned int count);\n+static uint32_t secp256k1_scalar_get_bits_var(const secp256k1_scalar *a, unsigned int offset, unsigned int count);",
      "path": "src/scalar.h",
      "position": null,
      "original_position": 9,
      "commit_id": "dcc846f18518f77770b6a1fc9e39683c63685d39",
      "original_commit_id": "1921fd8bcaf29f23303411a64988bd178b8e7c5b",
      "in_reply_to_id": null,
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "https://github.com/bitcoin-core/secp256k1/commit/1921fd8bcaf29f23303411a64988bd178b8e7c5b Make secp256k1_scalar_get_bits support 32-bit reads \r\n\r\nNot this PR, but let me note that the names are a bit confusing. Just from the names, one would expect that `secp256k1_scalar_get_bits_var` is faster... But yeah, that's not the case. I was about to suggest that you use the `_var` for performance.\r\n\r\nWe should probably rename the constant-time one to `secp256k1_scalar_get_bits_limb32` or something like that. As you have this commit here anyway, you could add this, but feel free to ignore. ",
      "created_at": "2024-04-05T11:53:11Z",
      "updated_at": "2024-04-05T14:01:48Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1058#discussion_r1553495278",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1553495278"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1058"
        }
      },
      "start_line": null,
      "original_start_line": 25,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 29,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1553505535",
      "pull_request_review_id": 1982888494,
      "id": 1553505535,
      "node_id": "PRRC_kwDOAP4Jqs5cmJz_",
      "diff_hunk": "@@ -100,6 +104,11 @@ static void secp256k1_ecmult_gen(const secp256k1_ecmult_gen_context *ctx, secp25\n \n     /* Compute the scalar d = (gn + ctx->scalar_offset). */\n     secp256k1_scalar_add(&d, &ctx->scalar_offset, gn);\n+    /* Convert to recoded array. */\n+    for (i = 0; i < 8; ++i) {\n+        recoded[i] = secp256k1_scalar_get_bits(&d, 32 * i, 32);\n+    }",
      "path": "src/ecmult_gen_impl.h",
      "position": null,
      "original_position": 20,
      "commit_id": "dcc846f18518f77770b6a1fc9e39683c63685d39",
      "original_commit_id": "1777e0a507c47d76c7021079af0f626b0804fad8",
      "in_reply_to_id": null,
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Have you considered using `scalar_get_b32`, reading into a byte array instead?",
      "created_at": "2024-04-05T12:02:20Z",
      "updated_at": "2024-04-05T14:01:48Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1058#discussion_r1553505535",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1553505535"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1058"
        }
      },
      "start_line": null,
      "original_start_line": 107,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 114,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1553663044",
      "pull_request_review_id": 1983221996,
      "id": 1553663044,
      "node_id": "PRRC_kwDOAP4Jqs5cmwRE",
      "diff_hunk": "@@ -1,83 +1,95 @@\n-/***********************************************************************\n- * Copyright (c) 2013, 2014, 2015 Pieter Wuille, Gregory Maxwell       *\n- * Distributed under the MIT software license, see the accompanying    *\n- * file COPYING or https://www.opensource.org/licenses/mit-license.php.*\n- ***********************************************************************/\n+/*******************************************************************************\n+ * Copyright (c) 2013-2015, 2021 Pieter Wuille, Gregory Maxwell, Peter Dettman *\n+ * Distributed under the MIT software license, see the accompanying            *\n+ * file COPYING or https://www.opensource.org/licenses/mit-license.php.        *\n+ *******************************************************************************/\n \n #ifndef SECP256K1_ECMULT_GEN_COMPUTE_TABLE_IMPL_H\n #define SECP256K1_ECMULT_GEN_COMPUTE_TABLE_IMPL_H\n \n #include \"ecmult_gen_compute_table.h\"\n #include \"group_impl.h\"\n #include \"field_impl.h\"\n+#include \"scalar_impl.h\"\n #include \"ecmult_gen.h\"\n #include \"util.h\"\n \n-static void secp256k1_ecmult_gen_compute_table(secp256k1_ge_storage* table, const secp256k1_ge* gen, int bits) {\n-    int g = ECMULT_GEN_PREC_G(bits);\n-    int n = ECMULT_GEN_PREC_N(bits);\n+static void secp256k1_ecmult_gen_compute_table(secp256k1_ge_storage* table, const secp256k1_ge* gen, int blocks, int teeth) {\n+    size_t points = ((size_t)1) << (teeth - 1);\n+    size_t points_total = points * blocks;\n+    int spacing = (256 + blocks * teeth - 1) / (blocks * teeth);\n+    secp256k1_ge* prec = checked_malloc(&default_error_callback, points_total * sizeof(*prec));\n+    secp256k1_gej* ds = checked_malloc(&default_error_callback, teeth * sizeof(*ds));\n+    secp256k1_gej* vs = checked_malloc(&default_error_callback, points_total * sizeof(*vs));\n+    secp256k1_gej u;\n+    size_t vs_pos = 0;\n+    secp256k1_scalar half = SECP256K1_SCALAR_CONST(0, 0, 0, 0, 0, 0, 0, 2);\n+    int block, i;\n \n-    secp256k1_ge* prec = checked_malloc(&default_error_callback, n * g * sizeof(*prec));\n-    secp256k1_gej gj;\n-    secp256k1_gej nums_gej;\n-    int i, j;\n-\n-    VERIFY_CHECK(g > 0);\n-    VERIFY_CHECK(n > 0);\n-\n-    /* get the generator */\n-    secp256k1_gej_set_ge(&gj, gen);\n-\n-    /* Construct a group element with no known corresponding scalar (nothing up my sleeve). */\n-    {\n-        static const unsigned char nums_b32[33] = \"The scalar for this x is unknown\";\n-        secp256k1_fe nums_x;\n-        secp256k1_ge nums_ge;\n-        int r;\n-        r = secp256k1_fe_set_b32_limit(&nums_x, nums_b32);\n-        (void)r;\n-        VERIFY_CHECK(r);\n-        r = secp256k1_ge_set_xo_var(&nums_ge, &nums_x, 0);\n-        (void)r;\n-        VERIFY_CHECK(r);\n-        secp256k1_gej_set_ge(&nums_gej, &nums_ge);\n-        /* Add G to make the bits in x uniformly distributed. */\n-        secp256k1_gej_add_ge_var(&nums_gej, &nums_gej, gen, NULL);\n+    /* u is the running power of two times gen we're working with, initially gen/2. */",
      "path": "src/ecmult_gen_compute_table_impl.h",
      "position": 42,
      "original_position": 63,
      "commit_id": "dcc846f18518f77770b6a1fc9e39683c63685d39",
      "original_commit_id": "0a63916f36b92a0508aa7f1df7b8e659bc42bfa4",
      "in_reply_to_id": 1549282824,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think the `run_ecmult_constants` tests should generally test every table entry several times already, regardless of configuration. We could add an explicit test that basically recomputes the table using existing `ecmult`, but perhaps that's overkill?",
      "created_at": "2024-04-05T13:41:56Z",
      "updated_at": "2024-04-05T13:41:56Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1058#discussion_r1553663044",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1553663044"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1058"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 30,
      "original_line": 30,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1553669190",
      "pull_request_review_id": 1983230135,
      "id": 1553669190,
      "node_id": "PRRC_kwDOAP4Jqs5cmxxG",
      "diff_hunk": "@@ -29,38 +29,154 @@ static void secp256k1_ecmult_gen_context_clear(secp256k1_ecmult_gen_context *ctx\n     secp256k1_ge_clear(&ctx->ge_offset);\n }\n \n-/* For accelerating the computation of a*G:\n- * To harden against timing attacks, use the following mechanism:\n- * * Break up the multiplicand into groups of PREC_BITS bits, called n_0, n_1, n_2, ..., n_(PREC_N-1).\n- * * Compute sum(n_i * (PREC_G)^i * G + U_i, i=0 ... PREC_N-1), where:\n- *   * U_i = U * 2^i, for i=0 ... PREC_N-2\n- *   * U_i = U * (1-2^(PREC_N-1)), for i=PREC_N-1\n- *   where U is a point with no known corresponding scalar. Note that sum(U_i, i=0 ... PREC_N-1) = 0.\n- * For each i, and each of the PREC_G possible values of n_i, (n_i * (PREC_G)^i * G + U_i) is\n- * precomputed (call it prec(i, n_i)). The formula now becomes sum(prec(i, n_i), i=0 ... PREC_N-1).\n- * None of the resulting prec group elements have a known scalar, and neither do any of\n- * the intermediate sums while computing a*G.\n- * The prec values are stored in secp256k1_ecmult_gen_prec_table[i][n_i] = n_i * (PREC_G)^i * G + U_i.\n- */\n-static void secp256k1_ecmult_gen(const secp256k1_ecmult_gen_context *ctx, secp256k1_gej *r, const secp256k1_scalar *gn) {\n-    int bits = ECMULT_GEN_PREC_BITS;\n-    int g = ECMULT_GEN_PREC_G(bits);\n-    int n = ECMULT_GEN_PREC_N(bits);\n+/* Compute the scalar (2^COMB_BITS - 1) / 2. */\n+static void secp256k1_ecmult_gen_scalar_diff(secp256k1_scalar* diff) {\n+    int i;\n+\n+    /* Compute scalar -1/2. */\n+    secp256k1_scalar neghalf = SECP256K1_SCALAR_CONST(0, 0, 0, 0, 0, 0, 0, 2);\n+    secp256k1_scalar_inverse_var(&neghalf, &neghalf);\n+    secp256k1_scalar_negate(&neghalf, &neghalf);\n+\n+    /* Compute offset = 2^(COMB_BITS - 1). */\n+    secp256k1_scalar_set_int(diff, 1);\n+    for (i = 0; i < COMB_BITS - 1; ++i) {\n+        secp256k1_scalar_add(diff, diff, diff);\n+    }\n \n+    /* The result is the sum of 2^(COMB_BITS - 1) + (-1/2). */\n+    secp256k1_scalar_add(diff, diff, &neghalf);\n+}\n+\n+static void secp256k1_ecmult_gen(const secp256k1_ecmult_gen_context *ctx, secp256k1_gej *r, const secp256k1_scalar *gn) {\n+    uint32_t comb_off;\n     secp256k1_ge add;\n+    secp256k1_fe neg;\n     secp256k1_ge_storage adds;\n-    secp256k1_scalar gnb;\n-    int i, j, n_i;\n+    secp256k1_scalar recoded;\n \n     memset(&adds, 0, sizeof(adds));\n     secp256k1_gej_set_infinity(r);\n \n-    /* Blind scalar/point multiplication by computing (gn-b)*G + b*G instead of gn*G. */\n-    secp256k1_scalar_add(&gnb, gn, &ctx->scalar_offset);\n+    /* We want to compute R = gn*G.\n+     *\n+     * To blind the scalar used in the computation, we rewrite this to be R = (gn-b)*G + b*G, with\n+     * a value b determined by the context. b*G is precomputed as ctx->ge_offset, so we're\n+     * left with computing R = (gn-b)*G + ctx->ge_offset.\n+     *\n+     * The multiplication (gn-b)*G will be performed using a signed-digit multi-comb (see Section\n+     * 3.3 of \"Fast and compact elliptic-curve cryptography\" by Mike Hamburg\n+     * (https://eprint.iacr.org/2012/309).\n+     *\n+     * Let comb(s,P) = sum((2*s_i-1)*2^i*P for i=0..COMB_BITS-1), where s_i is the i'th bit of the\n+     * binary representation of scalar s. So the s_i values determine whether -2^i*P (s_i=0) or\n+     * +2^i*P (s_1) are added together. By manipulating:\n+     *\n+     *     comb(s,P) = sum((2*s_i-1)*2^i*P for i=0..COMB_BITS-1)\n+     * <=> comb(s,P) = sum((2*s_i-1)*2^i for i=0..COMB_BITS-1) * P\n+     * <=> comb(s,P) = (2*sum(s_i*2^i for i=0..COMB_BITS-1) - sum(2^i for i=0..COMB_BITS-1)) * P\n+     * <=> comb(s,P) = (2*s - (2^COMB_BITS - 1)) * P\n+     *\n+     * Thus (gn-b)*G can be written as comb(s,G) if gn-b = 2*s - (2^COMB_BITS - 1), or\n+     * s = (gn - b + (2^COMB_BITS - 1))/2 mod order.\n+     *\n+     * We use an alternative that avoids the modular division by two: we write (gn-b)*G =\n+     * comb(d,G/2). For that to hold it must be the case that\n+     * (gn-b)*G = (2*d - (2^COMB_BITS - 1)) * (G/2), or\n+     * d = (gn + (2^COMB_BITS - 1)/2 - b) mod order.\n+     *\n+     * -b is precomputed as ctx->scalar_offset, so our final equations become:\n+     *\n+     *   d = gn + ctx->scalar_offset + (2^COMB_BITS - 1)/2 (mod order)\n+     *   R = comb(d, G/2) + ctx->ge_offset.\n+     *\n+     * The comb function is computed by summing + or - 2^(i-1)*G, for i=0..COMB_BITS-1, depending\n+     * on the value of the bits d_i of the binary representation of scalar d.\n+     */\n+\n+    /* Compute the scalar (gn + ctx->scalar_offset + (2^COMB_BITS - 1)/2). */\n+    secp256k1_ecmult_gen_scalar_diff(&recoded);\n+    secp256k1_scalar_add(&recoded, &recoded, &ctx->scalar_offset);\n+    secp256k1_scalar_add(&recoded, &recoded, gn);\n+\n+    /* In secp256k1_ecmult_gen_prec_table we have precomputed sums of the\n+     * (2*d_i-1) * 2^(i-1) * G points, for various combinations of i positions.\n+     * We rewrite our equation in terms of these table entries.\n+     *\n+     * Let mask(b) = sum(2^((b*COMB_TEETH + t)*COMB_SPACING) for t=0..COMB_TEETH-1),\n+     * with b ranging from 0 to COMB_BLOCKS-1. So for example with COMB_BLOCKS=11,\n+     * COMB_TEETH=6, COMB_SPACING=4, we would have:\n+     *   mask(0)  = 2^0   + 2^4   + 2^8   + 2^12  + 2^16  + 2^20,\n+     *   mask(1)  = 2^24  + 2^28  + 2^32  + 2^36  + 2^40  + 2^44,\n+     *   mask(2)  = 2^48  + 2^52  + 2^56  + 2^60  + 2^64  + 2^68,\n+     *   ...\n+     *   mask(10) = 2^240 + 2^244 + 2^248 + 2^252 + 2^256 + 2^260\n+     *\n+     * Imagine we have a table(b,m) function which can look up, given b and\n+     * m=(recoded & mask(b)), the sum of (2*d_i-1)*2^(i-1)*G for all bit positions\n+     * i set in mask(b). In our example, table(0, 1 + 2^8 + 2^20) would be equal to\n+     * (2^-1 - 2^3 + 2^7 - 2^11 - 2^15 + 2^19)*G.\n+     *\n+     * With that, we can rewrite R as:\n+     *   1*(table(0, recoded & mask(0)) + table(1, recoded & mask(1)) + ...)\n+     * + 2*(table(0, (recoded/2) & mask(0)) + table(1, (recoded/2) & mask(1)) + ...)\n+     * + 4*(table(0, (recoded/4) & mask(0)) + table(1, (recoded/4) & mask(1)) + ...)\n+     * + ...\n+     * + 2^(COMB_SPACING-1)*(table(0, (recoded/2^(COMB_SPACING-1)) & mask(0)) + ...)\n+     * + ctx->ge_offset.\n+     *\n+     * This is implemented using an outer loop that runs in reverse order over the lines\n+     * of this equation, which in each iteration runs an inner loop that adds the terms\n+     * of that line and the doubles the result before proceeding to the next line.\n+     * In pseudocode:\n+     *   R = infinity\n+     *   for comb_off in range(COMB_SPACING - 1, -1, -1):\n+     *     for block in range(COMB_BLOCKS):\n+     *       R += table(block, (recoded >> comb_off) & mask(block))\n+     *     if comb_off > 0:\n+     *       R = 2*R\n+     *   R += ge_offset\n+     *   return R\n+     *\n+     * The last question is how to implement the table(b,m) function. For any value of\n+     * b, m=(recoded & mask(b)) can only take on at most 2^COMB_TEETH possible values\n+     * (the last one may have fewer as there mask(b) may the curve order). So we could\n+     * create COMB_BLOCK tables which contain a value for each such m value.\n+     *\n+     * Due to the fact that every table entry is a sum of positive and negative powers\n+     * of two multiplied by G, every table will contains pairs of negated points:\n+     * if all the masked bits in m flip, the table value is negated. We can exploit this\n+     * to only store the first half of every table. If an entry from the second half is\n+     * needed, we look up its bit-flipped version instead, and conditionally negate it.\n+     *\n+     * secp256k1_ecmult_gen_prec_table[b][index] stores the table(b,m) entries. Index\n+     * is the relevant bits of m packed together without gaps. */\n+\n+    /* Outer loop: iterate over comb_off from COMB_SPACING - 1 down to 0. */\n+    comb_off = COMB_SPACING - 1;\n+    while (1) {\n+        uint32_t block;\n+        uint32_t bit_pos = comb_off;\n+        /* Inner loop: for each block, add table entries to the result. */\n+        for (block = 0; block < COMB_BLOCKS; ++block) {\n+            /* Gather the mask(block)-selected bits of recoded into bits. They're packed\n+             * together: bit (tooth) of bits = bit\n+             * ((block*COMB_TEETH + tooth)*COMB_SPACING + comb_off) of recoded. */\n+            uint32_t bits = 0, sign, abs, index, tooth;\n+            for (tooth = 0; tooth < COMB_TEETH && bit_pos < 256; ++tooth) {\n+                uint32_t bit = secp256k1_scalar_get_bits(&recoded, bit_pos, 1);\n+                bits |= bit << tooth;\n+                bit_pos += COMB_SPACING;\n+            }",
      "path": "src/ecmult_gen_impl.h",
      "position": null,
      "original_position": 177,
      "commit_id": "dcc846f18518f77770b6a1fc9e39683c63685d39",
      "original_commit_id": "62601920bee3b57456a130d1c10a4e7fc08f3866",
      "in_reply_to_id": 1552052731,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "`src/ecmult_gen.h` has an `#error` for `COMB_TEETH > 8`. Should I repeat it?\r\n\r\nI've changed `secp256k1_scalar_get_bits` and friends to return `uint32_t`.",
      "created_at": "2024-04-05T13:44:46Z",
      "updated_at": "2024-04-05T13:44:46Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1058#discussion_r1553669190",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1553669190"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1058"
        }
      },
      "start_line": null,
      "original_start_line": 165,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 229,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1553674939",
      "pull_request_review_id": 1983238557,
      "id": 1553674939,
      "node_id": "PRRC_kwDOAP4Jqs5cmzK7",
      "diff_hunk": "@@ -358,19 +357,25 @@ case $set_ecmult_window in\n   ;;\n esac\n \n-# Set ecmult gen precision\n-if test x\"$req_ecmult_gen_precision\" = x\"auto\"; then\n-  set_ecmult_gen_precision=4\n+# Set ecmult gen kb\n+if test x\"$req_ecmult_gen_kb\" = x\"auto\"; then\n+  set_ecmult_gen_kb=22\n else\n-  set_ecmult_gen_precision=$req_ecmult_gen_precision\n+  set_ecmult_gen_kb=$req_ecmult_gen_kb\n fi\n \n-case $set_ecmult_gen_precision in\n-2|4|8)\n-  SECP_CONFIG_DEFINES=\"$SECP_CONFIG_DEFINES -DECMULT_GEN_PREC_BITS=$set_ecmult_gen_precision\"\n+case $set_ecmult_gen_kb in\n+2)\n+  SECP_CONFIG_DEFINES=\"$SECP_CONFIG_DEFINES -DCOMB_BLOCKS=2 -DCOMB_TEETH=5\"\n+  ;;\n+22)\n+  SECP_CONFIG_DEFINES=\"$SECP_CONFIG_DEFINES -DCOMB_BLOCKS=11 -DCOMB_TEETH=6\"\n+  ;;\n+86)\n+  SECP_CONFIG_DEFINES=\"$SECP_CONFIG_DEFINES -DCOMB_BLOCKS=43 -DCOMB_TEETH=6\"",
      "path": "configure.ac",
      "position": 45,
      "original_position": 45,
      "commit_id": "dcc846f18518f77770b6a1fc9e39683c63685d39",
      "original_commit_id": "556938cd27fc307795f4b5f10bbc98111f1d7bb0",
      "in_reply_to_id": 1553344364,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Let's leave this for a follow-up. I feel there is some discussion to be had about the interaction with precomputation etc.",
      "created_at": "2024-04-05T13:46:52Z",
      "updated_at": "2024-04-05T13:46:52Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1058#discussion_r1553674939",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1553674939"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1058"
        }
      },
      "start_line": 367,
      "original_start_line": 367,
      "start_side": "RIGHT",
      "line": 375,
      "original_line": 375,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1553675156",
      "pull_request_review_id": 1983238847,
      "id": 1553675156,
      "node_id": "PRRC_kwDOAP4Jqs5cmzOU",
      "diff_hunk": "@@ -46,16 +47,29 @@ int main(int argc, char **argv) {\n     fprintf(fp, \"#define S(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p) SECP256K1_GE_STORAGE_CONST(0x##a##u,0x##b##u,0x##c##u,0x##d##u,0x##e##u,0x##f##u,0x##g##u,0x##h##u,0x##i##u,0x##j##u,0x##k##u,0x##l##u,0x##m##u,0x##n##u,0x##o##u,0x##p##u)\\n\");\n     fprintf(fp, \"const secp256k1_ge_storage secp256k1_ecmult_gen_prec_table[COMB_BLOCKS][COMB_POINTS] = {\\n\");\n \n-    for (config = 0; config < sizeof(CONFIGS) / sizeof(*CONFIGS); ++config) {\n-        int blocks = CONFIGS[config][0];\n-        int teeth = CONFIGS[config][1];\n-        size_t points = ((size_t)1) << (teeth - 1);\n+    for (config = 0; config < sizeof(CONFIGS) / sizeof(*CONFIGS) + 1; ++config) {\n+        int blocks, teeth;\n+        size_t points;\n         int outer;\n         size_t inner;\n+        secp256k1_ge_storage* table;\n \n-        secp256k1_ge_storage* table = checked_malloc(&default_error_callback, blocks * points * sizeof(secp256k1_ge_storage));\n-        secp256k1_ecmult_gen_compute_table(table, &secp256k1_ge_const_g, blocks, teeth);\n+        if (config < sizeof(CONFIGS) / sizeof(*CONFIGS)) {\n+            /* In all but the last iteration, output the configurations in CONFIGS. */\n+            blocks = CONFIGS[config][0];\n+            teeth = CONFIGS[config][1];\n+            if (blocks == COMB_BLOCKS && teeth == COMB_TEETH) did_current_config = 1;\n+        } else {\n+            /* In the last iteration, output table for (COMB_BLOCKS, COMB_TEETH) if not\n+             * already done. */",
      "path": "src/precompute_ecmult_gen.c",
      "position": null,
      "original_position": 32,
      "commit_id": "dcc846f18518f77770b6a1fc9e39683c63685d39",
      "original_commit_id": "84f5ce761ced5da6c9332279ff491b139e1510c7",
      "in_reply_to_id": 1553317120,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done, much cleaner.",
      "created_at": "2024-04-05T13:47:00Z",
      "updated_at": "2024-04-05T13:47:00Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1058#discussion_r1553675156",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1553675156"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1058"
        }
      },
      "start_line": null,
      "original_start_line": 63,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 64,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1553675859",
      "pull_request_review_id": 1983239794,
      "id": 1553675859,
      "node_id": "PRRC_kwDOAP4Jqs5cmzZT",
      "diff_hunk": "@@ -29,38 +29,184 @@ static void secp256k1_ecmult_gen_context_clear(secp256k1_ecmult_gen_context *ctx\n     secp256k1_ge_clear(&ctx->ge_offset);\n }\n \n-/* For accelerating the computation of a*G:\n- * To harden against timing attacks, use the following mechanism:\n- * * Break up the multiplicand into groups of PREC_BITS bits, called n_0, n_1, n_2, ..., n_(PREC_N-1).\n- * * Compute sum(n_i * (PREC_G)^i * G + U_i, i=0 ... PREC_N-1), where:\n- *   * U_i = U * 2^i, for i=0 ... PREC_N-2\n- *   * U_i = U * (1-2^(PREC_N-1)), for i=PREC_N-1\n- *   where U is a point with no known corresponding scalar. Note that sum(U_i, i=0 ... PREC_N-1) = 0.\n- * For each i, and each of the PREC_G possible values of n_i, (n_i * (PREC_G)^i * G + U_i) is\n- * precomputed (call it prec(i, n_i)). The formula now becomes sum(prec(i, n_i), i=0 ... PREC_N-1).\n- * None of the resulting prec group elements have a known scalar, and neither do any of\n- * the intermediate sums while computing a*G.\n- * The prec values are stored in secp256k1_ecmult_gen_prec_table[i][n_i] = n_i * (PREC_G)^i * G + U_i.\n- */\n-static void secp256k1_ecmult_gen(const secp256k1_ecmult_gen_context *ctx, secp256k1_gej *r, const secp256k1_scalar *gn) {\n-    int bits = ECMULT_GEN_PREC_BITS;\n-    int g = ECMULT_GEN_PREC_G(bits);\n-    int n = ECMULT_GEN_PREC_N(bits);\n+/* Compute the scalar (2^COMB_BITS - 1) / 2. */\n+static void secp256k1_ecmult_gen_scalar_diff(secp256k1_scalar* diff) {\n+    int i;\n+\n+    /* Compute scalar -1/2. */\n+    secp256k1_scalar neghalf = SECP256K1_SCALAR_CONST(0, 0, 0, 0, 0, 0, 0, 2);\n+    secp256k1_scalar_inverse_var(&neghalf, &neghalf);\n+    secp256k1_scalar_negate(&neghalf, &neghalf);\n+\n+    /* Compute offset = 2^(COMB_BITS - 1). */\n+    secp256k1_scalar_set_int(diff, 1);\n+    for (i = 0; i < COMB_BITS - 1; ++i) {\n+        secp256k1_scalar_add(diff, diff, diff);\n+    }\n \n+    /* The result is the sum of 2^(COMB_BITS - 1) + (-1/2). */\n+    secp256k1_scalar_add(diff, diff, &neghalf);\n+}\n+\n+static void secp256k1_ecmult_gen(const secp256k1_ecmult_gen_context *ctx, secp256k1_gej *r, const secp256k1_scalar *gn) {\n+    uint32_t comb_off;\n     secp256k1_ge add;\n+    secp256k1_fe neg;\n     secp256k1_ge_storage adds;\n-    secp256k1_scalar gnb;\n-    int i, j, n_i;\n+    secp256k1_scalar d;\n \n     memset(&adds, 0, sizeof(adds));\n+\n+    /* We want to compute R = gn*G.\n+     *\n+     * To blind the scalar used in the computation, we rewrite this to be R = (gn-b)*G + b*G, with\n+     * a blinding value b determined by the context.\n+     *\n+     * The multiplication (gn-b)*G will be performed using a signed-digit multi-comb (see Section\n+     * 3.3 of \"Fast and compact elliptic-curve cryptography\" by Mike Hamburg,\n+     * https://eprint.iacr.org/2012/309).\n+     *\n+     * Let comb(s,P) = sum((2*s[i]-1)*2^i*P for i=0..COMB_BITS-1), where s[i] is the i'th bit of\n+     * the binary representation of scalar s. So the s[i] values determine whether -2^i*P (s[i]=0)\n+     * or +2^i*P (s[i]=1) are added together. COMB_BITS is at least 256, so all bits of s are\n+     * covered. By manipulating:\n+     *\n+     *     comb(s,P) = sum((2*s[i]-1)*2^i*P for i=0..COMB_BITS-1)\n+     * <=> comb(s,P) = sum((2*s[i]-1)*2^i for i=0..COMB_BITS-1) * P\n+     * <=> comb(s,P) = (2*sum(s[i]*2^i for i=0..COMB_BITS-1) - sum(2^i for i=0..COMB_BITS-1)) * P\n+     * <=> comb(s,P) = (2*s - (2^COMB_BITS - 1)) * P\n+     *\n+     * If we wanted to compute (gn-b)*G as comb(s,G), it would need to hold that\n+     *\n+     *     gn - b = 2*s - (2^COMB_BITS - 1), or\n+     * <=> s = (gn - b + (2^COMB_BITS - 1))/2 mod order.\n+     *\n+     * We use an alternative here that avoids the modular division by two; instead we compute\n+     * (gn-b)*G as comb(d,G/2). For that to hold it must be the case that\n+     *\n+     *     (gn-b)*G = (2*d - (2^COMB_BITS - 1)) * (G/2)\n+     * <=> d = (gn + (2^COMB_BITS - 1)/2 - b) mod order.\n+     *\n+     * -b is precomputed as ctx->scalar_offset, and b*G as ctx->ge_offset, so our final equations\n+     * become:\n+     *\n+     *     d = gn + ctx->scalar_offset + (2^COMB_BITS - 1)/2 (mod order)\n+     *     R = comb(d, G/2) + ctx->ge_offset.\n+     *\n+     * The comb function is computed by summing + or - 2^(i-1)*G, for i=0..COMB_BITS-1, depending\n+     * on the value of the bits d[i] of the binary representation of scalar d.\n+     */\n+\n+    /* Compute the scalar d = (gn + ctx->scalar_offset + (2^COMB_BITS - 1)/2). */\n+    secp256k1_ecmult_gen_scalar_diff(&d);\n+    secp256k1_scalar_add(&d, &d, &ctx->scalar_offset);\n+    secp256k1_scalar_add(&d, &d, gn);\n+\n+    /* In secp256k1_ecmult_gen_prec_table we have precomputed sums of the\n+     * (2*d[i]-1) * 2^(i-1) * G points, for various combinations of i positions.\n+     * We rewrite our equation in terms of these table entries.\n+     *\n+     * Let mask(b) = sum(2^((b*COMB_TEETH + t)*COMB_SPACING) for t=0..COMB_TEETH-1),\n+     * with b ranging from 0 to COMB_BLOCKS-1. So for example with COMB_BLOCKS=11,\n+     * COMB_TEETH=6, COMB_SPACING=4, we would have:\n+     *   mask(0)  = 2^0   + 2^4   + 2^8   + 2^12  + 2^16  + 2^20,\n+     *   mask(1)  = 2^24  + 2^28  + 2^32  + 2^36  + 2^40  + 2^44,\n+     *   mask(2)  = 2^48  + 2^52  + 2^56  + 2^60  + 2^64  + 2^68,\n+     *   ...\n+     *   mask(10) = 2^240 + 2^244 + 2^248 + 2^252 + 2^256 + 2^260\n+     *\n+     * We will split up the bits d[i] using these masks. Specifically, each mask is\n+     * used COMB_SPACING times, with different shifts:\n+     *\n+     * d = (d & mask(0)<<0) + (d & mask(1)<<0) + ... + (d & mask(COMB_BLOCKS-1)<<0) +\n+     *     (d & mask(0)<<1) + (d & mask(1)<<1) + ... + (d & mask(COMB_BLOCKS-1)<<1) +\n+     *     ...\n+     *     (d & mask(0)<<(COMB_SPACING-1)) + ...\n+     *\n+     * Now define table(b,m) = (m - mask(b)/2) * G, and we will precompute these values for\n+     * b=0..COMB_BLOCKS-1, and for all values m which d & mask(b) can take (so m can take on\n+     * 2^COMB_TEETH distinct values).\n+     *\n+     * If m=(d & mask(b)), then table(b,m) is the sum of 2^i*(2*d[i]-1)*G/2, with i\n+     * iterating over the set bits in mask(b). In our example, table(2, 2^48 + 2^56 + 2^68)\n+     * would equal (2^48 - 2^52 + 2^56 - 2^60 - 2^64 + 2^68) * G/2.\n+     *\n+     * With that, we can rewrite comb(d, G/2) as:\n+     *\n+     *     2^0 * (table(0, d>>0 & mask(0)) + ... + table(1, d>>0 & mask(COMP_BLOCKS-1)))\n+     *   + 2^1 * (table(0, d>>1 & mask(0)) + ... + table(1, d>>1 & mask(COMP_BLOCKS-1)))\n+     *   + 2^2 * (table(0, d>>2 & mask(0)) + ... + table(1, d>>2 & mask(COMP_BLOCKS-1)))\n+     *   + ...\n+     *   + 2^(COMB_SPACING-1) * (table(0, d>>(COMB_SPACING-1) & mask(0)) + ...)\n+     *\n+     * Or more generically as\n+     *\n+     *   sum(2^i * sum(table(b, d>>i & mask(b)), b=0..COMB_BLOCKS-1), i=0..COMB_SPACING-1)\n+     *\n+     * This is implemented using an outer loop that runs in reverse order over the lines of this\n+     * equation, which in each iteration runs an inner loop that adds the terms of that line and\n+     * then doubles the result before proceeding to the next line.\n+     *\n+     * In pseudocode:\n+     *   c = infinity\n+     *   for comb_off in range(COMB_SPACING - 1, -1, -1):\n+     *     for block in range(COMB_BLOCKS):\n+     *       c += table(block, (d >> comb_off) & mask(block))\n+     *     if comb_off > 0:\n+     *       c = 2*c\n+     *   return c\n+     *\n+     * This computes c = comb(d, G/2), and thus finally R = c + ctx->ge_offset. Note that it would\n+     * be possible to apply an initial offset instead of a final offset (moving ge_offset to take\n+     * the place of infinity above), but the chosen approach allows using (in a future improvement)\n+     * an incomplete addition formula for most of the multiplication.\n+     *\n+     * The last question is how to implement the table(b,m) function. For any value of b,\n+     * m=(d & mask(b)) can only take on at most 2^COMB_TEETH possible values (the last one may have\n+     * fewer as there mask(b) may exceed the curve order). So we could create COMB_BLOCK tables\n+     * which contain a value for each such m value.\n+     *\n+     * Now note that\n+     *\n+     *     table(b,m XOR mask(b))\n+     *   = table(b,mask(b) - m)\n+     *   = (mask(b) - m - mask(b)/2)*G\n+     *   = (-m - mask(b)/2)*G\n+     *   = -(m - mask(b)/2)*G\n+     *   = -table(b,m)\n+     *\n+     * Thus flipping all the (relevant) bits in m means negating the table result. Because of this",
      "path": "src/ecmult_gen_impl.h",
      "position": null,
      "original_position": 183,
      "commit_id": "dcc846f18518f77770b6a1fc9e39683c63685d39",
      "original_commit_id": "c30860aa26c6c4a42e359c227e0dab6f5aaa1aef",
      "in_reply_to_id": 1553284376,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Fixed, and made some more editorial changes.",
      "created_at": "2024-04-05T13:47:20Z",
      "updated_at": "2024-04-05T13:47:20Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1058#discussion_r1553675859",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1553675859"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1058"
        }
      },
      "start_line": null,
      "original_start_line": 169,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 178,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1553682675",
      "pull_request_review_id": 1983250091,
      "id": 1553682675,
      "node_id": "PRRC_kwDOAP4Jqs5cm1Dz",
      "diff_hunk": "@@ -29,38 +29,154 @@ static void secp256k1_ecmult_gen_context_clear(secp256k1_ecmult_gen_context *ctx\n     secp256k1_ge_clear(&ctx->ge_offset);\n }\n \n-/* For accelerating the computation of a*G:\n- * To harden against timing attacks, use the following mechanism:\n- * * Break up the multiplicand into groups of PREC_BITS bits, called n_0, n_1, n_2, ..., n_(PREC_N-1).\n- * * Compute sum(n_i * (PREC_G)^i * G + U_i, i=0 ... PREC_N-1), where:\n- *   * U_i = U * 2^i, for i=0 ... PREC_N-2\n- *   * U_i = U * (1-2^(PREC_N-1)), for i=PREC_N-1\n- *   where U is a point with no known corresponding scalar. Note that sum(U_i, i=0 ... PREC_N-1) = 0.\n- * For each i, and each of the PREC_G possible values of n_i, (n_i * (PREC_G)^i * G + U_i) is\n- * precomputed (call it prec(i, n_i)). The formula now becomes sum(prec(i, n_i), i=0 ... PREC_N-1).\n- * None of the resulting prec group elements have a known scalar, and neither do any of\n- * the intermediate sums while computing a*G.\n- * The prec values are stored in secp256k1_ecmult_gen_prec_table[i][n_i] = n_i * (PREC_G)^i * G + U_i.\n- */\n-static void secp256k1_ecmult_gen(const secp256k1_ecmult_gen_context *ctx, secp256k1_gej *r, const secp256k1_scalar *gn) {\n-    int bits = ECMULT_GEN_PREC_BITS;\n-    int g = ECMULT_GEN_PREC_G(bits);\n-    int n = ECMULT_GEN_PREC_N(bits);\n+/* Compute the scalar (2^COMB_BITS - 1) / 2. */\n+static void secp256k1_ecmult_gen_scalar_diff(secp256k1_scalar* diff) {\n+    int i;\n+\n+    /* Compute scalar -1/2. */\n+    secp256k1_scalar neghalf = SECP256K1_SCALAR_CONST(0, 0, 0, 0, 0, 0, 0, 2);\n+    secp256k1_scalar_inverse_var(&neghalf, &neghalf);\n+    secp256k1_scalar_negate(&neghalf, &neghalf);\n+\n+    /* Compute offset = 2^(COMB_BITS - 1). */\n+    secp256k1_scalar_set_int(diff, 1);\n+    for (i = 0; i < COMB_BITS - 1; ++i) {\n+        secp256k1_scalar_add(diff, diff, diff);\n+    }\n \n+    /* The result is the sum of 2^(COMB_BITS - 1) + (-1/2). */\n+    secp256k1_scalar_add(diff, diff, &neghalf);\n+}\n+\n+static void secp256k1_ecmult_gen(const secp256k1_ecmult_gen_context *ctx, secp256k1_gej *r, const secp256k1_scalar *gn) {\n+    uint32_t comb_off;\n     secp256k1_ge add;\n+    secp256k1_fe neg;\n     secp256k1_ge_storage adds;\n-    secp256k1_scalar gnb;\n-    int i, j, n_i;\n+    secp256k1_scalar recoded;\n \n     memset(&adds, 0, sizeof(adds));\n     secp256k1_gej_set_infinity(r);\n \n-    /* Blind scalar/point multiplication by computing (gn-b)*G + b*G instead of gn*G. */\n-    secp256k1_scalar_add(&gnb, gn, &ctx->scalar_offset);\n+    /* We want to compute R = gn*G.\n+     *\n+     * To blind the scalar used in the computation, we rewrite this to be R = (gn-b)*G + b*G, with\n+     * a value b determined by the context. b*G is precomputed as ctx->ge_offset, so we're\n+     * left with computing R = (gn-b)*G + ctx->ge_offset.\n+     *\n+     * The multiplication (gn-b)*G will be performed using a signed-digit multi-comb (see Section\n+     * 3.3 of \"Fast and compact elliptic-curve cryptography\" by Mike Hamburg\n+     * (https://eprint.iacr.org/2012/309).\n+     *\n+     * Let comb(s,P) = sum((2*s_i-1)*2^i*P for i=0..COMB_BITS-1), where s_i is the i'th bit of the\n+     * binary representation of scalar s. So the s_i values determine whether -2^i*P (s_i=0) or\n+     * +2^i*P (s_1) are added together. By manipulating:\n+     *\n+     *     comb(s,P) = sum((2*s_i-1)*2^i*P for i=0..COMB_BITS-1)\n+     * <=> comb(s,P) = sum((2*s_i-1)*2^i for i=0..COMB_BITS-1) * P\n+     * <=> comb(s,P) = (2*sum(s_i*2^i for i=0..COMB_BITS-1) - sum(2^i for i=0..COMB_BITS-1)) * P\n+     * <=> comb(s,P) = (2*s - (2^COMB_BITS - 1)) * P\n+     *\n+     * Thus (gn-b)*G can be written as comb(s,G) if gn-b = 2*s - (2^COMB_BITS - 1), or\n+     * s = (gn - b + (2^COMB_BITS - 1))/2 mod order.\n+     *\n+     * We use an alternative that avoids the modular division by two: we write (gn-b)*G =\n+     * comb(d,G/2). For that to hold it must be the case that\n+     * (gn-b)*G = (2*d - (2^COMB_BITS - 1)) * (G/2), or\n+     * d = (gn + (2^COMB_BITS - 1)/2 - b) mod order.\n+     *\n+     * -b is precomputed as ctx->scalar_offset, so our final equations become:\n+     *\n+     *   d = gn + ctx->scalar_offset + (2^COMB_BITS - 1)/2 (mod order)\n+     *   R = comb(d, G/2) + ctx->ge_offset.\n+     *\n+     * The comb function is computed by summing + or - 2^(i-1)*G, for i=0..COMB_BITS-1, depending\n+     * on the value of the bits d_i of the binary representation of scalar d.\n+     */\n+\n+    /* Compute the scalar (gn + ctx->scalar_offset + (2^COMB_BITS - 1)/2). */\n+    secp256k1_ecmult_gen_scalar_diff(&recoded);\n+    secp256k1_scalar_add(&recoded, &recoded, &ctx->scalar_offset);\n+    secp256k1_scalar_add(&recoded, &recoded, gn);\n+\n+    /* In secp256k1_ecmult_gen_prec_table we have precomputed sums of the\n+     * (2*d_i-1) * 2^(i-1) * G points, for various combinations of i positions.\n+     * We rewrite our equation in terms of these table entries.\n+     *\n+     * Let mask(b) = sum(2^((b*COMB_TEETH + t)*COMB_SPACING) for t=0..COMB_TEETH-1),\n+     * with b ranging from 0 to COMB_BLOCKS-1. So for example with COMB_BLOCKS=11,\n+     * COMB_TEETH=6, COMB_SPACING=4, we would have:\n+     *   mask(0)  = 2^0   + 2^4   + 2^8   + 2^12  + 2^16  + 2^20,\n+     *   mask(1)  = 2^24  + 2^28  + 2^32  + 2^36  + 2^40  + 2^44,\n+     *   mask(2)  = 2^48  + 2^52  + 2^56  + 2^60  + 2^64  + 2^68,\n+     *   ...\n+     *   mask(10) = 2^240 + 2^244 + 2^248 + 2^252 + 2^256 + 2^260\n+     *\n+     * Imagine we have a table(b,m) function which can look up, given b and\n+     * m=(recoded & mask(b)), the sum of (2*d_i-1)*2^(i-1)*G for all bit positions\n+     * i set in mask(b). In our example, table(0, 1 + 2^8 + 2^20) would be equal to\n+     * (2^-1 - 2^3 + 2^7 - 2^11 - 2^15 + 2^19)*G.\n+     *\n+     * With that, we can rewrite R as:\n+     *   1*(table(0, recoded & mask(0)) + table(1, recoded & mask(1)) + ...)\n+     * + 2*(table(0, (recoded/2) & mask(0)) + table(1, (recoded/2) & mask(1)) + ...)\n+     * + 4*(table(0, (recoded/4) & mask(0)) + table(1, (recoded/4) & mask(1)) + ...)\n+     * + ...\n+     * + 2^(COMB_SPACING-1)*(table(0, (recoded/2^(COMB_SPACING-1)) & mask(0)) + ...)\n+     * + ctx->ge_offset.\n+     *\n+     * This is implemented using an outer loop that runs in reverse order over the lines\n+     * of this equation, which in each iteration runs an inner loop that adds the terms\n+     * of that line and the doubles the result before proceeding to the next line.\n+     * In pseudocode:\n+     *   R = infinity\n+     *   for comb_off in range(COMB_SPACING - 1, -1, -1):\n+     *     for block in range(COMB_BLOCKS):\n+     *       R += table(block, (recoded >> comb_off) & mask(block))\n+     *     if comb_off > 0:\n+     *       R = 2*R\n+     *   R += ge_offset\n+     *   return R\n+     *\n+     * The last question is how to implement the table(b,m) function. For any value of\n+     * b, m=(recoded & mask(b)) can only take on at most 2^COMB_TEETH possible values\n+     * (the last one may have fewer as there mask(b) may the curve order). So we could\n+     * create COMB_BLOCK tables which contain a value for each such m value.",
      "path": "src/ecmult_gen_impl.h",
      "position": null,
      "original_position": 151,
      "commit_id": "dcc846f18518f77770b6a1fc9e39683c63685d39",
      "original_commit_id": "62601920bee3b57456a130d1c10a4e7fc08f3866",
      "in_reply_to_id": 1552033780,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Fixed.",
      "created_at": "2024-04-05T13:51:47Z",
      "updated_at": "2024-04-05T13:51:47Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1058#discussion_r1553682675",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1553682675"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1058"
        }
      },
      "start_line": null,
      "original_start_line": 141,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 144,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1553683749",
      "pull_request_review_id": 1983251244,
      "id": 1553683749,
      "node_id": "PRRC_kwDOAP4Jqs5cm1Ul",
      "diff_hunk": "@@ -29,38 +29,154 @@ static void secp256k1_ecmult_gen_context_clear(secp256k1_ecmult_gen_context *ctx\n     secp256k1_ge_clear(&ctx->ge_offset);\n }\n \n-/* For accelerating the computation of a*G:\n- * To harden against timing attacks, use the following mechanism:\n- * * Break up the multiplicand into groups of PREC_BITS bits, called n_0, n_1, n_2, ..., n_(PREC_N-1).\n- * * Compute sum(n_i * (PREC_G)^i * G + U_i, i=0 ... PREC_N-1), where:\n- *   * U_i = U * 2^i, for i=0 ... PREC_N-2\n- *   * U_i = U * (1-2^(PREC_N-1)), for i=PREC_N-1\n- *   where U is a point with no known corresponding scalar. Note that sum(U_i, i=0 ... PREC_N-1) = 0.\n- * For each i, and each of the PREC_G possible values of n_i, (n_i * (PREC_G)^i * G + U_i) is\n- * precomputed (call it prec(i, n_i)). The formula now becomes sum(prec(i, n_i), i=0 ... PREC_N-1).\n- * None of the resulting prec group elements have a known scalar, and neither do any of\n- * the intermediate sums while computing a*G.\n- * The prec values are stored in secp256k1_ecmult_gen_prec_table[i][n_i] = n_i * (PREC_G)^i * G + U_i.\n- */\n-static void secp256k1_ecmult_gen(const secp256k1_ecmult_gen_context *ctx, secp256k1_gej *r, const secp256k1_scalar *gn) {\n-    int bits = ECMULT_GEN_PREC_BITS;\n-    int g = ECMULT_GEN_PREC_G(bits);\n-    int n = ECMULT_GEN_PREC_N(bits);\n+/* Compute the scalar (2^COMB_BITS - 1) / 2. */\n+static void secp256k1_ecmult_gen_scalar_diff(secp256k1_scalar* diff) {",
      "path": "src/ecmult_gen_impl.h",
      "position": 38,
      "original_position": 36,
      "commit_id": "dcc846f18518f77770b6a1fc9e39683c63685d39",
      "original_commit_id": "62601920bee3b57456a130d1c10a4e7fc08f3866",
      "in_reply_to_id": 1551959311,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done.",
      "created_at": "2024-04-05T13:52:01Z",
      "updated_at": "2024-04-05T13:52:01Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1058#discussion_r1553683749",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1553683749"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1058"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 36,
      "original_line": 36,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1553714975",
      "pull_request_review_id": 1982888494,
      "id": 1553714975,
      "node_id": "PRRC_kwDOAP4Jqs5cm88f",
      "diff_hunk": "@@ -200,8 +200,15 @@ static void secp256k1_ecmult_gen(const secp256k1_ecmult_gen_context *ctx, secp25\n              * ((block*COMB_TEETH + tooth)*COMB_SPACING + comb_off) of d. */\n             uint32_t bits = 0, sign, abs, index, tooth;\n             for (tooth = 0; tooth < COMB_TEETH; ++tooth) {\n-                uint32_t bit = (recoded[bit_pos >> 5] >> (bit_pos & 0x1f)) & 1;\n-                bits |= bit << tooth;\n+                /* Instead of reading individual bits here to construct bits, build up\n+                 * the result by xoring shifted reads together. In every iteration, one\n+                 * additional bit is made correct, starting at the bottom. The bits\n+                 * above that contain junk. This reduces leakage from single bits. See\n+                 * https://www.usenix.org/system/files/conference/usenixsecurity18/sec18-alam.pdf\n+                 */\n+                uint32_t bitdata = recoded[bit_pos >> 5] >> (bit_pos & 0x1f);\n+                bits &= ~(1 << tooth);\n+                bits ^= bitdata << tooth;",
      "path": "src/ecmult_gen_impl.h",
      "position": null,
      "original_position": 14,
      "commit_id": "dcc846f18518f77770b6a1fc9e39683c63685d39",
      "original_commit_id": "b71105dd4fda60c64d4eb3bd5cb0bed5baf1c084",
      "in_reply_to_id": null,
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Hm, this is difficult to analyze and review. \r\n\r\nIf `(bit_pos & 0x1f)` happens to be 31, we still extract a single bit. Could it help to ensure that there's always some junk in the high bits of `bitdata`? (Not sure what's the best way to achieve this.)\r\n\r\n--\r\nAlso, compilers are not helpful here: gcc keeps the xor, but clang 17.0.6 manages to move the xor out of the loop and replace by a mov.\r\n\r\nTo inspect this, try `objdump-nice .libs/libsecp256k1.so | less` and search for `bitdata`, where `objdump-nice` is a shell alias for `objdump --disassemble --wide --debugging --line-numbers --source-comment --visualize-jumps=extended-color --disassembler-options=intel --no-show-raw-insn --no-addresses`\r\n\r\n`volatile` helps, but I'm not convinced:\r\n - `bits = *((volatile uint32_t*)&bits) ^ (bitdata << tooth);` keeps the xor, but moves `bits` from a register to memory. Not sure if this better in terms of leakage.\r\n - `bits ^= bitdata << *((volatile uint32_t*)&tooth);` also keeps the xor. This moves `tooth` to memory and prevents clang from unrolling the loop. \r\n\r\n--\r\n\r\nBy the way, the mitigation in OpenSSL is https://github.com/openssl/openssl/pull/6276, but looking at that commit doesn't seem particularly helpful in our case. ",
      "created_at": "2024-04-05T14:01:31Z",
      "updated_at": "2024-04-05T14:01:48Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1058#discussion_r1553714975",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1553714975"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1058"
        }
      },
      "start_line": null,
      "original_start_line": 202,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 227,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1553720605",
      "pull_request_review_id": 1983301197,
      "id": 1553720605,
      "node_id": "PRRC_kwDOAP4Jqs5cm-Ud",
      "diff_hunk": "@@ -29,38 +29,154 @@ static void secp256k1_ecmult_gen_context_clear(secp256k1_ecmult_gen_context *ctx\n     secp256k1_ge_clear(&ctx->ge_offset);\n }\n \n-/* For accelerating the computation of a*G:\n- * To harden against timing attacks, use the following mechanism:\n- * * Break up the multiplicand into groups of PREC_BITS bits, called n_0, n_1, n_2, ..., n_(PREC_N-1).\n- * * Compute sum(n_i * (PREC_G)^i * G + U_i, i=0 ... PREC_N-1), where:\n- *   * U_i = U * 2^i, for i=0 ... PREC_N-2\n- *   * U_i = U * (1-2^(PREC_N-1)), for i=PREC_N-1\n- *   where U is a point with no known corresponding scalar. Note that sum(U_i, i=0 ... PREC_N-1) = 0.\n- * For each i, and each of the PREC_G possible values of n_i, (n_i * (PREC_G)^i * G + U_i) is\n- * precomputed (call it prec(i, n_i)). The formula now becomes sum(prec(i, n_i), i=0 ... PREC_N-1).\n- * None of the resulting prec group elements have a known scalar, and neither do any of\n- * the intermediate sums while computing a*G.\n- * The prec values are stored in secp256k1_ecmult_gen_prec_table[i][n_i] = n_i * (PREC_G)^i * G + U_i.\n- */\n-static void secp256k1_ecmult_gen(const secp256k1_ecmult_gen_context *ctx, secp256k1_gej *r, const secp256k1_scalar *gn) {\n-    int bits = ECMULT_GEN_PREC_BITS;\n-    int g = ECMULT_GEN_PREC_G(bits);\n-    int n = ECMULT_GEN_PREC_N(bits);\n+/* Compute the scalar (2^COMB_BITS - 1) / 2. */\n+static void secp256k1_ecmult_gen_scalar_diff(secp256k1_scalar* diff) {\n+    int i;\n+\n+    /* Compute scalar -1/2. */\n+    secp256k1_scalar neghalf = SECP256K1_SCALAR_CONST(0, 0, 0, 0, 0, 0, 0, 2);\n+    secp256k1_scalar_inverse_var(&neghalf, &neghalf);\n+    secp256k1_scalar_negate(&neghalf, &neghalf);\n+\n+    /* Compute offset = 2^(COMB_BITS - 1). */\n+    secp256k1_scalar_set_int(diff, 1);\n+    for (i = 0; i < COMB_BITS - 1; ++i) {\n+        secp256k1_scalar_add(diff, diff, diff);\n+    }\n \n+    /* The result is the sum of 2^(COMB_BITS - 1) + (-1/2). */\n+    secp256k1_scalar_add(diff, diff, &neghalf);\n+}\n+\n+static void secp256k1_ecmult_gen(const secp256k1_ecmult_gen_context *ctx, secp256k1_gej *r, const secp256k1_scalar *gn) {\n+    uint32_t comb_off;\n     secp256k1_ge add;\n+    secp256k1_fe neg;\n     secp256k1_ge_storage adds;\n-    secp256k1_scalar gnb;\n-    int i, j, n_i;\n+    secp256k1_scalar recoded;\n \n     memset(&adds, 0, sizeof(adds));\n     secp256k1_gej_set_infinity(r);\n \n-    /* Blind scalar/point multiplication by computing (gn-b)*G + b*G instead of gn*G. */\n-    secp256k1_scalar_add(&gnb, gn, &ctx->scalar_offset);\n+    /* We want to compute R = gn*G.\n+     *\n+     * To blind the scalar used in the computation, we rewrite this to be R = (gn-b)*G + b*G, with\n+     * a value b determined by the context. b*G is precomputed as ctx->ge_offset, so we're\n+     * left with computing R = (gn-b)*G + ctx->ge_offset.\n+     *\n+     * The multiplication (gn-b)*G will be performed using a signed-digit multi-comb (see Section\n+     * 3.3 of \"Fast and compact elliptic-curve cryptography\" by Mike Hamburg\n+     * (https://eprint.iacr.org/2012/309).\n+     *\n+     * Let comb(s,P) = sum((2*s_i-1)*2^i*P for i=0..COMB_BITS-1), where s_i is the i'th bit of the\n+     * binary representation of scalar s. So the s_i values determine whether -2^i*P (s_i=0) or\n+     * +2^i*P (s_1) are added together. By manipulating:\n+     *\n+     *     comb(s,P) = sum((2*s_i-1)*2^i*P for i=0..COMB_BITS-1)\n+     * <=> comb(s,P) = sum((2*s_i-1)*2^i for i=0..COMB_BITS-1) * P\n+     * <=> comb(s,P) = (2*sum(s_i*2^i for i=0..COMB_BITS-1) - sum(2^i for i=0..COMB_BITS-1)) * P\n+     * <=> comb(s,P) = (2*s - (2^COMB_BITS - 1)) * P\n+     *\n+     * Thus (gn-b)*G can be written as comb(s,G) if gn-b = 2*s - (2^COMB_BITS - 1), or\n+     * s = (gn - b + (2^COMB_BITS - 1))/2 mod order.\n+     *\n+     * We use an alternative that avoids the modular division by two: we write (gn-b)*G =\n+     * comb(d,G/2). For that to hold it must be the case that\n+     * (gn-b)*G = (2*d - (2^COMB_BITS - 1)) * (G/2), or\n+     * d = (gn + (2^COMB_BITS - 1)/2 - b) mod order.\n+     *\n+     * -b is precomputed as ctx->scalar_offset, so our final equations become:\n+     *\n+     *   d = gn + ctx->scalar_offset + (2^COMB_BITS - 1)/2 (mod order)\n+     *   R = comb(d, G/2) + ctx->ge_offset.\n+     *\n+     * The comb function is computed by summing + or - 2^(i-1)*G, for i=0..COMB_BITS-1, depending\n+     * on the value of the bits d_i of the binary representation of scalar d.\n+     */\n+\n+    /* Compute the scalar (gn + ctx->scalar_offset + (2^COMB_BITS - 1)/2). */\n+    secp256k1_ecmult_gen_scalar_diff(&recoded);\n+    secp256k1_scalar_add(&recoded, &recoded, &ctx->scalar_offset);\n+    secp256k1_scalar_add(&recoded, &recoded, gn);\n+\n+    /* In secp256k1_ecmult_gen_prec_table we have precomputed sums of the\n+     * (2*d_i-1) * 2^(i-1) * G points, for various combinations of i positions.\n+     * We rewrite our equation in terms of these table entries.\n+     *\n+     * Let mask(b) = sum(2^((b*COMB_TEETH + t)*COMB_SPACING) for t=0..COMB_TEETH-1),\n+     * with b ranging from 0 to COMB_BLOCKS-1. So for example with COMB_BLOCKS=11,\n+     * COMB_TEETH=6, COMB_SPACING=4, we would have:\n+     *   mask(0)  = 2^0   + 2^4   + 2^8   + 2^12  + 2^16  + 2^20,\n+     *   mask(1)  = 2^24  + 2^28  + 2^32  + 2^36  + 2^40  + 2^44,\n+     *   mask(2)  = 2^48  + 2^52  + 2^56  + 2^60  + 2^64  + 2^68,\n+     *   ...\n+     *   mask(10) = 2^240 + 2^244 + 2^248 + 2^252 + 2^256 + 2^260\n+     *\n+     * Imagine we have a table(b,m) function which can look up, given b and\n+     * m=(recoded & mask(b)), the sum of (2*d_i-1)*2^(i-1)*G for all bit positions\n+     * i set in mask(b). In our example, table(0, 1 + 2^8 + 2^20) would be equal to\n+     * (2^-1 - 2^3 + 2^7 - 2^11 - 2^15 + 2^19)*G.\n+     *\n+     * With that, we can rewrite R as:\n+     *   1*(table(0, recoded & mask(0)) + table(1, recoded & mask(1)) + ...)\n+     * + 2*(table(0, (recoded/2) & mask(0)) + table(1, (recoded/2) & mask(1)) + ...)\n+     * + 4*(table(0, (recoded/4) & mask(0)) + table(1, (recoded/4) & mask(1)) + ...)\n+     * + ...\n+     * + 2^(COMB_SPACING-1)*(table(0, (recoded/2^(COMB_SPACING-1)) & mask(0)) + ...)\n+     * + ctx->ge_offset.\n+     *\n+     * This is implemented using an outer loop that runs in reverse order over the lines\n+     * of this equation, which in each iteration runs an inner loop that adds the terms\n+     * of that line and the doubles the result before proceeding to the next line.\n+     * In pseudocode:\n+     *   R = infinity\n+     *   for comb_off in range(COMB_SPACING - 1, -1, -1):\n+     *     for block in range(COMB_BLOCKS):\n+     *       R += table(block, (recoded >> comb_off) & mask(block))\n+     *     if comb_off > 0:\n+     *       R = 2*R\n+     *   R += ge_offset\n+     *   return R\n+     *\n+     * The last question is how to implement the table(b,m) function. For any value of\n+     * b, m=(recoded & mask(b)) can only take on at most 2^COMB_TEETH possible values\n+     * (the last one may have fewer as there mask(b) may the curve order). So we could\n+     * create COMB_BLOCK tables which contain a value for each such m value.\n+     *\n+     * Due to the fact that every table entry is a sum of positive and negative powers\n+     * of two multiplied by G, every table will contains pairs of negated points:\n+     * if all the masked bits in m flip, the table value is negated. We can exploit this\n+     * to only store the first half of every table. If an entry from the second half is\n+     * needed, we look up its bit-flipped version instead, and conditionally negate it.\n+     *\n+     * secp256k1_ecmult_gen_prec_table[b][index] stores the table(b,m) entries. Index\n+     * is the relevant bits of m packed together without gaps. */\n+\n+    /* Outer loop: iterate over comb_off from COMB_SPACING - 1 down to 0. */\n+    comb_off = COMB_SPACING - 1;\n+    while (1) {\n+        uint32_t block;\n+        uint32_t bit_pos = comb_off;\n+        /* Inner loop: for each block, add table entries to the result. */\n+        for (block = 0; block < COMB_BLOCKS; ++block) {\n+            /* Gather the mask(block)-selected bits of recoded into bits. They're packed\n+             * together: bit (tooth) of bits = bit\n+             * ((block*COMB_TEETH + tooth)*COMB_SPACING + comb_off) of recoded. */\n+            uint32_t bits = 0, sign, abs, index, tooth;\n+            for (tooth = 0; tooth < COMB_TEETH && bit_pos < 256; ++tooth) {\n+                uint32_t bit = secp256k1_scalar_get_bits(&recoded, bit_pos, 1);\n+                bits |= bit << tooth;\n+                bit_pos += COMB_SPACING;\n+            }",
      "path": "src/ecmult_gen_impl.h",
      "position": null,
      "original_position": 177,
      "commit_id": "dcc846f18518f77770b6a1fc9e39683c63685d39",
      "original_commit_id": "62601920bee3b57456a130d1c10a4e7fc08f3866",
      "in_reply_to_id": 1552052731,
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> `src/ecmult_gen.h` has an `#error` for `COMB_TEETH > 8`. Should I repeat it?\r\n\r\nNever mind, the code is anyway replaced in later commits, so no need to bother.",
      "created_at": "2024-04-05T14:04:44Z",
      "updated_at": "2024-04-05T14:04:44Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1058#discussion_r1553720605",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1553720605"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1058"
        }
      },
      "start_line": null,
      "original_start_line": 165,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 229,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1553722376",
      "pull_request_review_id": 1983303348,
      "id": 1553722376,
      "node_id": "PRRC_kwDOAP4Jqs5cm-wI",
      "diff_hunk": "@@ -358,19 +357,25 @@ case $set_ecmult_window in\n   ;;\n esac\n \n-# Set ecmult gen precision\n-if test x\"$req_ecmult_gen_precision\" = x\"auto\"; then\n-  set_ecmult_gen_precision=4\n+# Set ecmult gen kb\n+if test x\"$req_ecmult_gen_kb\" = x\"auto\"; then\n+  set_ecmult_gen_kb=22\n else\n-  set_ecmult_gen_precision=$req_ecmult_gen_precision\n+  set_ecmult_gen_kb=$req_ecmult_gen_kb\n fi\n \n-case $set_ecmult_gen_precision in\n-2|4|8)\n-  SECP_CONFIG_DEFINES=\"$SECP_CONFIG_DEFINES -DECMULT_GEN_PREC_BITS=$set_ecmult_gen_precision\"\n+case $set_ecmult_gen_kb in\n+2)\n+  SECP_CONFIG_DEFINES=\"$SECP_CONFIG_DEFINES -DCOMB_BLOCKS=2 -DCOMB_TEETH=5\"\n+  ;;\n+22)\n+  SECP_CONFIG_DEFINES=\"$SECP_CONFIG_DEFINES -DCOMB_BLOCKS=11 -DCOMB_TEETH=6\"\n+  ;;\n+86)\n+  SECP_CONFIG_DEFINES=\"$SECP_CONFIG_DEFINES -DCOMB_BLOCKS=43 -DCOMB_TEETH=6\"",
      "path": "configure.ac",
      "position": 45,
      "original_position": 45,
      "commit_id": "dcc846f18518f77770b6a1fc9e39683c63685d39",
      "original_commit_id": "556938cd27fc307795f4b5f10bbc98111f1d7bb0",
      "in_reply_to_id": 1553344364,
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Makes sense, let me leave a link to https://github.com/bitcoin-core/secp256k1/issues/189 here, just as a reminder.\r\n\r\nedit: I took the freedom to unresolve this conversation, as a reminder for follow-ups.",
      "created_at": "2024-04-05T14:05:41Z",
      "updated_at": "2024-04-05T17:35:03Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1058#discussion_r1553722376",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1553722376"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1058"
        }
      },
      "start_line": 367,
      "original_start_line": 367,
      "start_side": "RIGHT",
      "line": 375,
      "original_line": 375,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1553725347",
      "pull_request_review_id": 1983307204,
      "id": 1553725347,
      "node_id": "PRRC_kwDOAP4Jqs5cm_ej",
      "diff_hunk": "@@ -200,8 +200,15 @@ static void secp256k1_ecmult_gen(const secp256k1_ecmult_gen_context *ctx, secp25\n              * ((block*COMB_TEETH + tooth)*COMB_SPACING + comb_off) of d. */\n             uint32_t bits = 0, sign, abs, index, tooth;\n             for (tooth = 0; tooth < COMB_TEETH; ++tooth) {\n-                uint32_t bit = (recoded[bit_pos >> 5] >> (bit_pos & 0x1f)) & 1;\n-                bits |= bit << tooth;\n+                /* Instead of reading individual bits here to construct bits, build up\n+                 * the result by xoring shifted reads together. In every iteration, one\n+                 * additional bit is made correct, starting at the bottom. The bits\n+                 * above that contain junk. This reduces leakage from single bits. See\n+                 * https://www.usenix.org/system/files/conference/usenixsecurity18/sec18-alam.pdf\n+                 */\n+                uint32_t bitdata = recoded[bit_pos >> 5] >> (bit_pos & 0x1f);\n+                bits &= ~(1 << tooth);\n+                bits ^= bitdata << tooth;",
      "path": "src/ecmult_gen_impl.h",
      "position": null,
      "original_position": 14,
      "commit_id": "dcc846f18518f77770b6a1fc9e39683c63685d39",
      "original_commit_id": "b71105dd4fda60c64d4eb3bd5cb0bed5baf1c084",
      "in_reply_to_id": 1553714975,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I admit that I never actually analyzed how much this mitigation does. I'm ok just dropping it.",
      "created_at": "2024-04-05T14:07:11Z",
      "updated_at": "2024-04-05T14:07:11Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1058#discussion_r1553725347",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1553725347"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1058"
        }
      },
      "start_line": null,
      "original_start_line": 202,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 227,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1553739485",
      "pull_request_review_id": 1983329506,
      "id": 1553739485,
      "node_id": "PRRC_kwDOAP4Jqs5cnC7d",
      "diff_hunk": "@@ -5602,9 +5602,29 @@ static void test_ecmult_gen_blind_reset(void) {\n     CHECK(secp256k1_ge_eq_var(&p1, &p2));\n }\n \n+/* Verify that ecmult_gen for scalars gn for which gn + scalar_offset = {-1,0,1}. */\n+static void test_ecmult_gen_edge_cases(void) {\n+    int i;\n+    secp256k1_gej res1, res2;\n+    secp256k1_scalar gn = secp256k1_scalar_one; /* gn = 1 */\n+    secp256k1_scalar_add(&gn, &gn, &CTX->ecmult_gen_ctx.scalar_offset); /* gn = 1 + scalar_offset */\n+    secp256k1_scalar_negate(&gn, &gn); /* gn = -1 - scalar_offset */\n+\n+    for (i = -1; i < 2; ++i) {\n+        /* Run test with gn = i - scalar_offset (so that the ecmult_gen recoded value represents i). */\n+        secp256k1_ecmult_gen(&CTX->ecmult_gen_ctx, &res1, &gn);\n+        secp256k1_ecmult(&res2, NULL, &secp256k1_scalar_zero, &gn);\n+        secp256k1_gej_neg(&res2, &res2);\n+        secp256k1_gej_add_var(&res1, &res1, &res2, NULL);\n+        CHECK(secp256k1_gej_is_infinity(&res1));",
      "path": "src/tests.c",
      "position": null,
      "original_position": 18,
      "commit_id": "dcc846f18518f77770b6a1fc9e39683c63685d39",
      "original_commit_id": "8ec3b9f0eb78945b561e5f839d2b35d65c74bd9d",
      "in_reply_to_id": null,
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: use `secp256k1_gej_eq_var` instead",
      "created_at": "2024-04-05T14:16:41Z",
      "updated_at": "2024-04-05T16:57:44Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1058#discussion_r1553739485",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1553739485"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1058"
        }
      },
      "start_line": null,
      "original_start_line": 5617,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 5619,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1553745075",
      "pull_request_review_id": 1983329506,
      "id": 1553745075,
      "node_id": "PRRC_kwDOAP4Jqs5cnESz",
      "diff_hunk": "@@ -5602,9 +5602,29 @@ static void test_ecmult_gen_blind_reset(void) {\n     CHECK(secp256k1_ge_eq_var(&p1, &p2));\n }\n \n+/* Verify that ecmult_gen for scalars gn for which gn + scalar_offset = {-1,0,1}. */\n+static void test_ecmult_gen_edge_cases(void) {\n+    int i;\n+    secp256k1_gej res1, res2;\n+    secp256k1_scalar gn = secp256k1_scalar_one; /* gn = 1 */\n+    secp256k1_scalar_add(&gn, &gn, &CTX->ecmult_gen_ctx.scalar_offset); /* gn = 1 + scalar_offset */\n+    secp256k1_scalar_negate(&gn, &gn); /* gn = -1 - scalar_offset */\n+\n+    for (i = -1; i < 2; ++i) {\n+        /* Run test with gn = i - scalar_offset (so that the ecmult_gen recoded value represents i). */\n+        secp256k1_ecmult_gen(&CTX->ecmult_gen_ctx, &res1, &gn);\n+        secp256k1_ecmult(&res2, NULL, &secp256k1_scalar_zero, &gn);",
      "path": "src/tests.c",
      "position": 77,
      "original_position": 15,
      "commit_id": "dcc846f18518f77770b6a1fc9e39683c63685d39",
      "original_commit_id": "8ec3b9f0eb78945b561e5f839d2b35d65c74bd9d",
      "in_reply_to_id": null,
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: Add `secp256k1_ecmult_const(&res3, &secp256k1_ge_const_g, &gn);` ?\r\n",
      "created_at": "2024-04-05T14:20:32Z",
      "updated_at": "2024-04-05T16:57:44Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1058#discussion_r1553745075",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1553745075"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1058"
        }
      },
      "start_line": 5614,
      "original_start_line": 5614,
      "start_side": "RIGHT",
      "line": 5616,
      "original_line": 5616,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1554003316",
      "pull_request_review_id": 1983329506,
      "id": 1554003316,
      "node_id": "PRRC_kwDOAP4Jqs5coDV0",
      "diff_hunk": "@@ -85,6 +84,7 @@ static void secp256k1_ecmult_gen_compute_table(secp256k1_ge_storage* table, cons\n     for (block = 0; block < blocks; ++block) {\n         size_t index;\n         for (index = 0; index < points; ++index) {\n+            CHECK(!secp256k1_ge_is_infinity(&prec[block * points + index]));",
      "path": "src/ecmult_gen_compute_table_impl.h",
      "position": null,
      "original_position": 16,
      "commit_id": "dcc846f18518f77770b6a1fc9e39683c63685d39",
      "original_commit_id": "0b8deaac023d5fc963457a3e812902143fbf77d4",
      "in_reply_to_id": null,
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "note: the precompute binaries are built with `-DVERIFY` (but it can't be wrong to keep this here, I guess) ",
      "created_at": "2024-04-05T16:56:43Z",
      "updated_at": "2024-04-05T16:59:22Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1058#discussion_r1554003316",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1554003316"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1058"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 87,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1554010395",
      "pull_request_review_id": 1983732504,
      "id": 1554010395,
      "node_id": "PRRC_kwDOAP4Jqs5coFEb",
      "diff_hunk": "@@ -25,41 +25,201 @@ static int secp256k1_ecmult_gen_context_is_built(const secp256k1_ecmult_gen_cont\n \n static void secp256k1_ecmult_gen_context_clear(secp256k1_ecmult_gen_context *ctx) {\n     ctx->built = 0;\n-    secp256k1_scalar_clear(&ctx->blind);\n-    secp256k1_gej_clear(&ctx->initial);\n+    secp256k1_scalar_clear(&ctx->scalar_offset);\n+    secp256k1_ge_clear(&ctx->ge_offset);\n+    secp256k1_fe_clear(&ctx->proj_blind);\n }\n \n-/* For accelerating the computation of a*G:\n- * To harden against timing attacks, use the following mechanism:\n- * * Break up the multiplicand into groups of PREC_BITS bits, called n_0, n_1, n_2, ..., n_(PREC_N-1).\n- * * Compute sum(n_i * (PREC_G)^i * G + U_i, i=0 ... PREC_N-1), where:\n- *   * U_i = U * 2^i, for i=0 ... PREC_N-2\n- *   * U_i = U * (1-2^(PREC_N-1)), for i=PREC_N-1\n- *   where U is a point with no known corresponding scalar. Note that sum(U_i, i=0 ... PREC_N-1) = 0.\n- * For each i, and each of the PREC_G possible values of n_i, (n_i * (PREC_G)^i * G + U_i) is\n- * precomputed (call it prec(i, n_i)). The formula now becomes sum(prec(i, n_i), i=0 ... PREC_N-1).\n- * None of the resulting prec group elements have a known scalar, and neither do any of\n- * the intermediate sums while computing a*G.\n- * The prec values are stored in secp256k1_ecmult_gen_prec_table[i][n_i] = n_i * (PREC_G)^i * G + U_i.\n- */\n-static void secp256k1_ecmult_gen(const secp256k1_ecmult_gen_context *ctx, secp256k1_gej *r, const secp256k1_scalar *gn) {\n-    int bits = ECMULT_GEN_PREC_BITS;\n-    int g = ECMULT_GEN_PREC_G(bits);\n-    int n = ECMULT_GEN_PREC_N(bits);\n+/* Compute the scalar (2^COMB_BITS - 1) / 2, the difference between the gn argument to\n+ * secp256k1_ecmult_gen, and the scalar whose encoding the table lookup bits are drawn\n+ * from (before applying blinding). */\n+static void secp256k1_ecmult_gen_scalar_diff(secp256k1_scalar* diff) {\n+    int i;\n+\n+    /* Compute scalar -1/2. */\n+    secp256k1_scalar neghalf = SECP256K1_SCALAR_CONST(0, 0, 0, 0, 0, 0, 0, 2);\n+    secp256k1_scalar_inverse_var(&neghalf, &neghalf);\n+    secp256k1_scalar_negate(&neghalf, &neghalf);\n+\n+    /* Compute offset = 2^(COMB_BITS - 1). */\n+    secp256k1_scalar_set_int(diff, 1);\n+    for (i = 0; i < COMB_BITS - 1; ++i) {\n+        secp256k1_scalar_add(diff, diff, diff);\n+    }\n \n+    /* The result is the sum of 2^(COMB_BITS - 1) + (-1/2). */\n+    secp256k1_scalar_add(diff, diff, &neghalf);\n+}\n+\n+static void secp256k1_ecmult_gen(const secp256k1_ecmult_gen_context *ctx, secp256k1_gej *r, const secp256k1_scalar *gn) {\n+    uint32_t comb_off;\n     secp256k1_ge add;\n+    secp256k1_fe neg;\n     secp256k1_ge_storage adds;\n-    secp256k1_scalar gnb;\n-    int i, j, n_i;\n-    \n+    secp256k1_scalar d;\n+    /* Array of uint32_t values large enough to store COMB_BITS bits. Only the bottom\n+     * 8 are ever nonzero, but having the zero padding at the end if COMB_BITS>256\n+     * avoids the need to deal with out-of-bounds reads from a scalar. */\n+    uint32_t recoded[(COMB_BITS + 31) >> 5] = {0};\n+    int first = 1, i;\n+\n     memset(&adds, 0, sizeof(adds));\n-    *r = ctx->initial;\n-    /* Blind scalar/point multiplication by computing (n-b)G + bG instead of nG. */\n-    secp256k1_scalar_add(&gnb, gn, &ctx->blind);\n-    add.infinity = 0;\n-    for (i = 0; i < n; i++) {\n-        n_i = secp256k1_scalar_get_bits(&gnb, i * bits, bits);\n-        for (j = 0; j < g; j++) {\n+\n+    /* We want to compute R = gn*G.\n+     *\n+     * To blind the scalar used in the computation, we rewrite this to be\n+     * R = (gn - b)*G + b*G, with a blinding value b determined by the context.\n+     *\n+     * The multiplication (gn-b)*G will be performed using a signed-digit multi-comb (see Section\n+     * 3.3 of \"Fast and compact elliptic-curve cryptography\" by Mike Hamburg,\n+     * https://eprint.iacr.org/2012/309).\n+     *\n+     * Let comb(s, P) = sum((2*s[i]-1)*2^i*P for i=0..COMB_BITS-1), where s[i] is the i'th bit of\n+     * the binary representation of scalar s. So the s[i] values determine whether -2^i*P (s[i]=0)\n+     * or +2^i*P (s[i]=1) are added together. COMB_BITS is at least 256, so all bits of s are\n+     * covered. By manipulating:\n+     *\n+     *     comb(s, P) = sum((2*s[i]-1)*2^i*P for i=0..COMB_BITS-1)\n+     * <=> comb(s, P) = sum((2*s[i]-1)*2^i for i=0..COMB_BITS-1) * P\n+     * <=> comb(s, P) = (2*sum(s[i]*2^i for i=0..COMB_BITS-1) - sum(2^i for i=0..COMB_BITS-1)) * P\n+     * <=> comb(s, P) = (2*s - (2^COMB_BITS - 1)) * P\n+     *\n+     * If we wanted to compute (gn-b)*G as comb(s, G), it would need to hold that\n+     *\n+     *     (gn - b) * G = (2*s - (2^COMB_BITS - 1)) * G\n+     * <=> s = (gn - b + (2^COMB_BITS - 1))/2 (mod order).\n+     *\n+     * We use an alternative here that avoids the modular division by two: instead we compute\n+     * (gn-b)*G as comb(d, G/2). For that to hold it must be the case that\n+     *\n+     *     (gn - b) * G = (2*d - (2^COMB_BITS - 1)) * (G/2)\n+     * <=> d = gn - b + (2^COMB_BITS - 1)/2 (mod order).\n+     *\n+     * Adding precomputation, our final equations become:\n+     *\n+     *     ctx->scalar_offset = (2^COMB_BITS - 1)/2 - b (mod order)\n+     *     ctx->ge_offset = b*G\n+     *     d = gn + ctx->scalar_offset\n+     *     R = comb(d, G/2) + ctx->ge_offset.\n+     *\n+     * comb(d, G/2) function is then computed by summing + or - 2^(i-1)*G, for i=0..COMB_BITS-1,\n+     * depending on the value of the bits d[i] of the binary representation of scalar d.\n+     */\n+\n+    /* Compute the scalar d = (gn + ctx->scalar_offset). */\n+    secp256k1_scalar_add(&d, &ctx->scalar_offset, gn);\n+    /* Convert to recoded array. */\n+    for (i = 0; i < 8 && i < ((COMB_BITS + 31) >> 5); ++i) {\n+        recoded[i] = secp256k1_scalar_get_bits(&d, 32 * i, 32);\n+    }\n+    secp256k1_scalar_clear(&d);\n+\n+    /* In secp256k1_ecmult_gen_prec_table we have precomputed sums of the\n+     * (2*d[i]-1) * 2^(i-1) * G points, for various combinations of i positions.\n+     * We rewrite our equation in terms of these table entries.\n+     *\n+     * Let mask(b) = sum(2^((b*COMB_TEETH + t)*COMB_SPACING) for t=0..COMB_TEETH-1),\n+     * with b ranging from 0 to COMB_BLOCKS-1. So for example with COMB_BLOCKS=11,\n+     * COMB_TEETH=6, COMB_SPACING=4, we would have:\n+     *   mask(0)  = 2^0   + 2^4   + 2^8   + 2^12  + 2^16  + 2^20,\n+     *   mask(1)  = 2^24  + 2^28  + 2^32  + 2^36  + 2^40  + 2^44,\n+     *   mask(2)  = 2^48  + 2^52  + 2^56  + 2^60  + 2^64  + 2^68,\n+     *   ...\n+     *   mask(10) = 2^240 + 2^244 + 2^248 + 2^252 + 2^256 + 2^260\n+     *\n+     * We will split up the bits d[i] using these masks. Specifically, each mask is\n+     * used COMB_SPACING times, with different shifts:\n+     *\n+     * d = (d & mask(0)<<0) + (d & mask(1)<<0) + ... + (d & mask(COMB_BLOCKS-1)<<0) +\n+     *     (d & mask(0)<<1) + (d & mask(1)<<1) + ... + (d & mask(COMB_BLOCKS-1)<<1) +\n+     *     ...\n+     *     (d & mask(0)<<(COMB_SPACING-1)) + ...\n+     *\n+     * Now define table(b, m) = (m - mask(b)/2) * G, and we will precompute these values for\n+     * b=0..COMB_BLOCKS-1, and for all values m which (d & mask(b)) can take (so m can take on\n+     * 2^COMB_TEETH distinct values).\n+     *\n+     * If m=(d & mask(b)), then table(b, m) is the sum of 2^i * (2*d[i]-1) * G/2, with i\n+     * iterating over the set bits in mask(b). In our example, table(2, 2^48 + 2^56 + 2^68)\n+     * would equal (2^48 - 2^52 + 2^56 - 2^60 - 2^64 + 2^68) * G/2.\n+     *\n+     * With that, we can rewrite comb(d, G/2) as:\n+     *\n+     *     2^0 * (table(0, d>>0 & mask(0)) + ... + table(COMB_BLOCKS-1, d>>0 & mask(COMP_BLOCKS-1)))\n+     *   + 2^1 * (table(0, d>>1 & mask(0)) + ... + table(COMB_BLOCKS-1, d>>1 & mask(COMP_BLOCKS-1)))\n+     *   + 2^2 * (table(0, d>>2 & mask(0)) + ... + table(COMB_BLOCKS-1, d>>2 & mask(COMP_BLOCKS-1)))\n+     *   + ...\n+     *   + 2^(COMB_SPACING-1) * (table(0, d>>(COMB_SPACING-1) & mask(0)) + ...)\n+     *\n+     * Or more generically as\n+     *\n+     *   sum(2^i * sum(table(b, d>>i & mask(b)), b=0..COMB_BLOCKS-1), i=0..COMB_SPACING-1)\n+     *\n+     * This is implemented using an outer loop that runs in reverse order over the lines of this\n+     * equation, which in each iteration runs an inner loop that adds the terms of that line and\n+     * then doubles the result before proceeding to the next line.\n+     *\n+     * In pseudocode:\n+     *   c = infinity\n+     *   for comb_off in range(COMB_SPACING - 1, -1, -1):\n+     *     for block in range(COMB_BLOCKS):\n+     *       c += table(block, (d >> comb_off) & mask(block))\n+     *     if comb_off > 0:\n+     *       c = 2*c\n+     *   return c\n+     *\n+     * This computes c = comb(d, G/2), and thus finally R = c + ctx->ge_offset. Note that it would\n+     * be possible to apply an initial offset instead of a final offset (moving ge_offset to take\n+     * the place of infinity above), but the chosen approach allows using (in a future improvement)\n+     * an incomplete addition formula for most of the multiplication.\n+     *\n+     * The last question is how to implement the table(b, m) function. For any value of b,\n+     * m=(d & mask(b)) can only take on at most 2^COMB_TEETH possible values (the last one may have\n+     * fewer as there mask(b) may exceed the curve order). So we could create COMB_BLOCK tables\n+     * which contain a value for each such m value.\n+     *\n+     * Now note that if m=(d & mask(b)), then flipping the relevant bits of m results in negating\n+     * the result of table(b, m). This is because table(b,m XOR mask(b)) = table(b, mask(b) - m) =\n+     * (mask(b) - m - mask(b)/2)*G = (-m + mask(b)/2)*G = -(m - mask(b)/2)*G = -table(b, m).\n+     * Because of this it suffices to only store the first half of the m values for every b. If an\n+     * entry from the second half is needed, we look up its bit-flipped version instead, and negate\n+     * it.\n+     *\n+     * secp256k1_ecmult_gen_prec_table[b][index] stores the table(b, m) entries. Index\n+     * is the relevant mask(b) bits of m packed together without gaps. */\n+\n+    secp256k1_gej_set_infinity(r);\n+    /* Outer loop: iterate over comb_off from COMB_SPACING - 1 down to 0. */\n+    comb_off = COMB_SPACING - 1;\n+    while (1) {\n+        uint32_t block;\n+        uint32_t bit_pos = comb_off;\n+        /* Inner loop: for each block, add table entries to the result. */\n+        for (block = 0; block < COMB_BLOCKS; ++block) {\n+            /* Gather the mask(block)-selected bits of d into bits. They're packed\n+             * together: bit (tooth) of bits = bit\n+             * ((block*COMB_TEETH + tooth)*COMB_SPACING + comb_off) of d. */",
      "path": "src/ecmult_gen_impl.h",
      "position": null,
      "original_position": 213,
      "commit_id": "dcc846f18518f77770b6a1fc9e39683c63685d39",
      "original_commit_id": "7dec5ab865e48bef5c1e1332f66b10825be890d0",
      "in_reply_to_id": null,
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit:\r\n```suggestion\r\n            /* Gather the mask(block)-selected bits of d into bits. They're packed:\r\n             * bits[tooth] = d[(block*COMB_TEETH + tooth)*COMB_SPACING + comb_off]. */\r\n```\r\n\r\nThe took me a while to parse due to the linebreaks. ",
      "created_at": "2024-04-05T17:03:25Z",
      "updated_at": "2024-04-05T17:03:25Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1058#discussion_r1554010395",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1554010395"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1058"
        }
      },
      "start_line": null,
      "original_start_line": 199,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 201,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1554018571",
      "pull_request_review_id": 1983744488,
      "id": 1554018571,
      "node_id": "PRRC_kwDOAP4Jqs5coHEL",
      "diff_hunk": "@@ -62,23 +62,24 @@ SECP256K1_INLINE static void secp256k1_scalar_set_int(secp256k1_scalar *r, unsig\n     SECP256K1_SCALAR_VERIFY(r);\n }\n \n-SECP256K1_INLINE static unsigned int secp256k1_scalar_get_bits(const secp256k1_scalar *a, unsigned int offset, unsigned int count) {\n+SECP256K1_INLINE static uint32_t secp256k1_scalar_get_bits(const secp256k1_scalar *a, unsigned int offset, unsigned int count) {\n     SECP256K1_SCALAR_VERIFY(a);\n+    VERIFY_CHECK(count > 0 && count <= 32);",
      "path": "src/scalar_8x32_impl.h",
      "position": 7,
      "original_position": 7,
      "commit_id": "dcc846f18518f77770b6a1fc9e39683c63685d39",
      "original_commit_id": "1921fd8bcaf29f23303411a64988bd178b8e7c5b",
      "in_reply_to_id": 1553470283,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think we usually have all the VERIFY checks together?",
      "created_at": "2024-04-05T17:11:43Z",
      "updated_at": "2024-04-05T17:11:43Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1058#discussion_r1554018571",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1554018571"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1058"
        }
      },
      "start_line": 66,
      "original_start_line": 66,
      "start_side": "RIGHT",
      "line": 67,
      "original_line": 67,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1554026781",
      "pull_request_review_id": 1983756499,
      "id": 1554026781,
      "node_id": "PRRC_kwDOAP4Jqs5coJEd",
      "diff_hunk": "@@ -100,6 +104,11 @@ static void secp256k1_ecmult_gen(const secp256k1_ecmult_gen_context *ctx, secp25\n \n     /* Compute the scalar d = (gn + ctx->scalar_offset). */\n     secp256k1_scalar_add(&d, &ctx->scalar_offset, gn);\n+    /* Convert to recoded array. */\n+    for (i = 0; i < 8; ++i) {\n+        recoded[i] = secp256k1_scalar_get_bits(&d, 32 * i, 32);\n+    }",
      "path": "src/ecmult_gen_impl.h",
      "position": null,
      "original_position": 20,
      "commit_id": "dcc846f18518f77770b6a1fc9e39683c63685d39",
      "original_commit_id": "1777e0a507c47d76c7021079af0f626b0804fad8",
      "in_reply_to_id": 1553505535,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "That would weaken the side-channel protection, and also incur a cost for byte-swapping.",
      "created_at": "2024-04-05T17:19:07Z",
      "updated_at": "2024-04-05T17:19:08Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1058#discussion_r1554026781",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1554026781"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1058"
        }
      },
      "start_line": null,
      "original_start_line": 107,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 114,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1554038775",
      "pull_request_review_id": 1983774791,
      "id": 1554038775,
      "node_id": "PRRC_kwDOAP4Jqs5coL_3",
      "diff_hunk": "@@ -200,8 +200,15 @@ static void secp256k1_ecmult_gen(const secp256k1_ecmult_gen_context *ctx, secp25\n              * ((block*COMB_TEETH + tooth)*COMB_SPACING + comb_off) of d. */\n             uint32_t bits = 0, sign, abs, index, tooth;\n             for (tooth = 0; tooth < COMB_TEETH; ++tooth) {\n-                uint32_t bit = (recoded[bit_pos >> 5] >> (bit_pos & 0x1f)) & 1;\n-                bits |= bit << tooth;\n+                /* Instead of reading individual bits here to construct bits, build up\n+                 * the result by xoring shifted reads together. In every iteration, one\n+                 * additional bit is made correct, starting at the bottom. The bits\n+                 * above that contain junk. This reduces leakage from single bits. See\n+                 * https://www.usenix.org/system/files/conference/usenixsecurity18/sec18-alam.pdf\n+                 */\n+                uint32_t bitdata = recoded[bit_pos >> 5] >> (bit_pos & 0x1f);\n+                bits &= ~(1 << tooth);\n+                bits ^= bitdata << tooth;",
      "path": "src/ecmult_gen_impl.h",
      "position": null,
      "original_position": 14,
      "commit_id": "dcc846f18518f77770b6a1fc9e39683c63685d39",
      "original_commit_id": "b71105dd4fda60c64d4eb3bd5cb0bed5baf1c084",
      "in_reply_to_id": 1553714975,
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "See https://github.com/real-or-random/secp256k1/commit/50ef2da3df16e7e610098bd50cacb60e5264cf7c for an improved version. I've manually verified that gcc, clang, msvc actually use rots and don't optimize that away.",
      "created_at": "2024-04-05T17:30:41Z",
      "updated_at": "2024-04-05T17:30:50Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1058#discussion_r1554038775",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1554038775"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1058"
        }
      },
      "start_line": null,
      "original_start_line": 202,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 227,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1554040336",
      "pull_request_review_id": 1983777211,
      "id": 1554040336,
      "node_id": "PRRC_kwDOAP4Jqs5coMYQ",
      "diff_hunk": "@@ -62,23 +62,24 @@ SECP256K1_INLINE static void secp256k1_scalar_set_int(secp256k1_scalar *r, unsig\n     SECP256K1_SCALAR_VERIFY(r);\n }\n \n-SECP256K1_INLINE static unsigned int secp256k1_scalar_get_bits(const secp256k1_scalar *a, unsigned int offset, unsigned int count) {\n+SECP256K1_INLINE static uint32_t secp256k1_scalar_get_bits(const secp256k1_scalar *a, unsigned int offset, unsigned int count) {\n     SECP256K1_SCALAR_VERIFY(a);\n+    VERIFY_CHECK(count > 0 && count <= 32);",
      "path": "src/scalar_8x32_impl.h",
      "position": 7,
      "original_position": 7,
      "commit_id": "dcc846f18518f77770b6a1fc9e39683c63685d39",
      "original_commit_id": "1921fd8bcaf29f23303411a64988bd178b8e7c5b",
      "in_reply_to_id": 1553470283,
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "you're right, I misremembered the surrounding style, sorry",
      "created_at": "2024-04-05T17:32:23Z",
      "updated_at": "2024-04-05T17:32:23Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1058#discussion_r1554040336",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1554040336"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1058"
        }
      },
      "start_line": 66,
      "original_start_line": 66,
      "start_side": "RIGHT",
      "line": 67,
      "original_line": 67,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1554046473",
      "pull_request_review_id": 1983786711,
      "id": 1554046473,
      "node_id": "PRRC_kwDOAP4Jqs5coN4J",
      "diff_hunk": "@@ -1,83 +1,95 @@\n-/***********************************************************************\n- * Copyright (c) 2013, 2014, 2015 Pieter Wuille, Gregory Maxwell       *\n- * Distributed under the MIT software license, see the accompanying    *\n- * file COPYING or https://www.opensource.org/licenses/mit-license.php.*\n- ***********************************************************************/\n+/*******************************************************************************\n+ * Copyright (c) 2013-2015, 2021 Pieter Wuille, Gregory Maxwell, Peter Dettman *\n+ * Distributed under the MIT software license, see the accompanying            *\n+ * file COPYING or https://www.opensource.org/licenses/mit-license.php.        *\n+ *******************************************************************************/\n \n #ifndef SECP256K1_ECMULT_GEN_COMPUTE_TABLE_IMPL_H\n #define SECP256K1_ECMULT_GEN_COMPUTE_TABLE_IMPL_H\n \n #include \"ecmult_gen_compute_table.h\"\n #include \"group_impl.h\"\n #include \"field_impl.h\"\n+#include \"scalar_impl.h\"\n #include \"ecmult_gen.h\"\n #include \"util.h\"\n \n-static void secp256k1_ecmult_gen_compute_table(secp256k1_ge_storage* table, const secp256k1_ge* gen, int bits) {\n-    int g = ECMULT_GEN_PREC_G(bits);\n-    int n = ECMULT_GEN_PREC_N(bits);\n+static void secp256k1_ecmult_gen_compute_table(secp256k1_ge_storage* table, const secp256k1_ge* gen, int blocks, int teeth) {\n+    size_t points = ((size_t)1) << (teeth - 1);\n+    size_t points_total = points * blocks;\n+    int spacing = (256 + blocks * teeth - 1) / (blocks * teeth);\n+    secp256k1_ge* prec = checked_malloc(&default_error_callback, points_total * sizeof(*prec));\n+    secp256k1_gej* ds = checked_malloc(&default_error_callback, teeth * sizeof(*ds));\n+    secp256k1_gej* vs = checked_malloc(&default_error_callback, points_total * sizeof(*vs));\n+    secp256k1_gej u;\n+    size_t vs_pos = 0;\n+    secp256k1_scalar half = SECP256K1_SCALAR_CONST(0, 0, 0, 0, 0, 0, 0, 2);\n+    int block, i;\n \n-    secp256k1_ge* prec = checked_malloc(&default_error_callback, n * g * sizeof(*prec));\n-    secp256k1_gej gj;\n-    secp256k1_gej nums_gej;\n-    int i, j;\n-\n-    VERIFY_CHECK(g > 0);\n-    VERIFY_CHECK(n > 0);\n-\n-    /* get the generator */\n-    secp256k1_gej_set_ge(&gj, gen);\n-\n-    /* Construct a group element with no known corresponding scalar (nothing up my sleeve). */\n-    {\n-        static const unsigned char nums_b32[33] = \"The scalar for this x is unknown\";\n-        secp256k1_fe nums_x;\n-        secp256k1_ge nums_ge;\n-        int r;\n-        r = secp256k1_fe_set_b32_limit(&nums_x, nums_b32);\n-        (void)r;\n-        VERIFY_CHECK(r);\n-        r = secp256k1_ge_set_xo_var(&nums_ge, &nums_x, 0);\n-        (void)r;\n-        VERIFY_CHECK(r);\n-        secp256k1_gej_set_ge(&nums_gej, &nums_ge);\n-        /* Add G to make the bits in x uniformly distributed. */\n-        secp256k1_gej_add_ge_var(&nums_gej, &nums_gej, gen, NULL);\n+    /* u is the running power of two times gen we're working with, initially gen/2. */",
      "path": "src/ecmult_gen_compute_table_impl.h",
      "position": 42,
      "original_position": 63,
      "commit_id": "dcc846f18518f77770b6a1fc9e39683c63685d39",
      "original_commit_id": "0a63916f36b92a0508aa7f1df7b8e659bc42bfa4",
      "in_reply_to_id": 1549282824,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Given that the precompute binary is built with `-DVERIFY`, I've added your suggestion here to `VERIFY_CHECK` that u*2 = gen.",
      "created_at": "2024-04-05T17:39:04Z",
      "updated_at": "2024-04-05T17:39:05Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1058#discussion_r1554046473",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1554046473"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1058"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 30,
      "original_line": 30,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1554046925",
      "pull_request_review_id": 1983787483,
      "id": 1554046925,
      "node_id": "PRRC_kwDOAP4Jqs5coN_N",
      "diff_hunk": "@@ -23,10 +23,10 @@\n static void secp256k1_scalar_clear(secp256k1_scalar *r);\n \n /** Access bits from a scalar. All requested bits must belong to the same 32-bit limb. */\n-static unsigned int secp256k1_scalar_get_bits(const secp256k1_scalar *a, unsigned int offset, unsigned int count);\n+static uint32_t secp256k1_scalar_get_bits(const secp256k1_scalar *a, unsigned int offset, unsigned int count);\n \n /** Access bits from a scalar. Not constant time in offset and count. */\n-static unsigned int secp256k1_scalar_get_bits_var(const secp256k1_scalar *a, unsigned int offset, unsigned int count);\n+static uint32_t secp256k1_scalar_get_bits_var(const secp256k1_scalar *a, unsigned int offset, unsigned int count);",
      "path": "src/scalar.h",
      "position": null,
      "original_position": 9,
      "commit_id": "dcc846f18518f77770b6a1fc9e39683c63685d39",
      "original_commit_id": "1921fd8bcaf29f23303411a64988bd178b8e7c5b",
      "in_reply_to_id": 1553495278,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I've done the renaming.",
      "created_at": "2024-04-05T17:39:36Z",
      "updated_at": "2024-04-05T17:39:37Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1058#discussion_r1554046925",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1554046925"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1058"
        }
      },
      "start_line": null,
      "original_start_line": 25,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 29,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1554047256",
      "pull_request_review_id": 1983788050,
      "id": 1554047256,
      "node_id": "PRRC_kwDOAP4Jqs5coOEY",
      "diff_hunk": "@@ -200,8 +200,15 @@ static void secp256k1_ecmult_gen(const secp256k1_ecmult_gen_context *ctx, secp25\n              * ((block*COMB_TEETH + tooth)*COMB_SPACING + comb_off) of d. */\n             uint32_t bits = 0, sign, abs, index, tooth;\n             for (tooth = 0; tooth < COMB_TEETH; ++tooth) {\n-                uint32_t bit = (recoded[bit_pos >> 5] >> (bit_pos & 0x1f)) & 1;\n-                bits |= bit << tooth;\n+                /* Instead of reading individual bits here to construct bits, build up\n+                 * the result by xoring shifted reads together. In every iteration, one\n+                 * additional bit is made correct, starting at the bottom. The bits\n+                 * above that contain junk. This reduces leakage from single bits. See\n+                 * https://www.usenix.org/system/files/conference/usenixsecurity18/sec18-alam.pdf\n+                 */\n+                uint32_t bitdata = recoded[bit_pos >> 5] >> (bit_pos & 0x1f);\n+                bits &= ~(1 << tooth);\n+                bits ^= bitdata << tooth;",
      "path": "src/ecmult_gen_impl.h",
      "position": null,
      "original_position": 14,
      "commit_id": "dcc846f18518f77770b6a1fc9e39683c63685d39",
      "original_commit_id": "b71105dd4fda60c64d4eb3bd5cb0bed5baf1c084",
      "in_reply_to_id": 1553714975,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Squashed it in (and added you as co-author of the commit).",
      "created_at": "2024-04-05T17:39:59Z",
      "updated_at": "2024-04-05T17:39:59Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1058#discussion_r1554047256",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1554047256"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1058"
        }
      },
      "start_line": null,
      "original_start_line": 202,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 227,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1554047429",
      "pull_request_review_id": 1983788340,
      "id": 1554047429,
      "node_id": "PRRC_kwDOAP4Jqs5coOHF",
      "diff_hunk": "@@ -85,6 +84,7 @@ static void secp256k1_ecmult_gen_compute_table(secp256k1_ge_storage* table, cons\n     for (block = 0; block < blocks; ++block) {\n         size_t index;\n         for (index = 0; index < points; ++index) {\n+            CHECK(!secp256k1_ge_is_infinity(&prec[block * points + index]));",
      "path": "src/ecmult_gen_compute_table_impl.h",
      "position": null,
      "original_position": 16,
      "commit_id": "dcc846f18518f77770b6a1fc9e39683c63685d39",
      "original_commit_id": "0b8deaac023d5fc963457a3e812902143fbf77d4",
      "in_reply_to_id": 1554003316,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Changed to `VERIFY_CHECK` for consistency.",
      "created_at": "2024-04-05T17:40:12Z",
      "updated_at": "2024-04-05T17:40:12Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1058#discussion_r1554047429",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1554047429"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1058"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 87,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1554047550",
      "pull_request_review_id": 1983788498,
      "id": 1554047550,
      "node_id": "PRRC_kwDOAP4Jqs5coOI-",
      "diff_hunk": "@@ -25,41 +25,201 @@ static int secp256k1_ecmult_gen_context_is_built(const secp256k1_ecmult_gen_cont\n \n static void secp256k1_ecmult_gen_context_clear(secp256k1_ecmult_gen_context *ctx) {\n     ctx->built = 0;\n-    secp256k1_scalar_clear(&ctx->blind);\n-    secp256k1_gej_clear(&ctx->initial);\n+    secp256k1_scalar_clear(&ctx->scalar_offset);\n+    secp256k1_ge_clear(&ctx->ge_offset);\n+    secp256k1_fe_clear(&ctx->proj_blind);\n }\n \n-/* For accelerating the computation of a*G:\n- * To harden against timing attacks, use the following mechanism:\n- * * Break up the multiplicand into groups of PREC_BITS bits, called n_0, n_1, n_2, ..., n_(PREC_N-1).\n- * * Compute sum(n_i * (PREC_G)^i * G + U_i, i=0 ... PREC_N-1), where:\n- *   * U_i = U * 2^i, for i=0 ... PREC_N-2\n- *   * U_i = U * (1-2^(PREC_N-1)), for i=PREC_N-1\n- *   where U is a point with no known corresponding scalar. Note that sum(U_i, i=0 ... PREC_N-1) = 0.\n- * For each i, and each of the PREC_G possible values of n_i, (n_i * (PREC_G)^i * G + U_i) is\n- * precomputed (call it prec(i, n_i)). The formula now becomes sum(prec(i, n_i), i=0 ... PREC_N-1).\n- * None of the resulting prec group elements have a known scalar, and neither do any of\n- * the intermediate sums while computing a*G.\n- * The prec values are stored in secp256k1_ecmult_gen_prec_table[i][n_i] = n_i * (PREC_G)^i * G + U_i.\n- */\n-static void secp256k1_ecmult_gen(const secp256k1_ecmult_gen_context *ctx, secp256k1_gej *r, const secp256k1_scalar *gn) {\n-    int bits = ECMULT_GEN_PREC_BITS;\n-    int g = ECMULT_GEN_PREC_G(bits);\n-    int n = ECMULT_GEN_PREC_N(bits);\n+/* Compute the scalar (2^COMB_BITS - 1) / 2, the difference between the gn argument to\n+ * secp256k1_ecmult_gen, and the scalar whose encoding the table lookup bits are drawn\n+ * from (before applying blinding). */\n+static void secp256k1_ecmult_gen_scalar_diff(secp256k1_scalar* diff) {\n+    int i;\n+\n+    /* Compute scalar -1/2. */\n+    secp256k1_scalar neghalf = SECP256K1_SCALAR_CONST(0, 0, 0, 0, 0, 0, 0, 2);\n+    secp256k1_scalar_inverse_var(&neghalf, &neghalf);\n+    secp256k1_scalar_negate(&neghalf, &neghalf);\n+\n+    /* Compute offset = 2^(COMB_BITS - 1). */\n+    secp256k1_scalar_set_int(diff, 1);\n+    for (i = 0; i < COMB_BITS - 1; ++i) {\n+        secp256k1_scalar_add(diff, diff, diff);\n+    }\n \n+    /* The result is the sum of 2^(COMB_BITS - 1) + (-1/2). */\n+    secp256k1_scalar_add(diff, diff, &neghalf);\n+}\n+\n+static void secp256k1_ecmult_gen(const secp256k1_ecmult_gen_context *ctx, secp256k1_gej *r, const secp256k1_scalar *gn) {\n+    uint32_t comb_off;\n     secp256k1_ge add;\n+    secp256k1_fe neg;\n     secp256k1_ge_storage adds;\n-    secp256k1_scalar gnb;\n-    int i, j, n_i;\n-    \n+    secp256k1_scalar d;\n+    /* Array of uint32_t values large enough to store COMB_BITS bits. Only the bottom\n+     * 8 are ever nonzero, but having the zero padding at the end if COMB_BITS>256\n+     * avoids the need to deal with out-of-bounds reads from a scalar. */\n+    uint32_t recoded[(COMB_BITS + 31) >> 5] = {0};\n+    int first = 1, i;\n+\n     memset(&adds, 0, sizeof(adds));\n-    *r = ctx->initial;\n-    /* Blind scalar/point multiplication by computing (n-b)G + bG instead of nG. */\n-    secp256k1_scalar_add(&gnb, gn, &ctx->blind);\n-    add.infinity = 0;\n-    for (i = 0; i < n; i++) {\n-        n_i = secp256k1_scalar_get_bits(&gnb, i * bits, bits);\n-        for (j = 0; j < g; j++) {\n+\n+    /* We want to compute R = gn*G.\n+     *\n+     * To blind the scalar used in the computation, we rewrite this to be\n+     * R = (gn - b)*G + b*G, with a blinding value b determined by the context.\n+     *\n+     * The multiplication (gn-b)*G will be performed using a signed-digit multi-comb (see Section\n+     * 3.3 of \"Fast and compact elliptic-curve cryptography\" by Mike Hamburg,\n+     * https://eprint.iacr.org/2012/309).\n+     *\n+     * Let comb(s, P) = sum((2*s[i]-1)*2^i*P for i=0..COMB_BITS-1), where s[i] is the i'th bit of\n+     * the binary representation of scalar s. So the s[i] values determine whether -2^i*P (s[i]=0)\n+     * or +2^i*P (s[i]=1) are added together. COMB_BITS is at least 256, so all bits of s are\n+     * covered. By manipulating:\n+     *\n+     *     comb(s, P) = sum((2*s[i]-1)*2^i*P for i=0..COMB_BITS-1)\n+     * <=> comb(s, P) = sum((2*s[i]-1)*2^i for i=0..COMB_BITS-1) * P\n+     * <=> comb(s, P) = (2*sum(s[i]*2^i for i=0..COMB_BITS-1) - sum(2^i for i=0..COMB_BITS-1)) * P\n+     * <=> comb(s, P) = (2*s - (2^COMB_BITS - 1)) * P\n+     *\n+     * If we wanted to compute (gn-b)*G as comb(s, G), it would need to hold that\n+     *\n+     *     (gn - b) * G = (2*s - (2^COMB_BITS - 1)) * G\n+     * <=> s = (gn - b + (2^COMB_BITS - 1))/2 (mod order).\n+     *\n+     * We use an alternative here that avoids the modular division by two: instead we compute\n+     * (gn-b)*G as comb(d, G/2). For that to hold it must be the case that\n+     *\n+     *     (gn - b) * G = (2*d - (2^COMB_BITS - 1)) * (G/2)\n+     * <=> d = gn - b + (2^COMB_BITS - 1)/2 (mod order).\n+     *\n+     * Adding precomputation, our final equations become:\n+     *\n+     *     ctx->scalar_offset = (2^COMB_BITS - 1)/2 - b (mod order)\n+     *     ctx->ge_offset = b*G\n+     *     d = gn + ctx->scalar_offset\n+     *     R = comb(d, G/2) + ctx->ge_offset.\n+     *\n+     * comb(d, G/2) function is then computed by summing + or - 2^(i-1)*G, for i=0..COMB_BITS-1,\n+     * depending on the value of the bits d[i] of the binary representation of scalar d.\n+     */\n+\n+    /* Compute the scalar d = (gn + ctx->scalar_offset). */\n+    secp256k1_scalar_add(&d, &ctx->scalar_offset, gn);\n+    /* Convert to recoded array. */\n+    for (i = 0; i < 8 && i < ((COMB_BITS + 31) >> 5); ++i) {\n+        recoded[i] = secp256k1_scalar_get_bits(&d, 32 * i, 32);\n+    }\n+    secp256k1_scalar_clear(&d);\n+\n+    /* In secp256k1_ecmult_gen_prec_table we have precomputed sums of the\n+     * (2*d[i]-1) * 2^(i-1) * G points, for various combinations of i positions.\n+     * We rewrite our equation in terms of these table entries.\n+     *\n+     * Let mask(b) = sum(2^((b*COMB_TEETH + t)*COMB_SPACING) for t=0..COMB_TEETH-1),\n+     * with b ranging from 0 to COMB_BLOCKS-1. So for example with COMB_BLOCKS=11,\n+     * COMB_TEETH=6, COMB_SPACING=4, we would have:\n+     *   mask(0)  = 2^0   + 2^4   + 2^8   + 2^12  + 2^16  + 2^20,\n+     *   mask(1)  = 2^24  + 2^28  + 2^32  + 2^36  + 2^40  + 2^44,\n+     *   mask(2)  = 2^48  + 2^52  + 2^56  + 2^60  + 2^64  + 2^68,\n+     *   ...\n+     *   mask(10) = 2^240 + 2^244 + 2^248 + 2^252 + 2^256 + 2^260\n+     *\n+     * We will split up the bits d[i] using these masks. Specifically, each mask is\n+     * used COMB_SPACING times, with different shifts:\n+     *\n+     * d = (d & mask(0)<<0) + (d & mask(1)<<0) + ... + (d & mask(COMB_BLOCKS-1)<<0) +\n+     *     (d & mask(0)<<1) + (d & mask(1)<<1) + ... + (d & mask(COMB_BLOCKS-1)<<1) +\n+     *     ...\n+     *     (d & mask(0)<<(COMB_SPACING-1)) + ...\n+     *\n+     * Now define table(b, m) = (m - mask(b)/2) * G, and we will precompute these values for\n+     * b=0..COMB_BLOCKS-1, and for all values m which (d & mask(b)) can take (so m can take on\n+     * 2^COMB_TEETH distinct values).\n+     *\n+     * If m=(d & mask(b)), then table(b, m) is the sum of 2^i * (2*d[i]-1) * G/2, with i\n+     * iterating over the set bits in mask(b). In our example, table(2, 2^48 + 2^56 + 2^68)\n+     * would equal (2^48 - 2^52 + 2^56 - 2^60 - 2^64 + 2^68) * G/2.\n+     *\n+     * With that, we can rewrite comb(d, G/2) as:\n+     *\n+     *     2^0 * (table(0, d>>0 & mask(0)) + ... + table(COMB_BLOCKS-1, d>>0 & mask(COMP_BLOCKS-1)))\n+     *   + 2^1 * (table(0, d>>1 & mask(0)) + ... + table(COMB_BLOCKS-1, d>>1 & mask(COMP_BLOCKS-1)))\n+     *   + 2^2 * (table(0, d>>2 & mask(0)) + ... + table(COMB_BLOCKS-1, d>>2 & mask(COMP_BLOCKS-1)))\n+     *   + ...\n+     *   + 2^(COMB_SPACING-1) * (table(0, d>>(COMB_SPACING-1) & mask(0)) + ...)\n+     *\n+     * Or more generically as\n+     *\n+     *   sum(2^i * sum(table(b, d>>i & mask(b)), b=0..COMB_BLOCKS-1), i=0..COMB_SPACING-1)\n+     *\n+     * This is implemented using an outer loop that runs in reverse order over the lines of this\n+     * equation, which in each iteration runs an inner loop that adds the terms of that line and\n+     * then doubles the result before proceeding to the next line.\n+     *\n+     * In pseudocode:\n+     *   c = infinity\n+     *   for comb_off in range(COMB_SPACING - 1, -1, -1):\n+     *     for block in range(COMB_BLOCKS):\n+     *       c += table(block, (d >> comb_off) & mask(block))\n+     *     if comb_off > 0:\n+     *       c = 2*c\n+     *   return c\n+     *\n+     * This computes c = comb(d, G/2), and thus finally R = c + ctx->ge_offset. Note that it would\n+     * be possible to apply an initial offset instead of a final offset (moving ge_offset to take\n+     * the place of infinity above), but the chosen approach allows using (in a future improvement)\n+     * an incomplete addition formula for most of the multiplication.\n+     *\n+     * The last question is how to implement the table(b, m) function. For any value of b,\n+     * m=(d & mask(b)) can only take on at most 2^COMB_TEETH possible values (the last one may have\n+     * fewer as there mask(b) may exceed the curve order). So we could create COMB_BLOCK tables\n+     * which contain a value for each such m value.\n+     *\n+     * Now note that if m=(d & mask(b)), then flipping the relevant bits of m results in negating\n+     * the result of table(b, m). This is because table(b,m XOR mask(b)) = table(b, mask(b) - m) =\n+     * (mask(b) - m - mask(b)/2)*G = (-m + mask(b)/2)*G = -(m - mask(b)/2)*G = -table(b, m).\n+     * Because of this it suffices to only store the first half of the m values for every b. If an\n+     * entry from the second half is needed, we look up its bit-flipped version instead, and negate\n+     * it.\n+     *\n+     * secp256k1_ecmult_gen_prec_table[b][index] stores the table(b, m) entries. Index\n+     * is the relevant mask(b) bits of m packed together without gaps. */\n+\n+    secp256k1_gej_set_infinity(r);\n+    /* Outer loop: iterate over comb_off from COMB_SPACING - 1 down to 0. */\n+    comb_off = COMB_SPACING - 1;\n+    while (1) {\n+        uint32_t block;\n+        uint32_t bit_pos = comb_off;\n+        /* Inner loop: for each block, add table entries to the result. */\n+        for (block = 0; block < COMB_BLOCKS; ++block) {\n+            /* Gather the mask(block)-selected bits of d into bits. They're packed\n+             * together: bit (tooth) of bits = bit\n+             * ((block*COMB_TEETH + tooth)*COMB_SPACING + comb_off) of d. */",
      "path": "src/ecmult_gen_impl.h",
      "position": null,
      "original_position": 213,
      "commit_id": "dcc846f18518f77770b6a1fc9e39683c63685d39",
      "original_commit_id": "7dec5ab865e48bef5c1e1332f66b10825be890d0",
      "in_reply_to_id": 1554010395,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done.",
      "created_at": "2024-04-05T17:40:18Z",
      "updated_at": "2024-04-05T17:40:19Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1058#discussion_r1554047550",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1554047550"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1058"
        }
      },
      "start_line": null,
      "original_start_line": 199,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 201,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1554047720",
      "pull_request_review_id": 1983788742,
      "id": 1554047720,
      "node_id": "PRRC_kwDOAP4Jqs5coOLo",
      "diff_hunk": "@@ -5602,9 +5602,29 @@ static void test_ecmult_gen_blind_reset(void) {\n     CHECK(secp256k1_ge_eq_var(&p1, &p2));\n }\n \n+/* Verify that ecmult_gen for scalars gn for which gn + scalar_offset = {-1,0,1}. */\n+static void test_ecmult_gen_edge_cases(void) {\n+    int i;\n+    secp256k1_gej res1, res2;\n+    secp256k1_scalar gn = secp256k1_scalar_one; /* gn = 1 */\n+    secp256k1_scalar_add(&gn, &gn, &CTX->ecmult_gen_ctx.scalar_offset); /* gn = 1 + scalar_offset */\n+    secp256k1_scalar_negate(&gn, &gn); /* gn = -1 - scalar_offset */\n+\n+    for (i = -1; i < 2; ++i) {\n+        /* Run test with gn = i - scalar_offset (so that the ecmult_gen recoded value represents i). */\n+        secp256k1_ecmult_gen(&CTX->ecmult_gen_ctx, &res1, &gn);\n+        secp256k1_ecmult(&res2, NULL, &secp256k1_scalar_zero, &gn);",
      "path": "src/tests.c",
      "position": 77,
      "original_position": 15,
      "commit_id": "dcc846f18518f77770b6a1fc9e39683c63685d39",
      "original_commit_id": "8ec3b9f0eb78945b561e5f839d2b35d65c74bd9d",
      "in_reply_to_id": 1553745075,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Added.",
      "created_at": "2024-04-05T17:40:28Z",
      "updated_at": "2024-04-05T17:40:28Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1058#discussion_r1554047720",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1554047720"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1058"
        }
      },
      "start_line": 5614,
      "original_start_line": 5614,
      "start_side": "RIGHT",
      "line": 5616,
      "original_line": 5616,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1554047813",
      "pull_request_review_id": 1983788882,
      "id": 1554047813,
      "node_id": "PRRC_kwDOAP4Jqs5coONF",
      "diff_hunk": "@@ -5602,9 +5602,29 @@ static void test_ecmult_gen_blind_reset(void) {\n     CHECK(secp256k1_ge_eq_var(&p1, &p2));\n }\n \n+/* Verify that ecmult_gen for scalars gn for which gn + scalar_offset = {-1,0,1}. */\n+static void test_ecmult_gen_edge_cases(void) {\n+    int i;\n+    secp256k1_gej res1, res2;\n+    secp256k1_scalar gn = secp256k1_scalar_one; /* gn = 1 */\n+    secp256k1_scalar_add(&gn, &gn, &CTX->ecmult_gen_ctx.scalar_offset); /* gn = 1 + scalar_offset */\n+    secp256k1_scalar_negate(&gn, &gn); /* gn = -1 - scalar_offset */\n+\n+    for (i = -1; i < 2; ++i) {\n+        /* Run test with gn = i - scalar_offset (so that the ecmult_gen recoded value represents i). */\n+        secp256k1_ecmult_gen(&CTX->ecmult_gen_ctx, &res1, &gn);\n+        secp256k1_ecmult(&res2, NULL, &secp256k1_scalar_zero, &gn);\n+        secp256k1_gej_neg(&res2, &res2);\n+        secp256k1_gej_add_var(&res1, &res1, &res2, NULL);\n+        CHECK(secp256k1_gej_is_infinity(&res1));",
      "path": "src/tests.c",
      "position": null,
      "original_position": 18,
      "commit_id": "dcc846f18518f77770b6a1fc9e39683c63685d39",
      "original_commit_id": "8ec3b9f0eb78945b561e5f839d2b35d65c74bd9d",
      "in_reply_to_id": 1553739485,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done.",
      "created_at": "2024-04-05T17:40:33Z",
      "updated_at": "2024-04-05T17:40:34Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1058#discussion_r1554047813",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1554047813"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1058"
        }
      },
      "start_line": null,
      "original_start_line": 5617,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 5619,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1554073604",
      "pull_request_review_id": 1983827989,
      "id": 1554073604,
      "node_id": "PRRC_kwDOAP4Jqs5coUgE",
      "diff_hunk": "@@ -391,4 +391,16 @@ SECP256K1_INLINE static void secp256k1_write_be64(unsigned char* p, uint64_t x)\n     p[0] = x >> 56;\n }\n \n+/* Rotate a uint32_t to the right. */\n+SECP256K1_INLINE static uint32_t secp256k1_rotr32(const uint32_t x, const unsigned int by) {\n+#if defined(_MSC_VER)\n+    return _rotr(x, by);  /* needs <stdlib.h> */\n+#else\n+    /* Reduce rotation amount to avoid UB when shifting. */\n+    const unsigned int mask = CHAR_BIT * sizeof(x) - 1;\n+    /* Turned it into a rot instruction by GCC and clang. */",
      "path": "src/util.h",
      "position": null,
      "original_position": 11,
      "commit_id": "dcc846f18518f77770b6a1fc9e39683c63685d39",
      "original_commit_id": "d4ec830386d7893200725271f7b697423bb86824",
      "in_reply_to_id": null,
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "-.- remove \"it\", sorry.",
      "created_at": "2024-04-05T18:06:54Z",
      "updated_at": "2024-04-05T18:06:55Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1058#discussion_r1554073604",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1554073604"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1058"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 401,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1554076491",
      "pull_request_review_id": 1983834468,
      "id": 1554076491,
      "node_id": "PRRC_kwDOAP4Jqs5coVNL",
      "diff_hunk": "@@ -391,4 +391,16 @@ SECP256K1_INLINE static void secp256k1_write_be64(unsigned char* p, uint64_t x)\n     p[0] = x >> 56;\n }\n \n+/* Rotate a uint32_t to the right. */\n+SECP256K1_INLINE static uint32_t secp256k1_rotr32(const uint32_t x, const unsigned int by) {\n+#if defined(_MSC_VER)\n+    return _rotr(x, by);  /* needs <stdlib.h> */\n+#else\n+    /* Reduce rotation amount to avoid UB when shifting. */\n+    const unsigned int mask = CHAR_BIT * sizeof(x) - 1;\n+    /* Turned it into a rot instruction by GCC and clang. */",
      "path": "src/util.h",
      "position": null,
      "original_position": 11,
      "commit_id": "dcc846f18518f77770b6a1fc9e39683c63685d39",
      "original_commit_id": "d4ec830386d7893200725271f7b697423bb86824",
      "in_reply_to_id": 1554073604,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done.",
      "created_at": "2024-04-05T18:10:16Z",
      "updated_at": "2024-04-05T18:10:17Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1058#discussion_r1554076491",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1554076491"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1058"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 401,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1554165746",
      "pull_request_review_id": 1983986193,
      "id": 1554165746,
      "node_id": "PRRC_kwDOAP4Jqs5coq_y",
      "diff_hunk": "@@ -25,41 +25,216 @@ static int secp256k1_ecmult_gen_context_is_built(const secp256k1_ecmult_gen_cont\n \n static void secp256k1_ecmult_gen_context_clear(secp256k1_ecmult_gen_context *ctx) {\n     ctx->built = 0;\n-    secp256k1_scalar_clear(&ctx->blind);\n-    secp256k1_gej_clear(&ctx->initial);\n+    secp256k1_scalar_clear(&ctx->scalar_offset);\n+    secp256k1_ge_clear(&ctx->ge_offset);\n+    secp256k1_fe_clear(&ctx->proj_blind);\n }\n \n-/* For accelerating the computation of a*G:\n- * To harden against timing attacks, use the following mechanism:\n- * * Break up the multiplicand into groups of PREC_BITS bits, called n_0, n_1, n_2, ..., n_(PREC_N-1).\n- * * Compute sum(n_i * (PREC_G)^i * G + U_i, i=0 ... PREC_N-1), where:\n- *   * U_i = U * 2^i, for i=0 ... PREC_N-2\n- *   * U_i = U * (1-2^(PREC_N-1)), for i=PREC_N-1\n- *   where U is a point with no known corresponding scalar. Note that sum(U_i, i=0 ... PREC_N-1) = 0.\n- * For each i, and each of the PREC_G possible values of n_i, (n_i * (PREC_G)^i * G + U_i) is\n- * precomputed (call it prec(i, n_i)). The formula now becomes sum(prec(i, n_i), i=0 ... PREC_N-1).\n- * None of the resulting prec group elements have a known scalar, and neither do any of\n- * the intermediate sums while computing a*G.\n- * The prec values are stored in secp256k1_ecmult_gen_prec_table[i][n_i] = n_i * (PREC_G)^i * G + U_i.\n- */\n-static void secp256k1_ecmult_gen(const secp256k1_ecmult_gen_context *ctx, secp256k1_gej *r, const secp256k1_scalar *gn) {\n-    int bits = ECMULT_GEN_PREC_BITS;\n-    int g = ECMULT_GEN_PREC_G(bits);\n-    int n = ECMULT_GEN_PREC_N(bits);\n+/* Compute the scalar (2^COMB_BITS - 1) / 2, the difference between the gn argument to\n+ * secp256k1_ecmult_gen, and the scalar whose encoding the table lookup bits are drawn\n+ * from (before applying blinding). */\n+static void secp256k1_ecmult_gen_scalar_diff(secp256k1_scalar* diff) {\n+    int i;\n+\n+    /* Compute scalar -1/2. */\n+    secp256k1_scalar neghalf = SECP256K1_SCALAR_CONST(0, 0, 0, 0, 0, 0, 0, 2);\n+    secp256k1_scalar_inverse_var(&neghalf, &neghalf);\n+    secp256k1_scalar_negate(&neghalf, &neghalf);",
      "path": "src/ecmult_gen_impl.h",
      "position": null,
      "original_position": 44,
      "commit_id": "dcc846f18518f77770b6a1fc9e39683c63685d39",
      "original_commit_id": "dafb392b406cc9fdb1d0061cdc15006a8dc719fb",
      "in_reply_to_id": null,
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Optimized this here, if you want to cherry-pick: https://github.com/real-or-random/secp256k1/commit/b71226b71e02ae7c0e67ff9a9546933399032da8 \r\n\r\nIt may look overkill, but I don't think it is upon a closer look: This saves ~1.1 us on my machine (lazy benchmark with turboboost enabled), which is 40% in context_create with NULL seed (because that has an early return to skip the ecmult_gen). But also ecmult_gen is just ~10 us, so this will also save ~10% in context_randomize, which is not entirely unimportant. ",
      "created_at": "2024-04-05T18:57:51Z",
      "updated_at": "2024-04-05T18:57:51Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1058#discussion_r1554165746",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1554165746"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1058"
        }
      },
      "start_line": null,
      "original_start_line": 39,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 42,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1554172127",
      "pull_request_review_id": 1983994598,
      "id": 1554172127,
      "node_id": "PRRC_kwDOAP4Jqs5cosjf",
      "diff_hunk": "@@ -25,41 +25,216 @@ static int secp256k1_ecmult_gen_context_is_built(const secp256k1_ecmult_gen_cont\n \n static void secp256k1_ecmult_gen_context_clear(secp256k1_ecmult_gen_context *ctx) {\n     ctx->built = 0;\n-    secp256k1_scalar_clear(&ctx->blind);\n-    secp256k1_gej_clear(&ctx->initial);\n+    secp256k1_scalar_clear(&ctx->scalar_offset);\n+    secp256k1_ge_clear(&ctx->ge_offset);\n+    secp256k1_fe_clear(&ctx->proj_blind);\n }\n \n-/* For accelerating the computation of a*G:\n- * To harden against timing attacks, use the following mechanism:\n- * * Break up the multiplicand into groups of PREC_BITS bits, called n_0, n_1, n_2, ..., n_(PREC_N-1).\n- * * Compute sum(n_i * (PREC_G)^i * G + U_i, i=0 ... PREC_N-1), where:\n- *   * U_i = U * 2^i, for i=0 ... PREC_N-2\n- *   * U_i = U * (1-2^(PREC_N-1)), for i=PREC_N-1\n- *   where U is a point with no known corresponding scalar. Note that sum(U_i, i=0 ... PREC_N-1) = 0.\n- * For each i, and each of the PREC_G possible values of n_i, (n_i * (PREC_G)^i * G + U_i) is\n- * precomputed (call it prec(i, n_i)). The formula now becomes sum(prec(i, n_i), i=0 ... PREC_N-1).\n- * None of the resulting prec group elements have a known scalar, and neither do any of\n- * the intermediate sums while computing a*G.\n- * The prec values are stored in secp256k1_ecmult_gen_prec_table[i][n_i] = n_i * (PREC_G)^i * G + U_i.\n- */\n-static void secp256k1_ecmult_gen(const secp256k1_ecmult_gen_context *ctx, secp256k1_gej *r, const secp256k1_scalar *gn) {\n-    int bits = ECMULT_GEN_PREC_BITS;\n-    int g = ECMULT_GEN_PREC_G(bits);\n-    int n = ECMULT_GEN_PREC_N(bits);\n+/* Compute the scalar (2^COMB_BITS - 1) / 2, the difference between the gn argument to\n+ * secp256k1_ecmult_gen, and the scalar whose encoding the table lookup bits are drawn\n+ * from (before applying blinding). */\n+static void secp256k1_ecmult_gen_scalar_diff(secp256k1_scalar* diff) {\n+    int i;\n+\n+    /* Compute scalar -1/2. */\n+    secp256k1_scalar neghalf = SECP256K1_SCALAR_CONST(0, 0, 0, 0, 0, 0, 0, 2);\n+    secp256k1_scalar_inverse_var(&neghalf, &neghalf);\n+    secp256k1_scalar_negate(&neghalf, &neghalf);",
      "path": "src/ecmult_gen_impl.h",
      "position": null,
      "original_position": 44,
      "commit_id": "dcc846f18518f77770b6a1fc9e39683c63685d39",
      "original_commit_id": "dafb392b406cc9fdb1d0061cdc15006a8dc719fb",
      "in_reply_to_id": 1554165746,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I predict this will fail in exhaustive test mode.",
      "created_at": "2024-04-05T19:01:17Z",
      "updated_at": "2024-04-05T19:01:18Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1058#discussion_r1554172127",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1554172127"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1058"
        }
      },
      "start_line": null,
      "original_start_line": 39,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 42,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1554179899",
      "pull_request_review_id": 1984006212,
      "id": 1554179899,
      "node_id": "PRRC_kwDOAP4Jqs5couc7",
      "diff_hunk": "@@ -25,41 +25,216 @@ static int secp256k1_ecmult_gen_context_is_built(const secp256k1_ecmult_gen_cont\n \n static void secp256k1_ecmult_gen_context_clear(secp256k1_ecmult_gen_context *ctx) {\n     ctx->built = 0;\n-    secp256k1_scalar_clear(&ctx->blind);\n-    secp256k1_gej_clear(&ctx->initial);\n+    secp256k1_scalar_clear(&ctx->scalar_offset);\n+    secp256k1_ge_clear(&ctx->ge_offset);\n+    secp256k1_fe_clear(&ctx->proj_blind);\n }\n \n-/* For accelerating the computation of a*G:\n- * To harden against timing attacks, use the following mechanism:\n- * * Break up the multiplicand into groups of PREC_BITS bits, called n_0, n_1, n_2, ..., n_(PREC_N-1).\n- * * Compute sum(n_i * (PREC_G)^i * G + U_i, i=0 ... PREC_N-1), where:\n- *   * U_i = U * 2^i, for i=0 ... PREC_N-2\n- *   * U_i = U * (1-2^(PREC_N-1)), for i=PREC_N-1\n- *   where U is a point with no known corresponding scalar. Note that sum(U_i, i=0 ... PREC_N-1) = 0.\n- * For each i, and each of the PREC_G possible values of n_i, (n_i * (PREC_G)^i * G + U_i) is\n- * precomputed (call it prec(i, n_i)). The formula now becomes sum(prec(i, n_i), i=0 ... PREC_N-1).\n- * None of the resulting prec group elements have a known scalar, and neither do any of\n- * the intermediate sums while computing a*G.\n- * The prec values are stored in secp256k1_ecmult_gen_prec_table[i][n_i] = n_i * (PREC_G)^i * G + U_i.\n- */\n-static void secp256k1_ecmult_gen(const secp256k1_ecmult_gen_context *ctx, secp256k1_gej *r, const secp256k1_scalar *gn) {\n-    int bits = ECMULT_GEN_PREC_BITS;\n-    int g = ECMULT_GEN_PREC_G(bits);\n-    int n = ECMULT_GEN_PREC_N(bits);\n+/* Compute the scalar (2^COMB_BITS - 1) / 2, the difference between the gn argument to\n+ * secp256k1_ecmult_gen, and the scalar whose encoding the table lookup bits are drawn\n+ * from (before applying blinding). */\n+static void secp256k1_ecmult_gen_scalar_diff(secp256k1_scalar* diff) {\n+    int i;\n+\n+    /* Compute scalar -1/2. */\n+    secp256k1_scalar neghalf = SECP256K1_SCALAR_CONST(0, 0, 0, 0, 0, 0, 0, 2);\n+    secp256k1_scalar_inverse_var(&neghalf, &neghalf);\n+    secp256k1_scalar_negate(&neghalf, &neghalf);",
      "path": "src/ecmult_gen_impl.h",
      "position": null,
      "original_position": 44,
      "commit_id": "dcc846f18518f77770b6a1fc9e39683c63685d39",
      "original_commit_id": "dafb392b406cc9fdb1d0061cdc15006a8dc719fb",
      "in_reply_to_id": 1554165746,
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Argh, ok, I see...  I'll try again later...",
      "created_at": "2024-04-05T19:09:18Z",
      "updated_at": "2024-04-05T19:09:18Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1058#discussion_r1554179899",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1554179899"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1058"
        }
      },
      "start_line": null,
      "original_start_line": 39,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 42,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1554280739",
      "pull_request_review_id": 1984154101,
      "id": 1554280739,
      "node_id": "PRRC_kwDOAP4Jqs5cpHEj",
      "diff_hunk": "@@ -25,41 +25,216 @@ static int secp256k1_ecmult_gen_context_is_built(const secp256k1_ecmult_gen_cont\n \n static void secp256k1_ecmult_gen_context_clear(secp256k1_ecmult_gen_context *ctx) {\n     ctx->built = 0;\n-    secp256k1_scalar_clear(&ctx->blind);\n-    secp256k1_gej_clear(&ctx->initial);\n+    secp256k1_scalar_clear(&ctx->scalar_offset);\n+    secp256k1_ge_clear(&ctx->ge_offset);\n+    secp256k1_fe_clear(&ctx->proj_blind);\n }\n \n-/* For accelerating the computation of a*G:\n- * To harden against timing attacks, use the following mechanism:\n- * * Break up the multiplicand into groups of PREC_BITS bits, called n_0, n_1, n_2, ..., n_(PREC_N-1).\n- * * Compute sum(n_i * (PREC_G)^i * G + U_i, i=0 ... PREC_N-1), where:\n- *   * U_i = U * 2^i, for i=0 ... PREC_N-2\n- *   * U_i = U * (1-2^(PREC_N-1)), for i=PREC_N-1\n- *   where U is a point with no known corresponding scalar. Note that sum(U_i, i=0 ... PREC_N-1) = 0.\n- * For each i, and each of the PREC_G possible values of n_i, (n_i * (PREC_G)^i * G + U_i) is\n- * precomputed (call it prec(i, n_i)). The formula now becomes sum(prec(i, n_i), i=0 ... PREC_N-1).\n- * None of the resulting prec group elements have a known scalar, and neither do any of\n- * the intermediate sums while computing a*G.\n- * The prec values are stored in secp256k1_ecmult_gen_prec_table[i][n_i] = n_i * (PREC_G)^i * G + U_i.\n- */\n-static void secp256k1_ecmult_gen(const secp256k1_ecmult_gen_context *ctx, secp256k1_gej *r, const secp256k1_scalar *gn) {\n-    int bits = ECMULT_GEN_PREC_BITS;\n-    int g = ECMULT_GEN_PREC_G(bits);\n-    int n = ECMULT_GEN_PREC_N(bits);\n+/* Compute the scalar (2^COMB_BITS - 1) / 2, the difference between the gn argument to\n+ * secp256k1_ecmult_gen, and the scalar whose encoding the table lookup bits are drawn\n+ * from (before applying blinding). */\n+static void secp256k1_ecmult_gen_scalar_diff(secp256k1_scalar* diff) {\n+    int i;\n+\n+    /* Compute scalar -1/2. */\n+    secp256k1_scalar neghalf = SECP256K1_SCALAR_CONST(0, 0, 0, 0, 0, 0, 0, 2);\n+    secp256k1_scalar_inverse_var(&neghalf, &neghalf);\n+    secp256k1_scalar_negate(&neghalf, &neghalf);",
      "path": "src/ecmult_gen_impl.h",
      "position": null,
      "original_position": 44,
      "commit_id": "dcc846f18518f77770b6a1fc9e39683c63685d39",
      "original_commit_id": "dafb392b406cc9fdb1d0061cdc15006a8dc719fb",
      "in_reply_to_id": 1554165746,
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "New attempt: https://github.com/real-or-random/secp256k1/commit/9054994691d9f037146988a6cb41ec7a0d90fe03",
      "created_at": "2024-04-05T20:46:01Z",
      "updated_at": "2024-04-05T20:46:02Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1058#discussion_r1554280739",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1554280739"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1058"
        }
      },
      "start_line": null,
      "original_start_line": 39,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 42,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1554385167",
      "pull_request_review_id": 1984308423,
      "id": 1554385167,
      "node_id": "PRRC_kwDOAP4Jqs5cpgkP",
      "diff_hunk": "@@ -25,41 +25,216 @@ static int secp256k1_ecmult_gen_context_is_built(const secp256k1_ecmult_gen_cont\n \n static void secp256k1_ecmult_gen_context_clear(secp256k1_ecmult_gen_context *ctx) {\n     ctx->built = 0;\n-    secp256k1_scalar_clear(&ctx->blind);\n-    secp256k1_gej_clear(&ctx->initial);\n+    secp256k1_scalar_clear(&ctx->scalar_offset);\n+    secp256k1_ge_clear(&ctx->ge_offset);\n+    secp256k1_fe_clear(&ctx->proj_blind);\n }\n \n-/* For accelerating the computation of a*G:\n- * To harden against timing attacks, use the following mechanism:\n- * * Break up the multiplicand into groups of PREC_BITS bits, called n_0, n_1, n_2, ..., n_(PREC_N-1).\n- * * Compute sum(n_i * (PREC_G)^i * G + U_i, i=0 ... PREC_N-1), where:\n- *   * U_i = U * 2^i, for i=0 ... PREC_N-2\n- *   * U_i = U * (1-2^(PREC_N-1)), for i=PREC_N-1\n- *   where U is a point with no known corresponding scalar. Note that sum(U_i, i=0 ... PREC_N-1) = 0.\n- * For each i, and each of the PREC_G possible values of n_i, (n_i * (PREC_G)^i * G + U_i) is\n- * precomputed (call it prec(i, n_i)). The formula now becomes sum(prec(i, n_i), i=0 ... PREC_N-1).\n- * None of the resulting prec group elements have a known scalar, and neither do any of\n- * the intermediate sums while computing a*G.\n- * The prec values are stored in secp256k1_ecmult_gen_prec_table[i][n_i] = n_i * (PREC_G)^i * G + U_i.\n- */\n-static void secp256k1_ecmult_gen(const secp256k1_ecmult_gen_context *ctx, secp256k1_gej *r, const secp256k1_scalar *gn) {\n-    int bits = ECMULT_GEN_PREC_BITS;\n-    int g = ECMULT_GEN_PREC_G(bits);\n-    int n = ECMULT_GEN_PREC_N(bits);\n+/* Compute the scalar (2^COMB_BITS - 1) / 2, the difference between the gn argument to\n+ * secp256k1_ecmult_gen, and the scalar whose encoding the table lookup bits are drawn\n+ * from (before applying blinding). */\n+static void secp256k1_ecmult_gen_scalar_diff(secp256k1_scalar* diff) {\n+    int i;\n+\n+    /* Compute scalar -1/2. */\n+    secp256k1_scalar neghalf = SECP256K1_SCALAR_CONST(0, 0, 0, 0, 0, 0, 0, 2);\n+    secp256k1_scalar_inverse_var(&neghalf, &neghalf);\n+    secp256k1_scalar_negate(&neghalf, &neghalf);",
      "path": "src/ecmult_gen_impl.h",
      "position": null,
      "original_position": 44,
      "commit_id": "dcc846f18518f77770b6a1fc9e39683c63685d39",
      "original_commit_id": "dafb392b406cc9fdb1d0061cdc15006a8dc719fb",
      "in_reply_to_id": 1554165746,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Great! Included.",
      "created_at": "2024-04-05T22:37:46Z",
      "updated_at": "2024-04-05T22:37:46Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1058#discussion_r1554385167",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1554385167"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1058"
        }
      },
      "start_line": null,
      "original_start_line": 39,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 42,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1554390325",
      "pull_request_review_id": 1984316746,
      "id": 1554390325,
      "node_id": "PRRC_kwDOAP4Jqs5cph01",
      "diff_hunk": "@@ -25,41 +25,216 @@ static int secp256k1_ecmult_gen_context_is_built(const secp256k1_ecmult_gen_cont\n \n static void secp256k1_ecmult_gen_context_clear(secp256k1_ecmult_gen_context *ctx) {\n     ctx->built = 0;\n-    secp256k1_scalar_clear(&ctx->blind);\n-    secp256k1_gej_clear(&ctx->initial);\n+    secp256k1_scalar_clear(&ctx->scalar_offset);\n+    secp256k1_ge_clear(&ctx->ge_offset);\n+    secp256k1_fe_clear(&ctx->proj_blind);\n }\n \n-/* For accelerating the computation of a*G:\n- * To harden against timing attacks, use the following mechanism:\n- * * Break up the multiplicand into groups of PREC_BITS bits, called n_0, n_1, n_2, ..., n_(PREC_N-1).\n- * * Compute sum(n_i * (PREC_G)^i * G + U_i, i=0 ... PREC_N-1), where:\n- *   * U_i = U * 2^i, for i=0 ... PREC_N-2\n- *   * U_i = U * (1-2^(PREC_N-1)), for i=PREC_N-1\n- *   where U is a point with no known corresponding scalar. Note that sum(U_i, i=0 ... PREC_N-1) = 0.\n- * For each i, and each of the PREC_G possible values of n_i, (n_i * (PREC_G)^i * G + U_i) is\n- * precomputed (call it prec(i, n_i)). The formula now becomes sum(prec(i, n_i), i=0 ... PREC_N-1).\n- * None of the resulting prec group elements have a known scalar, and neither do any of\n- * the intermediate sums while computing a*G.\n- * The prec values are stored in secp256k1_ecmult_gen_prec_table[i][n_i] = n_i * (PREC_G)^i * G + U_i.\n- */\n-static void secp256k1_ecmult_gen(const secp256k1_ecmult_gen_context *ctx, secp256k1_gej *r, const secp256k1_scalar *gn) {\n-    int bits = ECMULT_GEN_PREC_BITS;\n-    int g = ECMULT_GEN_PREC_G(bits);\n-    int n = ECMULT_GEN_PREC_N(bits);\n+/* Compute the scalar (2^COMB_BITS - 1) / 2, the difference between the gn argument to\n+ * secp256k1_ecmult_gen, and the scalar whose encoding the table lookup bits are drawn\n+ * from (before applying blinding). */\n+static void secp256k1_ecmult_gen_scalar_diff(secp256k1_scalar* diff) {\n+    int i;\n+\n+    /* Compute scalar -1/2. */\n+    secp256k1_scalar neghalf = SECP256K1_SCALAR_CONST(0, 0, 0, 0, 0, 0, 0, 2);\n+    secp256k1_scalar_inverse_var(&neghalf, &neghalf);\n+    secp256k1_scalar_negate(&neghalf, &neghalf);",
      "path": "src/ecmult_gen_impl.h",
      "position": null,
      "original_position": 44,
      "commit_id": "dcc846f18518f77770b6a1fc9e39683c63685d39",
      "original_commit_id": "dafb392b406cc9fdb1d0061cdc15006a8dc719fb",
      "in_reply_to_id": 1554165746,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Hmm, I realize we also have `secp256k1_scalar_half` now (added after this PR was opened), which would make most of the cost of the `diff` calculation go away too. WDYT?",
      "created_at": "2024-04-05T22:47:22Z",
      "updated_at": "2024-04-05T22:47:22Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1058#discussion_r1554390325",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1554390325"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1058"
        }
      },
      "start_line": null,
      "original_start_line": 39,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 42,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1554567487",
      "pull_request_review_id": 1984479981,
      "id": 1554567487,
      "node_id": "PRRC_kwDOAP4Jqs5cqNE_",
      "diff_hunk": "@@ -25,41 +25,216 @@ static int secp256k1_ecmult_gen_context_is_built(const secp256k1_ecmult_gen_cont\n \n static void secp256k1_ecmult_gen_context_clear(secp256k1_ecmult_gen_context *ctx) {\n     ctx->built = 0;\n-    secp256k1_scalar_clear(&ctx->blind);\n-    secp256k1_gej_clear(&ctx->initial);\n+    secp256k1_scalar_clear(&ctx->scalar_offset);\n+    secp256k1_ge_clear(&ctx->ge_offset);\n+    secp256k1_fe_clear(&ctx->proj_blind);\n }\n \n-/* For accelerating the computation of a*G:\n- * To harden against timing attacks, use the following mechanism:\n- * * Break up the multiplicand into groups of PREC_BITS bits, called n_0, n_1, n_2, ..., n_(PREC_N-1).\n- * * Compute sum(n_i * (PREC_G)^i * G + U_i, i=0 ... PREC_N-1), where:\n- *   * U_i = U * 2^i, for i=0 ... PREC_N-2\n- *   * U_i = U * (1-2^(PREC_N-1)), for i=PREC_N-1\n- *   where U is a point with no known corresponding scalar. Note that sum(U_i, i=0 ... PREC_N-1) = 0.\n- * For each i, and each of the PREC_G possible values of n_i, (n_i * (PREC_G)^i * G + U_i) is\n- * precomputed (call it prec(i, n_i)). The formula now becomes sum(prec(i, n_i), i=0 ... PREC_N-1).\n- * None of the resulting prec group elements have a known scalar, and neither do any of\n- * the intermediate sums while computing a*G.\n- * The prec values are stored in secp256k1_ecmult_gen_prec_table[i][n_i] = n_i * (PREC_G)^i * G + U_i.\n- */\n-static void secp256k1_ecmult_gen(const secp256k1_ecmult_gen_context *ctx, secp256k1_gej *r, const secp256k1_scalar *gn) {\n-    int bits = ECMULT_GEN_PREC_BITS;\n-    int g = ECMULT_GEN_PREC_G(bits);\n-    int n = ECMULT_GEN_PREC_N(bits);\n+/* Compute the scalar (2^COMB_BITS - 1) / 2, the difference between the gn argument to\n+ * secp256k1_ecmult_gen, and the scalar whose encoding the table lookup bits are drawn\n+ * from (before applying blinding). */\n+static void secp256k1_ecmult_gen_scalar_diff(secp256k1_scalar* diff) {\n+    int i;\n+\n+    /* Compute scalar -1/2. */\n+    secp256k1_scalar neghalf = SECP256K1_SCALAR_CONST(0, 0, 0, 0, 0, 0, 0, 2);\n+    secp256k1_scalar_inverse_var(&neghalf, &neghalf);\n+    secp256k1_scalar_negate(&neghalf, &neghalf);",
      "path": "src/ecmult_gen_impl.h",
      "position": null,
      "original_position": 44,
      "commit_id": "dcc846f18518f77770b6a1fc9e39683c63685d39",
      "original_commit_id": "dafb392b406cc9fdb1d0061cdc15006a8dc719fb",
      "in_reply_to_id": 1554165746,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I've reverted that commit, and instead switched to computing neghalf through `secp256k1_scalar_half` + `secp256k1_scalar_negate`.\r\n\r\n```diff\r\ndiff --git a/src/ecmult_gen_compute_table_impl.h b/src/ecmult_gen_compute_table_impl.h\r\nindex a861d95b..17a46771 100644\r\n--- a/src/ecmult_gen_compute_table_impl.h\r\n+++ b/src/ecmult_gen_compute_table_impl.h\r\n@@ -22,11 +22,11 @@ static void secp256k1_ecmult_gen_compute_table(secp256k1_ge_storage* table, cons\r\n     secp256k1_gej* vs = checked_malloc(&default_error_callback, points_total * sizeof(*vs));\r\n     secp256k1_gej u;\r\n     size_t vs_pos = 0;\r\n-    secp256k1_scalar half = SECP256K1_SCALAR_CONST(0, 0, 0, 0, 0, 0, 0, 2);\r\n+    secp256k1_scalar half;\r\n     int block, i;\r\n \r\n     /* u is the running power of two times gen we're working with, initially gen/2. */\r\n-    secp256k1_scalar_inverse_var(&half, &half);\r\n+    secp256k1_scalar_half(&half, &secp256k1_scalar_one);\r\n     secp256k1_gej_set_infinity(&u);\r\n     for (i = 255; i >= 0; --i) {\r\n         /* Use a very simple multiplication ladder to avoid dependency on ecmult. */\r\ndiff --git a/src/ecmult_gen_impl.h b/src/ecmult_gen_impl.h\r\nindex 4bb70f52..517db105 100644\r\n--- a/src/ecmult_gen_impl.h\r\n+++ b/src/ecmult_gen_impl.h\r\n@@ -37,12 +37,12 @@ static void secp256k1_ecmult_gen_scalar_diff(secp256k1_scalar* diff) {\r\n     int i;\r\n \r\n     /* Compute scalar -1/2. */\r\n-    secp256k1_scalar neghalf = SECP256K1_SCALAR_CONST(0, 0, 0, 0, 0, 0, 0, 2);\r\n-    secp256k1_scalar_inverse_var(&neghalf, &neghalf);\r\n+    secp256k1_scalar neghalf;\r\n+    secp256k1_scalar_half(&neghalf, &secp256k1_scalar_one);\r\n     secp256k1_scalar_negate(&neghalf, &neghalf);\r\n \r\n     /* Compute offset = 2^(COMB_BITS - 1). */\r\n-    secp256k1_scalar_set_int(diff, 1);\r\n+    *diff = secp256k1_scalar_one;\r\n     for (i = 0; i < COMB_BITS - 1; ++i) {\r\n         secp256k1_scalar_add(diff, diff, diff);\r\n     }\r\n```",
      "created_at": "2024-04-06T11:05:08Z",
      "updated_at": "2024-04-06T11:09:24Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1058#discussion_r1554567487",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1554567487"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1058"
        }
      },
      "start_line": null,
      "original_start_line": 39,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 42,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1554856207",
      "pull_request_review_id": 1984890227,
      "id": 1554856207,
      "node_id": "PRRC_kwDOAP4Jqs5crTkP",
      "diff_hunk": "@@ -10,74 +10,96 @@\n #include \"ecmult_gen_compute_table.h\"\n #include \"group_impl.h\"\n #include \"field_impl.h\"\n+#include \"scalar_impl.h\"\n #include \"ecmult_gen.h\"\n #include \"util.h\"\n \n-static void secp256k1_ecmult_gen_compute_table(secp256k1_ge_storage* table, const secp256k1_ge* gen, int bits) {\n-    int g = ECMULT_GEN_PREC_G(bits);\n-    int n = ECMULT_GEN_PREC_N(bits);\n+static void secp256k1_ecmult_gen_compute_table(secp256k1_ge_storage* table, const secp256k1_ge* gen, int blocks, int teeth, int spacing) {\n+    size_t points = ((size_t)1) << (teeth - 1);\n+    size_t points_total = points * blocks;\n+    secp256k1_ge* prec = checked_malloc(&default_error_callback, points_total * sizeof(*prec));\n+    secp256k1_gej* ds = checked_malloc(&default_error_callback, teeth * sizeof(*ds));\n+    secp256k1_gej* vs = checked_malloc(&default_error_callback, points_total * sizeof(*vs));\n+    secp256k1_gej u;\n+    size_t vs_pos = 0;\n+    secp256k1_scalar half = secp256k1_scalar_zero;\n+    int block, i;\n \n-    secp256k1_ge* prec = checked_malloc(&default_error_callback, n * g * sizeof(*prec));\n-    secp256k1_gej gj;\n-    secp256k1_gej nums_gej;\n-    int i, j;\n-\n-    VERIFY_CHECK(g > 0);\n-    VERIFY_CHECK(n > 0);\n-\n-    /* get the generator */\n-    secp256k1_gej_set_ge(&gj, gen);\n-\n-    /* Construct a group element with no known corresponding scalar (nothing up my sleeve). */\n+    /* u is the running power of two times gen we're working with, initially gen/2. */",
      "path": "src/ecmult_gen_compute_table_impl.h",
      "position": 42,
      "original_position": 41,
      "commit_id": "dcc846f18518f77770b6a1fc9e39683c63685d39",
      "original_commit_id": "a61f0e59218469a0153453a749fd2f539561da12",
      "in_reply_to_id": null,
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Add `VERIFY_CHECK(points_total > 0)` here to tell GCC that the loop is at least executed once.\r\n\r\nSee https://github.com/real-or-random/secp256k1/commit/854723f1e30d0e7e71967d0c225645275d169883#diff-2d5b5da541c539e4be4fc1506b554895bd68ef20bf8ae17879c8af6c948dbe54 for working CI runs on MacOS GCC.",
      "created_at": "2024-04-07T09:26:22Z",
      "updated_at": "2024-04-07T09:26:22Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1058#discussion_r1554856207",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1554856207"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1058"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 30,
      "original_line": 30,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1554888605",
      "pull_request_review_id": 1984960609,
      "id": 1554888605,
      "node_id": "PRRC_kwDOAP4Jqs5crbed",
      "diff_hunk": "@@ -25,41 +25,216 @@ static int secp256k1_ecmult_gen_context_is_built(const secp256k1_ecmult_gen_cont\n \n static void secp256k1_ecmult_gen_context_clear(secp256k1_ecmult_gen_context *ctx) {\n     ctx->built = 0;\n-    secp256k1_scalar_clear(&ctx->blind);\n-    secp256k1_gej_clear(&ctx->initial);\n+    secp256k1_scalar_clear(&ctx->scalar_offset);\n+    secp256k1_ge_clear(&ctx->ge_offset);\n+    secp256k1_fe_clear(&ctx->proj_blind);\n }\n \n-/* For accelerating the computation of a*G:\n- * To harden against timing attacks, use the following mechanism:\n- * * Break up the multiplicand into groups of PREC_BITS bits, called n_0, n_1, n_2, ..., n_(PREC_N-1).\n- * * Compute sum(n_i * (PREC_G)^i * G + U_i, i=0 ... PREC_N-1), where:\n- *   * U_i = U * 2^i, for i=0 ... PREC_N-2\n- *   * U_i = U * (1-2^(PREC_N-1)), for i=PREC_N-1\n- *   where U is a point with no known corresponding scalar. Note that sum(U_i, i=0 ... PREC_N-1) = 0.\n- * For each i, and each of the PREC_G possible values of n_i, (n_i * (PREC_G)^i * G + U_i) is\n- * precomputed (call it prec(i, n_i)). The formula now becomes sum(prec(i, n_i), i=0 ... PREC_N-1).\n- * None of the resulting prec group elements have a known scalar, and neither do any of\n- * the intermediate sums while computing a*G.\n- * The prec values are stored in secp256k1_ecmult_gen_prec_table[i][n_i] = n_i * (PREC_G)^i * G + U_i.\n- */\n-static void secp256k1_ecmult_gen(const secp256k1_ecmult_gen_context *ctx, secp256k1_gej *r, const secp256k1_scalar *gn) {\n-    int bits = ECMULT_GEN_PREC_BITS;\n-    int g = ECMULT_GEN_PREC_G(bits);\n-    int n = ECMULT_GEN_PREC_N(bits);\n+/* Compute the scalar (2^COMB_BITS - 1) / 2, the difference between the gn argument to\n+ * secp256k1_ecmult_gen, and the scalar whose encoding the table lookup bits are drawn\n+ * from (before applying blinding). */\n+static void secp256k1_ecmult_gen_scalar_diff(secp256k1_scalar* diff) {\n+    int i;\n+\n+    /* Compute scalar -1/2. */\n+    secp256k1_scalar neghalf = SECP256K1_SCALAR_CONST(0, 0, 0, 0, 0, 0, 0, 2);\n+    secp256k1_scalar_inverse_var(&neghalf, &neghalf);\n+    secp256k1_scalar_negate(&neghalf, &neghalf);",
      "path": "src/ecmult_gen_impl.h",
      "position": null,
      "original_position": 44,
      "commit_id": "dcc846f18518f77770b6a1fc9e39683c63685d39",
      "original_commit_id": "dafb392b406cc9fdb1d0061cdc15006a8dc719fb",
      "in_reply_to_id": 1554165746,
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "yeah that's much simpler, I didn't remember `scalar_half`...",
      "created_at": "2024-04-07T10:01:41Z",
      "updated_at": "2024-04-07T10:01:41Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1058#discussion_r1554888605",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1554888605"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1058"
        }
      },
      "start_line": null,
      "original_start_line": 39,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 42,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1554889851",
      "pull_request_review_id": 1984962401,
      "id": 1554889851,
      "node_id": "PRRC_kwDOAP4Jqs5crbx7",
      "diff_hunk": "@@ -10,74 +10,96 @@\n #include \"ecmult_gen_compute_table.h\"\n #include \"group_impl.h\"\n #include \"field_impl.h\"\n+#include \"scalar_impl.h\"\n #include \"ecmult_gen.h\"\n #include \"util.h\"\n \n-static void secp256k1_ecmult_gen_compute_table(secp256k1_ge_storage* table, const secp256k1_ge* gen, int bits) {\n-    int g = ECMULT_GEN_PREC_G(bits);\n-    int n = ECMULT_GEN_PREC_N(bits);\n+static void secp256k1_ecmult_gen_compute_table(secp256k1_ge_storage* table, const secp256k1_ge* gen, int blocks, int teeth, int spacing) {\n+    size_t points = ((size_t)1) << (teeth - 1);\n+    size_t points_total = points * blocks;\n+    secp256k1_ge* prec = checked_malloc(&default_error_callback, points_total * sizeof(*prec));\n+    secp256k1_gej* ds = checked_malloc(&default_error_callback, teeth * sizeof(*ds));\n+    secp256k1_gej* vs = checked_malloc(&default_error_callback, points_total * sizeof(*vs));\n+    secp256k1_gej u;\n+    size_t vs_pos = 0;\n+    secp256k1_scalar half = secp256k1_scalar_zero;\n+    int block, i;\n \n-    secp256k1_ge* prec = checked_malloc(&default_error_callback, n * g * sizeof(*prec));\n-    secp256k1_gej gj;\n-    secp256k1_gej nums_gej;\n-    int i, j;\n-\n-    VERIFY_CHECK(g > 0);\n-    VERIFY_CHECK(n > 0);\n-\n-    /* get the generator */\n-    secp256k1_gej_set_ge(&gj, gen);\n-\n-    /* Construct a group element with no known corresponding scalar (nothing up my sleeve). */\n+    /* u is the running power of two times gen we're working with, initially gen/2. */",
      "path": "src/ecmult_gen_compute_table_impl.h",
      "position": 42,
      "original_position": 41,
      "commit_id": "dcc846f18518f77770b6a1fc9e39683c63685d39",
      "original_commit_id": "a61f0e59218469a0153453a749fd2f539561da12",
      "in_reply_to_id": 1554856207,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Wow, thanks, I didn't consider this possibility.\n\nSo bizarre that GCC *doesn't* detect this when invoking `secp256k1_scalar_inverse`...",
      "created_at": "2024-04-07T10:09:24Z",
      "updated_at": "2024-04-07T10:09:24Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1058#discussion_r1554889851",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1554889851"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1058"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 30,
      "original_line": 30,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1554892540",
      "pull_request_review_id": 1984965166,
      "id": 1554892540,
      "node_id": "PRRC_kwDOAP4Jqs5crcb8",
      "diff_hunk": "@@ -10,74 +10,96 @@\n #include \"ecmult_gen_compute_table.h\"\n #include \"group_impl.h\"\n #include \"field_impl.h\"\n+#include \"scalar_impl.h\"\n #include \"ecmult_gen.h\"\n #include \"util.h\"\n \n-static void secp256k1_ecmult_gen_compute_table(secp256k1_ge_storage* table, const secp256k1_ge* gen, int bits) {\n-    int g = ECMULT_GEN_PREC_G(bits);\n-    int n = ECMULT_GEN_PREC_N(bits);\n+static void secp256k1_ecmult_gen_compute_table(secp256k1_ge_storage* table, const secp256k1_ge* gen, int blocks, int teeth, int spacing) {\n+    size_t points = ((size_t)1) << (teeth - 1);\n+    size_t points_total = points * blocks;\n+    secp256k1_ge* prec = checked_malloc(&default_error_callback, points_total * sizeof(*prec));\n+    secp256k1_gej* ds = checked_malloc(&default_error_callback, teeth * sizeof(*ds));\n+    secp256k1_gej* vs = checked_malloc(&default_error_callback, points_total * sizeof(*vs));\n+    secp256k1_gej u;\n+    size_t vs_pos = 0;\n+    secp256k1_scalar half = secp256k1_scalar_zero;\n+    int block, i;\n \n-    secp256k1_ge* prec = checked_malloc(&default_error_callback, n * g * sizeof(*prec));\n-    secp256k1_gej gj;\n-    secp256k1_gej nums_gej;\n-    int i, j;\n-\n-    VERIFY_CHECK(g > 0);\n-    VERIFY_CHECK(n > 0);\n-\n-    /* get the generator */\n-    secp256k1_gej_set_ge(&gj, gen);\n-\n-    /* Construct a group element with no known corresponding scalar (nothing up my sleeve). */\n+    /* u is the running power of two times gen we're working with, initially gen/2. */",
      "path": "src/ecmult_gen_compute_table_impl.h",
      "position": 42,
      "original_position": 41,
      "commit_id": "dcc846f18518f77770b6a1fc9e39683c63685d39",
      "original_commit_id": "a61f0e59218469a0153453a749fd2f539561da12",
      "in_reply_to_id": 1554856207,
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yep, and I had to find this [GCC bug](https://gcc.gnu.org/bugzilla/show_bug.cgi?id=100417) to understand that GCC talks about the *memory pointed to by* `ret` (inside `checked_malloc`) being uninitialized, and not `ret` itself...",
      "created_at": "2024-04-07T10:25:22Z",
      "updated_at": "2024-04-07T10:25:23Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1058#discussion_r1554892540",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1554892540"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1058"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 30,
      "original_line": 30,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1562876786",
      "pull_request_review_id": 1998001058,
      "id": 1562876786,
      "node_id": "PRRC_kwDOAP4Jqs5dJ5ty",
      "diff_hunk": "",
      "path": "CHANGELOG.md",
      "position": 1,
      "original_position": 1,
      "commit_id": "dcc846f18518f77770b6a1fc9e39683c63685d39",
      "original_commit_id": "dcc846f18518f77770b6a1fc9e39683c63685d39",
      "in_reply_to_id": null,
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "changelog:\r\n -  I think we should expand a bit on the difference to the old table sizes. (Not sure to which section that belongs then. Your current approach of using three sections is technically correct. But maybe just merge all of these items into one item under [Changed]. Then it's less scattered\r\n - nit: Want to give also the CMake options (see older changelog items for examples)?",
      "created_at": "2024-04-12T17:05:43Z",
      "updated_at": "2024-04-12T17:05:44Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1058#discussion_r1562876786",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1562876786"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1058"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1,
      "original_line": 1,
      "side": "RIGHT"
    }
  ]
}