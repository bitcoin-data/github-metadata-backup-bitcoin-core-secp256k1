{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/588",
    "id": 248675840,
    "node_id": "MDExOlB1bGxSZXF1ZXN0MjQ4Njc1ODQw",
    "html_url": "https://github.com/bitcoin-core/secp256k1/pull/588",
    "diff_url": "https://github.com/bitcoin-core/secp256k1/pull/588.diff",
    "patch_url": "https://github.com/bitcoin-core/secp256k1/pull/588.patch",
    "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/588",
    "commits_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/588/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/588/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/588/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin-core/secp256k1/statuses/8fa102cc29ce4197e925a073c5429a797ec75e22",
    "number": 588,
    "state": "closed",
    "locked": false,
    "maintainer_can_modify": false,
    "title": "Allow sign-to-contract commitments in schnorrsigs",
    "user": {
      "login": "jonasnick",
      "id": 2582071,
      "node_id": "MDQ6VXNlcjI1ODIwNzE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasnick",
      "html_url": "https://github.com/jonasnick",
      "followers_url": "https://api.github.com/users/jonasnick/followers",
      "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasnick/orgs",
      "repos_url": "https://api.github.com/users/jonasnick/repos",
      "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/jonasnick/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "This PR implements creation and verification of sign-to-contract commitments in the\r\nschnorrsig module. The following snippet for example puts a commitment to `data32`\r\ninto the (Schnorr) signature.\r\n\r\n```\r\n/* Signer */\r\nsecp256k1_s2c_commit_context s2c_ctx;\r\nsecp256k1_s2c_commit_context_create(ctx, &s2c_ctx, data32);\r\nsecp256k1_schnorrsig_sign(sign, &sig, &nonce_is_negated, msg, sk1, NULL, &s2c_ctx);\r\nsecp256k1_s2c_commit_get_original_nonce(ctx, &s2c_original_nonce, &s2c_ctx);\r\n\r\n/* Verifier */\r\nsecp256k1_schnorrsig_verify_s2c_commit(ctx, &sig, data32, &s2c_original_nonce, nonce_is_negated);\r\n```\r\n\r\nThis PR is based on #558. The commits in this PR was previously included in #572.\r\nThe tests should provide full coverage of the reachable lines.\r\n\r\nThere is also functionality for doing pay-to-contract style commitments\r\n(ec_commit), but it's not exposed yet. If it will be in the future it would\r\nmake sense to add an optional argument with a SHA midstate to allow hashing\r\narbitrary version prefixes before hashing the public key (which would be useful\r\nin taproot for example).\r\n\r\nSign-to-contract and right now only work with schnorrsig_sign and\r\nnonce_function_bipschnorr. It should be straightforward to add support for\r\nECDSA too in the future.\r\n\r\nOne thing to keep in mind is that for some users moving from ecdsa to\r\nschnorrsigs requires reading the documentation carefully. There is undocumented\r\nfunctionality in nonce_function_rfc6979 where the additional nonce data is\r\nhashed into the secret. If someone uses that and then call schnorrsig_sign with\r\nsimilar nonce data this results in a segmentation fault because\r\nnonce_function_bipschnorr which is used by default in schnorrsig_sign expects\r\nan s2c_commit_context object as nonce data and writes back to it.",
    "labels": [],
    "created_at": "2019-01-29T22:10:25Z",
    "updated_at": "2019-07-03T12:59:48Z",
    "closed_at": "2019-07-03T12:59:37Z",
    "mergeable_state": "unknown",
    "merge_commit_sha": "b7960acdf0bb95e2a26dd1d099092b8ecc18b6c1",
    "assignees": [],
    "requested_reviewers": [],
    "requested_teams": [],
    "head": {
      "label": "jonasnick:schnorrsig-s2c-only",
      "ref": "schnorrsig-s2c-only",
      "sha": "8fa102cc29ce4197e925a073c5429a797ec75e22",
      "user": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "repo": {
        "id": 57937974,
        "node_id": "MDEwOlJlcG9zaXRvcnk1NzkzNzk3NA==",
        "name": "secp256k1",
        "full_name": "jonasnick/secp256k1",
        "owner": {
          "login": "jonasnick",
          "id": 2582071,
          "node_id": "MDQ6VXNlcjI1ODIwNzE=",
          "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/jonasnick",
          "html_url": "https://github.com/jonasnick",
          "followers_url": "https://api.github.com/users/jonasnick/followers",
          "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
          "organizations_url": "https://api.github.com/users/jonasnick/orgs",
          "repos_url": "https://api.github.com/users/jonasnick/repos",
          "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/jonasnick/received_events",
          "type": "User",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/jonasnick/secp256k1",
        "description": "Optimized C library for EC operations on curve secp256k1",
        "fork": true,
        "url": "https://api.github.com/repos/jonasnick/secp256k1",
        "archive_url": "https://api.github.com/repos/jonasnick/secp256k1/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/jonasnick/secp256k1/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/jonasnick/secp256k1/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/jonasnick/secp256k1/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/jonasnick/secp256k1/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/jonasnick/secp256k1/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/jonasnick/secp256k1/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/jonasnick/secp256k1/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/jonasnick/secp256k1/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/jonasnick/secp256k1/contributors",
        "deployments_url": "https://api.github.com/repos/jonasnick/secp256k1/deployments",
        "downloads_url": "https://api.github.com/repos/jonasnick/secp256k1/downloads",
        "events_url": "https://api.github.com/repos/jonasnick/secp256k1/events",
        "forks_url": "https://api.github.com/repos/jonasnick/secp256k1/forks",
        "git_commits_url": "https://api.github.com/repos/jonasnick/secp256k1/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/jonasnick/secp256k1/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/jonasnick/secp256k1/git/tags%7B/sha%7D",
        "git_url": "git://github.com/jonasnick/secp256k1.git",
        "issue_comment_url": "https://api.github.com/repos/jonasnick/secp256k1/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/jonasnick/secp256k1/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/jonasnick/secp256k1/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/jonasnick/secp256k1/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/jonasnick/secp256k1/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/jonasnick/secp256k1/languages",
        "merges_url": "https://api.github.com/repos/jonasnick/secp256k1/merges",
        "milestones_url": "https://api.github.com/repos/jonasnick/secp256k1/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/jonasnick/secp256k1/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/jonasnick/secp256k1/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/jonasnick/secp256k1/releases%7B/id%7D",
        "ssh_url": "git@github.com:jonasnick/secp256k1.git",
        "stargazers_url": "https://api.github.com/repos/jonasnick/secp256k1/stargazers",
        "statuses_url": "https://api.github.com/repos/jonasnick/secp256k1/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/jonasnick/secp256k1/subscribers",
        "subscription_url": "https://api.github.com/repos/jonasnick/secp256k1/subscription",
        "tags_url": "https://api.github.com/repos/jonasnick/secp256k1/tags",
        "teams_url": "https://api.github.com/repos/jonasnick/secp256k1/teams",
        "trees_url": "https://api.github.com/repos/jonasnick/secp256k1/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/jonasnick/secp256k1.git",
        "hooks_url": "https://api.github.com/repos/jonasnick/secp256k1/hooks",
        "svn_url": "https://github.com/jonasnick/secp256k1",
        "language": "C",
        "forks_count": 4,
        "stargazers_count": 3,
        "watchers_count": 3,
        "size": 11430,
        "default_branch": "master",
        "open_issues_count": 16,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": true,
        "has_wiki": true,
        "has_pages": false,
        "has_downloads": true,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-05-24T13:49:16Z",
        "created_at": "2016-05-03T03:14:21Z",
        "updated_at": "2023-03-16T11:44:51Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "base": {
      "label": "bitcoin-core:master",
      "ref": "master",
      "sha": "b408c6a8b287003d1ade5709e6f7bc3c7f1d5be7",
      "user": {
        "login": "bitcoin-core",
        "id": 13464320,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjEzNDY0MzIw",
        "avatar_url": "https://avatars.githubusercontent.com/u/13464320?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin-core",
        "html_url": "https://github.com/bitcoin-core",
        "followers_url": "https://api.github.com/users/bitcoin-core/followers",
        "following_url": "https://api.github.com/users/bitcoin-core/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin-core/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin-core/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin-core/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin-core/orgs",
        "repos_url": "https://api.github.com/users/bitcoin-core/repos",
        "events_url": "https://api.github.com/users/bitcoin-core/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin-core/received_events",
        "type": "Organization",
        "site_admin": false
      },
      "repo": {
        "id": 16648618,
        "node_id": "MDEwOlJlcG9zaXRvcnkxNjY0ODYxOA==",
        "name": "secp256k1",
        "full_name": "bitcoin-core/secp256k1",
        "owner": {
          "login": "bitcoin-core",
          "id": 13464320,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjEzNDY0MzIw",
          "avatar_url": "https://avatars.githubusercontent.com/u/13464320?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin-core",
          "html_url": "https://github.com/bitcoin-core",
          "followers_url": "https://api.github.com/users/bitcoin-core/followers",
          "following_url": "https://api.github.com/users/bitcoin-core/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin-core/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin-core/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin-core/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin-core/orgs",
          "repos_url": "https://api.github.com/users/bitcoin-core/repos",
          "events_url": "https://api.github.com/users/bitcoin-core/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin-core/received_events",
          "type": "Organization",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/bitcoin-core/secp256k1",
        "description": "Optimized C library for EC operations on curve secp256k1",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1",
        "archive_url": "https://api.github.com/repos/bitcoin-core/secp256k1/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin-core/secp256k1/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin-core/secp256k1/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin-core/secp256k1/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin-core/secp256k1/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin-core/secp256k1/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin-core/secp256k1/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin-core/secp256k1/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin-core/secp256k1/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin-core/secp256k1/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin-core/secp256k1/downloads",
        "events_url": "https://api.github.com/repos/bitcoin-core/secp256k1/events",
        "forks_url": "https://api.github.com/repos/bitcoin-core/secp256k1/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin-core/secp256k1.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin-core/secp256k1/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin-core/secp256k1/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin-core/secp256k1/languages",
        "merges_url": "https://api.github.com/repos/bitcoin-core/secp256k1/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin-core/secp256k1/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin-core/secp256k1/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin-core/secp256k1/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin-core/secp256k1.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin-core/secp256k1/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin-core/secp256k1/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin-core/secp256k1/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin-core/secp256k1/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin-core/secp256k1/tags",
        "teams_url": "https://api.github.com/repos/bitcoin-core/secp256k1/teams",
        "trees_url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin-core/secp256k1.git",
        "hooks_url": "https://api.github.com/repos/bitcoin-core/secp256k1/hooks",
        "svn_url": "https://github.com/bitcoin-core/secp256k1",
        "language": "C",
        "forks_count": 948,
        "stargazers_count": 1768,
        "watchers_count": 1768,
        "size": 10062,
        "default_branch": "master",
        "open_issues_count": 142,
        "is_template": false,
        "topics": [],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": true,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-06-12T16:38:48Z",
        "created_at": "2014-02-08T17:30:06Z",
        "updated_at": "2023-06-12T17:38:13Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/588"
      }
    },
    "author_association": "MEMBER",
    "draft": false,
    "additions": 2171,
    "deletions": 15,
    "changed_files": 18,
    "commits": 6,
    "review_comments": 26,
    "comments": 4
  },
  "events": [
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTY2NDg2MTg6ZjQxNTNhMjlhYmFiOWJmODcxMDc4NDZmMTI1YzRmNjc5NTg3OWNhZQ==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/f4153a29abab9bf87107846f125c4f6795879cae",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/f4153a29abab9bf87107846f125c4f6795879cae",
      "tree": {
        "sha": "0e10baa1ecbab9f3be113f08ab7d862cecf157d4",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/0e10baa1ecbab9f3be113f08ab7d862cecf157d4"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/1086fda4c1975d0cad8d3cad96794a64ec12dca4",
          "sha": "1086fda4c1975d0cad8d3cad96794a64ec12dca4",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/1086fda4c1975d0cad8d3cad96794a64ec12dca4"
        }
      ],
      "message": "add chacha20 function",
      "committer": {
        "name": "Jonas Nick",
        "email": "jonasd.nick@gmail.com",
        "date": "2019-01-29T10:17:36Z"
      },
      "author": {
        "name": "Andrew Poelstra",
        "email": "apoelstra@wpsoftware.net",
        "date": "2018-04-03T22:06:07Z"
      },
      "sha": "f4153a29abab9bf87107846f125c4f6795879cae"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTY2NDg2MTg6ZDY1YWRjODJmOGU3YmEwYWI0YWE3MjMxMDU4MmUxZWQ3N2NhYjE3MQ==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/d65adc82f8e7ba0ab4aa72310582e1ed77cab171",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/d65adc82f8e7ba0ab4aa72310582e1ed77cab171",
      "tree": {
        "sha": "0b6f4753822601c2f4c12e01765bcd39c0843dd3",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/0b6f4753822601c2f4c12e01765bcd39c0843dd3"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/f4153a29abab9bf87107846f125c4f6795879cae",
          "sha": "f4153a29abab9bf87107846f125c4f6795879cae",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/f4153a29abab9bf87107846f125c4f6795879cae"
        }
      ],
      "message": "Add schnorrsig module which implements BIP-schnorr [0] compatible signing, verification and batch verification.\n\n[0] https://github.com/sipa/bips/blob/bip-schnorr/bip-schnorr.mediawiki",
      "committer": {
        "name": "Jonas Nick",
        "email": "jonasd.nick@gmail.com",
        "date": "2019-01-29T10:17:39Z"
      },
      "author": {
        "name": "Andrew Poelstra",
        "email": "apoelstra@wpsoftware.net",
        "date": "2018-05-09T15:37:35Z"
      },
      "sha": "d65adc82f8e7ba0ab4aa72310582e1ed77cab171"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTY2NDg2MTg6MzlmZTc5MGI4OWM2NjRiYTJmMGNiOWQ5NTM4OTVhNDM0MWYyNTExMQ==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/39fe790b89c664ba2f0cb9d953895a4341f25111",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/39fe790b89c664ba2f0cb9d953895a4341f25111",
      "tree": {
        "sha": "aba67a858a1895388cd2dd30f41dc9ab23edc1ba",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/aba67a858a1895388cd2dd30f41dc9ab23edc1ba"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/d65adc82f8e7ba0ab4aa72310582e1ed77cab171",
          "sha": "d65adc82f8e7ba0ab4aa72310582e1ed77cab171",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/d65adc82f8e7ba0ab4aa72310582e1ed77cab171"
        }
      ],
      "message": "Add secp256k1_context argument to secp256k1_nonce_functions",
      "committer": {
        "name": "Jonas Nick",
        "email": "jonasd.nick@gmail.com",
        "date": "2019-01-29T22:06:10Z"
      },
      "author": {
        "name": "Jonas Nick",
        "email": "jonasd.nick@gmail.com",
        "date": "2018-10-16T16:07:56Z"
      },
      "sha": "39fe790b89c664ba2f0cb9d953895a4341f25111"
    },
    {
      "event": "reviewed",
      "id": 197827802,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTk3ODI3ODAy",
      "url": null,
      "actor": null,
      "commit_id": "72342d4fec862ff4d355d9449309e9325401f599",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "apoelstra",
        "id": 1351933,
        "node_id": "MDQ6VXNlcjEzNTE5MzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1351933?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/apoelstra",
        "html_url": "https://github.com/apoelstra",
        "followers_url": "https://api.github.com/users/apoelstra/followers",
        "following_url": "https://api.github.com/users/apoelstra/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/apoelstra/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/apoelstra/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/apoelstra/subscriptions",
        "organizations_url": "https://api.github.com/users/apoelstra/orgs",
        "repos_url": "https://api.github.com/users/apoelstra/repos",
        "events_url": "https://api.github.com/users/apoelstra/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/apoelstra/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/588#pullrequestreview-197827802",
      "submitted_at": "2019-01-29T22:55:01Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/588"
    },
    {
      "event": "commented",
      "id": 459929249,
      "node_id": "MDEyOklzc3VlQ29tbWVudDQ1OTkyOTI0OQ==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/459929249",
      "actor": {
        "login": "gmaxwell",
        "id": 858454,
        "node_id": "MDQ6VXNlcjg1ODQ1NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gmaxwell",
        "html_url": "https://github.com/gmaxwell",
        "followers_url": "https://api.github.com/users/gmaxwell/followers",
        "following_url": "https://api.github.com/users/gmaxwell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gmaxwell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gmaxwell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
        "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
        "repos_url": "https://api.github.com/users/gmaxwell/repos",
        "events_url": "https://api.github.com/users/gmaxwell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-02-02T02:58:32Z",
      "updated_at": "2019-02-02T02:59:22Z",
      "author_association": "CONTRIBUTOR",
      "body": "If you want to harden against misuse of the nonce function arguments, you could add a constant uint64 as the first member of the s2c_commit_context  and test it.\r\n\r\nGenerally, I'd like to see us do that with all objects that we allow users to pass around: set a magic value when they're constructed, zero it when they're destroyed.  Check for it before other accesses... exception being purely internal objects or elements where a caller might plausibly have thousands of them in existence at once (such that the overhead becomes a concern).\r\n\r\n>  nonce_function_rfc6979 where the additional nonce data is\r\nhashed into the secret.\r\n\r\nOdd that we didn't document it-- aux data is actually part of RFC6979.\r\n",
      "user": {
        "login": "gmaxwell",
        "id": 858454,
        "node_id": "MDQ6VXNlcjg1ODQ1NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gmaxwell",
        "html_url": "https://github.com/gmaxwell",
        "followers_url": "https://api.github.com/users/gmaxwell/followers",
        "following_url": "https://api.github.com/users/gmaxwell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gmaxwell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gmaxwell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
        "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
        "repos_url": "https://api.github.com/users/gmaxwell/repos",
        "events_url": "https://api.github.com/users/gmaxwell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/588#issuecomment-459929249",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/588"
    },
    {
      "event": "reviewed",
      "id": 199620090,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTk5NjIwMDkw",
      "url": null,
      "actor": null,
      "commit_id": "72342d4fec862ff4d355d9449309e9325401f599",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "In general, I wonder whether it is a better idea \r\n - not to use the nonce function for s2c. (For example, this prevents people from using their own nonce function together with s2c.)\r\n - instead of a s2c context, have a s2c_opening, which contains all opening information (i.e., the original pubnonce and the information whether the nonce was negated. This looks more like a normal commitment API to me then.)",
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/588#pullrequestreview-199620090",
      "submitted_at": "2019-02-04T15:47:56Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/588"
    },
    {
      "event": "commented",
      "id": 462452310,
      "node_id": "MDEyOklzc3VlQ29tbWVudDQ2MjQ1MjMxMA==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/462452310",
      "actor": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-02-11T19:03:53Z",
      "updated_at": "2019-02-11T19:03:53Z",
      "author_association": "MEMBER",
      "body": "I added a commit that adds a magic number to the sign to contract context struct.",
      "user": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/588#issuecomment-462452310",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/588"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTY2NDg2MTg6NzQxZGRkNTIzMmEzMTRmYWZlOTEzYjc5NWM1NjA3YzZmMWMyYmVkMQ==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/741ddd5232a314fafe913b795c5607c6f1c2bed1",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/741ddd5232a314fafe913b795c5607c6f1c2bed1",
      "tree": {
        "sha": "1f76b2f1feb35716c865c98d4a6890e61f0a391a",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/1f76b2f1feb35716c865c98d4a6890e61f0a391a"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/39fe790b89c664ba2f0cb9d953895a4341f25111",
          "sha": "39fe790b89c664ba2f0cb9d953895a4341f25111",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/39fe790b89c664ba2f0cb9d953895a4341f25111"
        }
      ],
      "message": "Add ec_commitments which are essentially the pay-to-contract-style tweaks of public keys.\nThe functionality is not exposed.",
      "committer": {
        "name": "Jonas Nick",
        "email": "jonasd.nick@gmail.com",
        "date": "2019-02-13T13:45:06Z"
      },
      "author": {
        "name": "Jonas Nick",
        "email": "jonasd.nick@gmail.com",
        "date": "2018-11-01T10:31:24Z"
      },
      "sha": "741ddd5232a314fafe913b795c5607c6f1c2bed1"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTY2NDg2MTg6NmRkYjY1NTk4NWVmNjA0MjM3MzY1ZTU0OTgwZmIzNDY4M2NjYTEwNA==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/6ddb655985ef604237365e54980fb34683cca104",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/6ddb655985ef604237365e54980fb34683cca104",
      "tree": {
        "sha": "405c5f91b74ca12fe79be8bce54f32426d7dbf53",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/405c5f91b74ca12fe79be8bce54f32426d7dbf53"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/741ddd5232a314fafe913b795c5607c6f1c2bed1",
          "sha": "741ddd5232a314fafe913b795c5607c6f1c2bed1",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/741ddd5232a314fafe913b795c5607c6f1c2bed1"
        }
      ],
      "message": "Add and expose sign-to-contract contexts and make nonce_function_bipschnorr do sign-to-contract commitments if an s2c context is provided as nonce data",
      "committer": {
        "name": "Jonas Nick",
        "email": "jonasd.nick@gmail.com",
        "date": "2019-02-13T13:45:10Z"
      },
      "author": {
        "name": "Jonas Nick",
        "email": "jonasd.nick@gmail.com",
        "date": "2018-11-01T10:31:47Z"
      },
      "sha": "6ddb655985ef604237365e54980fb34683cca104"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTY2NDg2MTg6OGZhMTAyY2MyOWNlNDE5N2U5MjVhMDczYzU0MjlhNzk3ZWM3NWUyMg==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/8fa102cc29ce4197e925a073c5429a797ec75e22",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/8fa102cc29ce4197e925a073c5429a797ec75e22",
      "tree": {
        "sha": "602733b5f5753542f5365748f5c74dcd6b6864de",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/602733b5f5753542f5365748f5c74dcd6b6864de"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/6ddb655985ef604237365e54980fb34683cca104",
          "sha": "6ddb655985ef604237365e54980fb34683cca104",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/6ddb655985ef604237365e54980fb34683cca104"
        }
      ],
      "message": "Add verification of schnorrsig sign-to-contract commitments",
      "committer": {
        "name": "Jonas Nick",
        "email": "jonasd.nick@gmail.com",
        "date": "2019-02-13T13:45:15Z"
      },
      "author": {
        "name": "Jonas Nick",
        "email": "jonasd.nick@gmail.com",
        "date": "2019-01-29T13:52:56Z"
      },
      "sha": "8fa102cc29ce4197e925a073c5429a797ec75e22"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2136750785,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjEzNjc1MDc4NQ==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/2136750785",
      "actor": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-02-13T13:47:17Z"
    },
    {
      "event": "commented",
      "id": 463204991,
      "node_id": "MDEyOklzc3VlQ29tbWVudDQ2MzIwNDk5MQ==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/463204991",
      "actor": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-02-13T13:47:27Z",
      "updated_at": "2019-02-13T13:47:27Z",
      "author_association": "MEMBER",
      "body": "squashed",
      "user": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/588#issuecomment-463204991",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/588"
    },
    {
      "event": "reviewed",
      "id": 256418039,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjU2NDE4MDM5",
      "url": null,
      "actor": null,
      "commit_id": "8fa102cc29ce4197e925a073c5429a797ec75e22",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "elichai",
        "id": 2167860,
        "node_id": "MDQ6VXNlcjIxNjc4NjA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2167860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/elichai",
        "html_url": "https://github.com/elichai",
        "followers_url": "https://api.github.com/users/elichai/followers",
        "following_url": "https://api.github.com/users/elichai/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/elichai/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/elichai/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/elichai/subscriptions",
        "organizations_url": "https://api.github.com/users/elichai/orgs",
        "repos_url": "https://api.github.com/users/elichai/repos",
        "events_url": "https://api.github.com/users/elichai/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/elichai/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/588#pullrequestreview-256418039",
      "submitted_at": "2019-07-01T15:41:22Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/588"
    },
    {
      "event": "reviewed",
      "id": 256430277,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjU2NDMwMjc3",
      "url": null,
      "actor": null,
      "commit_id": "8fa102cc29ce4197e925a073c5429a797ec75e22",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "elichai",
        "id": 2167860,
        "node_id": "MDQ6VXNlcjIxNjc4NjA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2167860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/elichai",
        "html_url": "https://github.com/elichai",
        "followers_url": "https://api.github.com/users/elichai/followers",
        "following_url": "https://api.github.com/users/elichai/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/elichai/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/elichai/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/elichai/subscriptions",
        "organizations_url": "https://api.github.com/users/elichai/orgs",
        "repos_url": "https://api.github.com/users/elichai/repos",
        "events_url": "https://api.github.com/users/elichai/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/elichai/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/588#pullrequestreview-256430277",
      "submitted_at": "2019-07-01T16:03:20Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/588"
    },
    {
      "event": "reviewed",
      "id": 256462334,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjU2NDYyMzM0",
      "url": null,
      "actor": null,
      "commit_id": "8fa102cc29ce4197e925a073c5429a797ec75e22",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "elichai",
        "id": 2167860,
        "node_id": "MDQ6VXNlcjIxNjc4NjA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2167860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/elichai",
        "html_url": "https://github.com/elichai",
        "followers_url": "https://api.github.com/users/elichai/followers",
        "following_url": "https://api.github.com/users/elichai/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/elichai/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/elichai/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/elichai/subscriptions",
        "organizations_url": "https://api.github.com/users/elichai/orgs",
        "repos_url": "https://api.github.com/users/elichai/repos",
        "events_url": "https://api.github.com/users/elichai/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/elichai/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/588#pullrequestreview-256462334",
      "submitted_at": "2019-07-01T17:12:34Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/588"
    },
    {
      "event": "commented",
      "id": 508082491,
      "node_id": "MDEyOklzc3VlQ29tbWVudDUwODA4MjQ5MQ==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/508082491",
      "actor": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-07-03T12:59:33Z",
      "updated_at": "2019-07-03T12:59:48Z",
      "author_association": "MEMBER",
      "body": "Closing in favor of #589. Thanks for the feedback.",
      "user": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/588#issuecomment-508082491",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/588"
    },
    {
      "event": "closed",
      "id": 2457490118,
      "node_id": "MDExOkNsb3NlZEV2ZW50MjQ1NzQ5MDExOA==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/2457490118",
      "actor": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-07-03T12:59:37Z"
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/252052790",
      "pull_request_review_id": 197827802,
      "id": 252052790,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1MjA1Mjc5MA==",
      "diff_hunk": "@@ -610,6 +610,103 @@ int secp256k1_ec_pubkey_combine(const secp256k1_context* ctx, secp256k1_pubkey *\n     return 1;\n }\n \n+/* Compute an ec commitment tweak as hash(pubkey, data). */\n+int secp256k1_ec_commit_tweak(const secp256k1_context *ctx, unsigned char *tweak32, const secp256k1_pubkey *pubkey, const unsigned char *data, size_t data_size) {",
      "path": "src/secp256k1.c",
      "position": null,
      "original_position": 5,
      "commit_id": "8fa102cc29ce4197e925a073c5429a797ec75e22",
      "original_commit_id": "72342d4fec862ff4d355d9449309e9325401f599",
      "in_reply_to_id": null,
      "user": {
        "login": "apoelstra",
        "id": 1351933,
        "node_id": "MDQ6VXNlcjEzNTE5MzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1351933?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/apoelstra",
        "html_url": "https://github.com/apoelstra",
        "followers_url": "https://api.github.com/users/apoelstra/followers",
        "following_url": "https://api.github.com/users/apoelstra/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/apoelstra/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/apoelstra/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/apoelstra/subscriptions",
        "organizations_url": "https://api.github.com/users/apoelstra/orgs",
        "repos_url": "https://api.github.com/users/apoelstra/repos",
        "events_url": "https://api.github.com/users/apoelstra/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/apoelstra/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Should be `static`",
      "created_at": "2019-01-29T22:55:01Z",
      "updated_at": "2019-02-13T13:47:17Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/588#discussion_r252052790",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/252052790"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/588"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 614,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/253496663",
      "pull_request_review_id": 199620090,
      "id": 253496663,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1MzQ5NjY2Mw==",
      "diff_hunk": "@@ -610,6 +610,103 @@ int secp256k1_ec_pubkey_combine(const secp256k1_context* ctx, secp256k1_pubkey *\n     return 1;\n }\n \n+/* Compute an ec commitment tweak as hash(pubkey, data). */\n+int secp256k1_ec_commit_tweak(const secp256k1_context *ctx, unsigned char *tweak32, const secp256k1_pubkey *pubkey, const unsigned char *data, size_t data_size) {\n+    secp256k1_ge p;\n+    unsigned char rbuf[33];\n+    size_t rbuf_size = sizeof(rbuf);\n+    secp256k1_sha256 sha;\n+\n+    if (data_size == 0) {\n+        /* That's probably not what the caller wanted */\n+        return 0;",
      "path": "src/secp256k1.c",
      "position": 36,
      "original_position": 13,
      "commit_id": "8fa102cc29ce4197e925a073c5429a797ec75e22",
      "original_commit_id": "72342d4fec862ff4d355d9449309e9325401f599",
      "in_reply_to_id": null,
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "If that's not what the caller wanted, maybe a CHECK or a VERIFY_CHECK is better.",
      "created_at": "2019-02-04T14:45:26Z",
      "updated_at": "2019-02-13T13:47:17Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/588#discussion_r253496663",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/253496663"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/588"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 601,
      "original_line": 601,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/253501716",
      "pull_request_review_id": 199620090,
      "id": 253501716,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1MzUwMTcxNg==",
      "diff_hunk": "@@ -2339,6 +2339,110 @@ void run_ec_combine(void) {\n     }\n }\n \n+int test_ec_commit_seckey(unsigned char *seckey, secp256k1_pubkey *commitment) {\n+    /* Return if seckey is the discrete log of commitment */\n+    secp256k1_pubkey pubkey_tmp;\n+    return secp256k1_ec_pubkey_create(ctx, &pubkey_tmp, seckey) == 1\n+           && memcmp(&pubkey_tmp, commitment, sizeof(pubkey_tmp)) == 0;\n+}\n+\n+void test_ec_commit(void) {\n+    unsigned char seckey[32];\n+    secp256k1_pubkey pubkey;\n+    secp256k1_pubkey commitment;\n+    unsigned char data[32];\n+\n+    /* Create random keypair */\n+    secp256k1_rand256(seckey);\n+    CHECK(secp256k1_ec_pubkey_create(ctx, &pubkey, seckey));\n+    /* Create random data */\n+    {\n+        secp256k1_scalar d;\n+        random_scalar_order_test(&d);",
      "path": "src/tests.c",
      "position": null,
      "original_position": 23,
      "commit_id": "8fa102cc29ce4197e925a073c5429a797ec75e22",
      "original_commit_id": "72342d4fec862ff4d355d9449309e9325401f599",
      "in_reply_to_id": null,
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "secp256k1_rand256 instead?",
      "created_at": "2019-02-04T14:57:26Z",
      "updated_at": "2019-02-13T13:47:17Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/588#discussion_r253501716",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/253501716"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/588"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2361,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/253506740",
      "pull_request_review_id": 199620090,
      "id": 253506740,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1MzUwNjc0MA==",
      "diff_hunk": "@@ -610,6 +610,103 @@ int secp256k1_ec_pubkey_combine(const secp256k1_context* ctx, secp256k1_pubkey *\n     return 1;\n }\n \n+/* Compute an ec commitment tweak as hash(pubkey, data). */\n+int secp256k1_ec_commit_tweak(const secp256k1_context *ctx, unsigned char *tweak32, const secp256k1_pubkey *pubkey, const unsigned char *data, size_t data_size) {\n+    secp256k1_ge p;\n+    unsigned char rbuf[33];\n+    size_t rbuf_size = sizeof(rbuf);\n+    secp256k1_sha256 sha;\n+\n+    if (data_size == 0) {\n+        /* That's probably not what the caller wanted */\n+        return 0;\n+    }\n+    if(!secp256k1_pubkey_load(ctx, &p, pubkey)) {\n+        return 0;\n+    }\n+    secp256k1_eckey_pubkey_serialize(&p, rbuf, &rbuf_size, 1);\n+\n+    secp256k1_sha256_initialize(&sha);\n+    secp256k1_sha256_write(&sha, rbuf, rbuf_size);\n+    secp256k1_sha256_write(&sha, data, data_size);\n+    secp256k1_sha256_finalize(&sha, tweak32);\n+    return 1;\n+}\n+\n+/* Compute an ec commitment as pubkey + hash(pubkey, data)*G. */\n+int secp256k1_ec_commit(const secp256k1_context* ctx, secp256k1_pubkey *commitment, const secp256k1_pubkey *pubkey, const unsigned char *data, size_t data_size) {\n+    unsigned char tweak[32];\n+\n+    VERIFY_CHECK(ctx != NULL);\n+    ARG_CHECK(commitment != NULL);\n+    ARG_CHECK(pubkey != NULL);\n+    ARG_CHECK(data != NULL);\n+\n+    *commitment = *pubkey;\n+    if (!secp256k1_ec_commit_tweak(ctx, tweak, commitment, data, data_size)) {\n+        return 0;\n+    }\n+    return secp256k1_ec_pubkey_tweak_add(ctx, commitment, tweak);\n+}\n+\n+/* Compute the seckey of an ec commitment from the original secret key of the pubkey as seckey +\n+ * hash(pubkey, data). */\n+int secp256k1_ec_commit_seckey(const secp256k1_context* ctx, unsigned char *seckey, const secp256k1_pubkey *pubkey, const unsigned char *data, size_t data_size) {\n+    unsigned char tweak[32];\n+    secp256k1_pubkey pubkey_tmp;\n+\n+    VERIFY_CHECK(ctx != NULL);\n+    ARG_CHECK(seckey != NULL);\n+    ARG_CHECK(data != NULL);\n+\n+    if (pubkey == NULL) {\n+        /* Compute pubkey from seckey if not provided */\n+        int overflow;\n+        secp256k1_scalar x;\n+        secp256k1_gej pj;\n+        secp256k1_ge p;\n+\n+        secp256k1_scalar_set_b32(&x, seckey, &overflow);\n+        if (overflow != 0) {\n+            return 0;\n+        }\n+        secp256k1_ecmult_gen(&ctx->ecmult_gen_ctx, &pj, &x);\n+        secp256k1_ge_set_gej(&p, &pj);\n+        secp256k1_pubkey_save(&pubkey_tmp, &p);\n+        pubkey = &pubkey_tmp;\n+    }\n+\n+    if (!secp256k1_ec_commit_tweak(ctx, tweak, pubkey, data, data_size)) {\n+        return 0;\n+    }\n+    return secp256k1_ec_privkey_tweak_add(ctx, seckey, tweak);\n+}\n+\n+/* Verify an ec commitment as pubkey + hash(pubkey, data)*G ?= commitment. */\n+int secp256k1_ec_commit_verify(const secp256k1_context* ctx, const secp256k1_pubkey *commitment, const secp256k1_pubkey *pubkey, const unsigned char *data, size_t data_size) {\n+    secp256k1_gej pj;\n+    secp256k1_ge p;\n+    secp256k1_pubkey commitment_tmp;\n+\n+    VERIFY_CHECK(ctx != NULL);\n+    ARG_CHECK(commitment != NULL);\n+    ARG_CHECK(pubkey != NULL);\n+    ARG_CHECK(data != NULL);\n+\n+    if (!secp256k1_ec_commit(ctx, &commitment_tmp, pubkey, data, data_size)) {\n+        return 0;\n+    }\n+\n+    /* Return commitment == commitment_tmp */\n+    secp256k1_gej_set_infinity(&pj);\n+    secp256k1_pubkey_load(ctx, &p, &commitment_tmp);\n+    secp256k1_gej_add_ge(&pj, &pj, &p);\n+    secp256k1_pubkey_load(ctx, &p, commitment);\n+    secp256k1_ge_neg(&p, &p);\n+    secp256k1_gej_add_ge(&pj, &pj, &p);",
      "path": "src/secp256k1.c",
      "position": 120,
      "original_position": 97,
      "commit_id": "8fa102cc29ce4197e925a073c5429a797ec75e22",
      "original_commit_id": "72342d4fec862ff4d355d9449309e9325401f599",
      "in_reply_to_id": null,
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Maybe it's a good idea to implement an gej_cmp or even pubkey_cmp... No idea.",
      "created_at": "2019-02-04T15:10:00Z",
      "updated_at": "2019-02-13T13:47:17Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/588#discussion_r253506740",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/253506740"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/588"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 685,
      "original_line": 685,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/253517182",
      "pull_request_review_id": 199620090,
      "id": 253517182,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1MzUxNzE4Mg==",
      "diff_hunk": "@@ -80,6 +80,26 @@ typedef struct {\n     unsigned char data[64];\n } secp256k1_ecdsa_signature;\n \n+/** Data structure that holds a sign-to-contract (\"s2c\") context. Sign-to-contract\n+ *  allows a signer to commit to some data as part of a signature. If the nonce\n+ *  function supports sign-to-contract, after creating it with\n+ *  secp256k1_s2c_commit_context_create the context can be given to a signing\n+ *  algorithm via the nonce data argument.\n+ *\n+ *  This structure is not opaque, but it is strongly discouraged to copy it or read\n+ *  or write to it directly. Use the secp256k1_s2c_commit_* instead to access a\n+ *  sign-to-contract context.\n+ *\n+ *  The exact representation of data inside is implementation defined and not\n+ *  guaranteed to be portable between different platforms or versions. It is however\n+ *  guaranteed to be 128 bytes in size, and can be safely copied/moved.",
      "path": "include/secp256k1.h",
      "position": null,
      "original_position": 16,
      "commit_id": "8fa102cc29ce4197e925a073c5429a797ec75e22",
      "original_commit_id": "673d0e35a0a8289b5965e7aa94616e505bc46c98",
      "in_reply_to_id": null,
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "one paragraph above, you say that copying is discouraged",
      "created_at": "2019-02-04T15:34:31Z",
      "updated_at": "2019-02-13T13:47:17Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/588#discussion_r253517182",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/253517182"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/588"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 95,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/253521617",
      "pull_request_review_id": 199620090,
      "id": 253521617,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1MzUyMTYxNw==",
      "diff_hunk": "@@ -713,15 +741,59 @@ void test_schnorrsig_sign_verify(secp256k1_scratch_space *scratch) {\n }\n #undef N_SIGS\n \n+void test_schnorrsig_s2c_commit_verify(void) {\n+    secp256k1_s2c_commit_context s2c_ctx;\n+    unsigned char data32[32];\n+    secp256k1_schnorrsig sig;\n+    int nonce_is_negated;\n+    unsigned char msg[32];\n+    unsigned char sk[32];\n+    secp256k1_pubkey pk;\n+    secp256k1_pubkey s2c_original_nonce;\n+\n+    secp256k1_rand256(data32);\n+    secp256k1_rand256(msg);\n+    secp256k1_rand256(sk);\n+    CHECK(secp256k1_ec_pubkey_create(ctx, &pk, sk) == 1);\n+\n+    /* Create and verify correct commitment */\n+    CHECK(secp256k1_s2c_commit_context_create(ctx, &s2c_ctx, data32) == 1);\n+    CHECK(secp256k1_schnorrsig_sign(ctx, &sig, &nonce_is_negated, msg, sk, NULL, &s2c_ctx) == 1);\n+    CHECK(secp256k1_schnorrsig_verify(ctx, &sig, msg, &pk));\n+\n+    CHECK(secp256k1_s2c_commit_get_original_nonce(ctx, &s2c_original_nonce, &s2c_ctx) == 1);\n+    CHECK(secp256k1_schnorrsig_verify_s2c_commit(ctx, &sig, data32, &s2c_original_nonce, nonce_is_negated) == 1);\n+\n+    {\n+        /* verify_s2c_commit fails if given data does not match committed data */\n+        unsigned char data32_tmp[32];\n+        memcpy(data32_tmp, data32, sizeof(data32_tmp));\n+        data32_tmp[31] ^= 1;\n+        CHECK(secp256k1_schnorrsig_verify_s2c_commit(ctx, &sig, data32_tmp, &s2c_original_nonce, nonce_is_negated) == 0);\n+    }\n+    {\n+        /* verify_s2c_commit fails if signature does not commit to data */\n+        secp256k1_schnorrsig sig_tmp;\n+        sig_tmp = sig;\n+        secp256k1_rand256(&sig_tmp.data[0]);\n+        CHECK(secp256k1_schnorrsig_verify_s2c_commit(ctx, &sig_tmp, data32, &s2c_original_nonce, nonce_is_negated) == 0);\n+    }",
      "path": "src/modules/schnorrsig/tests_impl.h",
      "position": 782,
      "original_position": 96,
      "commit_id": "8fa102cc29ce4197e925a073c5429a797ec75e22",
      "original_commit_id": "30c1d7131139fde3edd8f8f5e4041138c4dee557",
      "in_reply_to_id": null,
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "there should be a test that verification fails when nonce_is_negated is wrong",
      "created_at": "2019-02-04T15:44:59Z",
      "updated_at": "2019-02-13T13:47:17Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/588#discussion_r253521617",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/253521617"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/588"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 782,
      "original_line": 782,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/255298329",
      "pull_request_review_id": 201862495,
      "id": 255298329,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1NTI5ODMyOQ==",
      "diff_hunk": "@@ -610,6 +610,103 @@ int secp256k1_ec_pubkey_combine(const secp256k1_context* ctx, secp256k1_pubkey *\n     return 1;\n }\n \n+/* Compute an ec commitment tweak as hash(pubkey, data). */\n+int secp256k1_ec_commit_tweak(const secp256k1_context *ctx, unsigned char *tweak32, const secp256k1_pubkey *pubkey, const unsigned char *data, size_t data_size) {\n+    secp256k1_ge p;\n+    unsigned char rbuf[33];\n+    size_t rbuf_size = sizeof(rbuf);\n+    secp256k1_sha256 sha;\n+\n+    if (data_size == 0) {\n+        /* That's probably not what the caller wanted */\n+        return 0;",
      "path": "src/secp256k1.c",
      "position": 36,
      "original_position": 13,
      "commit_id": "8fa102cc29ce4197e925a073c5429a797ec75e22",
      "original_commit_id": "72342d4fec862ff4d355d9449309e9325401f599",
      "in_reply_to_id": 253496663,
      "user": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "VERIFY_CHECK only works in tests. ARG_CHECK crashes the caller's program. Not sure if that would be better given that there doesn't really seem to be precedent for aborting in such cases in libsecp. Also I don't see a good reason for aborting as this condition can be trivially recovered from (by just returning 0).",
      "created_at": "2019-02-09T13:09:21Z",
      "updated_at": "2019-02-13T13:47:17Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/588#discussion_r255298329",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/255298329"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/588"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 601,
      "original_line": 601,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/255574811",
      "pull_request_review_id": 202190821,
      "id": 255574811,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1NTU3NDgxMQ==",
      "diff_hunk": "@@ -610,6 +610,103 @@ int secp256k1_ec_pubkey_combine(const secp256k1_context* ctx, secp256k1_pubkey *\n     return 1;\n }\n \n+/* Compute an ec commitment tweak as hash(pubkey, data). */\n+int secp256k1_ec_commit_tweak(const secp256k1_context *ctx, unsigned char *tweak32, const secp256k1_pubkey *pubkey, const unsigned char *data, size_t data_size) {\n+    secp256k1_ge p;\n+    unsigned char rbuf[33];\n+    size_t rbuf_size = sizeof(rbuf);\n+    secp256k1_sha256 sha;\n+\n+    if (data_size == 0) {\n+        /* That's probably not what the caller wanted */\n+        return 0;\n+    }\n+    if(!secp256k1_pubkey_load(ctx, &p, pubkey)) {\n+        return 0;\n+    }\n+    secp256k1_eckey_pubkey_serialize(&p, rbuf, &rbuf_size, 1);\n+\n+    secp256k1_sha256_initialize(&sha);\n+    secp256k1_sha256_write(&sha, rbuf, rbuf_size);\n+    secp256k1_sha256_write(&sha, data, data_size);\n+    secp256k1_sha256_finalize(&sha, tweak32);\n+    return 1;\n+}\n+\n+/* Compute an ec commitment as pubkey + hash(pubkey, data)*G. */\n+int secp256k1_ec_commit(const secp256k1_context* ctx, secp256k1_pubkey *commitment, const secp256k1_pubkey *pubkey, const unsigned char *data, size_t data_size) {\n+    unsigned char tweak[32];\n+\n+    VERIFY_CHECK(ctx != NULL);\n+    ARG_CHECK(commitment != NULL);\n+    ARG_CHECK(pubkey != NULL);\n+    ARG_CHECK(data != NULL);\n+\n+    *commitment = *pubkey;\n+    if (!secp256k1_ec_commit_tweak(ctx, tweak, commitment, data, data_size)) {\n+        return 0;\n+    }\n+    return secp256k1_ec_pubkey_tweak_add(ctx, commitment, tweak);\n+}\n+\n+/* Compute the seckey of an ec commitment from the original secret key of the pubkey as seckey +\n+ * hash(pubkey, data). */\n+int secp256k1_ec_commit_seckey(const secp256k1_context* ctx, unsigned char *seckey, const secp256k1_pubkey *pubkey, const unsigned char *data, size_t data_size) {\n+    unsigned char tweak[32];\n+    secp256k1_pubkey pubkey_tmp;\n+\n+    VERIFY_CHECK(ctx != NULL);\n+    ARG_CHECK(seckey != NULL);\n+    ARG_CHECK(data != NULL);\n+\n+    if (pubkey == NULL) {\n+        /* Compute pubkey from seckey if not provided */\n+        int overflow;\n+        secp256k1_scalar x;\n+        secp256k1_gej pj;\n+        secp256k1_ge p;\n+\n+        secp256k1_scalar_set_b32(&x, seckey, &overflow);\n+        if (overflow != 0) {\n+            return 0;\n+        }\n+        secp256k1_ecmult_gen(&ctx->ecmult_gen_ctx, &pj, &x);\n+        secp256k1_ge_set_gej(&p, &pj);\n+        secp256k1_pubkey_save(&pubkey_tmp, &p);\n+        pubkey = &pubkey_tmp;\n+    }\n+\n+    if (!secp256k1_ec_commit_tweak(ctx, tweak, pubkey, data, data_size)) {\n+        return 0;\n+    }\n+    return secp256k1_ec_privkey_tweak_add(ctx, seckey, tweak);\n+}\n+\n+/* Verify an ec commitment as pubkey + hash(pubkey, data)*G ?= commitment. */\n+int secp256k1_ec_commit_verify(const secp256k1_context* ctx, const secp256k1_pubkey *commitment, const secp256k1_pubkey *pubkey, const unsigned char *data, size_t data_size) {\n+    secp256k1_gej pj;\n+    secp256k1_ge p;\n+    secp256k1_pubkey commitment_tmp;\n+\n+    VERIFY_CHECK(ctx != NULL);\n+    ARG_CHECK(commitment != NULL);\n+    ARG_CHECK(pubkey != NULL);\n+    ARG_CHECK(data != NULL);\n+\n+    if (!secp256k1_ec_commit(ctx, &commitment_tmp, pubkey, data, data_size)) {\n+        return 0;\n+    }\n+\n+    /* Return commitment == commitment_tmp */\n+    secp256k1_gej_set_infinity(&pj);\n+    secp256k1_pubkey_load(ctx, &p, &commitment_tmp);\n+    secp256k1_gej_add_ge(&pj, &pj, &p);\n+    secp256k1_pubkey_load(ctx, &p, commitment);\n+    secp256k1_ge_neg(&p, &p);\n+    secp256k1_gej_add_ge(&pj, &pj, &p);",
      "path": "src/secp256k1.c",
      "position": 120,
      "original_position": 97,
      "commit_id": "8fa102cc29ce4197e925a073c5429a797ec75e22",
      "original_commit_id": "72342d4fec862ff4d355d9449309e9325401f599",
      "in_reply_to_id": 253506740,
      "user": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "yeah, good idea. Maybe not in this PR.",
      "created_at": "2019-02-11T16:07:24Z",
      "updated_at": "2019-02-13T13:47:17Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/588#discussion_r255574811",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/255574811"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/588"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 685,
      "original_line": 685,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/255578817",
      "pull_request_review_id": 202195825,
      "id": 255578817,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1NTU3ODgxNw==",
      "diff_hunk": "@@ -80,6 +80,26 @@ typedef struct {\n     unsigned char data[64];\n } secp256k1_ecdsa_signature;\n \n+/** Data structure that holds a sign-to-contract (\"s2c\") context. Sign-to-contract\n+ *  allows a signer to commit to some data as part of a signature. If the nonce\n+ *  function supports sign-to-contract, after creating it with\n+ *  secp256k1_s2c_commit_context_create the context can be given to a signing\n+ *  algorithm via the nonce data argument.\n+ *\n+ *  This structure is not opaque, but it is strongly discouraged to copy it or read\n+ *  or write to it directly. Use the secp256k1_s2c_commit_* instead to access a\n+ *  sign-to-contract context.\n+ *\n+ *  The exact representation of data inside is implementation defined and not\n+ *  guaranteed to be portable between different platforms or versions. It is however\n+ *  guaranteed to be 128 bytes in size, and can be safely copied/moved.",
      "path": "include/secp256k1.h",
      "position": null,
      "original_position": 16,
      "commit_id": "8fa102cc29ce4197e925a073c5429a797ec75e22",
      "original_commit_id": "673d0e35a0a8289b5965e7aa94616e505bc46c98",
      "in_reply_to_id": 253517182,
      "user": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "good catch. I think there's no issue with copying that structure and I think I just copied this sentence from the MuSig session without thinking about it.",
      "created_at": "2019-02-11T16:15:40Z",
      "updated_at": "2019-02-13T13:47:17Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/588#discussion_r255578817",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/255578817"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/588"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 95,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/255645974",
      "pull_request_review_id": 202279174,
      "id": 255645974,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1NTY0NTk3NA==",
      "diff_hunk": "@@ -713,15 +741,59 @@ void test_schnorrsig_sign_verify(secp256k1_scratch_space *scratch) {\n }\n #undef N_SIGS\n \n+void test_schnorrsig_s2c_commit_verify(void) {\n+    secp256k1_s2c_commit_context s2c_ctx;\n+    unsigned char data32[32];\n+    secp256k1_schnorrsig sig;\n+    int nonce_is_negated;\n+    unsigned char msg[32];\n+    unsigned char sk[32];\n+    secp256k1_pubkey pk;\n+    secp256k1_pubkey s2c_original_nonce;\n+\n+    secp256k1_rand256(data32);\n+    secp256k1_rand256(msg);\n+    secp256k1_rand256(sk);\n+    CHECK(secp256k1_ec_pubkey_create(ctx, &pk, sk) == 1);\n+\n+    /* Create and verify correct commitment */\n+    CHECK(secp256k1_s2c_commit_context_create(ctx, &s2c_ctx, data32) == 1);\n+    CHECK(secp256k1_schnorrsig_sign(ctx, &sig, &nonce_is_negated, msg, sk, NULL, &s2c_ctx) == 1);\n+    CHECK(secp256k1_schnorrsig_verify(ctx, &sig, msg, &pk));\n+\n+    CHECK(secp256k1_s2c_commit_get_original_nonce(ctx, &s2c_original_nonce, &s2c_ctx) == 1);\n+    CHECK(secp256k1_schnorrsig_verify_s2c_commit(ctx, &sig, data32, &s2c_original_nonce, nonce_is_negated) == 1);\n+\n+    {\n+        /* verify_s2c_commit fails if given data does not match committed data */\n+        unsigned char data32_tmp[32];\n+        memcpy(data32_tmp, data32, sizeof(data32_tmp));\n+        data32_tmp[31] ^= 1;\n+        CHECK(secp256k1_schnorrsig_verify_s2c_commit(ctx, &sig, data32_tmp, &s2c_original_nonce, nonce_is_negated) == 0);\n+    }\n+    {\n+        /* verify_s2c_commit fails if signature does not commit to data */\n+        secp256k1_schnorrsig sig_tmp;\n+        sig_tmp = sig;\n+        secp256k1_rand256(&sig_tmp.data[0]);\n+        CHECK(secp256k1_schnorrsig_verify_s2c_commit(ctx, &sig_tmp, data32, &s2c_original_nonce, nonce_is_negated) == 0);\n+    }",
      "path": "src/modules/schnorrsig/tests_impl.h",
      "position": 782,
      "original_position": 96,
      "commit_id": "8fa102cc29ce4197e925a073c5429a797ec75e22",
      "original_commit_id": "30c1d7131139fde3edd8f8f5e4041138c4dee557",
      "in_reply_to_id": 253521617,
      "user": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "fixed",
      "created_at": "2019-02-11T18:55:18Z",
      "updated_at": "2019-02-13T13:47:17Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/588#discussion_r255645974",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/255645974"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/588"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 782,
      "original_line": 782,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/255645985",
      "pull_request_review_id": 202279190,
      "id": 255645985,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1NTY0NTk4NQ==",
      "diff_hunk": "@@ -80,6 +80,26 @@ typedef struct {\n     unsigned char data[64];\n } secp256k1_ecdsa_signature;\n \n+/** Data structure that holds a sign-to-contract (\"s2c\") context. Sign-to-contract\n+ *  allows a signer to commit to some data as part of a signature. If the nonce\n+ *  function supports sign-to-contract, after creating it with\n+ *  secp256k1_s2c_commit_context_create the context can be given to a signing\n+ *  algorithm via the nonce data argument.\n+ *\n+ *  This structure is not opaque, but it is strongly discouraged to copy it or read\n+ *  or write to it directly. Use the secp256k1_s2c_commit_* instead to access a\n+ *  sign-to-contract context.\n+ *\n+ *  The exact representation of data inside is implementation defined and not\n+ *  guaranteed to be portable between different platforms or versions. It is however\n+ *  guaranteed to be 128 bytes in size, and can be safely copied/moved.",
      "path": "include/secp256k1.h",
      "position": null,
      "original_position": 16,
      "commit_id": "8fa102cc29ce4197e925a073c5429a797ec75e22",
      "original_commit_id": "673d0e35a0a8289b5965e7aa94616e505bc46c98",
      "in_reply_to_id": 253517182,
      "user": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "fixed",
      "created_at": "2019-02-11T18:55:20Z",
      "updated_at": "2019-02-13T13:47:17Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/588#discussion_r255645985",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/255645985"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/588"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 95,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/255646011",
      "pull_request_review_id": 202279222,
      "id": 255646011,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1NTY0NjAxMQ==",
      "diff_hunk": "@@ -2339,6 +2339,110 @@ void run_ec_combine(void) {\n     }\n }\n \n+int test_ec_commit_seckey(unsigned char *seckey, secp256k1_pubkey *commitment) {\n+    /* Return if seckey is the discrete log of commitment */\n+    secp256k1_pubkey pubkey_tmp;\n+    return secp256k1_ec_pubkey_create(ctx, &pubkey_tmp, seckey) == 1\n+           && memcmp(&pubkey_tmp, commitment, sizeof(pubkey_tmp)) == 0;\n+}\n+\n+void test_ec_commit(void) {\n+    unsigned char seckey[32];\n+    secp256k1_pubkey pubkey;\n+    secp256k1_pubkey commitment;\n+    unsigned char data[32];\n+\n+    /* Create random keypair */\n+    secp256k1_rand256(seckey);\n+    CHECK(secp256k1_ec_pubkey_create(ctx, &pubkey, seckey));\n+    /* Create random data */\n+    {\n+        secp256k1_scalar d;\n+        random_scalar_order_test(&d);",
      "path": "src/tests.c",
      "position": null,
      "original_position": 23,
      "commit_id": "8fa102cc29ce4197e925a073c5429a797ec75e22",
      "original_commit_id": "72342d4fec862ff4d355d9449309e9325401f599",
      "in_reply_to_id": 253501716,
      "user": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "fixed",
      "created_at": "2019-02-11T18:55:24Z",
      "updated_at": "2019-02-13T13:47:17Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/588#discussion_r255646011",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/255646011"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/588"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2361,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/299105033",
      "pull_request_review_id": 256418039,
      "id": 299105033,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI5OTEwNTAzMw==",
      "diff_hunk": "@@ -588,10 +589,189 @@ int secp256k1_ec_pubkey_combine(const secp256k1_context* ctx, secp256k1_pubkey *\n     return 1;\n }\n \n+/* Compute an ec commitment tweak as hash(pubkey, data). */\n+static int secp256k1_ec_commit_tweak(const secp256k1_context *ctx, unsigned char *tweak32, const secp256k1_pubkey *pubkey, const unsigned char *data, size_t data_size) {\n+    secp256k1_ge p;\n+    unsigned char rbuf[33];\n+    size_t rbuf_size = sizeof(rbuf);\n+    secp256k1_sha256 sha;\n+\n+    if (data_size == 0) {\n+        /* That's probably not what the caller wanted */\n+        return 0;\n+    }\n+    if(!secp256k1_pubkey_load(ctx, &p, pubkey)) {\n+        return 0;\n+    }\n+    secp256k1_eckey_pubkey_serialize(&p, rbuf, &rbuf_size, 1);\n+\n+    secp256k1_sha256_initialize(&sha);\n+    secp256k1_sha256_write(&sha, rbuf, rbuf_size);\n+    secp256k1_sha256_write(&sha, data, data_size);\n+    secp256k1_sha256_finalize(&sha, tweak32);\n+    return 1;\n+}\n+\n+/* Compute an ec commitment as pubkey + hash(pubkey, data)*G. */\n+static int secp256k1_ec_commit(const secp256k1_context* ctx, secp256k1_pubkey *commitment, const secp256k1_pubkey *pubkey, const unsigned char *data, size_t data_size) {\n+    unsigned char tweak[32];\n+\n+    VERIFY_CHECK(ctx != NULL);\n+    ARG_CHECK(commitment != NULL);\n+    ARG_CHECK(pubkey != NULL);\n+    ARG_CHECK(data != NULL);\n+\n+    *commitment = *pubkey;\n+    if (!secp256k1_ec_commit_tweak(ctx, tweak, commitment, data, data_size)) {\n+        return 0;\n+    }\n+    return secp256k1_ec_pubkey_tweak_add(ctx, commitment, tweak);\n+}\n+\n+/* Compute the seckey of an ec commitment from the original secret key of the pubkey as seckey +\n+ * hash(pubkey, data). */\n+static int secp256k1_ec_commit_seckey(const secp256k1_context* ctx, unsigned char *seckey, const secp256k1_pubkey *pubkey, const unsigned char *data, size_t data_size) {\n+    unsigned char tweak[32];\n+    secp256k1_pubkey pubkey_tmp;\n+\n+    VERIFY_CHECK(ctx != NULL);\n+    ARG_CHECK(seckey != NULL);\n+    ARG_CHECK(data != NULL);\n+\n+    if (pubkey == NULL) {\n+        /* Compute pubkey from seckey if not provided */\n+        int overflow;\n+        secp256k1_scalar x;\n+        secp256k1_gej pj;\n+        secp256k1_ge p;\n+\n+        secp256k1_scalar_set_b32(&x, seckey, &overflow);\n+        if (overflow != 0) {\n+            return 0;\n+        }\n+        secp256k1_ecmult_gen(&ctx->ecmult_gen_ctx, &pj, &x);\n+        secp256k1_ge_set_gej(&p, &pj);\n+        secp256k1_pubkey_save(&pubkey_tmp, &p);\n+        pubkey = &pubkey_tmp;\n+    }\n+\n+    if (!secp256k1_ec_commit_tweak(ctx, tweak, pubkey, data, data_size)) {\n+        return 0;\n+    }\n+    return secp256k1_ec_privkey_tweak_add(ctx, seckey, tweak);\n+}\n+\n+/* Verify an ec commitment as pubkey + hash(pubkey, data)*G ?= commitment. */\n+static int secp256k1_ec_commit_verify(const secp256k1_context* ctx, const secp256k1_pubkey *commitment, const secp256k1_pubkey *pubkey, const unsigned char *data, size_t data_size) {\n+    secp256k1_gej pj;\n+    secp256k1_ge p;\n+    secp256k1_pubkey commitment_tmp;\n+\n+    VERIFY_CHECK(ctx != NULL);\n+    ARG_CHECK(commitment != NULL);\n+    ARG_CHECK(pubkey != NULL);\n+    ARG_CHECK(data != NULL);\n+\n+    if (!secp256k1_ec_commit(ctx, &commitment_tmp, pubkey, data, data_size)) {\n+        return 0;\n+    }\n+\n+    /* Return commitment == commitment_tmp */\n+    secp256k1_gej_set_infinity(&pj);\n+    secp256k1_pubkey_load(ctx, &p, &commitment_tmp);\n+    secp256k1_gej_add_ge(&pj, &pj, &p);\n+    secp256k1_pubkey_load(ctx, &p, commitment);\n+    secp256k1_ge_neg(&p, &p);\n+    secp256k1_gej_add_ge(&pj, &pj, &p);\n+    return secp256k1_gej_is_infinity(&pj);\n+}\n+\n+static uint64_t s2c_commit_context_magic = 0xd5bafd089f7e1c63;\n+int secp256k1_s2c_commit_context_create(secp256k1_context *ctx, secp256k1_s2c_commit_context *s2c_ctx, const unsigned char *data32) {\n+    secp256k1_sha256 sha;\n+\n+    VERIFY_CHECK(ctx != NULL);\n+    ARG_CHECK(s2c_ctx != NULL);\n+    ARG_CHECK(data32 != NULL);\n+\n+    memcpy(s2c_ctx->magic, &s2c_commit_context_magic, sizeof(s2c_ctx->magic));",
      "path": "src/secp256k1.c",
      "position": 132,
      "original_position": 132,
      "commit_id": "8fa102cc29ce4197e925a073c5429a797ec75e22",
      "original_commit_id": "8fa102cc29ce4197e925a073c5429a797ec75e22",
      "in_reply_to_id": null,
      "user": {
        "login": "elichai",
        "id": 2167860,
        "node_id": "MDQ6VXNlcjIxNjc4NjA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2167860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/elichai",
        "html_url": "https://github.com/elichai",
        "followers_url": "https://api.github.com/users/elichai/followers",
        "following_url": "https://api.github.com/users/elichai/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/elichai/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/elichai/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/elichai/subscriptions",
        "organizations_url": "https://api.github.com/users/elichai/orgs",
        "repos_url": "https://api.github.com/users/elichai/repos",
        "events_url": "https://api.github.com/users/elichai/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/elichai/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Probably it's just me being not familiar enough with C but why copy from a `uint64_t` to a `unsigned char[8]` instead of just putting a `uint64_t` in the struct?",
      "created_at": "2019-07-01T15:41:21Z",
      "updated_at": "2019-07-01T15:41:49Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/588#discussion_r299105033",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/299105033"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/588"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 697,
      "original_line": 697,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/299114561",
      "pull_request_review_id": 256430277,
      "id": 299114561,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI5OTExNDU2MQ==",
      "diff_hunk": "@@ -588,10 +589,189 @@ int secp256k1_ec_pubkey_combine(const secp256k1_context* ctx, secp256k1_pubkey *\n     return 1;\n }\n \n+/* Compute an ec commitment tweak as hash(pubkey, data). */\n+static int secp256k1_ec_commit_tweak(const secp256k1_context *ctx, unsigned char *tweak32, const secp256k1_pubkey *pubkey, const unsigned char *data, size_t data_size) {\n+    secp256k1_ge p;\n+    unsigned char rbuf[33];\n+    size_t rbuf_size = sizeof(rbuf);\n+    secp256k1_sha256 sha;\n+\n+    if (data_size == 0) {\n+        /* That's probably not what the caller wanted */\n+        return 0;\n+    }\n+    if(!secp256k1_pubkey_load(ctx, &p, pubkey)) {\n+        return 0;\n+    }\n+    secp256k1_eckey_pubkey_serialize(&p, rbuf, &rbuf_size, 1);\n+\n+    secp256k1_sha256_initialize(&sha);\n+    secp256k1_sha256_write(&sha, rbuf, rbuf_size);\n+    secp256k1_sha256_write(&sha, data, data_size);\n+    secp256k1_sha256_finalize(&sha, tweak32);\n+    return 1;\n+}\n+\n+/* Compute an ec commitment as pubkey + hash(pubkey, data)*G. */\n+static int secp256k1_ec_commit(const secp256k1_context* ctx, secp256k1_pubkey *commitment, const secp256k1_pubkey *pubkey, const unsigned char *data, size_t data_size) {\n+    unsigned char tweak[32];\n+\n+    VERIFY_CHECK(ctx != NULL);\n+    ARG_CHECK(commitment != NULL);\n+    ARG_CHECK(pubkey != NULL);\n+    ARG_CHECK(data != NULL);\n+\n+    *commitment = *pubkey;\n+    if (!secp256k1_ec_commit_tweak(ctx, tweak, commitment, data, data_size)) {\n+        return 0;\n+    }\n+    return secp256k1_ec_pubkey_tweak_add(ctx, commitment, tweak);\n+}\n+\n+/* Compute the seckey of an ec commitment from the original secret key of the pubkey as seckey +\n+ * hash(pubkey, data). */\n+static int secp256k1_ec_commit_seckey(const secp256k1_context* ctx, unsigned char *seckey, const secp256k1_pubkey *pubkey, const unsigned char *data, size_t data_size) {\n+    unsigned char tweak[32];\n+    secp256k1_pubkey pubkey_tmp;\n+\n+    VERIFY_CHECK(ctx != NULL);\n+    ARG_CHECK(seckey != NULL);\n+    ARG_CHECK(data != NULL);\n+\n+    if (pubkey == NULL) {\n+        /* Compute pubkey from seckey if not provided */\n+        int overflow;\n+        secp256k1_scalar x;\n+        secp256k1_gej pj;\n+        secp256k1_ge p;\n+\n+        secp256k1_scalar_set_b32(&x, seckey, &overflow);\n+        if (overflow != 0) {\n+            return 0;\n+        }\n+        secp256k1_ecmult_gen(&ctx->ecmult_gen_ctx, &pj, &x);\n+        secp256k1_ge_set_gej(&p, &pj);\n+        secp256k1_pubkey_save(&pubkey_tmp, &p);\n+        pubkey = &pubkey_tmp;\n+    }\n+\n+    if (!secp256k1_ec_commit_tweak(ctx, tweak, pubkey, data, data_size)) {\n+        return 0;\n+    }\n+    return secp256k1_ec_privkey_tweak_add(ctx, seckey, tweak);\n+}\n+\n+/* Verify an ec commitment as pubkey + hash(pubkey, data)*G ?= commitment. */\n+static int secp256k1_ec_commit_verify(const secp256k1_context* ctx, const secp256k1_pubkey *commitment, const secp256k1_pubkey *pubkey, const unsigned char *data, size_t data_size) {\n+    secp256k1_gej pj;\n+    secp256k1_ge p;\n+    secp256k1_pubkey commitment_tmp;\n+\n+    VERIFY_CHECK(ctx != NULL);\n+    ARG_CHECK(commitment != NULL);\n+    ARG_CHECK(pubkey != NULL);\n+    ARG_CHECK(data != NULL);\n+\n+    if (!secp256k1_ec_commit(ctx, &commitment_tmp, pubkey, data, data_size)) {\n+        return 0;\n+    }\n+\n+    /* Return commitment == commitment_tmp */\n+    secp256k1_gej_set_infinity(&pj);\n+    secp256k1_pubkey_load(ctx, &p, &commitment_tmp);\n+    secp256k1_gej_add_ge(&pj, &pj, &p);\n+    secp256k1_pubkey_load(ctx, &p, commitment);\n+    secp256k1_ge_neg(&p, &p);\n+    secp256k1_gej_add_ge(&pj, &pj, &p);\n+    return secp256k1_gej_is_infinity(&pj);\n+}\n+\n+static uint64_t s2c_commit_context_magic = 0xd5bafd089f7e1c63;\n+int secp256k1_s2c_commit_context_create(secp256k1_context *ctx, secp256k1_s2c_commit_context *s2c_ctx, const unsigned char *data32) {\n+    secp256k1_sha256 sha;\n+\n+    VERIFY_CHECK(ctx != NULL);\n+    ARG_CHECK(s2c_ctx != NULL);\n+    ARG_CHECK(data32 != NULL);\n+\n+    memcpy(s2c_ctx->magic, &s2c_commit_context_magic, sizeof(s2c_ctx->magic));\n+    memcpy(s2c_ctx->data, data32, 32);\n+    secp256k1_sha256_initialize(&sha);\n+    secp256k1_sha256_write(&sha, data32, 32);\n+    secp256k1_sha256_finalize(&sha, s2c_ctx->data_hash);\n+    return 1;\n+}\n+\n+int secp256k1_s2c_commit_get_original_nonce(secp256k1_context *ctx, secp256k1_pubkey *original_nonce, const secp256k1_s2c_commit_context *s2c_ctx) {\n+    VERIFY_CHECK(ctx != NULL);\n+    ARG_CHECK(original_nonce != NULL);\n+    ARG_CHECK(s2c_ctx != NULL);\n+\n+    memcpy(original_nonce, &s2c_ctx->original_pubnonce, sizeof(secp256k1_pubkey));\n+    return 1;\n+}\n+\n+/* This function computes a nonce as defined in BIP-schnorr *without* s2c-tweaking\n+ * the nonce. If data is provided, it is however hashed into the nonce and the\n+ * \"untweaked\" public nonce (`nonce32*G`) is stored in the sign-to-contract context.\n+ */\n+static int secp256k1_nonce_function_bipschnorr_no_s2c_tweak(const secp256k1_context *ctx, unsigned char *nonce32, const unsigned char *msg32, const unsigned char *key32, const unsigned char *algo16, void *data, unsigned int counter) {\n+    secp256k1_sha256 sha;\n+\n+    VERIFY_CHECK(counter == 0);\n+    (void) counter;\n+\n+    /* Hash x||msg as per the spec */\n+    secp256k1_sha256_initialize(&sha);\n+    secp256k1_sha256_write(&sha, key32, 32);\n+    secp256k1_sha256_write(&sha, msg32, 32);\n+    /* Hash in algorithm, which is not in the spec, but may be critical to\n+     * users depending on it to avoid nonce reuse across algorithms. */\n+    if (algo16 != NULL) {\n+        secp256k1_sha256_write(&sha, algo16, 16);\n+    }\n+    if (data == NULL) {\n+        secp256k1_sha256_finalize(&sha, nonce32);\n+    } else {\n+        /* Prepare for a sign-to-contract commitment if data is provided */\n+        secp256k1_s2c_commit_context *s2c_ctx = (secp256k1_s2c_commit_context *)data;\n+        ARG_CHECK(memcmp(s2c_ctx->magic, &s2c_commit_context_magic, sizeof(s2c_ctx->magic)) == 0);\n+        secp256k1_sha256_write(&sha, s2c_ctx->data_hash, 32);\n+        secp256k1_sha256_finalize(&sha, nonce32);\n+\n+        if (!secp256k1_ec_pubkey_create(ctx, &s2c_ctx->original_pubnonce, nonce32)) {\n+            return 0;\n+        }\n+    }\n+    return 1;\n+}\n+\n+/* This nonce function (without sign-to-contract) is described in BIP-schnorr\n+ * (https://github.com/sipa/bips/blob/bip-schnorr/bip-schnorr.mediawiki). If data !=\n+ * NULL the returned nonce commits to the provided data using \"sign-to-contract\"\n+ * commitments.\n+ */\n+static int secp256k1_nonce_function_bipschnorr(const secp256k1_context *ctx, unsigned char *nonce32, const unsigned char *msg32, const unsigned char *key32, const unsigned char *algo16, void *data, unsigned int counter) {\n+    if (!secp256k1_nonce_function_bipschnorr_no_s2c_tweak(ctx, nonce32, msg32, key32, algo16, data, counter)) {\n+        return 0;\n+    }\n+    if (data != NULL) {\n+        /* Create a sign-to-contract commitment by setting nonce32 <- nonce32 +\n+         * hash(nonce32*G, s2c_ctx->data) */\n+        secp256k1_s2c_commit_context *s2c_ctx = (secp256k1_s2c_commit_context *)data;",
      "path": "src/secp256k1.c",
      "position": 196,
      "original_position": 196,
      "commit_id": "8fa102cc29ce4197e925a073c5429a797ec75e22",
      "original_commit_id": "8fa102cc29ce4197e925a073c5429a797ec75e22",
      "in_reply_to_id": null,
      "user": {
        "login": "elichai",
        "id": 2167860,
        "node_id": "MDQ6VXNlcjIxNjc4NjA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2167860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/elichai",
        "html_url": "https://github.com/elichai",
        "followers_url": "https://api.github.com/users/elichai/followers",
        "following_url": "https://api.github.com/users/elichai/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/elichai/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/elichai/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/elichai/subscriptions",
        "organizations_url": "https://api.github.com/users/elichai/orgs",
        "repos_url": "https://api.github.com/users/elichai/repos",
        "events_url": "https://api.github.com/users/elichai/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/elichai/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think you should verify the magic number here and fail if not right.",
      "created_at": "2019-07-01T16:03:20Z",
      "updated_at": "2019-07-01T16:04:16Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/588#discussion_r299114561",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/299114561"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/588"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 761,
      "original_line": 761,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/299139618",
      "pull_request_review_id": 256462334,
      "id": 299139618,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI5OTEzOTYxOA==",
      "diff_hunk": "@@ -80,9 +80,34 @@ typedef struct {\n     unsigned char data[64];\n } secp256k1_ecdsa_signature;\n \n+/** Data structure that holds a sign-to-contract (\"s2c\") context. Sign-to-contract\n+ *  allows a signer to commit to some data as part of a signature. If the nonce\n+ *  function supports sign-to-contract, after creating it with\n+ *  secp256k1_s2c_commit_context_create the context can be given to a signing\n+ *  algorithm via the nonce data argument.\n+ *\n+ *  This structure is not opaque, but it is strongly discouraged to read or write to\n+ *  it directly. Use the secp256k1_s2c_commit_* instead to access a sign-to-contract\n+ *  context.\n+ *\n+ *  The exact representation of data inside is implementation defined and not\n+ *  guaranteed to be portable between different platforms or versions. It is however\n+ *  guaranteed to be 136 bytes in size, and can be safely copied/moved.\n+ */\n+typedef struct {\n+    /* magic is set during initialization. It allows functions casting to\n+     * s2c_commit_contexts from a void pointer to check if they actually got an\n+     * s2c_commit_context and if it has been initialized. */\n+    unsigned char magic[8];\n+    unsigned char data[32];\n+    unsigned char data_hash[32];\n+    secp256k1_pubkey original_pubnonce;",
      "path": "include/secp256k1.h",
      "position": 25,
      "original_position": 25,
      "commit_id": "8fa102cc29ce4197e925a073c5429a797ec75e22",
      "original_commit_id": "8fa102cc29ce4197e925a073c5429a797ec75e22",
      "in_reply_to_id": null,
      "user": {
        "login": "elichai",
        "id": 2167860,
        "node_id": "MDQ6VXNlcjIxNjc4NjA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2167860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/elichai",
        "html_url": "https://github.com/elichai",
        "followers_url": "https://api.github.com/users/elichai/followers",
        "following_url": "https://api.github.com/users/elichai/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/elichai/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/elichai/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/elichai/subscriptions",
        "organizations_url": "https://api.github.com/users/elichai/orgs",
        "repos_url": "https://api.github.com/users/elichai/repos",
        "events_url": "https://api.github.com/users/elichai/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/elichai/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "should the \"public nonce\" really be represented as `pubkey`? for me `ge` or `gej` would be more readable, but they're probably not exported....\r\n(I got confused while diving into `secp256k1_ec_commit_seckey` and `secp256k1_ec_commit_tweak` about the whole public key thing)",
      "created_at": "2019-07-01T17:12:34Z",
      "updated_at": "2019-07-01T17:12:34Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/588#discussion_r299139618",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/299139618"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/588"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 104,
      "original_line": 104,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/299169397",
      "pull_request_review_id": 256500207,
      "id": 299169397,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI5OTE2OTM5Nw==",
      "diff_hunk": "@@ -588,10 +589,189 @@ int secp256k1_ec_pubkey_combine(const secp256k1_context* ctx, secp256k1_pubkey *\n     return 1;\n }\n \n+/* Compute an ec commitment tweak as hash(pubkey, data). */\n+static int secp256k1_ec_commit_tweak(const secp256k1_context *ctx, unsigned char *tweak32, const secp256k1_pubkey *pubkey, const unsigned char *data, size_t data_size) {\n+    secp256k1_ge p;\n+    unsigned char rbuf[33];\n+    size_t rbuf_size = sizeof(rbuf);\n+    secp256k1_sha256 sha;\n+\n+    if (data_size == 0) {\n+        /* That's probably not what the caller wanted */\n+        return 0;\n+    }\n+    if(!secp256k1_pubkey_load(ctx, &p, pubkey)) {\n+        return 0;\n+    }\n+    secp256k1_eckey_pubkey_serialize(&p, rbuf, &rbuf_size, 1);\n+\n+    secp256k1_sha256_initialize(&sha);\n+    secp256k1_sha256_write(&sha, rbuf, rbuf_size);\n+    secp256k1_sha256_write(&sha, data, data_size);\n+    secp256k1_sha256_finalize(&sha, tweak32);\n+    return 1;\n+}\n+\n+/* Compute an ec commitment as pubkey + hash(pubkey, data)*G. */\n+static int secp256k1_ec_commit(const secp256k1_context* ctx, secp256k1_pubkey *commitment, const secp256k1_pubkey *pubkey, const unsigned char *data, size_t data_size) {\n+    unsigned char tweak[32];\n+\n+    VERIFY_CHECK(ctx != NULL);\n+    ARG_CHECK(commitment != NULL);\n+    ARG_CHECK(pubkey != NULL);\n+    ARG_CHECK(data != NULL);\n+\n+    *commitment = *pubkey;\n+    if (!secp256k1_ec_commit_tweak(ctx, tweak, commitment, data, data_size)) {\n+        return 0;\n+    }\n+    return secp256k1_ec_pubkey_tweak_add(ctx, commitment, tweak);\n+}\n+\n+/* Compute the seckey of an ec commitment from the original secret key of the pubkey as seckey +\n+ * hash(pubkey, data). */\n+static int secp256k1_ec_commit_seckey(const secp256k1_context* ctx, unsigned char *seckey, const secp256k1_pubkey *pubkey, const unsigned char *data, size_t data_size) {\n+    unsigned char tweak[32];\n+    secp256k1_pubkey pubkey_tmp;\n+\n+    VERIFY_CHECK(ctx != NULL);\n+    ARG_CHECK(seckey != NULL);\n+    ARG_CHECK(data != NULL);\n+\n+    if (pubkey == NULL) {\n+        /* Compute pubkey from seckey if not provided */\n+        int overflow;\n+        secp256k1_scalar x;\n+        secp256k1_gej pj;\n+        secp256k1_ge p;\n+\n+        secp256k1_scalar_set_b32(&x, seckey, &overflow);\n+        if (overflow != 0) {\n+            return 0;\n+        }\n+        secp256k1_ecmult_gen(&ctx->ecmult_gen_ctx, &pj, &x);\n+        secp256k1_ge_set_gej(&p, &pj);\n+        secp256k1_pubkey_save(&pubkey_tmp, &p);\n+        pubkey = &pubkey_tmp;\n+    }\n+\n+    if (!secp256k1_ec_commit_tweak(ctx, tweak, pubkey, data, data_size)) {\n+        return 0;\n+    }\n+    return secp256k1_ec_privkey_tweak_add(ctx, seckey, tweak);\n+}\n+\n+/* Verify an ec commitment as pubkey + hash(pubkey, data)*G ?= commitment. */\n+static int secp256k1_ec_commit_verify(const secp256k1_context* ctx, const secp256k1_pubkey *commitment, const secp256k1_pubkey *pubkey, const unsigned char *data, size_t data_size) {\n+    secp256k1_gej pj;\n+    secp256k1_ge p;\n+    secp256k1_pubkey commitment_tmp;\n+\n+    VERIFY_CHECK(ctx != NULL);\n+    ARG_CHECK(commitment != NULL);\n+    ARG_CHECK(pubkey != NULL);\n+    ARG_CHECK(data != NULL);\n+\n+    if (!secp256k1_ec_commit(ctx, &commitment_tmp, pubkey, data, data_size)) {\n+        return 0;\n+    }\n+\n+    /* Return commitment == commitment_tmp */\n+    secp256k1_gej_set_infinity(&pj);\n+    secp256k1_pubkey_load(ctx, &p, &commitment_tmp);\n+    secp256k1_gej_add_ge(&pj, &pj, &p);\n+    secp256k1_pubkey_load(ctx, &p, commitment);\n+    secp256k1_ge_neg(&p, &p);\n+    secp256k1_gej_add_ge(&pj, &pj, &p);\n+    return secp256k1_gej_is_infinity(&pj);\n+}\n+\n+static uint64_t s2c_commit_context_magic = 0xd5bafd089f7e1c63;\n+int secp256k1_s2c_commit_context_create(secp256k1_context *ctx, secp256k1_s2c_commit_context *s2c_ctx, const unsigned char *data32) {\n+    secp256k1_sha256 sha;\n+\n+    VERIFY_CHECK(ctx != NULL);\n+    ARG_CHECK(s2c_ctx != NULL);\n+    ARG_CHECK(data32 != NULL);\n+\n+    memcpy(s2c_ctx->magic, &s2c_commit_context_magic, sizeof(s2c_ctx->magic));\n+    memcpy(s2c_ctx->data, data32, 32);\n+    secp256k1_sha256_initialize(&sha);\n+    secp256k1_sha256_write(&sha, data32, 32);\n+    secp256k1_sha256_finalize(&sha, s2c_ctx->data_hash);\n+    return 1;\n+}\n+\n+int secp256k1_s2c_commit_get_original_nonce(secp256k1_context *ctx, secp256k1_pubkey *original_nonce, const secp256k1_s2c_commit_context *s2c_ctx) {\n+    VERIFY_CHECK(ctx != NULL);\n+    ARG_CHECK(original_nonce != NULL);\n+    ARG_CHECK(s2c_ctx != NULL);\n+\n+    memcpy(original_nonce, &s2c_ctx->original_pubnonce, sizeof(secp256k1_pubkey));\n+    return 1;\n+}\n+\n+/* This function computes a nonce as defined in BIP-schnorr *without* s2c-tweaking\n+ * the nonce. If data is provided, it is however hashed into the nonce and the\n+ * \"untweaked\" public nonce (`nonce32*G`) is stored in the sign-to-contract context.\n+ */\n+static int secp256k1_nonce_function_bipschnorr_no_s2c_tweak(const secp256k1_context *ctx, unsigned char *nonce32, const unsigned char *msg32, const unsigned char *key32, const unsigned char *algo16, void *data, unsigned int counter) {\n+    secp256k1_sha256 sha;\n+\n+    VERIFY_CHECK(counter == 0);\n+    (void) counter;\n+\n+    /* Hash x||msg as per the spec */\n+    secp256k1_sha256_initialize(&sha);\n+    secp256k1_sha256_write(&sha, key32, 32);\n+    secp256k1_sha256_write(&sha, msg32, 32);\n+    /* Hash in algorithm, which is not in the spec, but may be critical to\n+     * users depending on it to avoid nonce reuse across algorithms. */\n+    if (algo16 != NULL) {\n+        secp256k1_sha256_write(&sha, algo16, 16);\n+    }\n+    if (data == NULL) {\n+        secp256k1_sha256_finalize(&sha, nonce32);\n+    } else {\n+        /* Prepare for a sign-to-contract commitment if data is provided */\n+        secp256k1_s2c_commit_context *s2c_ctx = (secp256k1_s2c_commit_context *)data;\n+        ARG_CHECK(memcmp(s2c_ctx->magic, &s2c_commit_context_magic, sizeof(s2c_ctx->magic)) == 0);\n+        secp256k1_sha256_write(&sha, s2c_ctx->data_hash, 32);\n+        secp256k1_sha256_finalize(&sha, nonce32);\n+\n+        if (!secp256k1_ec_pubkey_create(ctx, &s2c_ctx->original_pubnonce, nonce32)) {\n+            return 0;\n+        }\n+    }\n+    return 1;\n+}\n+\n+/* This nonce function (without sign-to-contract) is described in BIP-schnorr\n+ * (https://github.com/sipa/bips/blob/bip-schnorr/bip-schnorr.mediawiki). If data !=\n+ * NULL the returned nonce commits to the provided data using \"sign-to-contract\"\n+ * commitments.\n+ */\n+static int secp256k1_nonce_function_bipschnorr(const secp256k1_context *ctx, unsigned char *nonce32, const unsigned char *msg32, const unsigned char *key32, const unsigned char *algo16, void *data, unsigned int counter) {\n+    if (!secp256k1_nonce_function_bipschnorr_no_s2c_tweak(ctx, nonce32, msg32, key32, algo16, data, counter)) {\n+        return 0;\n+    }\n+    if (data != NULL) {\n+        /* Create a sign-to-contract commitment by setting nonce32 <- nonce32 +\n+         * hash(nonce32*G, s2c_ctx->data) */\n+        secp256k1_s2c_commit_context *s2c_ctx = (secp256k1_s2c_commit_context *)data;",
      "path": "src/secp256k1.c",
      "position": 196,
      "original_position": 196,
      "commit_id": "8fa102cc29ce4197e925a073c5429a797ec75e22",
      "original_commit_id": "8fa102cc29ce4197e925a073c5429a797ec75e22",
      "in_reply_to_id": 299114561,
      "user": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "yes, good catch",
      "created_at": "2019-07-01T18:39:34Z",
      "updated_at": "2019-07-01T18:39:35Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/588#discussion_r299169397",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/299169397"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/588"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 761,
      "original_line": 761,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/299169970",
      "pull_request_review_id": 256500941,
      "id": 299169970,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI5OTE2OTk3MA==",
      "diff_hunk": "@@ -80,9 +80,34 @@ typedef struct {\n     unsigned char data[64];\n } secp256k1_ecdsa_signature;\n \n+/** Data structure that holds a sign-to-contract (\"s2c\") context. Sign-to-contract\n+ *  allows a signer to commit to some data as part of a signature. If the nonce\n+ *  function supports sign-to-contract, after creating it with\n+ *  secp256k1_s2c_commit_context_create the context can be given to a signing\n+ *  algorithm via the nonce data argument.\n+ *\n+ *  This structure is not opaque, but it is strongly discouraged to read or write to\n+ *  it directly. Use the secp256k1_s2c_commit_* instead to access a sign-to-contract\n+ *  context.\n+ *\n+ *  The exact representation of data inside is implementation defined and not\n+ *  guaranteed to be portable between different platforms or versions. It is however\n+ *  guaranteed to be 136 bytes in size, and can be safely copied/moved.\n+ */\n+typedef struct {\n+    /* magic is set during initialization. It allows functions casting to\n+     * s2c_commit_contexts from a void pointer to check if they actually got an\n+     * s2c_commit_context and if it has been initialized. */\n+    unsigned char magic[8];\n+    unsigned char data[32];\n+    unsigned char data_hash[32];\n+    secp256k1_pubkey original_pubnonce;",
      "path": "include/secp256k1.h",
      "position": 25,
      "original_position": 25,
      "commit_id": "8fa102cc29ce4197e925a073c5429a797ec75e22",
      "original_commit_id": "8fa102cc29ce4197e925a073c5429a797ec75e22",
      "in_reply_to_id": 299139618,
      "user": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "`ge` or `gej` are not exported. But, hm, perhaps this should be a pubnonce type if it already confuses people.",
      "created_at": "2019-07-01T18:41:24Z",
      "updated_at": "2019-07-01T18:41:24Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/588#discussion_r299169970",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/299169970"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/588"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 104,
      "original_line": 104,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/299170503",
      "pull_request_review_id": 256501652,
      "id": 299170503,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI5OTE3MDUwMw==",
      "diff_hunk": "@@ -588,10 +589,189 @@ int secp256k1_ec_pubkey_combine(const secp256k1_context* ctx, secp256k1_pubkey *\n     return 1;\n }\n \n+/* Compute an ec commitment tweak as hash(pubkey, data). */\n+static int secp256k1_ec_commit_tweak(const secp256k1_context *ctx, unsigned char *tweak32, const secp256k1_pubkey *pubkey, const unsigned char *data, size_t data_size) {\n+    secp256k1_ge p;\n+    unsigned char rbuf[33];\n+    size_t rbuf_size = sizeof(rbuf);\n+    secp256k1_sha256 sha;\n+\n+    if (data_size == 0) {\n+        /* That's probably not what the caller wanted */\n+        return 0;\n+    }\n+    if(!secp256k1_pubkey_load(ctx, &p, pubkey)) {\n+        return 0;\n+    }\n+    secp256k1_eckey_pubkey_serialize(&p, rbuf, &rbuf_size, 1);\n+\n+    secp256k1_sha256_initialize(&sha);\n+    secp256k1_sha256_write(&sha, rbuf, rbuf_size);\n+    secp256k1_sha256_write(&sha, data, data_size);\n+    secp256k1_sha256_finalize(&sha, tweak32);\n+    return 1;\n+}\n+\n+/* Compute an ec commitment as pubkey + hash(pubkey, data)*G. */\n+static int secp256k1_ec_commit(const secp256k1_context* ctx, secp256k1_pubkey *commitment, const secp256k1_pubkey *pubkey, const unsigned char *data, size_t data_size) {\n+    unsigned char tweak[32];\n+\n+    VERIFY_CHECK(ctx != NULL);\n+    ARG_CHECK(commitment != NULL);\n+    ARG_CHECK(pubkey != NULL);\n+    ARG_CHECK(data != NULL);\n+\n+    *commitment = *pubkey;\n+    if (!secp256k1_ec_commit_tweak(ctx, tweak, commitment, data, data_size)) {\n+        return 0;\n+    }\n+    return secp256k1_ec_pubkey_tweak_add(ctx, commitment, tweak);\n+}\n+\n+/* Compute the seckey of an ec commitment from the original secret key of the pubkey as seckey +\n+ * hash(pubkey, data). */\n+static int secp256k1_ec_commit_seckey(const secp256k1_context* ctx, unsigned char *seckey, const secp256k1_pubkey *pubkey, const unsigned char *data, size_t data_size) {\n+    unsigned char tweak[32];\n+    secp256k1_pubkey pubkey_tmp;\n+\n+    VERIFY_CHECK(ctx != NULL);\n+    ARG_CHECK(seckey != NULL);\n+    ARG_CHECK(data != NULL);\n+\n+    if (pubkey == NULL) {\n+        /* Compute pubkey from seckey if not provided */\n+        int overflow;\n+        secp256k1_scalar x;\n+        secp256k1_gej pj;\n+        secp256k1_ge p;\n+\n+        secp256k1_scalar_set_b32(&x, seckey, &overflow);\n+        if (overflow != 0) {\n+            return 0;\n+        }\n+        secp256k1_ecmult_gen(&ctx->ecmult_gen_ctx, &pj, &x);\n+        secp256k1_ge_set_gej(&p, &pj);\n+        secp256k1_pubkey_save(&pubkey_tmp, &p);\n+        pubkey = &pubkey_tmp;\n+    }\n+\n+    if (!secp256k1_ec_commit_tweak(ctx, tweak, pubkey, data, data_size)) {\n+        return 0;\n+    }\n+    return secp256k1_ec_privkey_tweak_add(ctx, seckey, tweak);\n+}\n+\n+/* Verify an ec commitment as pubkey + hash(pubkey, data)*G ?= commitment. */\n+static int secp256k1_ec_commit_verify(const secp256k1_context* ctx, const secp256k1_pubkey *commitment, const secp256k1_pubkey *pubkey, const unsigned char *data, size_t data_size) {\n+    secp256k1_gej pj;\n+    secp256k1_ge p;\n+    secp256k1_pubkey commitment_tmp;\n+\n+    VERIFY_CHECK(ctx != NULL);\n+    ARG_CHECK(commitment != NULL);\n+    ARG_CHECK(pubkey != NULL);\n+    ARG_CHECK(data != NULL);\n+\n+    if (!secp256k1_ec_commit(ctx, &commitment_tmp, pubkey, data, data_size)) {\n+        return 0;\n+    }\n+\n+    /* Return commitment == commitment_tmp */\n+    secp256k1_gej_set_infinity(&pj);\n+    secp256k1_pubkey_load(ctx, &p, &commitment_tmp);\n+    secp256k1_gej_add_ge(&pj, &pj, &p);\n+    secp256k1_pubkey_load(ctx, &p, commitment);\n+    secp256k1_ge_neg(&p, &p);\n+    secp256k1_gej_add_ge(&pj, &pj, &p);\n+    return secp256k1_gej_is_infinity(&pj);\n+}\n+\n+static uint64_t s2c_commit_context_magic = 0xd5bafd089f7e1c63;\n+int secp256k1_s2c_commit_context_create(secp256k1_context *ctx, secp256k1_s2c_commit_context *s2c_ctx, const unsigned char *data32) {\n+    secp256k1_sha256 sha;\n+\n+    VERIFY_CHECK(ctx != NULL);\n+    ARG_CHECK(s2c_ctx != NULL);\n+    ARG_CHECK(data32 != NULL);\n+\n+    memcpy(s2c_ctx->magic, &s2c_commit_context_magic, sizeof(s2c_ctx->magic));",
      "path": "src/secp256k1.c",
      "position": 132,
      "original_position": 132,
      "commit_id": "8fa102cc29ce4197e925a073c5429a797ec75e22",
      "original_commit_id": "8fa102cc29ce4197e925a073c5429a797ec75e22",
      "in_reply_to_id": 299105033,
      "user": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "There was some reason I don't remember to use `uint64_t`. But I think using a byte array in the struct is arbitrary... probably easier to read if replaced by `uint64_t`.",
      "created_at": "2019-07-01T18:43:03Z",
      "updated_at": "2019-07-01T18:43:03Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/588#discussion_r299170503",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/299170503"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/588"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 697,
      "original_line": 697,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/299234126",
      "pull_request_review_id": 256582586,
      "id": 299234126,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI5OTIzNDEyNg==",
      "diff_hunk": "@@ -588,10 +589,189 @@ int secp256k1_ec_pubkey_combine(const secp256k1_context* ctx, secp256k1_pubkey *\n     return 1;\n }\n \n+/* Compute an ec commitment tweak as hash(pubkey, data). */\n+static int secp256k1_ec_commit_tweak(const secp256k1_context *ctx, unsigned char *tweak32, const secp256k1_pubkey *pubkey, const unsigned char *data, size_t data_size) {\n+    secp256k1_ge p;\n+    unsigned char rbuf[33];\n+    size_t rbuf_size = sizeof(rbuf);\n+    secp256k1_sha256 sha;\n+\n+    if (data_size == 0) {\n+        /* That's probably not what the caller wanted */\n+        return 0;\n+    }\n+    if(!secp256k1_pubkey_load(ctx, &p, pubkey)) {\n+        return 0;\n+    }\n+    secp256k1_eckey_pubkey_serialize(&p, rbuf, &rbuf_size, 1);\n+\n+    secp256k1_sha256_initialize(&sha);\n+    secp256k1_sha256_write(&sha, rbuf, rbuf_size);\n+    secp256k1_sha256_write(&sha, data, data_size);\n+    secp256k1_sha256_finalize(&sha, tweak32);\n+    return 1;\n+}\n+\n+/* Compute an ec commitment as pubkey + hash(pubkey, data)*G. */\n+static int secp256k1_ec_commit(const secp256k1_context* ctx, secp256k1_pubkey *commitment, const secp256k1_pubkey *pubkey, const unsigned char *data, size_t data_size) {\n+    unsigned char tweak[32];\n+\n+    VERIFY_CHECK(ctx != NULL);\n+    ARG_CHECK(commitment != NULL);\n+    ARG_CHECK(pubkey != NULL);\n+    ARG_CHECK(data != NULL);\n+\n+    *commitment = *pubkey;\n+    if (!secp256k1_ec_commit_tweak(ctx, tweak, commitment, data, data_size)) {\n+        return 0;\n+    }\n+    return secp256k1_ec_pubkey_tweak_add(ctx, commitment, tweak);\n+}\n+\n+/* Compute the seckey of an ec commitment from the original secret key of the pubkey as seckey +\n+ * hash(pubkey, data). */\n+static int secp256k1_ec_commit_seckey(const secp256k1_context* ctx, unsigned char *seckey, const secp256k1_pubkey *pubkey, const unsigned char *data, size_t data_size) {\n+    unsigned char tweak[32];\n+    secp256k1_pubkey pubkey_tmp;\n+\n+    VERIFY_CHECK(ctx != NULL);\n+    ARG_CHECK(seckey != NULL);\n+    ARG_CHECK(data != NULL);\n+\n+    if (pubkey == NULL) {\n+        /* Compute pubkey from seckey if not provided */\n+        int overflow;\n+        secp256k1_scalar x;\n+        secp256k1_gej pj;\n+        secp256k1_ge p;\n+\n+        secp256k1_scalar_set_b32(&x, seckey, &overflow);\n+        if (overflow != 0) {\n+            return 0;\n+        }\n+        secp256k1_ecmult_gen(&ctx->ecmult_gen_ctx, &pj, &x);\n+        secp256k1_ge_set_gej(&p, &pj);\n+        secp256k1_pubkey_save(&pubkey_tmp, &p);\n+        pubkey = &pubkey_tmp;\n+    }\n+\n+    if (!secp256k1_ec_commit_tweak(ctx, tweak, pubkey, data, data_size)) {\n+        return 0;\n+    }\n+    return secp256k1_ec_privkey_tweak_add(ctx, seckey, tweak);\n+}\n+\n+/* Verify an ec commitment as pubkey + hash(pubkey, data)*G ?= commitment. */\n+static int secp256k1_ec_commit_verify(const secp256k1_context* ctx, const secp256k1_pubkey *commitment, const secp256k1_pubkey *pubkey, const unsigned char *data, size_t data_size) {\n+    secp256k1_gej pj;\n+    secp256k1_ge p;\n+    secp256k1_pubkey commitment_tmp;\n+\n+    VERIFY_CHECK(ctx != NULL);\n+    ARG_CHECK(commitment != NULL);\n+    ARG_CHECK(pubkey != NULL);\n+    ARG_CHECK(data != NULL);\n+\n+    if (!secp256k1_ec_commit(ctx, &commitment_tmp, pubkey, data, data_size)) {\n+        return 0;\n+    }\n+\n+    /* Return commitment == commitment_tmp */\n+    secp256k1_gej_set_infinity(&pj);\n+    secp256k1_pubkey_load(ctx, &p, &commitment_tmp);\n+    secp256k1_gej_add_ge(&pj, &pj, &p);\n+    secp256k1_pubkey_load(ctx, &p, commitment);\n+    secp256k1_ge_neg(&p, &p);\n+    secp256k1_gej_add_ge(&pj, &pj, &p);\n+    return secp256k1_gej_is_infinity(&pj);\n+}\n+\n+static uint64_t s2c_commit_context_magic = 0xd5bafd089f7e1c63;\n+int secp256k1_s2c_commit_context_create(secp256k1_context *ctx, secp256k1_s2c_commit_context *s2c_ctx, const unsigned char *data32) {\n+    secp256k1_sha256 sha;\n+\n+    VERIFY_CHECK(ctx != NULL);\n+    ARG_CHECK(s2c_ctx != NULL);\n+    ARG_CHECK(data32 != NULL);\n+\n+    memcpy(s2c_ctx->magic, &s2c_commit_context_magic, sizeof(s2c_ctx->magic));",
      "path": "src/secp256k1.c",
      "position": 132,
      "original_position": 132,
      "commit_id": "8fa102cc29ce4197e925a073c5429a797ec75e22",
      "original_commit_id": "8fa102cc29ce4197e925a073c5429a797ec75e22",
      "in_reply_to_id": 299105033,
      "user": {
        "login": "elichai",
        "id": 2167860,
        "node_id": "MDQ6VXNlcjIxNjc4NjA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2167860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/elichai",
        "html_url": "https://github.com/elichai",
        "followers_url": "https://api.github.com/users/elichai/followers",
        "following_url": "https://api.github.com/users/elichai/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/elichai/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/elichai/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/elichai/subscriptions",
        "organizations_url": "https://api.github.com/users/elichai/orgs",
        "repos_url": "https://api.github.com/users/elichai/repos",
        "events_url": "https://api.github.com/users/elichai/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/elichai/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Another thing, I'm pretty sure memcpy from `uint64_t`  to `unsigned char[8]` is platform defined(BE/LE)",
      "created_at": "2019-07-01T22:02:37Z",
      "updated_at": "2019-07-01T22:02:37Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/588#discussion_r299234126",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/299234126"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/588"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 697,
      "original_line": 697,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/299643803",
      "pull_request_review_id": 257097431,
      "id": 299643803,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI5OTY0MzgwMw==",
      "diff_hunk": "@@ -588,10 +589,189 @@ int secp256k1_ec_pubkey_combine(const secp256k1_context* ctx, secp256k1_pubkey *\n     return 1;\n }\n \n+/* Compute an ec commitment tweak as hash(pubkey, data). */\n+static int secp256k1_ec_commit_tweak(const secp256k1_context *ctx, unsigned char *tweak32, const secp256k1_pubkey *pubkey, const unsigned char *data, size_t data_size) {\n+    secp256k1_ge p;\n+    unsigned char rbuf[33];\n+    size_t rbuf_size = sizeof(rbuf);\n+    secp256k1_sha256 sha;\n+\n+    if (data_size == 0) {\n+        /* That's probably not what the caller wanted */\n+        return 0;\n+    }\n+    if(!secp256k1_pubkey_load(ctx, &p, pubkey)) {\n+        return 0;\n+    }\n+    secp256k1_eckey_pubkey_serialize(&p, rbuf, &rbuf_size, 1);\n+\n+    secp256k1_sha256_initialize(&sha);\n+    secp256k1_sha256_write(&sha, rbuf, rbuf_size);\n+    secp256k1_sha256_write(&sha, data, data_size);\n+    secp256k1_sha256_finalize(&sha, tweak32);\n+    return 1;\n+}\n+\n+/* Compute an ec commitment as pubkey + hash(pubkey, data)*G. */\n+static int secp256k1_ec_commit(const secp256k1_context* ctx, secp256k1_pubkey *commitment, const secp256k1_pubkey *pubkey, const unsigned char *data, size_t data_size) {\n+    unsigned char tweak[32];\n+\n+    VERIFY_CHECK(ctx != NULL);\n+    ARG_CHECK(commitment != NULL);\n+    ARG_CHECK(pubkey != NULL);\n+    ARG_CHECK(data != NULL);\n+\n+    *commitment = *pubkey;\n+    if (!secp256k1_ec_commit_tweak(ctx, tweak, commitment, data, data_size)) {\n+        return 0;\n+    }\n+    return secp256k1_ec_pubkey_tweak_add(ctx, commitment, tweak);\n+}\n+\n+/* Compute the seckey of an ec commitment from the original secret key of the pubkey as seckey +\n+ * hash(pubkey, data). */\n+static int secp256k1_ec_commit_seckey(const secp256k1_context* ctx, unsigned char *seckey, const secp256k1_pubkey *pubkey, const unsigned char *data, size_t data_size) {\n+    unsigned char tweak[32];\n+    secp256k1_pubkey pubkey_tmp;\n+\n+    VERIFY_CHECK(ctx != NULL);\n+    ARG_CHECK(seckey != NULL);\n+    ARG_CHECK(data != NULL);\n+\n+    if (pubkey == NULL) {\n+        /* Compute pubkey from seckey if not provided */\n+        int overflow;\n+        secp256k1_scalar x;\n+        secp256k1_gej pj;\n+        secp256k1_ge p;\n+\n+        secp256k1_scalar_set_b32(&x, seckey, &overflow);\n+        if (overflow != 0) {\n+            return 0;\n+        }\n+        secp256k1_ecmult_gen(&ctx->ecmult_gen_ctx, &pj, &x);\n+        secp256k1_ge_set_gej(&p, &pj);\n+        secp256k1_pubkey_save(&pubkey_tmp, &p);\n+        pubkey = &pubkey_tmp;\n+    }\n+\n+    if (!secp256k1_ec_commit_tweak(ctx, tweak, pubkey, data, data_size)) {\n+        return 0;\n+    }\n+    return secp256k1_ec_privkey_tweak_add(ctx, seckey, tweak);\n+}\n+\n+/* Verify an ec commitment as pubkey + hash(pubkey, data)*G ?= commitment. */\n+static int secp256k1_ec_commit_verify(const secp256k1_context* ctx, const secp256k1_pubkey *commitment, const secp256k1_pubkey *pubkey, const unsigned char *data, size_t data_size) {\n+    secp256k1_gej pj;\n+    secp256k1_ge p;\n+    secp256k1_pubkey commitment_tmp;\n+\n+    VERIFY_CHECK(ctx != NULL);\n+    ARG_CHECK(commitment != NULL);\n+    ARG_CHECK(pubkey != NULL);\n+    ARG_CHECK(data != NULL);\n+\n+    if (!secp256k1_ec_commit(ctx, &commitment_tmp, pubkey, data, data_size)) {\n+        return 0;\n+    }\n+\n+    /* Return commitment == commitment_tmp */\n+    secp256k1_gej_set_infinity(&pj);\n+    secp256k1_pubkey_load(ctx, &p, &commitment_tmp);\n+    secp256k1_gej_add_ge(&pj, &pj, &p);\n+    secp256k1_pubkey_load(ctx, &p, commitment);\n+    secp256k1_ge_neg(&p, &p);\n+    secp256k1_gej_add_ge(&pj, &pj, &p);\n+    return secp256k1_gej_is_infinity(&pj);\n+}\n+\n+static uint64_t s2c_commit_context_magic = 0xd5bafd089f7e1c63;\n+int secp256k1_s2c_commit_context_create(secp256k1_context *ctx, secp256k1_s2c_commit_context *s2c_ctx, const unsigned char *data32) {\n+    secp256k1_sha256 sha;\n+\n+    VERIFY_CHECK(ctx != NULL);\n+    ARG_CHECK(s2c_ctx != NULL);\n+    ARG_CHECK(data32 != NULL);\n+\n+    memcpy(s2c_ctx->magic, &s2c_commit_context_magic, sizeof(s2c_ctx->magic));",
      "path": "src/secp256k1.c",
      "position": 132,
      "original_position": 132,
      "commit_id": "8fa102cc29ce4197e925a073c5429a797ec75e22",
      "original_commit_id": "8fa102cc29ce4197e925a073c5429a797ec75e22",
      "in_reply_to_id": 299105033,
      "user": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yes, but not really an issue as the doc clearly states\r\n\r\n> The exact representation of data inside is implementation defined and not guaranteed to be portable between different platforms or versions.",
      "created_at": "2019-07-02T19:18:12Z",
      "updated_at": "2019-07-02T19:18:13Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/588#discussion_r299643803",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/299643803"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/588"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 697,
      "original_line": 697,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/299719624",
      "pull_request_review_id": 257192510,
      "id": 299719624,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI5OTcxOTYyNA==",
      "diff_hunk": "@@ -588,10 +589,189 @@ int secp256k1_ec_pubkey_combine(const secp256k1_context* ctx, secp256k1_pubkey *\n     return 1;\n }\n \n+/* Compute an ec commitment tweak as hash(pubkey, data). */\n+static int secp256k1_ec_commit_tweak(const secp256k1_context *ctx, unsigned char *tweak32, const secp256k1_pubkey *pubkey, const unsigned char *data, size_t data_size) {\n+    secp256k1_ge p;\n+    unsigned char rbuf[33];\n+    size_t rbuf_size = sizeof(rbuf);\n+    secp256k1_sha256 sha;\n+\n+    if (data_size == 0) {\n+        /* That's probably not what the caller wanted */\n+        return 0;\n+    }\n+    if(!secp256k1_pubkey_load(ctx, &p, pubkey)) {\n+        return 0;\n+    }\n+    secp256k1_eckey_pubkey_serialize(&p, rbuf, &rbuf_size, 1);\n+\n+    secp256k1_sha256_initialize(&sha);\n+    secp256k1_sha256_write(&sha, rbuf, rbuf_size);\n+    secp256k1_sha256_write(&sha, data, data_size);\n+    secp256k1_sha256_finalize(&sha, tweak32);\n+    return 1;\n+}\n+\n+/* Compute an ec commitment as pubkey + hash(pubkey, data)*G. */\n+static int secp256k1_ec_commit(const secp256k1_context* ctx, secp256k1_pubkey *commitment, const secp256k1_pubkey *pubkey, const unsigned char *data, size_t data_size) {\n+    unsigned char tweak[32];\n+\n+    VERIFY_CHECK(ctx != NULL);\n+    ARG_CHECK(commitment != NULL);\n+    ARG_CHECK(pubkey != NULL);\n+    ARG_CHECK(data != NULL);\n+\n+    *commitment = *pubkey;\n+    if (!secp256k1_ec_commit_tweak(ctx, tweak, commitment, data, data_size)) {\n+        return 0;\n+    }\n+    return secp256k1_ec_pubkey_tweak_add(ctx, commitment, tweak);\n+}\n+\n+/* Compute the seckey of an ec commitment from the original secret key of the pubkey as seckey +\n+ * hash(pubkey, data). */\n+static int secp256k1_ec_commit_seckey(const secp256k1_context* ctx, unsigned char *seckey, const secp256k1_pubkey *pubkey, const unsigned char *data, size_t data_size) {\n+    unsigned char tweak[32];\n+    secp256k1_pubkey pubkey_tmp;\n+\n+    VERIFY_CHECK(ctx != NULL);\n+    ARG_CHECK(seckey != NULL);\n+    ARG_CHECK(data != NULL);\n+\n+    if (pubkey == NULL) {\n+        /* Compute pubkey from seckey if not provided */\n+        int overflow;\n+        secp256k1_scalar x;\n+        secp256k1_gej pj;\n+        secp256k1_ge p;\n+\n+        secp256k1_scalar_set_b32(&x, seckey, &overflow);\n+        if (overflow != 0) {\n+            return 0;\n+        }\n+        secp256k1_ecmult_gen(&ctx->ecmult_gen_ctx, &pj, &x);\n+        secp256k1_ge_set_gej(&p, &pj);\n+        secp256k1_pubkey_save(&pubkey_tmp, &p);\n+        pubkey = &pubkey_tmp;\n+    }\n+\n+    if (!secp256k1_ec_commit_tweak(ctx, tweak, pubkey, data, data_size)) {\n+        return 0;\n+    }\n+    return secp256k1_ec_privkey_tweak_add(ctx, seckey, tweak);\n+}\n+\n+/* Verify an ec commitment as pubkey + hash(pubkey, data)*G ?= commitment. */\n+static int secp256k1_ec_commit_verify(const secp256k1_context* ctx, const secp256k1_pubkey *commitment, const secp256k1_pubkey *pubkey, const unsigned char *data, size_t data_size) {\n+    secp256k1_gej pj;\n+    secp256k1_ge p;\n+    secp256k1_pubkey commitment_tmp;\n+\n+    VERIFY_CHECK(ctx != NULL);\n+    ARG_CHECK(commitment != NULL);\n+    ARG_CHECK(pubkey != NULL);\n+    ARG_CHECK(data != NULL);\n+\n+    if (!secp256k1_ec_commit(ctx, &commitment_tmp, pubkey, data, data_size)) {\n+        return 0;\n+    }\n+\n+    /* Return commitment == commitment_tmp */\n+    secp256k1_gej_set_infinity(&pj);\n+    secp256k1_pubkey_load(ctx, &p, &commitment_tmp);\n+    secp256k1_gej_add_ge(&pj, &pj, &p);\n+    secp256k1_pubkey_load(ctx, &p, commitment);\n+    secp256k1_ge_neg(&p, &p);\n+    secp256k1_gej_add_ge(&pj, &pj, &p);\n+    return secp256k1_gej_is_infinity(&pj);\n+}\n+\n+static uint64_t s2c_commit_context_magic = 0xd5bafd089f7e1c63;\n+int secp256k1_s2c_commit_context_create(secp256k1_context *ctx, secp256k1_s2c_commit_context *s2c_ctx, const unsigned char *data32) {\n+    secp256k1_sha256 sha;\n+\n+    VERIFY_CHECK(ctx != NULL);\n+    ARG_CHECK(s2c_ctx != NULL);\n+    ARG_CHECK(data32 != NULL);\n+\n+    memcpy(s2c_ctx->magic, &s2c_commit_context_magic, sizeof(s2c_ctx->magic));",
      "path": "src/secp256k1.c",
      "position": 132,
      "original_position": 132,
      "commit_id": "8fa102cc29ce4197e925a073c5429a797ec75e22",
      "original_commit_id": "8fa102cc29ce4197e925a073c5429a797ec75e22",
      "in_reply_to_id": 299105033,
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "It doesn't matter in the end but the code is certainly easier to read if it's the same type twice (no matter what type that is) ",
      "created_at": "2019-07-02T23:08:22Z",
      "updated_at": "2019-07-02T23:08:23Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/588#discussion_r299719624",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/299719624"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/588"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 697,
      "original_line": 697,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/299720499",
      "pull_request_review_id": 257193553,
      "id": 299720499,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI5OTcyMDQ5OQ==",
      "diff_hunk": "@@ -80,9 +80,34 @@ typedef struct {\n     unsigned char data[64];\n } secp256k1_ecdsa_signature;\n \n+/** Data structure that holds a sign-to-contract (\"s2c\") context. Sign-to-contract\n+ *  allows a signer to commit to some data as part of a signature. If the nonce\n+ *  function supports sign-to-contract, after creating it with\n+ *  secp256k1_s2c_commit_context_create the context can be given to a signing\n+ *  algorithm via the nonce data argument.\n+ *\n+ *  This structure is not opaque, but it is strongly discouraged to read or write to\n+ *  it directly. Use the secp256k1_s2c_commit_* instead to access a sign-to-contract\n+ *  context.\n+ *\n+ *  The exact representation of data inside is implementation defined and not\n+ *  guaranteed to be portable between different platforms or versions. It is however\n+ *  guaranteed to be 136 bytes in size, and can be safely copied/moved.\n+ */\n+typedef struct {\n+    /* magic is set during initialization. It allows functions casting to\n+     * s2c_commit_contexts from a void pointer to check if they actually got an\n+     * s2c_commit_context and if it has been initialized. */\n+    unsigned char magic[8];\n+    unsigned char data[32];\n+    unsigned char data_hash[32];\n+    secp256k1_pubkey original_pubnonce;",
      "path": "include/secp256k1.h",
      "position": 25,
      "original_position": 25,
      "commit_id": "8fa102cc29ce4197e925a073c5429a797ec75e22",
      "original_commit_id": "8fa102cc29ce4197e925a073c5429a797ec75e22",
      "in_reply_to_id": 299139618,
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Hm, yes. A public key is a public key, and a nonce is a different thing. (I mean we can't enforce anything in C but maybe it's helpful to use different names for the two public types at least.)\r\n\r\nDo we have the same problem in other places too?",
      "created_at": "2019-07-02T23:12:32Z",
      "updated_at": "2019-07-02T23:12:32Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/588#discussion_r299720499",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/299720499"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/588"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 104,
      "original_line": 104,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/299721407",
      "pull_request_review_id": 257194617,
      "id": 299721407,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI5OTcyMTQwNw==",
      "diff_hunk": "@@ -80,9 +80,34 @@ typedef struct {\n     unsigned char data[64];\n } secp256k1_ecdsa_signature;\n \n+/** Data structure that holds a sign-to-contract (\"s2c\") context. Sign-to-contract\n+ *  allows a signer to commit to some data as part of a signature. If the nonce\n+ *  function supports sign-to-contract, after creating it with\n+ *  secp256k1_s2c_commit_context_create the context can be given to a signing\n+ *  algorithm via the nonce data argument.\n+ *\n+ *  This structure is not opaque, but it is strongly discouraged to read or write to\n+ *  it directly. Use the secp256k1_s2c_commit_* instead to access a sign-to-contract\n+ *  context.\n+ *\n+ *  The exact representation of data inside is implementation defined and not\n+ *  guaranteed to be portable between different platforms or versions. It is however\n+ *  guaranteed to be 136 bytes in size, and can be safely copied/moved.\n+ */\n+typedef struct {\n+    /* magic is set during initialization. It allows functions casting to\n+     * s2c_commit_contexts from a void pointer to check if they actually got an\n+     * s2c_commit_context and if it has been initialized. */\n+    unsigned char magic[8];\n+    unsigned char data[32];\n+    unsigned char data_hash[32];\n+    secp256k1_pubkey original_pubnonce;",
      "path": "include/secp256k1.h",
      "position": 25,
      "original_position": 25,
      "commit_id": "8fa102cc29ce4197e925a073c5429a797ec75e22",
      "original_commit_id": "8fa102cc29ce4197e925a073c5429a797ec75e22",
      "in_reply_to_id": 299139618,
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "On a second thought... if we really want to optimize for a simple API, then https://github.com/bitcoin-core/secp256k1/pull/589 is the way to go. There the entire problem is eliminated by hiding from the user that a signature contains a \"nonce\".",
      "created_at": "2019-07-02T23:16:50Z",
      "updated_at": "2019-07-02T23:16:50Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/588#discussion_r299721407",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/299721407"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/588"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 104,
      "original_line": 104,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/299722737",
      "pull_request_review_id": 257196263,
      "id": 299722737,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI5OTcyMjczNw==",
      "diff_hunk": "@@ -80,9 +80,34 @@ typedef struct {\n     unsigned char data[64];\n } secp256k1_ecdsa_signature;\n \n+/** Data structure that holds a sign-to-contract (\"s2c\") context. Sign-to-contract\n+ *  allows a signer to commit to some data as part of a signature. If the nonce\n+ *  function supports sign-to-contract, after creating it with\n+ *  secp256k1_s2c_commit_context_create the context can be given to a signing\n+ *  algorithm via the nonce data argument.\n+ *\n+ *  This structure is not opaque, but it is strongly discouraged to read or write to\n+ *  it directly. Use the secp256k1_s2c_commit_* instead to access a sign-to-contract\n+ *  context.\n+ *\n+ *  The exact representation of data inside is implementation defined and not\n+ *  guaranteed to be portable between different platforms or versions. It is however\n+ *  guaranteed to be 136 bytes in size, and can be safely copied/moved.\n+ */\n+typedef struct {\n+    /* magic is set during initialization. It allows functions casting to\n+     * s2c_commit_contexts from a void pointer to check if they actually got an\n+     * s2c_commit_context and if it has been initialized. */\n+    unsigned char magic[8];\n+    unsigned char data[32];\n+    unsigned char data_hash[32];\n+    secp256k1_pubkey original_pubnonce;",
      "path": "include/secp256k1.h",
      "position": 25,
      "original_position": 25,
      "commit_id": "8fa102cc29ce4197e925a073c5429a797ec75e22",
      "original_commit_id": "8fa102cc29ce4197e925a073c5429a797ec75e22",
      "in_reply_to_id": 299139618,
      "user": {
        "login": "elichai",
        "id": 2167860,
        "node_id": "MDQ6VXNlcjIxNjc4NjA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2167860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/elichai",
        "html_url": "https://github.com/elichai",
        "followers_url": "https://api.github.com/users/elichai/followers",
        "following_url": "https://api.github.com/users/elichai/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/elichai/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/elichai/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/elichai/subscriptions",
        "organizations_url": "https://api.github.com/users/elichai/orgs",
        "repos_url": "https://api.github.com/users/elichai/repos",
        "events_url": "https://api.github.com/users/elichai/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/elichai/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "The nonce is represented as a pubkey also there https://github.com/bitcoin-core/secp256k1/pull/589/files#diff-222d6d707e263c79c462fb223b0e3ddcR98",
      "created_at": "2019-07-02T23:23:55Z",
      "updated_at": "2019-07-02T23:25:07Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/588#discussion_r299722737",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/299722737"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/588"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 104,
      "original_line": 104,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/299724483",
      "pull_request_review_id": 257198336,
      "id": 299724483,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI5OTcyNDQ4Mw==",
      "diff_hunk": "@@ -80,9 +80,34 @@ typedef struct {\n     unsigned char data[64];\n } secp256k1_ecdsa_signature;\n \n+/** Data structure that holds a sign-to-contract (\"s2c\") context. Sign-to-contract\n+ *  allows a signer to commit to some data as part of a signature. If the nonce\n+ *  function supports sign-to-contract, after creating it with\n+ *  secp256k1_s2c_commit_context_create the context can be given to a signing\n+ *  algorithm via the nonce data argument.\n+ *\n+ *  This structure is not opaque, but it is strongly discouraged to read or write to\n+ *  it directly. Use the secp256k1_s2c_commit_* instead to access a sign-to-contract\n+ *  context.\n+ *\n+ *  The exact representation of data inside is implementation defined and not\n+ *  guaranteed to be portable between different platforms or versions. It is however\n+ *  guaranteed to be 136 bytes in size, and can be safely copied/moved.\n+ */\n+typedef struct {\n+    /* magic is set during initialization. It allows functions casting to\n+     * s2c_commit_contexts from a void pointer to check if they actually got an\n+     * s2c_commit_context and if it has been initialized. */\n+    unsigned char magic[8];\n+    unsigned char data[32];\n+    unsigned char data_hash[32];\n+    secp256k1_pubkey original_pubnonce;",
      "path": "include/secp256k1.h",
      "position": 25,
      "original_position": 25,
      "commit_id": "8fa102cc29ce4197e925a073c5429a797ec75e22",
      "original_commit_id": "8fa102cc29ce4197e925a073c5429a797ec75e22",
      "in_reply_to_id": 299139618,
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "okay, yes, but that struct is not  really public:\r\nhttps://github.com/bitcoin-core/secp256k1/pull/589/files#diff-222d6d707e263c79c462fb223b0e3ddcR87",
      "created_at": "2019-07-02T23:32:36Z",
      "updated_at": "2019-07-02T23:33:03Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/588#discussion_r299724483",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/299724483"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/588"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 104,
      "original_line": 104,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/299726663",
      "pull_request_review_id": 257200927,
      "id": 299726663,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI5OTcyNjY2Mw==",
      "diff_hunk": "@@ -80,9 +80,34 @@ typedef struct {\n     unsigned char data[64];\n } secp256k1_ecdsa_signature;\n \n+/** Data structure that holds a sign-to-contract (\"s2c\") context. Sign-to-contract\n+ *  allows a signer to commit to some data as part of a signature. If the nonce\n+ *  function supports sign-to-contract, after creating it with\n+ *  secp256k1_s2c_commit_context_create the context can be given to a signing\n+ *  algorithm via the nonce data argument.\n+ *\n+ *  This structure is not opaque, but it is strongly discouraged to read or write to\n+ *  it directly. Use the secp256k1_s2c_commit_* instead to access a sign-to-contract\n+ *  context.\n+ *\n+ *  The exact representation of data inside is implementation defined and not\n+ *  guaranteed to be portable between different platforms or versions. It is however\n+ *  guaranteed to be 136 bytes in size, and can be safely copied/moved.\n+ */\n+typedef struct {\n+    /* magic is set during initialization. It allows functions casting to\n+     * s2c_commit_contexts from a void pointer to check if they actually got an\n+     * s2c_commit_context and if it has been initialized. */\n+    unsigned char magic[8];\n+    unsigned char data[32];\n+    unsigned char data_hash[32];\n+    secp256k1_pubkey original_pubnonce;",
      "path": "include/secp256k1.h",
      "position": 25,
      "original_position": 25,
      "commit_id": "8fa102cc29ce4197e925a073c5429a797ec75e22",
      "original_commit_id": "8fa102cc29ce4197e925a073c5429a797ec75e22",
      "in_reply_to_id": 299139618,
      "user": {
        "login": "elichai",
        "id": 2167860,
        "node_id": "MDQ6VXNlcjIxNjc4NjA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2167860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/elichai",
        "html_url": "https://github.com/elichai",
        "followers_url": "https://api.github.com/users/elichai/followers",
        "following_url": "https://api.github.com/users/elichai/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/elichai/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/elichai/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/elichai/subscriptions",
        "organizations_url": "https://api.github.com/users/elichai/orgs",
        "repos_url": "https://api.github.com/users/elichai/repos",
        "events_url": "https://api.github.com/users/elichai/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/elichai/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "fair",
      "created_at": "2019-07-02T23:43:34Z",
      "updated_at": "2019-07-02T23:43:34Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/588#discussion_r299726663",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/299726663"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/588"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 104,
      "original_line": 104,
      "side": "RIGHT"
    }
  ]
}