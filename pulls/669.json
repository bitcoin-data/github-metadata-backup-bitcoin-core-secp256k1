{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/669",
    "id": 325859362,
    "node_id": "MDExOlB1bGxSZXF1ZXN0MzI1ODU5MzYy",
    "html_url": "https://github.com/bitcoin-core/secp256k1/pull/669",
    "diff_url": "https://github.com/bitcoin-core/secp256k1/pull/669.diff",
    "patch_url": "https://github.com/bitcoin-core/secp256k1/pull/669.patch",
    "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/669",
    "commits_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/669/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/669/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/669/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin-core/secp256k1/statuses/1a0f2edfdb55f275fbd8703782b59a9ec759f65f",
    "number": 669,
    "state": "closed",
    "locked": false,
    "maintainer_can_modify": false,
    "title": "ecdsa sign-to-contract module, with anti nonce covert chan util functions",
    "user": {
      "login": "benma",
      "id": 1225267,
      "node_id": "MDQ6VXNlcjEyMjUyNjc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1225267?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/benma",
      "html_url": "https://github.com/benma",
      "followers_url": "https://api.github.com/users/benma/followers",
      "following_url": "https://api.github.com/users/benma/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/benma/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/benma/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/benma/subscriptions",
      "organizations_url": "https://api.github.com/users/benma/orgs",
      "repos_url": "https://api.github.com/users/benma/repos",
      "events_url": "https://api.github.com/users/benma/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/benma/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Alternative to https://github.com/bitcoin-core/secp256k1/pull/637, where the main s2c signing function lives in `secp256k1.c`. See this thread for some discussion about this: https://github.com/bitcoin-core/secp256k1/pull/637#discussion_r307976594",
    "labels": [],
    "created_at": "2019-10-08T16:33:14Z",
    "updated_at": "2024-07-30T13:29:52Z",
    "closed_at": "2020-12-16T22:23:48Z",
    "mergeable": false,
    "mergeable_state": "dirty",
    "merge_commit_sha": "b9524ee065f3cd65ba12862810f91d5656355019",
    "assignees": [],
    "requested_reviewers": [],
    "requested_teams": [],
    "rebaseable": false,
    "head": {
      "label": "benma:ecdsa_nonce_sidechan_alternative",
      "ref": "ecdsa_nonce_sidechan_alternative",
      "sha": "1a0f2edfdb55f275fbd8703782b59a9ec759f65f",
      "user": {
        "login": "benma",
        "id": 1225267,
        "node_id": "MDQ6VXNlcjEyMjUyNjc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1225267?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/benma",
        "html_url": "https://github.com/benma",
        "followers_url": "https://api.github.com/users/benma/followers",
        "following_url": "https://api.github.com/users/benma/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/benma/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/benma/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/benma/subscriptions",
        "organizations_url": "https://api.github.com/users/benma/orgs",
        "repos_url": "https://api.github.com/users/benma/repos",
        "events_url": "https://api.github.com/users/benma/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/benma/received_events",
        "type": "User",
        "site_admin": false
      },
      "repo": {
        "id": 191352053,
        "node_id": "MDEwOlJlcG9zaXRvcnkxOTEzNTIwNTM=",
        "name": "secp256k1",
        "full_name": "benma/secp256k1",
        "owner": {
          "login": "benma",
          "id": 1225267,
          "node_id": "MDQ6VXNlcjEyMjUyNjc=",
          "avatar_url": "https://avatars.githubusercontent.com/u/1225267?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/benma",
          "html_url": "https://github.com/benma",
          "followers_url": "https://api.github.com/users/benma/followers",
          "following_url": "https://api.github.com/users/benma/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/benma/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/benma/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/benma/subscriptions",
          "organizations_url": "https://api.github.com/users/benma/orgs",
          "repos_url": "https://api.github.com/users/benma/repos",
          "events_url": "https://api.github.com/users/benma/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/benma/received_events",
          "type": "User",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/benma/secp256k1",
        "description": "Optimized C library for EC operations on curve secp256k1",
        "fork": true,
        "url": "https://api.github.com/repos/benma/secp256k1",
        "archive_url": "https://api.github.com/repos/benma/secp256k1/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/benma/secp256k1/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/benma/secp256k1/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/benma/secp256k1/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/benma/secp256k1/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/benma/secp256k1/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/benma/secp256k1/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/benma/secp256k1/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/benma/secp256k1/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/benma/secp256k1/contributors",
        "deployments_url": "https://api.github.com/repos/benma/secp256k1/deployments",
        "downloads_url": "https://api.github.com/repos/benma/secp256k1/downloads",
        "events_url": "https://api.github.com/repos/benma/secp256k1/events",
        "forks_url": "https://api.github.com/repos/benma/secp256k1/forks",
        "git_commits_url": "https://api.github.com/repos/benma/secp256k1/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/benma/secp256k1/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/benma/secp256k1/git/tags%7B/sha%7D",
        "git_url": "git://github.com/benma/secp256k1.git",
        "issue_comment_url": "https://api.github.com/repos/benma/secp256k1/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/benma/secp256k1/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/benma/secp256k1/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/benma/secp256k1/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/benma/secp256k1/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/benma/secp256k1/languages",
        "merges_url": "https://api.github.com/repos/benma/secp256k1/merges",
        "milestones_url": "https://api.github.com/repos/benma/secp256k1/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/benma/secp256k1/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/benma/secp256k1/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/benma/secp256k1/releases%7B/id%7D",
        "ssh_url": "git@github.com:benma/secp256k1.git",
        "stargazers_url": "https://api.github.com/repos/benma/secp256k1/stargazers",
        "statuses_url": "https://api.github.com/repos/benma/secp256k1/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/benma/secp256k1/subscribers",
        "subscription_url": "https://api.github.com/repos/benma/secp256k1/subscription",
        "tags_url": "https://api.github.com/repos/benma/secp256k1/tags",
        "teams_url": "https://api.github.com/repos/benma/secp256k1/teams",
        "trees_url": "https://api.github.com/repos/benma/secp256k1/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/benma/secp256k1.git",
        "hooks_url": "https://api.github.com/repos/benma/secp256k1/hooks",
        "svn_url": "https://github.com/benma/secp256k1",
        "language": "C",
        "forks_count": 0,
        "stargazers_count": 1,
        "watchers_count": 1,
        "size": 10459,
        "default_branch": "master",
        "open_issues_count": 0,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": true,
        "has_wiki": true,
        "has_pages": false,
        "has_downloads": true,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-07-29T22:34:20Z",
        "created_at": "2019-06-11T10:50:34Z",
        "updated_at": "2024-06-28T20:33:06Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "base": {
      "label": "bitcoin-core:master",
      "ref": "master",
      "sha": "39198a03eaa33d5902b16d3aefa7c441232f60fb",
      "user": {
        "login": "bitcoin-core",
        "id": 13464320,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjEzNDY0MzIw",
        "avatar_url": "https://avatars.githubusercontent.com/u/13464320?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin-core",
        "html_url": "https://github.com/bitcoin-core",
        "followers_url": "https://api.github.com/users/bitcoin-core/followers",
        "following_url": "https://api.github.com/users/bitcoin-core/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin-core/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin-core/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin-core/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin-core/orgs",
        "repos_url": "https://api.github.com/users/bitcoin-core/repos",
        "events_url": "https://api.github.com/users/bitcoin-core/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin-core/received_events",
        "type": "Organization",
        "site_admin": false
      },
      "repo": {
        "id": 16648618,
        "node_id": "MDEwOlJlcG9zaXRvcnkxNjY0ODYxOA==",
        "name": "secp256k1",
        "full_name": "bitcoin-core/secp256k1",
        "owner": {
          "login": "bitcoin-core",
          "id": 13464320,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjEzNDY0MzIw",
          "avatar_url": "https://avatars.githubusercontent.com/u/13464320?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin-core",
          "html_url": "https://github.com/bitcoin-core",
          "followers_url": "https://api.github.com/users/bitcoin-core/followers",
          "following_url": "https://api.github.com/users/bitcoin-core/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin-core/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin-core/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin-core/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin-core/orgs",
          "repos_url": "https://api.github.com/users/bitcoin-core/repos",
          "events_url": "https://api.github.com/users/bitcoin-core/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin-core/received_events",
          "type": "Organization",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/bitcoin-core/secp256k1",
        "description": "Optimized C library for EC operations on curve secp256k1",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1",
        "archive_url": "https://api.github.com/repos/bitcoin-core/secp256k1/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin-core/secp256k1/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin-core/secp256k1/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin-core/secp256k1/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin-core/secp256k1/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin-core/secp256k1/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin-core/secp256k1/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin-core/secp256k1/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin-core/secp256k1/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin-core/secp256k1/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin-core/secp256k1/downloads",
        "events_url": "https://api.github.com/repos/bitcoin-core/secp256k1/events",
        "forks_url": "https://api.github.com/repos/bitcoin-core/secp256k1/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin-core/secp256k1.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin-core/secp256k1/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin-core/secp256k1/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin-core/secp256k1/languages",
        "merges_url": "https://api.github.com/repos/bitcoin-core/secp256k1/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin-core/secp256k1/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin-core/secp256k1/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin-core/secp256k1/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin-core/secp256k1.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin-core/secp256k1/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin-core/secp256k1/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin-core/secp256k1/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin-core/secp256k1/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin-core/secp256k1/tags",
        "teams_url": "https://api.github.com/repos/bitcoin-core/secp256k1/teams",
        "trees_url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin-core/secp256k1.git",
        "hooks_url": "https://api.github.com/repos/bitcoin-core/secp256k1/hooks",
        "svn_url": "https://github.com/bitcoin-core/secp256k1",
        "language": "C",
        "forks_count": 978,
        "stargazers_count": 2021,
        "watchers_count": 2021,
        "size": 11949,
        "default_branch": "master",
        "open_issues_count": 138,
        "is_template": false,
        "topics": [],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": true,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2024-07-29T19:30:32Z",
        "created_at": "2014-02-08T17:30:06Z",
        "updated_at": "2024-07-29T22:01:34Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/669"
      }
    },
    "author_association": "CONTRIBUTOR",
    "draft": false,
    "additions": 1093,
    "deletions": 67,
    "changed_files": 11,
    "commits": 8,
    "review_comments": 29,
    "comments": 7
  },
  "events": [
    {
      "event": "reviewed",
      "id": 298898928,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mjk4ODk4OTI4",
      "url": null,
      "actor": null,
      "commit_id": "baec472ef44691b8ce971be136a3fe2cd0936ad0",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "benma",
        "id": 1225267,
        "node_id": "MDQ6VXNlcjEyMjUyNjc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1225267?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/benma",
        "html_url": "https://github.com/benma",
        "followers_url": "https://api.github.com/users/benma/followers",
        "following_url": "https://api.github.com/users/benma/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/benma/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/benma/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/benma/subscriptions",
        "organizations_url": "https://api.github.com/users/benma/orgs",
        "repos_url": "https://api.github.com/users/benma/repos",
        "events_url": "https://api.github.com/users/benma/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/benma/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/669#pullrequestreview-298898928",
      "submitted_at": "2019-10-08T16:40:03Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/669"
    },
    {
      "event": "mentioned",
      "id": 2696108403,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MjY5NjEwODQwMw==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/2696108403",
      "actor": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-10-08T16:40:16Z"
    },
    {
      "event": "subscribed",
      "id": 2696108405,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDI2OTYxMDg0MDU=",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/2696108405",
      "actor": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-10-08T16:40:16Z"
    },
    {
      "event": "reviewed",
      "id": 298899071,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mjk4ODk5MDcx",
      "url": null,
      "actor": null,
      "commit_id": "baec472ef44691b8ce971be136a3fe2cd0936ad0",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "benma",
        "id": 1225267,
        "node_id": "MDQ6VXNlcjEyMjUyNjc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1225267?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/benma",
        "html_url": "https://github.com/benma",
        "followers_url": "https://api.github.com/users/benma/followers",
        "following_url": "https://api.github.com/users/benma/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/benma/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/benma/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/benma/subscriptions",
        "organizations_url": "https://api.github.com/users/benma/orgs",
        "repos_url": "https://api.github.com/users/benma/repos",
        "events_url": "https://api.github.com/users/benma/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/benma/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/669#pullrequestreview-298899071",
      "submitted_at": "2019-10-08T16:40:16Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/669"
    },
    {
      "event": "commented",
      "id": 540478836,
      "node_id": "MDEyOklzc3VlQ29tbWVudDU0MDQ3ODgzNg==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/540478836",
      "actor": {
        "login": "benma",
        "id": 1225267,
        "node_id": "MDQ6VXNlcjEyMjUyNjc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1225267?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/benma",
        "html_url": "https://github.com/benma",
        "followers_url": "https://api.github.com/users/benma/followers",
        "following_url": "https://api.github.com/users/benma/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/benma/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/benma/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/benma/subscriptions",
        "organizations_url": "https://api.github.com/users/benma/orgs",
        "repos_url": "https://api.github.com/users/benma/repos",
        "events_url": "https://api.github.com/users/benma/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/benma/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-10-10T09:16:16Z",
      "updated_at": "2019-10-10T09:16:16Z",
      "author_association": "CONTRIBUTOR",
      "body": "I added a commit (`recovery: re-use secp256k1_ecdsa_sign_helper`) to show that the recovery module can also re-use the sign-helper as it was basically a copy/paste of `secp256k1_ecdsa_sign()`.\r\n\r\nSeeing this, after fixing up some cosmetics, I would prefer this alternative.",
      "user": {
        "login": "benma",
        "id": 1225267,
        "node_id": "MDQ6VXNlcjEyMjUyNjc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1225267?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/benma",
        "html_url": "https://github.com/benma",
        "followers_url": "https://api.github.com/users/benma/followers",
        "following_url": "https://api.github.com/users/benma/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/benma/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/benma/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/benma/subscriptions",
        "organizations_url": "https://api.github.com/users/benma/orgs",
        "repos_url": "https://api.github.com/users/benma/repos",
        "events_url": "https://api.github.com/users/benma/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/benma/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/669#issuecomment-540478836",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/669"
    },
    {
      "event": "referenced",
      "id": 2708732762,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI3MDg3MzI3NjI=",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/2708732762",
      "actor": {
        "login": "benma",
        "id": 1225267,
        "node_id": "MDQ6VXNlcjEyMjUyNjc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1225267?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/benma",
        "html_url": "https://github.com/benma",
        "followers_url": "https://api.github.com/users/benma/followers",
        "following_url": "https://api.github.com/users/benma/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/benma/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/benma/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/benma/subscriptions",
        "organizations_url": "https://api.github.com/users/benma/orgs",
        "repos_url": "https://api.github.com/users/benma/repos",
        "events_url": "https://api.github.com/users/benma/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/benma/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "a1105721bf213f6b35057a9d2de4c9c69b51e08a",
      "commit_url": "https://api.github.com/repos/BitBoxSwiss/libwally-core/commits/a1105721bf213f6b35057a9d2de4c9c69b51e08a",
      "created_at": "2019-10-13T15:47:59Z"
    },
    {
      "event": "referenced",
      "id": 2708746455,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI3MDg3NDY0NTU=",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/2708746455",
      "actor": {
        "login": "benma",
        "id": 1225267,
        "node_id": "MDQ6VXNlcjEyMjUyNjc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1225267?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/benma",
        "html_url": "https://github.com/benma",
        "followers_url": "https://api.github.com/users/benma/followers",
        "following_url": "https://api.github.com/users/benma/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/benma/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/benma/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/benma/subscriptions",
        "organizations_url": "https://api.github.com/users/benma/orgs",
        "repos_url": "https://api.github.com/users/benma/repos",
        "events_url": "https://api.github.com/users/benma/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/benma/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "64e56f8354fbfaf6ff5462b6fb2d0d35f2a88c03",
      "commit_url": "https://api.github.com/repos/BitBoxSwiss/libwally-core/commits/64e56f8354fbfaf6ff5462b6fb2d0d35f2a88c03",
      "created_at": "2019-10-13T16:14:29Z"
    },
    {
      "event": "reviewed",
      "id": 314882006,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzE0ODgyMDA2",
      "url": null,
      "actor": null,
      "commit_id": "db0ea252a96c26fe820f806fbe3e844daddb89b3",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "The approach in this alternative looks good. I didn't find any obvious critical vulnerabilities. It passes valgrind and coverage looks good. Being able to subsume recovery into the signing helper is a nice bonus.\r\n\r\nSome of the things in this PR don't make much sense anymore because we're using a different public key type for schnorrsigs (`xonly_pubkey`) and therefore there's no reason anymore to have a unified s2c_opening for both ecdsa and schnorr. Also, the ec_commit functions don't apply to `xonly_pubkey`. I will rip this out of my PR and see if there's still some code that can be shared.\r\n\r\nI'm wondering if a stable s2c api should allow the callers to provide their own hash function through a callback for example to create tagged hashes.\r\n\r\nAs an aside, this PR taken on its own lacks a detailed explanation for how it works. There is a more detailed writeup in my PR and I don't think we need both the protocol steps in this PR + the more detailed writeup.\r\n\r\nThere are some api artefacts in this PR (shared with mine) which are not ideal. For example `secp256k1_pubkey *client_commit` which isn't a pubkey (but a point).\r\n",
      "user": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/669#pullrequestreview-314882006",
      "submitted_at": "2019-11-13T22:19:54Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/669"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2912770454,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjkxMjc3MDQ1NA==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/2912770454",
      "actor": {
        "login": "benma",
        "id": 1225267,
        "node_id": "MDQ6VXNlcjEyMjUyNjc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1225267?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/benma",
        "html_url": "https://github.com/benma",
        "followers_url": "https://api.github.com/users/benma/followers",
        "following_url": "https://api.github.com/users/benma/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/benma/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/benma/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/benma/subscriptions",
        "organizations_url": "https://api.github.com/users/benma/orgs",
        "repos_url": "https://api.github.com/users/benma/repos",
        "events_url": "https://api.github.com/users/benma/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/benma/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-12-29T19:54:01Z"
    },
    {
      "event": "commented",
      "id": 569536880,
      "node_id": "MDEyOklzc3VlQ29tbWVudDU2OTUzNjg4MA==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/569536880",
      "actor": {
        "login": "benma",
        "id": 1225267,
        "node_id": "MDQ6VXNlcjEyMjUyNjc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1225267?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/benma",
        "html_url": "https://github.com/benma",
        "followers_url": "https://api.github.com/users/benma/followers",
        "following_url": "https://api.github.com/users/benma/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/benma/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/benma/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/benma/subscriptions",
        "organizations_url": "https://api.github.com/users/benma/orgs",
        "repos_url": "https://api.github.com/users/benma/repos",
        "events_url": "https://api.github.com/users/benma/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/benma/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-12-29T19:57:27Z",
      "updated_at": "2019-12-29T19:57:27Z",
      "author_association": "CONTRIBUTOR",
      "body": "Rebased and addressed some comments; I will take care of the others soon.",
      "user": {
        "login": "benma",
        "id": 1225267,
        "node_id": "MDQ6VXNlcjEyMjUyNjc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1225267?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/benma",
        "html_url": "https://github.com/benma",
        "followers_url": "https://api.github.com/users/benma/followers",
        "following_url": "https://api.github.com/users/benma/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/benma/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/benma/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/benma/subscriptions",
        "organizations_url": "https://api.github.com/users/benma/orgs",
        "repos_url": "https://api.github.com/users/benma/repos",
        "events_url": "https://api.github.com/users/benma/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/benma/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/669#issuecomment-569536880",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/669"
    },
    {
      "event": "renamed",
      "id": 2913857736,
      "node_id": "MDE3OlJlbmFtZWRUaXRsZUV2ZW50MjkxMzg1NzczNg==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/2913857736",
      "actor": {
        "login": "benma",
        "id": 1225267,
        "node_id": "MDQ6VXNlcjEyMjUyNjc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1225267?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/benma",
        "html_url": "https://github.com/benma",
        "followers_url": "https://api.github.com/users/benma/followers",
        "following_url": "https://api.github.com/users/benma/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/benma/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/benma/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/benma/subscriptions",
        "organizations_url": "https://api.github.com/users/benma/orgs",
        "repos_url": "https://api.github.com/users/benma/repos",
        "events_url": "https://api.github.com/users/benma/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/benma/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-12-30T12:45:47Z",
      "rename": {
        "from": "[alternative] ecdsa sign-to-contract module, with anti nonce covert chan util functions",
        "to": "~[alternative] ~ecdsa sign-to-contract module, with anti nonce covert chan util functions"
      }
    },
    {
      "event": "renamed",
      "id": 2913857886,
      "node_id": "MDE3OlJlbmFtZWRUaXRsZUV2ZW50MjkxMzg1Nzg4Ng==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/2913857886",
      "actor": {
        "login": "benma",
        "id": 1225267,
        "node_id": "MDQ6VXNlcjEyMjUyNjc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1225267?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/benma",
        "html_url": "https://github.com/benma",
        "followers_url": "https://api.github.com/users/benma/followers",
        "following_url": "https://api.github.com/users/benma/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/benma/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/benma/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/benma/subscriptions",
        "organizations_url": "https://api.github.com/users/benma/orgs",
        "repos_url": "https://api.github.com/users/benma/repos",
        "events_url": "https://api.github.com/users/benma/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/benma/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-12-30T12:45:53Z",
      "rename": {
        "from": "~[alternative] ~ecdsa sign-to-contract module, with anti nonce covert chan util functions",
        "to": "~[alternative]~ ecdsa sign-to-contract module, with anti nonce covert chan util functions"
      }
    },
    {
      "event": "renamed",
      "id": 2913858072,
      "node_id": "MDE3OlJlbmFtZWRUaXRsZUV2ZW50MjkxMzg1ODA3Mg==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/2913858072",
      "actor": {
        "login": "benma",
        "id": 1225267,
        "node_id": "MDQ6VXNlcjEyMjUyNjc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1225267?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/benma",
        "html_url": "https://github.com/benma",
        "followers_url": "https://api.github.com/users/benma/followers",
        "following_url": "https://api.github.com/users/benma/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/benma/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/benma/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/benma/subscriptions",
        "organizations_url": "https://api.github.com/users/benma/orgs",
        "repos_url": "https://api.github.com/users/benma/repos",
        "events_url": "https://api.github.com/users/benma/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/benma/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-12-30T12:46:01Z",
      "rename": {
        "from": "~[alternative]~ ecdsa sign-to-contract module, with anti nonce covert chan util functions",
        "to": "ecdsa sign-to-contract module, with anti nonce covert chan util functions"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2913992905,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjkxMzk5MjkwNQ==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/2913992905",
      "actor": {
        "login": "benma",
        "id": 1225267,
        "node_id": "MDQ6VXNlcjEyMjUyNjc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1225267?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/benma",
        "html_url": "https://github.com/benma",
        "followers_url": "https://api.github.com/users/benma/followers",
        "following_url": "https://api.github.com/users/benma/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/benma/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/benma/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/benma/subscriptions",
        "organizations_url": "https://api.github.com/users/benma/orgs",
        "repos_url": "https://api.github.com/users/benma/repos",
        "events_url": "https://api.github.com/users/benma/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/benma/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-12-30T14:06:21Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2955299042,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50Mjk1NTI5OTA0Mg==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/2955299042",
      "actor": {
        "login": "benma",
        "id": 1225267,
        "node_id": "MDQ6VXNlcjEyMjUyNjc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1225267?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/benma",
        "html_url": "https://github.com/benma",
        "followers_url": "https://api.github.com/users/benma/followers",
        "following_url": "https://api.github.com/users/benma/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/benma/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/benma/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/benma/subscriptions",
        "organizations_url": "https://api.github.com/users/benma/orgs",
        "repos_url": "https://api.github.com/users/benma/repos",
        "events_url": "https://api.github.com/users/benma/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/benma/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-01-16T16:50:57Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2957962965,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50Mjk1Nzk2Mjk2NQ==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/2957962965",
      "actor": {
        "login": "benma",
        "id": 1225267,
        "node_id": "MDQ6VXNlcjEyMjUyNjc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1225267?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/benma",
        "html_url": "https://github.com/benma",
        "followers_url": "https://api.github.com/users/benma/followers",
        "following_url": "https://api.github.com/users/benma/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/benma/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/benma/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/benma/subscriptions",
        "organizations_url": "https://api.github.com/users/benma/orgs",
        "repos_url": "https://api.github.com/users/benma/repos",
        "events_url": "https://api.github.com/users/benma/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/benma/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-01-17T12:21:47Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2958003932,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50Mjk1ODAwMzkzMg==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/2958003932",
      "actor": {
        "login": "benma",
        "id": 1225267,
        "node_id": "MDQ6VXNlcjEyMjUyNjc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1225267?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/benma",
        "html_url": "https://github.com/benma",
        "followers_url": "https://api.github.com/users/benma/followers",
        "following_url": "https://api.github.com/users/benma/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/benma/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/benma/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/benma/subscriptions",
        "organizations_url": "https://api.github.com/users/benma/orgs",
        "repos_url": "https://api.github.com/users/benma/repos",
        "events_url": "https://api.github.com/users/benma/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/benma/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-01-17T12:38:07Z"
    },
    {
      "event": "commented",
      "id": 575610338,
      "node_id": "MDEyOklzc3VlQ29tbWVudDU3NTYxMDMzOA==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/575610338",
      "actor": {
        "login": "benma",
        "id": 1225267,
        "node_id": "MDQ6VXNlcjEyMjUyNjc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1225267?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/benma",
        "html_url": "https://github.com/benma",
        "followers_url": "https://api.github.com/users/benma/followers",
        "following_url": "https://api.github.com/users/benma/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/benma/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/benma/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/benma/subscriptions",
        "organizations_url": "https://api.github.com/users/benma/orgs",
        "repos_url": "https://api.github.com/users/benma/repos",
        "events_url": "https://api.github.com/users/benma/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/benma/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-01-17T12:40:30Z",
      "updated_at": "2020-01-17T12:41:12Z",
      "author_association": "CONTRIBUTOR",
      "body": "> Some of the things in this PR don't make much sense anymore because we're using a different public key type for schnorrsigs (`xonly_pubkey`) and therefore there's no reason anymore to have a unified s2c_opening for both ecdsa and schnorr. Also, the ec_commit functions don't apply to `xonly_pubkey`. I will rip this out of my PR and see if there's still some code that can be shared.\r\n\r\nLet me know what to do - I'm okay to move the opening to the module, or keep it as it is and let you figure out what can be reused in your PR (if this PR is merged first).\r\n \r\n> I'm wondering if a stable s2c api should allow the callers to provide their own hash function through a callback for example to create tagged hashes.\r\n\r\nMy feeling is that we should keep it simple for now and move towards merging. If someone comes up with the need for this, I'd be happy to extend it then. It wouldn't be an invasive API change, so clients could update easily.\r\n\r\n> As an aside, this PR taken on its own lacks a detailed explanation for how it works. There is a more detailed writeup in my PR and I don't think we need both the protocol steps in this PR + the more detailed writeup.\r\n\r\nMaybe once both PRs are merged, we can move the description to `docs/anti_nonce_covert_channel_protocol.md` and link to it from both modules? For now I copy/pasted the extended details of your docs to mine, I hope that's ok. The docs seem sufficient to me for a start, and of course can always be improved.\r\n\r\n",
      "user": {
        "login": "benma",
        "id": 1225267,
        "node_id": "MDQ6VXNlcjEyMjUyNjc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1225267?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/benma",
        "html_url": "https://github.com/benma",
        "followers_url": "https://api.github.com/users/benma/followers",
        "following_url": "https://api.github.com/users/benma/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/benma/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/benma/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/benma/subscriptions",
        "organizations_url": "https://api.github.com/users/benma/orgs",
        "repos_url": "https://api.github.com/users/benma/repos",
        "events_url": "https://api.github.com/users/benma/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/benma/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/669#issuecomment-575610338",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/669"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2958022511,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50Mjk1ODAyMjUxMQ==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/2958022511",
      "actor": {
        "login": "benma",
        "id": 1225267,
        "node_id": "MDQ6VXNlcjEyMjUyNjc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1225267?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/benma",
        "html_url": "https://github.com/benma",
        "followers_url": "https://api.github.com/users/benma/followers",
        "following_url": "https://api.github.com/users/benma/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/benma/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/benma/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/benma/subscriptions",
        "organizations_url": "https://api.github.com/users/benma/orgs",
        "repos_url": "https://api.github.com/users/benma/repos",
        "events_url": "https://api.github.com/users/benma/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/benma/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-01-17T12:45:32Z"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTY2NDg2MTg6NDM3ZWY3N2VhODUwZmEwMzk1ZDExMTZmMjhkM2UxNDE3MWRhOGQ4Nw==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/437ef77ea850fa0395d1116f28d3e14171da8d87",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/437ef77ea850fa0395d1116f28d3e14171da8d87",
      "tree": {
        "sha": "375b196ebd7ab69169bb7e22f737b509e480c503",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/375b196ebd7ab69169bb7e22f737b509e480c503"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 375b196ebd7ab69169bb7e22f737b509e480c503\nparent 39198a03eaa33d5902b16d3aefa7c441232f60fb\nauthor Jonas Nick <jonasd.nick@gmail.com> 1541068284 +0000\ncommitter Marko Bencun <mbencun+pgp@gmail.com> 1587467315 +0200\n\nAdd ec_commitments which are essentially the pay-to-contract-style tweaks of public keys.\nThe functionality is not exposed.\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQJKBAABCAA0FiEELYh2gQqwkuRR3KiUgEU4kow36ugFAl6e1DMWHG1iZW5jdW4r\ncGdwQGdtYWlsLmNvbQAKCRCARTiSjDfq6MkfD/9+SvUYCnWs+oWjrxnrXp9ASHwt\nbaJYiJtZoSzWdS+MtR0OTiCWSVm3GgM/yXJrmKvacZdt9rpQ3VWnhLLl1sL0amoc\nFFj2FlQ6MxLhZqASCvk3vBiohrUQ/7QriiUfSiOMGujEYeWxSZvKZL0WwRUgIKkc\nCuXb26dbAX9JKYp5sDjluktfwy/eFpjOodPHrnrrL4MmOjAhKn2aj32wvXd2rGeh\npFpgMQea/TL9p1t1otusKanpjqSBb4Q91VJw4zA8sNZ0HgHQ3NDxYOrpv0518lp1\nW12ZuM8oXtE1d1GabyQ29Qx6cycc2T94SKK3aP9VMP8NxW4yKYkpIhnpygHQyZj8\nkJLwvBkm6XkdCnSSeiaRZCbsAlor0j4/ZgvpWNv4nAjIhDFvjzBaLdbDCn9N3HOh\nXUZNQizQW++ARa9zg8gwT/IADL+GDwjYvXQSQsBNo2LRGYzwG771OB190QZTybXU\nJEwcFzpItTlFD0BOlM5BqC1xoGwO3MYIpqyfb5LP7i9ypFIF909aAoEvByNqzCG4\nRAHSJOAeSeRZt/0HxFQtIuparOTYAl24+8xWtMEcjuQcdhaFwtZL/Wrj7nT9zW7h\nUsudhnNXvPkeaMT8JUBCt0Y2T+bb58k+2Yj6jqJj5EjjvguRrav9hfXU2SyoQ82t\n7ncea65Sht4R2BU1JA==\n=m2de\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/39198a03eaa33d5902b16d3aefa7c441232f60fb",
          "sha": "39198a03eaa33d5902b16d3aefa7c441232f60fb",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/39198a03eaa33d5902b16d3aefa7c441232f60fb"
        }
      ],
      "message": "Add ec_commitments which are essentially the pay-to-contract-style tweaks of public keys.\nThe functionality is not exposed.",
      "committer": {
        "name": "Marko Bencun",
        "email": "mbencun+pgp@gmail.com",
        "date": "2020-04-21T11:08:35Z"
      },
      "author": {
        "name": "Jonas Nick",
        "email": "jonasd.nick@gmail.com",
        "date": "2018-11-01T10:31:24Z"
      },
      "sha": "437ef77ea850fa0395d1116f28d3e14171da8d87"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTY2NDg2MTg6YWQ0YjY4NTNjZWU4Y2Y3ZmJlODVmNjZlMDAyMDZhMTBmNmNlN2E5ZQ==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/ad4b6853cee8cf7fbe85f66e00206a10f6ce7a9e",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/ad4b6853cee8cf7fbe85f66e00206a10f6ce7a9e",
      "tree": {
        "sha": "c32c4805b476050bf4e34dc64c54222c1280ebba",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/c32c4805b476050bf4e34dc64c54222c1280ebba"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree c32c4805b476050bf4e34dc64c54222c1280ebba\nparent 437ef77ea850fa0395d1116f28d3e14171da8d87\nauthor Jonas Nick <jonasd.nick@gmail.com> 1550067323 +0000\ncommitter Marko Bencun <mbencun+pgp@gmail.com> 1587467316 +0200\n\nAdd and expose sign-to-contract opening with parse and serialize functions\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQJKBAABCAA0FiEELYh2gQqwkuRR3KiUgEU4kow36ugFAl6e1DQWHG1iZW5jdW4r\ncGdwQGdtYWlsLmNvbQAKCRCARTiSjDfq6L8kD/9JThNaTO3lwQ0g2dYp0VuFVT+G\ndh8hNchTnJ1//U77wCTHe6oAENo6B2LM2c7zwhusum31f6zqyjn6C6N2ZhHZK7AV\nWNC3CwT4UIaSqlgZju1mLqrnRiMX5bbW/qJzg6ApQMR/8FrmsG+porkHu4vusU+b\nZDdvdatYMoy0rswTvbnF7HT5ZlbocrYKGF25dMoijR7g2aFjb9GlVwZMT2AZFwwP\nKMmEhwN+CrQoLmT17Rg7kFJaz/j2rDzD7fwOWzRqpvLVGBAzMM4fmurV9TDSPrqs\nXwNaBcff+oXFRUMjgmtOhMJdbXbgNdrWzgJzPlhGtxa7rey82SMgeDlEVZHSpdoD\nD9ZnVBvkRtqo0uh7r29SLk6kPaJUnUGtb2ynq2hDV0014fKEH7ydpHn2eFN8rLNj\nN9Lf5D78wRHUzY+xT4c5vRIl430cCdQczeKRwpF29aG/oRh/1mKH7gYF/ATq1aSF\nZoG4bYgkOYaDBTWcv0mu9aCJiwwBsWeRib43NLzWUD2AsZTu4uy/zpzK2iBkscmN\nGWE6pIBxyq8r273V1wQ8wyKgexI7goKjJDqD5s/RcSPPmtJ+lRdgj4bfFeUdocWU\nRSFWidZmM3/Dk48Ks3yj/Y9vOoA6PmV++B5FASTm/XdmCOmNLwnI3ByPvhMcdZwn\n4wcgG4jkUxPAmffooQ==\n=Z93Y\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/437ef77ea850fa0395d1116f28d3e14171da8d87",
          "sha": "437ef77ea850fa0395d1116f28d3e14171da8d87",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/437ef77ea850fa0395d1116f28d3e14171da8d87"
        }
      ],
      "message": "Add and expose sign-to-contract opening with parse and serialize functions",
      "committer": {
        "name": "Marko Bencun",
        "email": "mbencun+pgp@gmail.com",
        "date": "2020-04-21T11:08:36Z"
      },
      "author": {
        "name": "Jonas Nick",
        "email": "jonasd.nick@gmail.com",
        "date": "2019-02-13T14:15:23Z"
      },
      "sha": "ad4b6853cee8cf7fbe85f66e00206a10f6ce7a9e"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTY2NDg2MTg6NDNkZjhlMTBkNjkzYTNmY2M3NjkxOTgzZWMyMDU3YmZhOTc5YmY0MA==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/43df8e10d693a3fcc7691983ec2057bfa979bf40",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/43df8e10d693a3fcc7691983ec2057bfa979bf40",
      "tree": {
        "sha": "4acc266a5e12b5eb13aff872735ee577114f17ae",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/4acc266a5e12b5eb13aff872735ee577114f17ae"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 4acc266a5e12b5eb13aff872735ee577114f17ae\nparent ad4b6853cee8cf7fbe85f66e00206a10f6ce7a9e\nauthor Marko Bencun <mbencun+pgp@gmail.com> 1564406568 +0200\ncommitter Marko Bencun <mbencun+pgp@gmail.com> 1587473087 +0200\n\nmodules: add ecdsa_sign_to_contract\n\nSign a message while comitting to some data at the same time by by\nadding `hash(k1*G, data)` to the rfc6979 deterministic nonce. Includes\nverification function to check that the signature commits to the data.\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQJKBAABCAA0FiEELYh2gQqwkuRR3KiUgEU4kow36ugFAl6e6sAWHG1iZW5jdW4r\ncGdwQGdtYWlsLmNvbQAKCRCARTiSjDfq6G0tD/4hDyGV0XFpL1rGpN7rFwEMQF9I\nvUE08HPhMXutLvqaCBqJbGYueazO7uRy3mRYi6PLOErtjwoCNpaJGToPBNCKKCSy\nc8/bVAev4MSeST09bdAPu+WKvH2w67elRvjNbYKUd4ilifV60Hj3i5En58hY1mu3\nQsQDmUAznE5GIMA/cxSL50eW/o4NrKrSxq+bX0BsLiRVFaIsow6eL2R1EuMhv+lU\n4zoE+Gu6pPMYJJ1GXc4drtbbUmLzC73XDIUpBpp6qbfr36ItTxzNd7/q1SNxwpg5\ngb7COsb7rZ98chbeHR7fKyu9+fIg47yQDxCVVfTG9ZlBPZNYRvoVvIDygK9toTcf\n2DEY4xFzQdrbq2/WJ8mJRL2wtbKjL6q3KeJqwFLPGadToUAbBFHuAYffpZiHqmz2\nXGKmYnR2mrgIi868ECxVxOiawxlMax2TF5EHsYlu5wvRoQ5rimo7+hLSphFhVfrj\nLY6CbNbvCwvBvddpbdSPSE+ACcewZYSXvi27I1r+0lFnwI+FAMVphqj1jA3mCfBC\nW5KfqScy6Mlk3jGg1u0CLVeNB7tgiz1JaDnL8cTXK9dSAzXXOYqMNnSJIFk+bpro\nAPnfQCBvMeGR6/Io7f4DbmnImC3svPFRRgLhqrL//5qdV3pWllyYN5TFNXRAcU+z\nVfGB45TMxRA166D8Yw==\n=7Gj7\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/ad4b6853cee8cf7fbe85f66e00206a10f6ce7a9e",
          "sha": "ad4b6853cee8cf7fbe85f66e00206a10f6ce7a9e",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/ad4b6853cee8cf7fbe85f66e00206a10f6ce7a9e"
        }
      ],
      "message": "modules: add ecdsa_sign_to_contract\n\nSign a message while comitting to some data at the same time by by\nadding `hash(k1*G, data)` to the rfc6979 deterministic nonce. Includes\nverification function to check that the signature commits to the data.",
      "committer": {
        "name": "Marko Bencun",
        "email": "mbencun+pgp@gmail.com",
        "date": "2020-04-21T12:44:47Z"
      },
      "author": {
        "name": "Marko Bencun",
        "email": "mbencun+pgp@gmail.com",
        "date": "2019-07-29T13:22:48Z"
      },
      "sha": "43df8e10d693a3fcc7691983ec2057bfa979bf40"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTY2NDg2MTg6OTlkNjM5YjVhY2ZiZDFjOTY5YzliYjQwZTY3NjU4ZGMzOGY3YzllMg==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/99d639b5acfbd1c969c9bb40e67658dc38f7c9e2",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/99d639b5acfbd1c969c9bb40e67658dc38f7c9e2",
      "tree": {
        "sha": "9652e535147e2e480c3539e10f09e210a23bcd26",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/9652e535147e2e480c3539e10f09e210a23bcd26"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 9652e535147e2e480c3539e10f09e210a23bcd26\nparent 43df8e10d693a3fcc7691983ec2057bfa979bf40\nauthor Marko Bencun <mbencun+pgp@gmail.com> 1564406622 +0200\ncommitter Marko Bencun <mbencun+pgp@gmail.com> 1587473087 +0200\n\necdsa_sign_to_contract: add Anti Nonce Covert Channel util functions\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQJKBAABCAA0FiEELYh2gQqwkuRR3KiUgEU4kow36ugFAl6e6sEWHG1iZW5jdW4r\ncGdwQGdtYWlsLmNvbQAKCRCARTiSjDfq6E6JD/4xVN0k0Qe3iTIhTqtCFF/pbkEd\n7SaaB7Q6g7DVEwMRM0sFu/S8UCdVQuM7qBJVG7ecqgdxLxV6ViDs6wlNvXAu1SpF\nu08OlQtp1KlgKvH3w1kef5/n9EttIhyncoawjRBl+bEpu63E22S8qpth603a7ufc\nojMRmfPSgKhiY/jQ44osVkjAB22099gVB/DJka/jubbdPXn6joyRKK+kv3VY+mba\ndIvFufv26j2tRhdKJAp8gL2SReGEudQWl7w0CekgZJPPgYFWJPMFPT/Vx+5td5N8\nzBeeXtyDvHVV847BFMh29/hTHu9SzQVCpRcU6eCf4YPUImkL1uN2w7fbK0phUGW3\nZK1mlcDLdd+VgdDv3ybI5A6vyhjPVLXauV3oUMtr+mj3piWeKGzS5LmH9RY1Yxve\ngg1/t4Xjvw842crkHcswCbcNsJejQPdTc5JR7krYp0kP8dNxN1Lw1IXBi3/Sik5S\nCPa6pn5QyR9B7QbFehtgjbQvQ1ZfqDo1TRo5OoB21ZAUucWtyaeBCxcz63Y4ZdFu\nOaXs4dXCGzGiWZvwy5WYmovN2t7p3IXHu6e9XV8UjqdSQfDGcalelN4nO57FjgCX\nR+tmq9n5iBANseYqF/xUk3+cSsNyrtxw6QiLFNtw7GDpAsSurhLXphUKuVeTcGvr\nflQPfGxJmxSvGhIkGg==\n=GCE1\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/43df8e10d693a3fcc7691983ec2057bfa979bf40",
          "sha": "43df8e10d693a3fcc7691983ec2057bfa979bf40",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/43df8e10d693a3fcc7691983ec2057bfa979bf40"
        }
      ],
      "message": "ecdsa_sign_to_contract: add Anti Nonce Covert Channel util functions",
      "committer": {
        "name": "Marko Bencun",
        "email": "mbencun+pgp@gmail.com",
        "date": "2020-04-21T12:44:47Z"
      },
      "author": {
        "name": "Marko Bencun",
        "email": "mbencun+pgp@gmail.com",
        "date": "2019-07-29T13:23:42Z"
      },
      "sha": "99d639b5acfbd1c969c9bb40e67658dc38f7c9e2"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTY2NDg2MTg6MGI3NGE5NDc3NTlmYTYwNThlMWNlZmIwNDI2ZTJkNzViM2I3NjdiNg==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/0b74a947759fa6058e1cefb0426e2d75b3b767b6",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/0b74a947759fa6058e1cefb0426e2d75b3b767b6",
      "tree": {
        "sha": "2f9397d172619435dcea57fe6cd2f7c76b9e9d8c",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/2f9397d172619435dcea57fe6cd2f7c76b9e9d8c"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 2f9397d172619435dcea57fe6cd2f7c76b9e9d8c\nparent 99d639b5acfbd1c969c9bb40e67658dc38f7c9e2\nauthor Marko Bencun <mbencun+pgp@gmail.com> 1570698757 +0200\ncommitter Marko Bencun <mbencun+pgp@gmail.com> 1587473104 +0200\n\nrecovery: re-use secp256k1_ecdsa_sign_helper\n\nThe body of the recovery sign function is 99% the same\nsecp256k1_ecdsa_sign. Now that this has moved to the sign helper, it\ncan be re-used not only by the sign-to-contract module, but also by\nthe recovery module.\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQJKBAABCAA0FiEELYh2gQqwkuRR3KiUgEU4kow36ugFAl6e6tAWHG1iZW5jdW4r\ncGdwQGdtYWlsLmNvbQAKCRCARTiSjDfq6H6+D/408CbqkrPDPnqnkxAewhUIc7V+\n6h3V7oujjEEwEYVsge/JtTXOOBkZt1GoVua+e1618KavABxluBeAcEj2iMCaKhmi\nIiy5VFN9sDbuvNfB7uGE3yYdVnB5YhgWdP7dLTJ/TCj7CrxejIVTVoT7xTc4ynLk\nA7x5rLbQhMgRbAhMtITEpNrSaRuHnBZhFJIGKHznS48NyWPlpTDWau90w9dEWI1w\npWlrUm/6NA8O5ni7i3Ou+OZQurAoCd7DtvX1FLnqvogLWGZQklT73IfaJ/4YY2sV\noTf1XhSQuSRmbwKsnZOHY8RarQDreEWo8tv5CIYN4fABE7A021YbZZLvw8dikq9g\nB3LDjc8r3+BBrMJ/a6EcHHuAE4wum0G7VgKkx1nyNHX2xLk9RiiaBgdMWH+6HE8C\nw3Wn1Bzgu9TUxT0/cesU22t6MEF4dTEGV5RL2+S3Gtx4M+AsWYIWYp5LS12lKSCp\nDw/76z1u++RIURS5n80hrwD084vnk9d3qAklxe6i+6cuetzI363y14LVbH4sZtpU\nHAkKPVJfNHB6DcAXUnoyr9HHVGcAmH6cXtPy0breCgnBFEZ+YTOlbunGG4f0KzfD\nOPJ+Bkl2l/ea6MdPiQhCEH7gXfYyQg4GKEH/YV1iJlNZ3uOl7fhcAmhACpc95jPb\nnAsUFgj5OqtXJ/lVXQ==\n=AsAf\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/99d639b5acfbd1c969c9bb40e67658dc38f7c9e2",
          "sha": "99d639b5acfbd1c969c9bb40e67658dc38f7c9e2",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/99d639b5acfbd1c969c9bb40e67658dc38f7c9e2"
        }
      ],
      "message": "recovery: re-use secp256k1_ecdsa_sign_helper\n\nThe body of the recovery sign function is 99% the same\nsecp256k1_ecdsa_sign. Now that this has moved to the sign helper, it\ncan be re-used not only by the sign-to-contract module, but also by\nthe recovery module.",
      "committer": {
        "name": "Marko Bencun",
        "email": "mbencun+pgp@gmail.com",
        "date": "2020-04-21T12:45:04Z"
      },
      "author": {
        "name": "Marko Bencun",
        "email": "mbencun+pgp@gmail.com",
        "date": "2019-10-10T09:12:37Z"
      },
      "sha": "0b74a947759fa6058e1cefb0426e2d75b3b767b6"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTY2NDg2MTg6NTkxMTNhYmRhNThjOTM1NzIzMDA0YjJhOWFmMmNkZjJjOTdkNjNiZA==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/59113abda58c935723004b2a9af2cdf2c97d63bd",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/59113abda58c935723004b2a9af2cdf2c97d63bd",
      "tree": {
        "sha": "a0d7c70a3bbfd28a5eb93eff025011c101ac1720",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/a0d7c70a3bbfd28a5eb93eff025011c101ac1720"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree a0d7c70a3bbfd28a5eb93eff025011c101ac1720\nparent 0b74a947759fa6058e1cefb0426e2d75b3b767b6\nauthor Jonas Nick <jonasd.nick@gmail.com> 1564562863 +0000\ncommitter Marko Bencun <mbencun+pgp@gmail.com> 1587473104 +0200\n\nf serialize s2c_opening as 33 bytes instead of 34\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQJKBAABCAA0FiEELYh2gQqwkuRR3KiUgEU4kow36ugFAl6e6tEWHG1iZW5jdW4r\ncGdwQGdtYWlsLmNvbQAKCRCARTiSjDfq6MAfEADGoCP2Hvqt6kmvqMSmV3BPnYJR\nJrPy/Al88jDBySP3Oy5282orHg3jmDDICx+Cyy+uIORmgTB80R064DU/5I7BFZQL\n7VbT8TFPVocXTx9fzVLIYx92M3Py3ePFnqpLZSkpZVqojo/l/mK6xkBteUZipFUh\n6FRMGMH4FjOKuNFkjN1UD6wL5yftIcXc83oessFpa4GT8LxmPJR+emFW8w3aGphf\nJVJtR9720qEgarGnXCTwjbYCFLOMN5i7VdYOSACB1QJ0l5XO/Ql+zaaAhkolPo5Y\nnaVITpxE5hbx98CK8HzlRDqJOmsjhGjD+Ra1D3FtD5ipqWgbkArSj9K7dEjizqsP\nhFcba72os3K2YowhI56p06skkDYer6z5+97j/nk7AfQa7TAHnpCAbPPm1DXrB+DF\nPSRCZfYxuhoMH3PFevscdzWiKlWa4Z/T2chpoTRD8diVPcOObJBWQMzuClzjpH1H\nXofacy+3LdfLdRew0jU8ZRJmc/ZZLUg02EhCadRdZhQQDs+TUXb3ePtD+9D86ABR\nHGUAq7jheY1ueUHTS+8/TtGIO9BgTUsMZZJA/AHAwwWHCIMNtGIWiEqYtaQKO+ri\n0rhHOX39QLxHdFvVo6u9IH7mHiglup882TX8lFYP8N3wNCQsKeQgSKXP6SPrwj0k\n9p0IAUO8Oz0rut9OVQ==\n=u0LI\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/0b74a947759fa6058e1cefb0426e2d75b3b767b6",
          "sha": "0b74a947759fa6058e1cefb0426e2d75b3b767b6",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/0b74a947759fa6058e1cefb0426e2d75b3b767b6"
        }
      ],
      "message": "f serialize s2c_opening as 33 bytes instead of 34",
      "committer": {
        "name": "Marko Bencun",
        "email": "mbencun+pgp@gmail.com",
        "date": "2020-04-21T12:45:04Z"
      },
      "author": {
        "name": "Jonas Nick",
        "email": "jonasd.nick@gmail.com",
        "date": "2019-07-31T08:47:43Z"
      },
      "sha": "59113abda58c935723004b2a9af2cdf2c97d63bd"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTY2NDg2MTg6MmZjZDc5OTBhZWFhMmM5YmQ1MTc0ZjgxMzg1YWNmZDg1NDEyZjNjMQ==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/2fcd7990aeaa2c9bd5174f81385acfd85412f3c1",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/2fcd7990aeaa2c9bd5174f81385acfd85412f3c1",
      "tree": {
        "sha": "14b74e52e9df46e8dcdc1dcc0dd9526404af9100",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/14b74e52e9df46e8dcdc1dcc0dd9526404af9100"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 14b74e52e9df46e8dcdc1dcc0dd9526404af9100\nparent 59113abda58c935723004b2a9af2cdf2c97d63bd\nauthor Jonas Nick <jonasd.nick@gmail.com> 1564504448 +0000\ncommitter Marko Bencun <mbencun+pgp@gmail.com> 1587473104 +0200\n\nf Add ec_commitments\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQJKBAABCAA0FiEELYh2gQqwkuRR3KiUgEU4kow36ugFAl6e6tIWHG1iZW5jdW4r\ncGdwQGdtYWlsLmNvbQAKCRCARTiSjDfq6LZ1D/40u/z+GOkEzVAY4MbE/4Yxopoy\ntWmiNqWE7NZwtsYQ3hf4JG8xiV0JWTG4g2vnWgG8MdtV50aUuRdGeIJdCSVko2ue\n/rcYGcQFraaYUgeHQ6ZM6Xt/IOL+uFo8D4Q15t+kHaWSckCm7x09tgbEZL7d0051\n3n5a/NoTEHaIJcwc8Zj/KswauVwr6CpyB7738o8v7dX6JRL9mB+Hf6vqYLNoq30k\ngw4FFv3Mh6XGP5UgV2FKLpJOPvu55UwNtZKin6C2Gjfe/v3cZYPJRf3pYoU5J8Nm\n6giBfR7djXIAzy4lOaIYhcNp51+aXDDX/X/grVr+BHtEnrQkJ8LRKgKK5eR/lGEx\n0sdRDQpxbUvdgBoP4jhHbhRbdccwfXQvdB1zFqPbOTCdjUhJ3wu1EeNrlLgmyIJE\nDmc2+D9rYU+GDTsiSuCn4lpjMBpvwH3R6Q5ZXG9M9WxSlIe49SGLUcbjeA7T72xb\nl+8vxgl8xuCJFhO8X0eF5+5+uewhRmRrugg7ZMuJtK+NCXd4PF+3Hx949sG7ihQM\nfAAtm0zxQcldzvX4YTPOGD4+P2jHSv+uAaRBaqfA8cySMksrX1qzd0B0SJKjOU34\nqidmyLk7xUuB+W+V0iAoBzbRXk0j4gh7ZxQCP2sp136fn15zG08D02bWTuftcQ4U\nirhIflxvBFiFH5G44g==\n=7yA1\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/59113abda58c935723004b2a9af2cdf2c97d63bd",
          "sha": "59113abda58c935723004b2a9af2cdf2c97d63bd",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/59113abda58c935723004b2a9af2cdf2c97d63bd"
        }
      ],
      "message": "f Add ec_commitments",
      "committer": {
        "name": "Marko Bencun",
        "email": "mbencun+pgp@gmail.com",
        "date": "2020-04-21T12:45:04Z"
      },
      "author": {
        "name": "Jonas Nick",
        "email": "jonasd.nick@gmail.com",
        "date": "2019-07-30T16:34:08Z"
      },
      "sha": "2fcd7990aeaa2c9bd5174f81385acfd85412f3c1"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTY2NDg2MTg6MWEwZjJlZGZkYjU1ZjI3NWZiZDg3MDM3ODJiNTlhOWVjNzU5ZjY1Zg==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/1a0f2edfdb55f275fbd8703782b59a9ec759f65f",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/1a0f2edfdb55f275fbd8703782b59a9ec759f65f",
      "tree": {
        "sha": "af7eb8f52f1d368e3d837c1feede163208fad7de",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/af7eb8f52f1d368e3d837c1feede163208fad7de"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree af7eb8f52f1d368e3d837c1feede163208fad7de\nparent 2fcd7990aeaa2c9bd5174f81385acfd85412f3c1\nauthor Marko Bencun <mbencun+pgp@gmail.com> 1579191833 +0100\ncommitter Marko Bencun <mbencun+pgp@gmail.com> 1587473104 +0200\n\nuse reduce field element x modulo n, use secp256k1_scalar_eq over memcmp\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQJKBAABCAA0FiEELYh2gQqwkuRR3KiUgEU4kow36ugFAl6e6tMWHG1iZW5jdW4r\ncGdwQGdtYWlsLmNvbQAKCRCARTiSjDfq6LNHEAC1fFk3dLK10g31RFKnlZ/UPtRX\nXo0uy2+eNhJ2lMUlOT0cmZdB2FLiNIWUJ9hMBa7Xcn71fJUwYw6heVCbSI6qlKvU\nMhPWwgvRH32e2uJwpf6vv/e733b+pm5ug+sWaylNtqeXSb6zHIBFXKMC6OMmi6Bc\nyhWRoBLCrOo0Z+tNamIKov6EgKd0RAMnKr7T4Smn6bpuIly86HjTiwRbibyEsFqw\nC73/mKT6n+6h5+H6Ld8nEPILOQCFAUWqcYEG1EScrgcbTID2916Q1X3gjLl1n7dv\nsaXQH/HeMZMnnod+aKcQ48icUwWhIL5u6T1TtdqO/Ny2uCeMKIsIxlhT5/Y7YEBp\n9ExO1Wst+oAPBwYYz+VWWk+I2S3LfPBR49MdmFEA8LckU4RNEaZ8swFIzi/pES0i\ny5UluEVW0RMgQHLhp1QYZll8XkEaxcz/Ird5OKEzSZoXELy3nTN7ashsp08NrES7\nAOt4KGnd3w0lSPuy/etvktJIwe1cgFnZE0IIyEblzhiDwgddqxJarlKGWWgG7Jzy\nLHJap6rCNB/vNIiGjqaboqfYT994jDts6OCiMugvTPGBcpFVYoQroQ0BgYH341xd\nqP7MFwpeRvIGrxDM7TyDe92XJ1YhiJqIEVIu7cfIGWMfjNwyln+yqt0TXtB/j8GZ\nIPR8ntNXIkWn0OfKcA==\n=/gG0\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/2fcd7990aeaa2c9bd5174f81385acfd85412f3c1",
          "sha": "2fcd7990aeaa2c9bd5174f81385acfd85412f3c1",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/2fcd7990aeaa2c9bd5174f81385acfd85412f3c1"
        }
      ],
      "message": "use reduce field element x modulo n, use secp256k1_scalar_eq over memcmp",
      "committer": {
        "name": "Marko Bencun",
        "email": "mbencun+pgp@gmail.com",
        "date": "2020-04-21T12:45:04Z"
      },
      "author": {
        "name": "Marko Bencun",
        "email": "mbencun+pgp@gmail.com",
        "date": "2020-01-16T16:23:53Z"
      },
      "sha": "1a0f2edfdb55f275fbd8703782b59a9ec759f65f"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3256060964,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzI1NjA2MDk2NA==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/3256060964",
      "actor": {
        "login": "benma",
        "id": 1225267,
        "node_id": "MDQ6VXNlcjEyMjUyNjc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1225267?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/benma",
        "html_url": "https://github.com/benma",
        "followers_url": "https://api.github.com/users/benma/followers",
        "following_url": "https://api.github.com/users/benma/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/benma/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/benma/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/benma/subscriptions",
        "organizations_url": "https://api.github.com/users/benma/orgs",
        "repos_url": "https://api.github.com/users/benma/repos",
        "events_url": "https://api.github.com/users/benma/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/benma/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-04-21T12:46:25Z"
    },
    {
      "event": "commented",
      "id": 617160367,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYxNzE2MDM2Nw==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/617160367",
      "actor": {
        "login": "benma",
        "id": 1225267,
        "node_id": "MDQ6VXNlcjEyMjUyNjc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1225267?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/benma",
        "html_url": "https://github.com/benma",
        "followers_url": "https://api.github.com/users/benma/followers",
        "following_url": "https://api.github.com/users/benma/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/benma/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/benma/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/benma/subscriptions",
        "organizations_url": "https://api.github.com/users/benma/orgs",
        "repos_url": "https://api.github.com/users/benma/repos",
        "events_url": "https://api.github.com/users/benma/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/benma/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-04-21T12:53:27Z",
      "updated_at": "2020-04-21T12:53:27Z",
      "author_association": "CONTRIBUTOR",
      "body": "Rebased / fixed conflicts.\r\n\r\n@jonasnick any chance of getting this merged soon? :)",
      "user": {
        "login": "benma",
        "id": 1225267,
        "node_id": "MDQ6VXNlcjEyMjUyNjc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1225267?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/benma",
        "html_url": "https://github.com/benma",
        "followers_url": "https://api.github.com/users/benma/followers",
        "following_url": "https://api.github.com/users/benma/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/benma/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/benma/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/benma/subscriptions",
        "organizations_url": "https://api.github.com/users/benma/orgs",
        "repos_url": "https://api.github.com/users/benma/repos",
        "events_url": "https://api.github.com/users/benma/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/benma/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/669#issuecomment-617160367",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/669"
    },
    {
      "event": "mentioned",
      "id": 3256087670,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzI1NjA4NzY3MA==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/3256087670",
      "actor": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-04-21T12:53:28Z"
    },
    {
      "event": "subscribed",
      "id": 3256087671,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDMyNTYwODc2NzE=",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/3256087671",
      "actor": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-04-21T12:53:28Z"
    },
    {
      "event": "commented",
      "id": 734996006,
      "node_id": "MDEyOklzc3VlQ29tbWVudDczNDk5NjAwNg==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/734996006",
      "actor": {
        "login": "apoelstra",
        "id": 1351933,
        "node_id": "MDQ6VXNlcjEzNTE5MzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1351933?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/apoelstra",
        "html_url": "https://github.com/apoelstra",
        "followers_url": "https://api.github.com/users/apoelstra/followers",
        "following_url": "https://api.github.com/users/apoelstra/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/apoelstra/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/apoelstra/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/apoelstra/subscriptions",
        "organizations_url": "https://api.github.com/users/apoelstra/orgs",
        "repos_url": "https://api.github.com/users/apoelstra/repos",
        "events_url": "https://api.github.com/users/apoelstra/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/apoelstra/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-11-27T21:42:46Z",
      "updated_at": "2020-11-27T21:42:46Z",
      "author_association": "CONTRIBUTOR",
      "body": "I think we can merge this into -zkp soon. I have https://github.com/ElementsProject/secp256k1-zkp/pull/111. If you do your own rebase it might be easier to start from that since I did the work of combing the new unified ecdsa/recovery code with this PR's implementation of the same thing.",
      "user": {
        "login": "apoelstra",
        "id": 1351933,
        "node_id": "MDQ6VXNlcjEzNTE5MzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1351933?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/apoelstra",
        "html_url": "https://github.com/apoelstra",
        "followers_url": "https://api.github.com/users/apoelstra/followers",
        "following_url": "https://api.github.com/users/apoelstra/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/apoelstra/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/apoelstra/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/apoelstra/subscriptions",
        "organizations_url": "https://api.github.com/users/apoelstra/orgs",
        "repos_url": "https://api.github.com/users/apoelstra/repos",
        "events_url": "https://api.github.com/users/apoelstra/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/apoelstra/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/669#issuecomment-734996006",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/669"
    },
    {
      "event": "commented",
      "id": 738097076,
      "node_id": "MDEyOklzc3VlQ29tbWVudDczODA5NzA3Ng==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/738097076",
      "actor": {
        "login": "benma",
        "id": 1225267,
        "node_id": "MDQ6VXNlcjEyMjUyNjc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1225267?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/benma",
        "html_url": "https://github.com/benma",
        "followers_url": "https://api.github.com/users/benma/followers",
        "following_url": "https://api.github.com/users/benma/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/benma/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/benma/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/benma/subscriptions",
        "organizations_url": "https://api.github.com/users/benma/orgs",
        "repos_url": "https://api.github.com/users/benma/repos",
        "events_url": "https://api.github.com/users/benma/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/benma/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-12-03T15:53:55Z",
      "updated_at": "2020-12-03T15:55:25Z",
      "author_association": "CONTRIBUTOR",
      "body": "> I think we can merge this into -zkp soon. I have [ElementsProject/secp256k1-zkp#111](https://github.com/ElementsProject/secp256k1-zkp/pull/111). If you do your own rebase it might be easier to start from that since I did the work of combing the new unified ecdsa/recovery code with this PR's implementation of the same thing.\r\n\r\n:heart_eyes: :heart_eyes:  :heart_eyes: \r\n\r\nI will make time for this as soon as I can. Been eager to get this working in production for a long time.\r\n\r\nEdit: I did not realize that your PR is already there and rebased. Great.",
      "user": {
        "login": "benma",
        "id": 1225267,
        "node_id": "MDQ6VXNlcjEyMjUyNjc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1225267?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/benma",
        "html_url": "https://github.com/benma",
        "followers_url": "https://api.github.com/users/benma/followers",
        "following_url": "https://api.github.com/users/benma/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/benma/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/benma/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/benma/subscriptions",
        "organizations_url": "https://api.github.com/users/benma/orgs",
        "repos_url": "https://api.github.com/users/benma/repos",
        "events_url": "https://api.github.com/users/benma/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/benma/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/669#issuecomment-738097076",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/669"
    },
    {
      "event": "commented",
      "id": 747076622,
      "node_id": "MDEyOklzc3VlQ29tbWVudDc0NzA3NjYyMg==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/747076622",
      "actor": {
        "login": "benma",
        "id": 1225267,
        "node_id": "MDQ6VXNlcjEyMjUyNjc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1225267?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/benma",
        "html_url": "https://github.com/benma",
        "followers_url": "https://api.github.com/users/benma/followers",
        "following_url": "https://api.github.com/users/benma/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/benma/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/benma/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/benma/subscriptions",
        "organizations_url": "https://api.github.com/users/benma/orgs",
        "repos_url": "https://api.github.com/users/benma/repos",
        "events_url": "https://api.github.com/users/benma/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/benma/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-12-16T22:23:48Z",
      "updated_at": "2020-12-16T22:23:48Z",
      "author_association": "CONTRIBUTOR",
      "body": "This PR was rebased and reopened at https://github.com/ElementsProject/secp256k1-zkp/pull/111, where review and improvements continue.",
      "user": {
        "login": "benma",
        "id": 1225267,
        "node_id": "MDQ6VXNlcjEyMjUyNjc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1225267?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/benma",
        "html_url": "https://github.com/benma",
        "followers_url": "https://api.github.com/users/benma/followers",
        "following_url": "https://api.github.com/users/benma/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/benma/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/benma/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/benma/subscriptions",
        "organizations_url": "https://api.github.com/users/benma/orgs",
        "repos_url": "https://api.github.com/users/benma/repos",
        "events_url": "https://api.github.com/users/benma/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/benma/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/669#issuecomment-747076622",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/669"
    },
    {
      "event": "closed",
      "id": 4122084315,
      "node_id": "MDExOkNsb3NlZEV2ZW50NDEyMjA4NDMxNQ==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/4122084315",
      "actor": {
        "login": "benma",
        "id": 1225267,
        "node_id": "MDQ6VXNlcjEyMjUyNjc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1225267?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/benma",
        "html_url": "https://github.com/benma",
        "followers_url": "https://api.github.com/users/benma/followers",
        "following_url": "https://api.github.com/users/benma/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/benma/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/benma/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/benma/subscriptions",
        "organizations_url": "https://api.github.com/users/benma/orgs",
        "repos_url": "https://api.github.com/users/benma/repos",
        "events_url": "https://api.github.com/users/benma/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/benma/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-12-16T22:23:48Z"
    },
    {
      "event": "referenced",
      "id": 4165076487,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDQxNjUwNzY0ODc=",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/4165076487",
      "actor": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "673e551f4d1092e2816f497e5abe2c34ece7235e",
      "commit_url": "https://api.github.com/repos/BlockstreamResearch/secp256k1-zkp/commits/673e551f4d1092e2816f497e5abe2c34ece7235e",
      "created_at": "2021-01-04T13:57:00Z"
    },
    {
      "event": "reviewed",
      "id": 2207699537,
      "node_id": "PRR_kwDOAP4Jqs6DltJR",
      "url": null,
      "actor": null,
      "commit_id": "1a0f2edfdb55f275fbd8703782b59a9ec759f65f",
      "commit_url": null,
      "created_at": null,
      "author_association": "NONE",
      "body": "",
      "user": {
        "login": "generalsunion",
        "id": 158794981,
        "node_id": "U_kgDOCXcE5Q",
        "avatar_url": "https://avatars.githubusercontent.com/u/158794981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/generalsunion",
        "html_url": "https://github.com/generalsunion",
        "followers_url": "https://api.github.com/users/generalsunion/followers",
        "following_url": "https://api.github.com/users/generalsunion/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/generalsunion/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/generalsunion/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/generalsunion/subscriptions",
        "organizations_url": "https://api.github.com/users/generalsunion/orgs",
        "repos_url": "https://api.github.com/users/generalsunion/repos",
        "events_url": "https://api.github.com/users/generalsunion/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/generalsunion/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/669#pullrequestreview-2207699537",
      "submitted_at": "2024-07-30T13:29:52Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/669"
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/332616666",
      "pull_request_review_id": 298898928,
      "id": 332616666,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzMjYxNjY2Ng==",
      "diff_hunk": "@@ -681,10 +642,221 @@ int secp256k1_ec_pubkey_combine(const secp256k1_context* ctx, secp256k1_pubkey *\n     return 1;\n }\n \n+/* Compute an ec commitment tweak as hash(pubkey, data). */\n+static int secp256k1_ec_commit_tweak(const secp256k1_context *ctx, unsigned char *tweak32, const secp256k1_pubkey *pubkey, const unsigned char *data, size_t data_size) {\n+    secp256k1_ge p;\n+    unsigned char rbuf[33];\n+    size_t rbuf_size = sizeof(rbuf);\n+    secp256k1_sha256 sha;\n+\n+    if (data_size == 0) {\n+        /* That's probably not what the caller wanted */\n+        return 0;\n+    }\n+    if(!secp256k1_pubkey_load(ctx, &p, pubkey)) {\n+        return 0;\n+    }\n+    secp256k1_eckey_pubkey_serialize(&p, rbuf, &rbuf_size, 1);\n+\n+    secp256k1_sha256_initialize(&sha);\n+    secp256k1_sha256_write(&sha, rbuf, rbuf_size);\n+    secp256k1_sha256_write(&sha, data, data_size);\n+    secp256k1_sha256_finalize(&sha, tweak32);\n+    return 1;\n+}\n+\n+/* Compute an ec commitment as pubkey + hash(pubkey, data)*G. */\n+static int secp256k1_ec_commit(const secp256k1_context* ctx, secp256k1_pubkey *commitment, const secp256k1_pubkey *pubkey, const unsigned char *data, size_t data_size) {\n+    unsigned char tweak[32];\n+\n+    *commitment = *pubkey;\n+    if (!secp256k1_ec_commit_tweak(ctx, tweak, commitment, data, data_size)) {\n+        return 0;\n+    }\n+    return secp256k1_ec_pubkey_tweak_add(ctx, commitment, tweak);\n+}\n+\n+/* Compute the seckey of an ec commitment from the original secret key of the pubkey as seckey +\n+ * hash(pubkey, data). */\n+static int secp256k1_ec_commit_seckey(const secp256k1_context* ctx, unsigned char *seckey, const secp256k1_pubkey *pubkey, const unsigned char *data, size_t data_size) {\n+    unsigned char tweak[32];\n+    secp256k1_pubkey pubkey_tmp;\n+\n+    if (pubkey == NULL) {\n+        /* Compute pubkey from seckey if not provided */\n+        int overflow;\n+        secp256k1_scalar x;\n+        secp256k1_gej pj;\n+        secp256k1_ge p;\n+\n+        secp256k1_scalar_set_b32(&x, seckey, &overflow);\n+        if (overflow != 0) {\n+            return 0;\n+        }\n+        secp256k1_ecmult_gen(&ctx->ecmult_gen_ctx, &pj, &x);\n+        secp256k1_ge_set_gej(&p, &pj);\n+        secp256k1_pubkey_save(&pubkey_tmp, &p);\n+        pubkey = &pubkey_tmp;\n+    }\n+\n+    if (!secp256k1_ec_commit_tweak(ctx, tweak, pubkey, data, data_size)) {\n+        return 0;\n+    }\n+    return secp256k1_ec_privkey_tweak_add(ctx, seckey, tweak);\n+}\n+\n+/* Verify an ec commitment as pubkey + hash(pubkey, data)*G ?= commitment. */\n+static int secp256k1_ec_commit_verify(const secp256k1_context* ctx, const secp256k1_pubkey *commitment, const secp256k1_pubkey *pubkey, const unsigned char *data, size_t data_size) {\n+    secp256k1_gej pj;\n+    secp256k1_ge p;\n+    secp256k1_pubkey commitment_tmp;\n+\n+    if (!secp256k1_ec_commit(ctx, &commitment_tmp, pubkey, data, data_size)) {\n+        return 0;\n+    }\n+\n+    /* Return commitment == commitment_tmp */\n+    secp256k1_gej_set_infinity(&pj);\n+    secp256k1_pubkey_load(ctx, &p, &commitment_tmp);\n+    secp256k1_gej_add_ge_var(&pj, &pj, &p, NULL);\n+    secp256k1_pubkey_load(ctx, &p, commitment);\n+    secp256k1_ge_neg(&p, &p);\n+    secp256k1_gej_add_ge_var(&pj, &pj, &p, NULL);\n+    return secp256k1_gej_is_infinity(&pj);\n+}\n+\n+static uint64_t s2c_opening_magic = 0x5d0520b8b7f2b168ULL;\n+\n+static void secp256k1_s2c_opening_init(secp256k1_s2c_opening *opening) {\n+    opening->magic = s2c_opening_magic;\n+    opening->nonce_is_negated = 0;\n+}\n+\n+static int secp256k1_s2c_commit_is_init(const secp256k1_s2c_opening *opening) {\n+    return opening->magic == s2c_opening_magic;\n+}\n+\n+int secp256k1_s2c_opening_parse(const secp256k1_context* ctx, secp256k1_s2c_opening* opening, const unsigned char *input34) {\n+    VERIFY_CHECK(ctx != NULL);\n+    ARG_CHECK(opening != NULL);\n+    ARG_CHECK(input34 != NULL);\n+\n+    secp256k1_s2c_opening_init(opening);\n+    opening->nonce_is_negated = input34[0];\n+    return secp256k1_ec_pubkey_parse(ctx, &opening->original_pubnonce, &input34[1], 33);\n+}\n+\n+int secp256k1_s2c_opening_serialize(const secp256k1_context* ctx, unsigned char *output34, const secp256k1_s2c_opening* opening) {\n+    size_t outputlen = 33;\n+\n+    VERIFY_CHECK(ctx != NULL);\n+    ARG_CHECK(output34 != NULL);\n+    ARG_CHECK(opening != NULL);\n+    ARG_CHECK(secp256k1_s2c_commit_is_init(opening));\n+\n+    output34[0] = opening->nonce_is_negated;\n+    return secp256k1_ec_pubkey_serialize(ctx, &output34[1], &outputlen, &opening->original_pubnonce, SECP256K1_EC_COMPRESSED);\n+}\n+\n+static int secp256k1_ecdsa_sign_helper(const secp256k1_context *ctx, secp256k1_ecdsa_signature *signature, secp256k1_s2c_opening *s2c_opening, const unsigned char *msg32, const unsigned char *seckey, const unsigned char* s2c_data32, secp256k1_nonce_function noncefp, const void* noncedata) {\n+    secp256k1_scalar r, s;\n+    secp256k1_scalar sec, non, msg;\n+    int ret = 0;\n+    int overflow = 0;\n+    unsigned char ndata[32];\n+    VERIFY_CHECK(ctx != NULL);\n+    ARG_CHECK(secp256k1_ecmult_gen_context_is_built(&ctx->ecmult_gen_ctx));\n+    ARG_CHECK(msg32 != NULL);\n+    ARG_CHECK(signature != NULL);\n+    ARG_CHECK(seckey != NULL);\n+    if (noncefp == NULL) {\n+        noncefp = secp256k1_nonce_function_default;\n+    }\n+    /* sign-to-contract commitments only work with the default nonce function,\n+     * because we need to ensure that s2c_data is actually hashed into the nonce and\n+     * not just ignored. */\n+    ARG_CHECK(s2c_data32 == NULL || noncefp == secp256k1_nonce_function_default);",
      "path": "src/secp256k1.c",
      "position": null,
      "original_position": 192,
      "commit_id": "1a0f2edfdb55f275fbd8703782b59a9ec759f65f",
      "original_commit_id": "baec472ef44691b8ce971be136a3fe2cd0936ad0",
      "in_reply_to_id": null,
      "user": {
        "login": "benma",
        "id": 1225267,
        "node_id": "MDQ6VXNlcjEyMjUyNjc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1225267?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/benma",
        "html_url": "https://github.com/benma",
        "followers_url": "https://api.github.com/users/benma/followers",
        "following_url": "https://api.github.com/users/benma/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/benma/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/benma/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/benma/subscriptions",
        "organizations_url": "https://api.github.com/users/benma/orgs",
        "repos_url": "https://api.github.com/users/benma/repos",
        "events_url": "https://api.github.com/users/benma/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/benma/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Since `secp256k1_ecdsa_sign()` and `secp256k1_ecdsa_s2c_sign()` are the only public api functions calling this, and they choose the correct arguments, some of the branches here are never reached. It seems a bit silly to add unit tests for internal functions for lines which can never be reached. Not sure what to do about that, maybe just drop the checks?",
      "created_at": "2019-10-08T16:40:03Z",
      "updated_at": "2020-04-21T12:46:25Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/669#discussion_r332616666",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/332616666"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/669"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 778,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/332616778",
      "pull_request_review_id": 298899071,
      "id": 332616778,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzMjYxNjc3OA==",
      "diff_hunk": "@@ -681,10 +642,221 @@ int secp256k1_ec_pubkey_combine(const secp256k1_context* ctx, secp256k1_pubkey *\n     return 1;\n }\n \n+/* Compute an ec commitment tweak as hash(pubkey, data). */\n+static int secp256k1_ec_commit_tweak(const secp256k1_context *ctx, unsigned char *tweak32, const secp256k1_pubkey *pubkey, const unsigned char *data, size_t data_size) {\n+    secp256k1_ge p;\n+    unsigned char rbuf[33];\n+    size_t rbuf_size = sizeof(rbuf);\n+    secp256k1_sha256 sha;\n+\n+    if (data_size == 0) {\n+        /* That's probably not what the caller wanted */\n+        return 0;\n+    }\n+    if(!secp256k1_pubkey_load(ctx, &p, pubkey)) {\n+        return 0;\n+    }\n+    secp256k1_eckey_pubkey_serialize(&p, rbuf, &rbuf_size, 1);\n+\n+    secp256k1_sha256_initialize(&sha);\n+    secp256k1_sha256_write(&sha, rbuf, rbuf_size);\n+    secp256k1_sha256_write(&sha, data, data_size);\n+    secp256k1_sha256_finalize(&sha, tweak32);\n+    return 1;\n+}\n+\n+/* Compute an ec commitment as pubkey + hash(pubkey, data)*G. */\n+static int secp256k1_ec_commit(const secp256k1_context* ctx, secp256k1_pubkey *commitment, const secp256k1_pubkey *pubkey, const unsigned char *data, size_t data_size) {\n+    unsigned char tweak[32];\n+\n+    *commitment = *pubkey;\n+    if (!secp256k1_ec_commit_tweak(ctx, tweak, commitment, data, data_size)) {\n+        return 0;\n+    }\n+    return secp256k1_ec_pubkey_tweak_add(ctx, commitment, tweak);\n+}\n+\n+/* Compute the seckey of an ec commitment from the original secret key of the pubkey as seckey +\n+ * hash(pubkey, data). */\n+static int secp256k1_ec_commit_seckey(const secp256k1_context* ctx, unsigned char *seckey, const secp256k1_pubkey *pubkey, const unsigned char *data, size_t data_size) {\n+    unsigned char tweak[32];\n+    secp256k1_pubkey pubkey_tmp;\n+\n+    if (pubkey == NULL) {\n+        /* Compute pubkey from seckey if not provided */\n+        int overflow;\n+        secp256k1_scalar x;\n+        secp256k1_gej pj;\n+        secp256k1_ge p;\n+\n+        secp256k1_scalar_set_b32(&x, seckey, &overflow);\n+        if (overflow != 0) {\n+            return 0;\n+        }\n+        secp256k1_ecmult_gen(&ctx->ecmult_gen_ctx, &pj, &x);\n+        secp256k1_ge_set_gej(&p, &pj);\n+        secp256k1_pubkey_save(&pubkey_tmp, &p);\n+        pubkey = &pubkey_tmp;\n+    }\n+\n+    if (!secp256k1_ec_commit_tweak(ctx, tweak, pubkey, data, data_size)) {\n+        return 0;\n+    }\n+    return secp256k1_ec_privkey_tweak_add(ctx, seckey, tweak);\n+}\n+\n+/* Verify an ec commitment as pubkey + hash(pubkey, data)*G ?= commitment. */\n+static int secp256k1_ec_commit_verify(const secp256k1_context* ctx, const secp256k1_pubkey *commitment, const secp256k1_pubkey *pubkey, const unsigned char *data, size_t data_size) {\n+    secp256k1_gej pj;\n+    secp256k1_ge p;\n+    secp256k1_pubkey commitment_tmp;\n+\n+    if (!secp256k1_ec_commit(ctx, &commitment_tmp, pubkey, data, data_size)) {\n+        return 0;\n+    }\n+\n+    /* Return commitment == commitment_tmp */\n+    secp256k1_gej_set_infinity(&pj);\n+    secp256k1_pubkey_load(ctx, &p, &commitment_tmp);\n+    secp256k1_gej_add_ge_var(&pj, &pj, &p, NULL);\n+    secp256k1_pubkey_load(ctx, &p, commitment);\n+    secp256k1_ge_neg(&p, &p);\n+    secp256k1_gej_add_ge_var(&pj, &pj, &p, NULL);\n+    return secp256k1_gej_is_infinity(&pj);\n+}\n+\n+static uint64_t s2c_opening_magic = 0x5d0520b8b7f2b168ULL;\n+\n+static void secp256k1_s2c_opening_init(secp256k1_s2c_opening *opening) {\n+    opening->magic = s2c_opening_magic;\n+    opening->nonce_is_negated = 0;\n+}\n+\n+static int secp256k1_s2c_commit_is_init(const secp256k1_s2c_opening *opening) {\n+    return opening->magic == s2c_opening_magic;\n+}\n+\n+int secp256k1_s2c_opening_parse(const secp256k1_context* ctx, secp256k1_s2c_opening* opening, const unsigned char *input34) {\n+    VERIFY_CHECK(ctx != NULL);\n+    ARG_CHECK(opening != NULL);\n+    ARG_CHECK(input34 != NULL);\n+\n+    secp256k1_s2c_opening_init(opening);\n+    opening->nonce_is_negated = input34[0];\n+    return secp256k1_ec_pubkey_parse(ctx, &opening->original_pubnonce, &input34[1], 33);\n+}\n+\n+int secp256k1_s2c_opening_serialize(const secp256k1_context* ctx, unsigned char *output34, const secp256k1_s2c_opening* opening) {\n+    size_t outputlen = 33;\n+\n+    VERIFY_CHECK(ctx != NULL);\n+    ARG_CHECK(output34 != NULL);\n+    ARG_CHECK(opening != NULL);\n+    ARG_CHECK(secp256k1_s2c_commit_is_init(opening));\n+\n+    output34[0] = opening->nonce_is_negated;\n+    return secp256k1_ec_pubkey_serialize(ctx, &output34[1], &outputlen, &opening->original_pubnonce, SECP256K1_EC_COMPRESSED);\n+}\n+\n+static int secp256k1_ecdsa_sign_helper(const secp256k1_context *ctx, secp256k1_ecdsa_signature *signature, secp256k1_s2c_opening *s2c_opening, const unsigned char *msg32, const unsigned char *seckey, const unsigned char* s2c_data32, secp256k1_nonce_function noncefp, const void* noncedata) {\n+    secp256k1_scalar r, s;\n+    secp256k1_scalar sec, non, msg;\n+    int ret = 0;\n+    int overflow = 0;\n+    unsigned char ndata[32];\n+    VERIFY_CHECK(ctx != NULL);\n+    ARG_CHECK(secp256k1_ecmult_gen_context_is_built(&ctx->ecmult_gen_ctx));\n+    ARG_CHECK(msg32 != NULL);\n+    ARG_CHECK(signature != NULL);\n+    ARG_CHECK(seckey != NULL);\n+    if (noncefp == NULL) {\n+        noncefp = secp256k1_nonce_function_default;\n+    }\n+    /* sign-to-contract commitments only work with the default nonce function,\n+     * because we need to ensure that s2c_data is actually hashed into the nonce and\n+     * not just ignored. */\n+    ARG_CHECK(s2c_data32 == NULL || noncefp == secp256k1_nonce_function_default);\n+    /* s2c_opening and s2c_data32 should be either both non-NULL or both NULL. */\n+    ARG_CHECK((s2c_opening != NULL) == (s2c_data32 != NULL));\n+    /* if s2c_data32 is not NULL, noncedata must be NULL. */\n+    ARG_CHECK(s2c_data32 == NULL || noncedata == NULL);\n+    if (s2c_opening != NULL) {\n+        secp256k1_s2c_opening_init(s2c_opening);\n+    }\n+\n+    if(s2c_data32 != NULL) {",
      "path": "src/secp256k1.c",
      "position": null,
      "original_position": 201,
      "commit_id": "1a0f2edfdb55f275fbd8703782b59a9ec759f65f",
      "original_commit_id": "baec472ef44691b8ce971be136a3fe2cd0936ad0",
      "in_reply_to_id": null,
      "user": {
        "login": "benma",
        "id": 1225267,
        "node_id": "MDQ6VXNlcjEyMjUyNjc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1225267?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/benma",
        "html_url": "https://github.com/benma",
        "followers_url": "https://api.github.com/users/benma/followers",
        "following_url": "https://api.github.com/users/benma/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/benma/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/benma/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/benma/subscriptions",
        "organizations_url": "https://api.github.com/users/benma/orgs",
        "repos_url": "https://api.github.com/users/benma/repos",
        "events_url": "https://api.github.com/users/benma/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/benma/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "The diff of this function to the previous `secp256k1_ecdsa_sign` could be reduced much more if the s2c module's `secp256k1_ecdsa_s2c_sign()` did the hashing and provided it through `noncedata`. It seems also to be the right place for it, as it is closer to the rest of the anti-nonce-covert-channel protocol implementation. What do you think, @jonasnick ?\r\n\r\n",
      "created_at": "2019-10-08T16:40:16Z",
      "updated_at": "2020-04-21T12:46:25Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/669#discussion_r332616778",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/332616778"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/669"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 787,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/344700285",
      "pull_request_review_id": 314882006,
      "id": 344700285,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0NDcwMDI4NQ==",
      "diff_hunk": "@@ -0,0 +1,55 @@\n+#ifndef SECP256K1_ECDSA_SIGN_TO_CONTRACT_H\n+#define SECP256K1_ECDSA_SIGN_TO_CONTRACT_H\n+\n+#include \"secp256k1.h\"\n+\n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif\n+\n+/** Same as secp256k1_ecdsa_sign, but s2c_data32 is committed to by adding `hash(R1, s2c_data32)` to",
      "path": "include/secp256k1_ecdsa_sign_to_contract.h",
      "position": null,
      "original_position": 10,
      "commit_id": "1a0f2edfdb55f275fbd8703782b59a9ec759f65f",
      "original_commit_id": "db0ea252a96c26fe820f806fbe3e844daddb89b3",
      "in_reply_to_id": null,
      "user": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "what's `R1`?",
      "created_at": "2019-11-11T13:01:20Z",
      "updated_at": "2020-04-21T12:46:25Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/669#discussion_r344700285",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/344700285"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/669"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 10,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/344734956",
      "pull_request_review_id": 314882006,
      "id": 344734956,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0NDczNDk1Ng==",
      "diff_hunk": "@@ -681,10 +642,221 @@ int secp256k1_ec_pubkey_combine(const secp256k1_context* ctx, secp256k1_pubkey *\n     return 1;\n }\n \n+/* Compute an ec commitment tweak as hash(pubkey, data). */\n+static int secp256k1_ec_commit_tweak(const secp256k1_context *ctx, unsigned char *tweak32, const secp256k1_pubkey *pubkey, const unsigned char *data, size_t data_size) {\n+    secp256k1_ge p;\n+    unsigned char rbuf[33];\n+    size_t rbuf_size = sizeof(rbuf);\n+    secp256k1_sha256 sha;\n+\n+    if (data_size == 0) {\n+        /* That's probably not what the caller wanted */\n+        return 0;\n+    }\n+    if(!secp256k1_pubkey_load(ctx, &p, pubkey)) {\n+        return 0;\n+    }\n+    secp256k1_eckey_pubkey_serialize(&p, rbuf, &rbuf_size, 1);\n+\n+    secp256k1_sha256_initialize(&sha);\n+    secp256k1_sha256_write(&sha, rbuf, rbuf_size);\n+    secp256k1_sha256_write(&sha, data, data_size);\n+    secp256k1_sha256_finalize(&sha, tweak32);\n+    return 1;\n+}\n+\n+/* Compute an ec commitment as pubkey + hash(pubkey, data)*G. */\n+static int secp256k1_ec_commit(const secp256k1_context* ctx, secp256k1_pubkey *commitment, const secp256k1_pubkey *pubkey, const unsigned char *data, size_t data_size) {\n+    unsigned char tweak[32];\n+\n+    *commitment = *pubkey;\n+    if (!secp256k1_ec_commit_tweak(ctx, tweak, commitment, data, data_size)) {\n+        return 0;\n+    }\n+    return secp256k1_ec_pubkey_tweak_add(ctx, commitment, tweak);\n+}\n+\n+/* Compute the seckey of an ec commitment from the original secret key of the pubkey as seckey +\n+ * hash(pubkey, data). */\n+static int secp256k1_ec_commit_seckey(const secp256k1_context* ctx, unsigned char *seckey, const secp256k1_pubkey *pubkey, const unsigned char *data, size_t data_size) {\n+    unsigned char tweak[32];\n+    secp256k1_pubkey pubkey_tmp;\n+\n+    if (pubkey == NULL) {\n+        /* Compute pubkey from seckey if not provided */\n+        int overflow;\n+        secp256k1_scalar x;\n+        secp256k1_gej pj;\n+        secp256k1_ge p;\n+\n+        secp256k1_scalar_set_b32(&x, seckey, &overflow);\n+        if (overflow != 0) {\n+            return 0;\n+        }\n+        secp256k1_ecmult_gen(&ctx->ecmult_gen_ctx, &pj, &x);\n+        secp256k1_ge_set_gej(&p, &pj);\n+        secp256k1_pubkey_save(&pubkey_tmp, &p);\n+        pubkey = &pubkey_tmp;\n+    }\n+\n+    if (!secp256k1_ec_commit_tweak(ctx, tweak, pubkey, data, data_size)) {\n+        return 0;\n+    }\n+    return secp256k1_ec_privkey_tweak_add(ctx, seckey, tweak);\n+}\n+\n+/* Verify an ec commitment as pubkey + hash(pubkey, data)*G ?= commitment. */\n+static int secp256k1_ec_commit_verify(const secp256k1_context* ctx, const secp256k1_pubkey *commitment, const secp256k1_pubkey *pubkey, const unsigned char *data, size_t data_size) {\n+    secp256k1_gej pj;\n+    secp256k1_ge p;\n+    secp256k1_pubkey commitment_tmp;\n+\n+    if (!secp256k1_ec_commit(ctx, &commitment_tmp, pubkey, data, data_size)) {\n+        return 0;\n+    }\n+\n+    /* Return commitment == commitment_tmp */\n+    secp256k1_gej_set_infinity(&pj);\n+    secp256k1_pubkey_load(ctx, &p, &commitment_tmp);\n+    secp256k1_gej_add_ge_var(&pj, &pj, &p, NULL);\n+    secp256k1_pubkey_load(ctx, &p, commitment);\n+    secp256k1_ge_neg(&p, &p);\n+    secp256k1_gej_add_ge_var(&pj, &pj, &p, NULL);\n+    return secp256k1_gej_is_infinity(&pj);\n+}\n+\n+static uint64_t s2c_opening_magic = 0x5d0520b8b7f2b168ULL;\n+\n+static void secp256k1_s2c_opening_init(secp256k1_s2c_opening *opening) {\n+    opening->magic = s2c_opening_magic;\n+    opening->nonce_is_negated = 0;\n+}\n+\n+static int secp256k1_s2c_commit_is_init(const secp256k1_s2c_opening *opening) {\n+    return opening->magic == s2c_opening_magic;\n+}\n+\n+int secp256k1_s2c_opening_parse(const secp256k1_context* ctx, secp256k1_s2c_opening* opening, const unsigned char *input34) {\n+    VERIFY_CHECK(ctx != NULL);\n+    ARG_CHECK(opening != NULL);\n+    ARG_CHECK(input34 != NULL);\n+\n+    secp256k1_s2c_opening_init(opening);\n+    opening->nonce_is_negated = input34[0];\n+    return secp256k1_ec_pubkey_parse(ctx, &opening->original_pubnonce, &input34[1], 33);\n+}\n+\n+int secp256k1_s2c_opening_serialize(const secp256k1_context* ctx, unsigned char *output34, const secp256k1_s2c_opening* opening) {\n+    size_t outputlen = 33;\n+\n+    VERIFY_CHECK(ctx != NULL);\n+    ARG_CHECK(output34 != NULL);\n+    ARG_CHECK(opening != NULL);\n+    ARG_CHECK(secp256k1_s2c_commit_is_init(opening));\n+\n+    output34[0] = opening->nonce_is_negated;\n+    return secp256k1_ec_pubkey_serialize(ctx, &output34[1], &outputlen, &opening->original_pubnonce, SECP256K1_EC_COMPRESSED);\n+}\n+\n+static int secp256k1_ecdsa_sign_helper(const secp256k1_context *ctx, secp256k1_ecdsa_signature *signature, secp256k1_s2c_opening *s2c_opening, const unsigned char *msg32, const unsigned char *seckey, const unsigned char* s2c_data32, secp256k1_nonce_function noncefp, const void* noncedata) {\n+    secp256k1_scalar r, s;\n+    secp256k1_scalar sec, non, msg;\n+    int ret = 0;\n+    int overflow = 0;\n+    unsigned char ndata[32];\n+    VERIFY_CHECK(ctx != NULL);\n+    ARG_CHECK(secp256k1_ecmult_gen_context_is_built(&ctx->ecmult_gen_ctx));\n+    ARG_CHECK(msg32 != NULL);\n+    ARG_CHECK(signature != NULL);\n+    ARG_CHECK(seckey != NULL);\n+    if (noncefp == NULL) {\n+        noncefp = secp256k1_nonce_function_default;\n+    }\n+    /* sign-to-contract commitments only work with the default nonce function,\n+     * because we need to ensure that s2c_data is actually hashed into the nonce and\n+     * not just ignored. */\n+    ARG_CHECK(s2c_data32 == NULL || noncefp == secp256k1_nonce_function_default);\n+    /* s2c_opening and s2c_data32 should be either both non-NULL or both NULL. */\n+    ARG_CHECK((s2c_opening != NULL) == (s2c_data32 != NULL));\n+    /* if s2c_data32 is not NULL, noncedata must be NULL. */\n+    ARG_CHECK(s2c_data32 == NULL || noncedata == NULL);\n+    if (s2c_opening != NULL) {\n+        secp256k1_s2c_opening_init(s2c_opening);\n+    }\n+\n+    if(s2c_data32 != NULL) {",
      "path": "src/secp256k1.c",
      "position": null,
      "original_position": 201,
      "commit_id": "1a0f2edfdb55f275fbd8703782b59a9ec759f65f",
      "original_commit_id": "baec472ef44691b8ce971be136a3fe2cd0936ad0",
      "in_reply_to_id": 332616778,
      "user": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Agreed",
      "created_at": "2019-11-11T14:26:37Z",
      "updated_at": "2020-04-21T12:46:25Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/669#discussion_r344734956",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/344734956"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/669"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 787,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/344737138",
      "pull_request_review_id": 314882006,
      "id": 344737138,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0NDczNzEzOA==",
      "diff_hunk": "@@ -446,50 +446,11 @@ static int nonce_function_rfc6979(unsigned char *nonce32, const unsigned char *m\n const secp256k1_nonce_function secp256k1_nonce_function_rfc6979 = nonce_function_rfc6979;\n const secp256k1_nonce_function secp256k1_nonce_function_default = nonce_function_rfc6979;\n \n-int secp256k1_ecdsa_sign(const secp256k1_context* ctx, secp256k1_ecdsa_signature *signature, const unsigned char *msg32, const unsigned char *seckey, secp256k1_nonce_function noncefp, const void* noncedata) {\n-    secp256k1_scalar r, s;\n-    secp256k1_scalar sec, non, msg;\n-    int ret = 0;\n-    int overflow = 0;\n-    VERIFY_CHECK(ctx != NULL);\n-    ARG_CHECK(secp256k1_ecmult_gen_context_is_built(&ctx->ecmult_gen_ctx));\n-    ARG_CHECK(msg32 != NULL);\n-    ARG_CHECK(signature != NULL);\n-    ARG_CHECK(seckey != NULL);\n-    if (noncefp == NULL) {\n-        noncefp = secp256k1_nonce_function_default;\n-    }\n+/* TODO: re-order functions in this file so forward declarations are not needed? */",
      "path": "src/secp256k1.c",
      "position": null,
      "original_position": 17,
      "commit_id": "1a0f2edfdb55f275fbd8703782b59a9ec759f65f",
      "original_commit_id": "db0ea252a96c26fe820f806fbe3e844daddb89b3",
      "in_reply_to_id": null,
      "user": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "At least move sign_helper here for a nicer diff and forward declare ec_commit_seckey.",
      "created_at": "2019-11-11T14:31:10Z",
      "updated_at": "2020-04-21T12:46:25Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/669#discussion_r344737138",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/344737138"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/669"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 449,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/344740342",
      "pull_request_review_id": 314882006,
      "id": 344740342,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0NDc0MDM0Mg==",
      "diff_hunk": "@@ -681,10 +642,221 @@ int secp256k1_ec_pubkey_combine(const secp256k1_context* ctx, secp256k1_pubkey *\n     return 1;\n }\n \n+/* Compute an ec commitment tweak as hash(pubkey, data). */\n+static int secp256k1_ec_commit_tweak(const secp256k1_context *ctx, unsigned char *tweak32, const secp256k1_pubkey *pubkey, const unsigned char *data, size_t data_size) {\n+    secp256k1_ge p;\n+    unsigned char rbuf[33];\n+    size_t rbuf_size = sizeof(rbuf);\n+    secp256k1_sha256 sha;\n+\n+    if (data_size == 0) {\n+        /* That's probably not what the caller wanted */\n+        return 0;\n+    }\n+    if(!secp256k1_pubkey_load(ctx, &p, pubkey)) {\n+        return 0;\n+    }\n+    secp256k1_eckey_pubkey_serialize(&p, rbuf, &rbuf_size, 1);\n+\n+    secp256k1_sha256_initialize(&sha);\n+    secp256k1_sha256_write(&sha, rbuf, rbuf_size);\n+    secp256k1_sha256_write(&sha, data, data_size);\n+    secp256k1_sha256_finalize(&sha, tweak32);\n+    return 1;\n+}\n+\n+/* Compute an ec commitment as pubkey + hash(pubkey, data)*G. */\n+static int secp256k1_ec_commit(const secp256k1_context* ctx, secp256k1_pubkey *commitment, const secp256k1_pubkey *pubkey, const unsigned char *data, size_t data_size) {\n+    unsigned char tweak[32];\n+\n+    *commitment = *pubkey;\n+    if (!secp256k1_ec_commit_tweak(ctx, tweak, commitment, data, data_size)) {\n+        return 0;\n+    }\n+    return secp256k1_ec_pubkey_tweak_add(ctx, commitment, tweak);\n+}\n+\n+/* Compute the seckey of an ec commitment from the original secret key of the pubkey as seckey +\n+ * hash(pubkey, data). */\n+static int secp256k1_ec_commit_seckey(const secp256k1_context* ctx, unsigned char *seckey, const secp256k1_pubkey *pubkey, const unsigned char *data, size_t data_size) {\n+    unsigned char tweak[32];\n+    secp256k1_pubkey pubkey_tmp;\n+\n+    if (pubkey == NULL) {\n+        /* Compute pubkey from seckey if not provided */\n+        int overflow;\n+        secp256k1_scalar x;\n+        secp256k1_gej pj;\n+        secp256k1_ge p;\n+\n+        secp256k1_scalar_set_b32(&x, seckey, &overflow);\n+        if (overflow != 0) {\n+            return 0;\n+        }\n+        secp256k1_ecmult_gen(&ctx->ecmult_gen_ctx, &pj, &x);\n+        secp256k1_ge_set_gej(&p, &pj);\n+        secp256k1_pubkey_save(&pubkey_tmp, &p);\n+        pubkey = &pubkey_tmp;\n+    }\n+\n+    if (!secp256k1_ec_commit_tweak(ctx, tweak, pubkey, data, data_size)) {\n+        return 0;\n+    }\n+    return secp256k1_ec_privkey_tweak_add(ctx, seckey, tweak);\n+}\n+\n+/* Verify an ec commitment as pubkey + hash(pubkey, data)*G ?= commitment. */\n+static int secp256k1_ec_commit_verify(const secp256k1_context* ctx, const secp256k1_pubkey *commitment, const secp256k1_pubkey *pubkey, const unsigned char *data, size_t data_size) {\n+    secp256k1_gej pj;\n+    secp256k1_ge p;\n+    secp256k1_pubkey commitment_tmp;\n+\n+    if (!secp256k1_ec_commit(ctx, &commitment_tmp, pubkey, data, data_size)) {\n+        return 0;\n+    }\n+\n+    /* Return commitment == commitment_tmp */\n+    secp256k1_gej_set_infinity(&pj);\n+    secp256k1_pubkey_load(ctx, &p, &commitment_tmp);\n+    secp256k1_gej_add_ge_var(&pj, &pj, &p, NULL);\n+    secp256k1_pubkey_load(ctx, &p, commitment);\n+    secp256k1_ge_neg(&p, &p);\n+    secp256k1_gej_add_ge_var(&pj, &pj, &p, NULL);\n+    return secp256k1_gej_is_infinity(&pj);\n+}\n+\n+static uint64_t s2c_opening_magic = 0x5d0520b8b7f2b168ULL;\n+\n+static void secp256k1_s2c_opening_init(secp256k1_s2c_opening *opening) {\n+    opening->magic = s2c_opening_magic;\n+    opening->nonce_is_negated = 0;\n+}\n+\n+static int secp256k1_s2c_commit_is_init(const secp256k1_s2c_opening *opening) {\n+    return opening->magic == s2c_opening_magic;\n+}\n+\n+int secp256k1_s2c_opening_parse(const secp256k1_context* ctx, secp256k1_s2c_opening* opening, const unsigned char *input34) {\n+    VERIFY_CHECK(ctx != NULL);\n+    ARG_CHECK(opening != NULL);\n+    ARG_CHECK(input34 != NULL);\n+\n+    secp256k1_s2c_opening_init(opening);\n+    opening->nonce_is_negated = input34[0];\n+    return secp256k1_ec_pubkey_parse(ctx, &opening->original_pubnonce, &input34[1], 33);\n+}\n+\n+int secp256k1_s2c_opening_serialize(const secp256k1_context* ctx, unsigned char *output34, const secp256k1_s2c_opening* opening) {\n+    size_t outputlen = 33;\n+\n+    VERIFY_CHECK(ctx != NULL);\n+    ARG_CHECK(output34 != NULL);\n+    ARG_CHECK(opening != NULL);\n+    ARG_CHECK(secp256k1_s2c_commit_is_init(opening));\n+\n+    output34[0] = opening->nonce_is_negated;\n+    return secp256k1_ec_pubkey_serialize(ctx, &output34[1], &outputlen, &opening->original_pubnonce, SECP256K1_EC_COMPRESSED);\n+}\n+\n+static int secp256k1_ecdsa_sign_helper(const secp256k1_context *ctx, secp256k1_ecdsa_signature *signature, secp256k1_s2c_opening *s2c_opening, const unsigned char *msg32, const unsigned char *seckey, const unsigned char* s2c_data32, secp256k1_nonce_function noncefp, const void* noncedata) {\n+    secp256k1_scalar r, s;\n+    secp256k1_scalar sec, non, msg;\n+    int ret = 0;\n+    int overflow = 0;\n+    unsigned char ndata[32];\n+    VERIFY_CHECK(ctx != NULL);\n+    ARG_CHECK(secp256k1_ecmult_gen_context_is_built(&ctx->ecmult_gen_ctx));\n+    ARG_CHECK(msg32 != NULL);\n+    ARG_CHECK(signature != NULL);\n+    ARG_CHECK(seckey != NULL);\n+    if (noncefp == NULL) {\n+        noncefp = secp256k1_nonce_function_default;\n+    }\n+    /* sign-to-contract commitments only work with the default nonce function,\n+     * because we need to ensure that s2c_data is actually hashed into the nonce and\n+     * not just ignored. */\n+    ARG_CHECK(s2c_data32 == NULL || noncefp == secp256k1_nonce_function_default);",
      "path": "src/secp256k1.c",
      "position": null,
      "original_position": 192,
      "commit_id": "1a0f2edfdb55f275fbd8703782b59a9ec759f65f",
      "original_commit_id": "baec472ef44691b8ce971be136a3fe2cd0936ad0",
      "in_reply_to_id": 332616666,
      "user": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yes it doesn't make sense for them to be `ARG_CHECK`s. You can make them `VERIFY_CHECK`s. They are only enabled in tests and only when not compiling for coverage.",
      "created_at": "2019-11-11T14:37:43Z",
      "updated_at": "2020-04-21T12:46:25Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/669#discussion_r344740342",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/344740342"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/669"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 778,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/344751139",
      "pull_request_review_id": 314882006,
      "id": 344751139,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0NDc1MTEzOQ==",
      "diff_hunk": "@@ -681,10 +642,221 @@ int secp256k1_ec_pubkey_combine(const secp256k1_context* ctx, secp256k1_pubkey *\n     return 1;\n }\n \n+/* Compute an ec commitment tweak as hash(pubkey, data). */\n+static int secp256k1_ec_commit_tweak(const secp256k1_context *ctx, unsigned char *tweak32, const secp256k1_pubkey *pubkey, const unsigned char *data, size_t data_size) {\n+    secp256k1_ge p;\n+    unsigned char rbuf[33];\n+    size_t rbuf_size = sizeof(rbuf);\n+    secp256k1_sha256 sha;\n+\n+    if (data_size == 0) {\n+        /* That's probably not what the caller wanted */\n+        return 0;\n+    }\n+    if(!secp256k1_pubkey_load(ctx, &p, pubkey)) {\n+        return 0;\n+    }\n+    secp256k1_eckey_pubkey_serialize(&p, rbuf, &rbuf_size, 1);\n+\n+    secp256k1_sha256_initialize(&sha);\n+    secp256k1_sha256_write(&sha, rbuf, rbuf_size);\n+    secp256k1_sha256_write(&sha, data, data_size);\n+    secp256k1_sha256_finalize(&sha, tweak32);\n+    return 1;\n+}\n+\n+/* Compute an ec commitment as pubkey + hash(pubkey, data)*G. */\n+static int secp256k1_ec_commit(const secp256k1_context* ctx, secp256k1_pubkey *commitment, const secp256k1_pubkey *pubkey, const unsigned char *data, size_t data_size) {\n+    unsigned char tweak[32];\n+\n+    *commitment = *pubkey;\n+    if (!secp256k1_ec_commit_tweak(ctx, tweak, commitment, data, data_size)) {\n+        return 0;\n+    }\n+    return secp256k1_ec_pubkey_tweak_add(ctx, commitment, tweak);\n+}\n+\n+/* Compute the seckey of an ec commitment from the original secret key of the pubkey as seckey +\n+ * hash(pubkey, data). */\n+static int secp256k1_ec_commit_seckey(const secp256k1_context* ctx, unsigned char *seckey, const secp256k1_pubkey *pubkey, const unsigned char *data, size_t data_size) {\n+    unsigned char tweak[32];\n+    secp256k1_pubkey pubkey_tmp;\n+\n+    if (pubkey == NULL) {\n+        /* Compute pubkey from seckey if not provided */\n+        int overflow;\n+        secp256k1_scalar x;\n+        secp256k1_gej pj;\n+        secp256k1_ge p;\n+\n+        secp256k1_scalar_set_b32(&x, seckey, &overflow);\n+        if (overflow != 0) {\n+            return 0;\n+        }\n+        secp256k1_ecmult_gen(&ctx->ecmult_gen_ctx, &pj, &x);\n+        secp256k1_ge_set_gej(&p, &pj);\n+        secp256k1_pubkey_save(&pubkey_tmp, &p);\n+        pubkey = &pubkey_tmp;\n+    }\n+\n+    if (!secp256k1_ec_commit_tweak(ctx, tweak, pubkey, data, data_size)) {\n+        return 0;\n+    }\n+    return secp256k1_ec_privkey_tweak_add(ctx, seckey, tweak);\n+}\n+\n+/* Verify an ec commitment as pubkey + hash(pubkey, data)*G ?= commitment. */\n+static int secp256k1_ec_commit_verify(const secp256k1_context* ctx, const secp256k1_pubkey *commitment, const secp256k1_pubkey *pubkey, const unsigned char *data, size_t data_size) {\n+    secp256k1_gej pj;\n+    secp256k1_ge p;\n+    secp256k1_pubkey commitment_tmp;\n+\n+    if (!secp256k1_ec_commit(ctx, &commitment_tmp, pubkey, data, data_size)) {\n+        return 0;\n+    }\n+\n+    /* Return commitment == commitment_tmp */\n+    secp256k1_gej_set_infinity(&pj);\n+    secp256k1_pubkey_load(ctx, &p, &commitment_tmp);\n+    secp256k1_gej_add_ge_var(&pj, &pj, &p, NULL);\n+    secp256k1_pubkey_load(ctx, &p, commitment);\n+    secp256k1_ge_neg(&p, &p);\n+    secp256k1_gej_add_ge_var(&pj, &pj, &p, NULL);\n+    return secp256k1_gej_is_infinity(&pj);\n+}\n+\n+static uint64_t s2c_opening_magic = 0x5d0520b8b7f2b168ULL;\n+\n+static void secp256k1_s2c_opening_init(secp256k1_s2c_opening *opening) {\n+    opening->magic = s2c_opening_magic;\n+    opening->nonce_is_negated = 0;\n+}\n+\n+static int secp256k1_s2c_commit_is_init(const secp256k1_s2c_opening *opening) {\n+    return opening->magic == s2c_opening_magic;\n+}\n+\n+int secp256k1_s2c_opening_parse(const secp256k1_context* ctx, secp256k1_s2c_opening* opening, const unsigned char *input34) {\n+    VERIFY_CHECK(ctx != NULL);\n+    ARG_CHECK(opening != NULL);\n+    ARG_CHECK(input34 != NULL);\n+\n+    secp256k1_s2c_opening_init(opening);\n+    opening->nonce_is_negated = input34[0];\n+    return secp256k1_ec_pubkey_parse(ctx, &opening->original_pubnonce, &input34[1], 33);\n+}\n+\n+int secp256k1_s2c_opening_serialize(const secp256k1_context* ctx, unsigned char *output34, const secp256k1_s2c_opening* opening) {\n+    size_t outputlen = 33;\n+\n+    VERIFY_CHECK(ctx != NULL);\n+    ARG_CHECK(output34 != NULL);\n+    ARG_CHECK(opening != NULL);\n+    ARG_CHECK(secp256k1_s2c_commit_is_init(opening));\n+\n+    output34[0] = opening->nonce_is_negated;\n+    return secp256k1_ec_pubkey_serialize(ctx, &output34[1], &outputlen, &opening->original_pubnonce, SECP256K1_EC_COMPRESSED);\n+}\n+\n+static int secp256k1_ecdsa_sign_helper(const secp256k1_context *ctx, secp256k1_ecdsa_signature *signature, secp256k1_s2c_opening *s2c_opening, const unsigned char *msg32, const unsigned char *seckey, const unsigned char* s2c_data32, secp256k1_nonce_function noncefp, const void* noncedata) {\n+    secp256k1_scalar r, s;\n+    secp256k1_scalar sec, non, msg;\n+    int ret = 0;\n+    int overflow = 0;\n+    unsigned char ndata[32];\n+    VERIFY_CHECK(ctx != NULL);\n+    ARG_CHECK(secp256k1_ecmult_gen_context_is_built(&ctx->ecmult_gen_ctx));\n+    ARG_CHECK(msg32 != NULL);\n+    ARG_CHECK(signature != NULL);\n+    ARG_CHECK(seckey != NULL);\n+    if (noncefp == NULL) {\n+        noncefp = secp256k1_nonce_function_default;\n+    }\n+    /* sign-to-contract commitments only work with the default nonce function,\n+     * because we need to ensure that s2c_data is actually hashed into the nonce and\n+     * not just ignored. */\n+    ARG_CHECK(s2c_data32 == NULL || noncefp == secp256k1_nonce_function_default);\n+    /* s2c_opening and s2c_data32 should be either both non-NULL or both NULL. */\n+    ARG_CHECK((s2c_opening != NULL) == (s2c_data32 != NULL));\n+    /* if s2c_data32 is not NULL, noncedata must be NULL. */\n+    ARG_CHECK(s2c_data32 == NULL || noncedata == NULL);\n+    if (s2c_opening != NULL) {\n+        secp256k1_s2c_opening_init(s2c_opening);\n+    }\n+\n+    if(s2c_data32 != NULL) {",
      "path": "src/secp256k1.c",
      "position": null,
      "original_position": 201,
      "commit_id": "1a0f2edfdb55f275fbd8703782b59a9ec759f65f",
      "original_commit_id": "baec472ef44691b8ce971be136a3fe2cd0936ad0",
      "in_reply_to_id": 332616778,
      "user": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In my implementation this also hashes `noncedata` into the single value, because otherwise the `noncedata` would be unused. Your `ecdsa_s2c_sign` doesn't use `noncedata` but it could in principle and I think it should because it allows \"synthetic nonces\" (i.e. nonces which have a deterministically derived and a random component).",
      "created_at": "2019-11-11T14:59:19Z",
      "updated_at": "2020-04-21T12:46:25Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/669#discussion_r344751139",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/344751139"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/669"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 787,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/344759743",
      "pull_request_review_id": 314882006,
      "id": 344759743,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0NDc1OTc0Mw==",
      "diff_hunk": "@@ -48,6 +48,74 @@ SECP256K1_API int secp256k1_ecdsa_s2c_verify_commit(\n     const secp256k1_s2c_opening *opening\n ) SECP256K1_ARG_NONNULL(1) SECP256K1_ARG_NONNULL(2) SECP256K1_ARG_NONNULL(3) SECP256K1_ARG_NONNULL(4);\n \n+/** Compute commitment on the client as part of the ECDSA Anti Nonce Covert Channel Protocol.\n+ *\n+ * ECDSA Anti Nonce Covert Channel Protocol:\n+ * 1. The host draws randomness `k2`, commits to it with sha256 and sends the commitment to the client.\n+ * 2. The client commits to its original nonce `k1` using the host commitment by calling\n+ *    `secp256k1_ecdsa_anti_covert_channel_client_commit`. The client sends the resulting commitment\n+ *   `R1` to the host.\n+ * 3. The host replies with `k2` generated in step 1.\n+ * 4. The client signs with `secp256k1_ecdsa_s2c_sign`, using the `k2` as `s2c_data` and\n+ *    sends the signature and opening to the host.\n+ * 5. The host verifies that `R_x = (R1 + H(R1, k2)*G)_x`, where R_x is the `r` part of the signature by using\n+ *    `secp256k1_ecdsa_s2c_anti_nonce_covert_channel_host_verify` with the client's\n+ *     commitment from step 2 and the signature and opening received in step 4. If verification does\n+ *     not succeed, the protocol failed and can be restarted.\n+ *\n+ *  Returns 1 on success, 0 on failure.\n+ *  Args:           ctx: pointer to a context object (cannot be NULL)\n+ *  Out:  client_commit: pointer to a pubkey where the clients public nonce will be\n+ *                       placed. (cannot be NULL)\n+ *  In:           msg32: the 32-byte message hash to be signed (cannot be NULL)\n+ *             seckey32: the 32-byte secret key used for signing (cannot be NULL)\n+ *              noncefp: pointer to a nonce generation function. If NULL, secp256k1_nonce_function_default is used",
      "path": "include/secp256k1_ecdsa_sign_to_contract.h",
      "position": null,
      "original_position": 25,
      "commit_id": "1a0f2edfdb55f275fbd8703782b59a9ec759f65f",
      "original_commit_id": "baec472ef44691b8ce971be136a3fe2cd0936ad0",
      "in_reply_to_id": null,
      "user": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "not an argument",
      "created_at": "2019-11-11T15:17:17Z",
      "updated_at": "2020-04-21T12:46:25Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/669#discussion_r344759743",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/344759743"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/669"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 72,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/344761810",
      "pull_request_review_id": 314882006,
      "id": 344761810,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0NDc2MTgxMA==",
      "diff_hunk": "@@ -48,6 +48,74 @@ SECP256K1_API int secp256k1_ecdsa_s2c_verify_commit(\n     const secp256k1_s2c_opening *opening\n ) SECP256K1_ARG_NONNULL(1) SECP256K1_ARG_NONNULL(2) SECP256K1_ARG_NONNULL(3) SECP256K1_ARG_NONNULL(4);\n \n+/** Compute commitment on the client as part of the ECDSA Anti Nonce Covert Channel Protocol.\n+ *\n+ * ECDSA Anti Nonce Covert Channel Protocol:\n+ * 1. The host draws randomness `k2`, commits to it with sha256 and sends the commitment to the client.\n+ * 2. The client commits to its original nonce `k1` using the host commitment by calling\n+ *    `secp256k1_ecdsa_anti_covert_channel_client_commit`. The client sends the resulting commitment\n+ *   `R1` to the host.\n+ * 3. The host replies with `k2` generated in step 1.\n+ * 4. The client signs with `secp256k1_ecdsa_s2c_sign`, using the `k2` as `s2c_data` and\n+ *    sends the signature and opening to the host.\n+ * 5. The host verifies that `R_x = (R1 + H(R1, k2)*G)_x`, where R_x is the `r` part of the signature by using\n+ *    `secp256k1_ecdsa_s2c_anti_nonce_covert_channel_host_verify` with the client's\n+ *     commitment from step 2 and the signature and opening received in step 4. If verification does\n+ *     not succeed, the protocol failed and can be restarted.\n+ *\n+ *  Returns 1 on success, 0 on failure.\n+ *  Args:           ctx: pointer to a context object (cannot be NULL)\n+ *  Out:  client_commit: pointer to a pubkey where the clients public nonce will be\n+ *                       placed. (cannot be NULL)\n+ *  In:           msg32: the 32-byte message hash to be signed (cannot be NULL)\n+ *             seckey32: the 32-byte secret key used for signing (cannot be NULL)\n+ *              noncefp: pointer to a nonce generation function. If NULL, secp256k1_nonce_function_default is used\n+ *    rand_commitment32: the 32-byte randomness commitment from the host (cannot be NULL)\n+ */\n+SECP256K1_API int secp256k1_ecdsa_s2c_anti_nonce_covert_channel_client_commit(\n+    const secp256k1_context* ctx,\n+    secp256k1_pubkey *client_commit,\n+    const unsigned char *msg32,\n+    const unsigned char *seckey32,\n+    unsigned char *rand_commitment32\n+) SECP256K1_ARG_NONNULL(1) SECP256K1_ARG_NONNULL(2) SECP256K1_ARG_NONNULL(3) SECP256K1_ARG_NONNULL(4) SECP256K1_ARG_NONNULL(5);\n+\n+/** Create a randomness commitment on the host as part of the ECDSA Anti Nonce Covert Channel Protocol.\n+ *\n+ *  Returns 1 on success, 0 on failure.\n+ *  Args:              ctx: pointer to a context object (cannot be NULL)\n+ *  Out: rand_commitment32: pointer to 32-byte array to store the returned commitment (cannot be NULL)\n+ *  In:             rand32: the 32-byte randomness to commit to (cannot be NULL)\n+ */\n+SECP256K1_API int secp256k1_ecdsa_s2c_anti_nonce_covert_channel_host_commit(",
      "path": "include/secp256k1_ecdsa_sign_to_contract.h",
      "position": null,
      "original_position": 43,
      "commit_id": "1a0f2edfdb55f275fbd8703782b59a9ec759f65f",
      "original_commit_id": "baec472ef44691b8ce971be136a3fe2cd0936ad0",
      "in_reply_to_id": null,
      "user": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "perhaps put this before `client_commit`?",
      "created_at": "2019-11-11T15:21:23Z",
      "updated_at": "2020-04-21T12:46:25Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/669#discussion_r344761810",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/344761810"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/669"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 90,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/344786524",
      "pull_request_review_id": 314882006,
      "id": 344786524,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0NDc4NjUyNA==",
      "diff_hunk": "@@ -0,0 +1,230 @@\n+/**********************************************************************\n+ * Copyright (c) 2019 Marko Bencun, Jonas Nick                        *\n+ * Distributed under the MIT software license, see the accompanying   *\n+ * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n+ **********************************************************************/\n+\n+#ifndef SECP256K1_MODULE_ECDSA_SIGN_TO_CONTRACT_TESTS_H\n+#define SECP256K1_MODULE_ECDSA_SIGN_TO_CONTRACT_TESTS_H\n+\n+static int mock_noncefp_result = 1;\n+static uint8_t* mock_noncefp_nonce = NULL;\n+static int nonce_function_non_rfc6979(unsigned char *nonce32, const unsigned char *msg32, const unsigned char *key32, const unsigned char *algo16, void *data, unsigned int counter) {",
      "path": "src/modules/ecdsa_sign_to_contract/tests_impl.h",
      "position": null,
      "original_position": 12,
      "commit_id": "1a0f2edfdb55f275fbd8703782b59a9ec759f65f",
      "original_commit_id": "db0ea252a96c26fe820f806fbe3e844daddb89b3",
      "in_reply_to_id": null,
      "user": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "this seems to be unused?",
      "created_at": "2019-11-11T16:10:43Z",
      "updated_at": "2020-04-21T12:46:25Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/669#discussion_r344786524",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/344786524"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/669"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 12,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/345879977",
      "pull_request_review_id": 314882006,
      "id": 345879977,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0NTg3OTk3Nw==",
      "diff_hunk": "@@ -218,12 +281,88 @@ static void test_ecdsa_s2c_sign_verify(void) {\n     }\n }\n \n+static void test_ecdsa_s2c_anti_nonce_covert_channel_client_commit(void) {\n+    size_t i;\n+    unsigned char privkey[32] = {\n+        0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55,\n+        0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55,\n+    };\n+    unsigned char message[32] = {\n+        0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88,\n+        0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88,\n+    };\n+    secp256k1_pubkey client_commit;\n+    unsigned char pubnonce[33];\n+    /*\n+      Check that original pubnonce is derived from s2c_data and ndata.\n+    */\n+    for (i = 0; i < sizeof(ecdsa_s2c_tests) / sizeof(ecdsa_s2c_tests[0]); i++) {\n+        size_t pubnonce_size = 33;\n+        const ecdsa_s2c_test *test = &ecdsa_s2c_tests[i];\n+        CHECK(secp256k1_ecdsa_s2c_anti_nonce_covert_channel_client_commit(ctx, &client_commit, message, privkey, (unsigned char*)test->host_commitment) == 1);\n+        CHECK(secp256k1_ec_pubkey_serialize(ctx, pubnonce, &pubnonce_size, &client_commit, SECP256K1_EC_COMPRESSED) == 1);\n+        CHECK(memcmp(test->expected_pubnonce, pubnonce, pubnonce_size) == 0);\n+    }\n+}\n+\n+/* This tests the full ECDSA Anti Nonce Covert Channel Protocol */\n+static void test_ecdsa_s2c_anti_nonce_covert_channel(void) {\n+    unsigned char client_privkey[32];\n+    unsigned char host_msg[32];\n+    unsigned char host_commitment[32];\n+    unsigned char host_nonce_contribution[32];\n+    secp256k1_pubkey client_commitment;\n+    secp256k1_ecdsa_signature signature;\n+    secp256k1_s2c_opening s2c_opening;\n+\n+    /* Generate a random key, message. */\n+    {\n+        secp256k1_scalar key;\n+        random_scalar_order_test(&key);\n+        secp256k1_scalar_get_b32(client_privkey, &key);\n+        secp256k1_rand256_test(host_msg);\n+        secp256k1_rand256_test(host_nonce_contribution);\n+    }\n+\n+    /* Protocol step 1. */\n+    CHECK(secp256k1_ecdsa_s2c_anti_nonce_covert_channel_host_commit(ctx, host_commitment, host_nonce_contribution) == 1);\n+    /* Protocol step 2. */\n+    CHECK(secp256k1_ecdsa_s2c_anti_nonce_covert_channel_client_commit(ctx, &client_commitment, host_msg, client_privkey, host_commitment) == 1);\n+    /* Protocol step 3: host_nonce_contribution send to client to be used in step 4. */\n+    /* Protocol step 4. */\n+    CHECK(secp256k1_ecdsa_s2c_sign(ctx, &signature, &s2c_opening, host_msg, client_privkey, host_nonce_contribution) == 1);\n+    /* Protocol step 5. */\n+    CHECK(secp256k1_ecdsa_s2c_anti_nonce_covert_channel_host_verify(ctx, &signature, host_nonce_contribution, &s2c_opening, &client_commitment) == 1);\n+\n+    { /* host_verify: commitment does not match */\n+        uint8_t sigbytes[64];\n+        size_t i;\n+        CHECK(secp256k1_ecdsa_signature_serialize_compact(ctx, sigbytes, &signature) == 1);\n+        for(i = 0; i < 32; i++) {\n+            /* change one byte */\n+            sigbytes[i] = (((int)sigbytes[i]) + 1) % 256;\n+            CHECK(secp256k1_ecdsa_signature_parse_compact(ctx, &signature, sigbytes) == 1);\n+            CHECK(secp256k1_ecdsa_s2c_anti_nonce_covert_channel_host_verify(ctx, &signature, host_nonce_contribution, &s2c_opening, &client_commitment) == 0);\n+            /* revert */\n+            sigbytes[i] = (((int)sigbytes[i]) + 255) % 256;\n+        }\n+    }\n+    { /* host_verify: client commitment != opening original pubnonce */",
      "path": "src/modules/ecdsa_sign_to_contract/tests_impl.h",
      "position": 333,
      "original_position": 165,
      "commit_id": "1a0f2edfdb55f275fbd8703782b59a9ec759f65f",
      "original_commit_id": "baec472ef44691b8ce971be136a3fe2cd0936ad0",
      "in_reply_to_id": null,
      "user": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "A few cases could be added, like wrong `host_nonce_contribution` or wrong s2c_opening (same in my PR). Also, what if `host_nonce_contribution` doesn't match it's commitment?",
      "created_at": "2019-11-13T16:58:02Z",
      "updated_at": "2020-04-21T12:46:25Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/669#discussion_r345879977",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/345879977"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/669"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 333,
      "original_line": 333,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/345880807",
      "pull_request_review_id": 314882006,
      "id": 345880807,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0NTg4MDgwNw==",
      "diff_hunk": "@@ -43,4 +43,83 @@ int secp256k1_ecdsa_s2c_verify_commit(const secp256k1_context* ctx, const secp25\n \n }\n \n+int secp256k1_ecdsa_s2c_anti_nonce_covert_channel_client_commit(const secp256k1_context* ctx, secp256k1_pubkey *client_commit, const unsigned char *msg32, const unsigned char *seckey32, unsigned char *rand_commitment32) {\n+    unsigned char nonce32[32];\n+    secp256k1_scalar k;\n+    secp256k1_gej rj;\n+    secp256k1_ge r;\n+    unsigned int count = 0;\n+    VERIFY_CHECK(ctx != NULL);\n+    ARG_CHECK(secp256k1_ecmult_gen_context_is_built(&ctx->ecmult_gen_ctx));\n+    ARG_CHECK(client_commit != NULL);\n+    ARG_CHECK(msg32 != NULL);\n+    ARG_CHECK(seckey32 != NULL);\n+    ARG_CHECK(rand_commitment32 != NULL);\n+\n+    while (1) {\n+        int overflow = 0;\n+        if (!secp256k1_nonce_function_default(nonce32, msg32, seckey32, NULL, rand_commitment32, count)) {\n+            /* cannot happen with secp256k1_nonce_function_default */\n+            return 0;\n+        }\n+\n+        secp256k1_scalar_set_b32(&k, nonce32, &overflow);\n+        if (!overflow && !secp256k1_scalar_is_zero(&k)) {\n+            break;\n+        }\n+        count++;\n+    }\n+\n+    secp256k1_ecmult_gen(&ctx->ecmult_gen_ctx, &rj, &k);\n+    secp256k1_ge_set_gej(&r, &rj);\n+    secp256k1_pubkey_save(client_commit, &r);\n+    return 1;",
      "path": "src/modules/ecdsa_sign_to_contract/main_impl.h",
      "position": 120,
      "original_position": 34,
      "commit_id": "1a0f2edfdb55f275fbd8703782b59a9ec759f65f",
      "original_commit_id": "baec472ef44691b8ce971be136a3fe2cd0936ad0",
      "in_reply_to_id": null,
      "user": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "We should explicitly zeroize `nonce32` and `k` (same in my PR).",
      "created_at": "2019-11-13T16:59:26Z",
      "updated_at": "2020-04-21T12:46:25Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/669#discussion_r345880807",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/345880807"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/669"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 120,
      "original_line": 120,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/345884334",
      "pull_request_review_id": 314882006,
      "id": 345884334,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0NTg4NDMzNA==",
      "diff_hunk": "@@ -48,6 +48,74 @@ SECP256K1_API int secp256k1_ecdsa_s2c_verify_commit(\n     const secp256k1_s2c_opening *opening\n ) SECP256K1_ARG_NONNULL(1) SECP256K1_ARG_NONNULL(2) SECP256K1_ARG_NONNULL(3) SECP256K1_ARG_NONNULL(4);\n \n+/** Compute commitment on the client as part of the ECDSA Anti Nonce Covert Channel Protocol.\n+ *\n+ * ECDSA Anti Nonce Covert Channel Protocol:\n+ * 1. The host draws randomness `k2`, commits to it with sha256 and sends the commitment to the client.\n+ * 2. The client commits to its original nonce `k1` using the host commitment by calling\n+ *    `secp256k1_ecdsa_anti_covert_channel_client_commit`. The client sends the resulting commitment\n+ *   `R1` to the host.\n+ * 3. The host replies with `k2` generated in step 1.\n+ * 4. The client signs with `secp256k1_ecdsa_s2c_sign`, using the `k2` as `s2c_data` and\n+ *    sends the signature and opening to the host.\n+ * 5. The host verifies that `R_x = (R1 + H(R1, k2)*G)_x`, where R_x is the `r` part of the signature by using\n+ *    `secp256k1_ecdsa_s2c_anti_nonce_covert_channel_host_verify` with the client's\n+ *     commitment from step 2 and the signature and opening received in step 4. If verification does\n+ *     not succeed, the protocol failed and can be restarted.\n+ *\n+ *  Returns 1 on success, 0 on failure.\n+ *  Args:           ctx: pointer to a context object (cannot be NULL)\n+ *  Out:  client_commit: pointer to a pubkey where the clients public nonce will be\n+ *                       placed. (cannot be NULL)\n+ *  In:           msg32: the 32-byte message hash to be signed (cannot be NULL)\n+ *             seckey32: the 32-byte secret key used for signing (cannot be NULL)\n+ *              noncefp: pointer to a nonce generation function. If NULL, secp256k1_nonce_function_default is used\n+ *    rand_commitment32: the 32-byte randomness commitment from the host (cannot be NULL)\n+ */\n+SECP256K1_API int secp256k1_ecdsa_s2c_anti_nonce_covert_channel_client_commit(\n+    const secp256k1_context* ctx,\n+    secp256k1_pubkey *client_commit,\n+    const unsigned char *msg32,\n+    const unsigned char *seckey32,\n+    unsigned char *rand_commitment32\n+) SECP256K1_ARG_NONNULL(1) SECP256K1_ARG_NONNULL(2) SECP256K1_ARG_NONNULL(3) SECP256K1_ARG_NONNULL(4) SECP256K1_ARG_NONNULL(5);\n+\n+/** Create a randomness commitment on the host as part of the ECDSA Anti Nonce Covert Channel Protocol.\n+ *\n+ *  Returns 1 on success, 0 on failure.\n+ *  Args:              ctx: pointer to a context object (cannot be NULL)\n+ *  Out: rand_commitment32: pointer to 32-byte array to store the returned commitment (cannot be NULL)\n+ *  In:             rand32: the 32-byte randomness to commit to (cannot be NULL)",
      "path": "include/secp256k1_ecdsa_sign_to_contract.h",
      "position": null,
      "original_position": 41,
      "commit_id": "1a0f2edfdb55f275fbd8703782b59a9ec759f65f",
      "original_commit_id": "baec472ef44691b8ce971be136a3fe2cd0936ad0",
      "in_reply_to_id": null,
      "user": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Need to make very clear that this \"randomness\" must come from a cryptographically secure RNG, and it's not supposed to be shared with the client before receiving the client commitment. I thought about renaming it to `session_secret` to better convey what it is, but it doesn't make too much sense either.",
      "created_at": "2019-11-13T17:06:00Z",
      "updated_at": "2020-04-21T12:46:25Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/669#discussion_r345884334",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/345884334"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/669"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 88,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/346006753",
      "pull_request_review_id": 314882006,
      "id": 346006753,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0NjAwNjc1Mw==",
      "diff_hunk": "@@ -0,0 +1,46 @@\n+/**********************************************************************\n+ * Copyright (c) 2019 Marko Bencun, Jonas Nick                        *\n+ * Distributed under the MIT software license, see the accompanying   *\n+ * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n+ **********************************************************************/\n+\n+#ifndef SECP256K1_MODULE_ECDSA_SIGN_TO_CONTRACT_MAIN_H\n+#define SECP256K1_MODULE_ECDSA_SIGN_TO_CONTRACT_MAIN_H\n+\n+#include \"include/secp256k1_ecdsa_sign_to_contract.h\"\n+\n+int secp256k1_ecdsa_s2c_sign(const secp256k1_context *ctx, secp256k1_ecdsa_signature *signature, secp256k1_s2c_opening *s2c_opening, const unsigned char *msg32, const unsigned char *seckey, const unsigned char* s2c_data32) {\n+    return secp256k1_ecdsa_sign_helper(ctx, signature, s2c_opening, msg32, seckey, s2c_data32, NULL, NULL);\n+}\n+\n+int secp256k1_ecdsa_s2c_verify_commit(const secp256k1_context* ctx, const secp256k1_ecdsa_signature *sig, const unsigned char *data32, const secp256k1_s2c_opening *opening) {\n+    secp256k1_pubkey commitment;\n+    secp256k1_ge commitment_ge;\n+    unsigned char x_bytes1[32];\n+    unsigned char x_bytes2[32];\n+    secp256k1_scalar sigr, sigs;\n+\n+    VERIFY_CHECK(ctx != NULL);\n+    ARG_CHECK(sig != NULL);\n+    ARG_CHECK(data32 != NULL);\n+    ARG_CHECK(opening != NULL);\n+    ARG_CHECK(secp256k1_s2c_commit_is_init(opening));\n+\n+    if (!secp256k1_ec_commit(ctx, &commitment, &opening->original_pubnonce, data32, 32)) {\n+        return 0;\n+    }\n+\n+    /* Check that sigr (x coordinate of R) matches the x coordinate of the commitment. */",
      "path": "src/modules/ecdsa_sign_to_contract/main_impl.h",
      "position": null,
      "original_position": 33,
      "commit_id": "1a0f2edfdb55f275fbd8703782b59a9ec759f65f",
      "original_commit_id": "db0ea252a96c26fe820f806fbe3e844daddb89b3",
      "in_reply_to_id": null,
      "user": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: stress somehow that sigr is a scalar and the x coordinate of the commitment is a field element. I overlooked it at first. Also that sig[0:32] could be greater than the group order and signature_load won't complain. Perhaps `Check that sigr (x coordinate of R represented by a scalar) matches the x coordinate of the commitment (field element). Note that sig[0:32] can be greater than group order and therefore sigr will be reduced. But in that case ecdsa_verify doesn't pass\"",
      "created_at": "2019-11-13T21:18:59Z",
      "updated_at": "2020-04-21T12:46:25Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/669#discussion_r346006753",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/346006753"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/669"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 58,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/346012855",
      "pull_request_review_id": 314882006,
      "id": 346012855,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0NjAxMjg1NQ==",
      "diff_hunk": "@@ -0,0 +1,46 @@\n+/**********************************************************************\n+ * Copyright (c) 2019 Marko Bencun, Jonas Nick                        *\n+ * Distributed under the MIT software license, see the accompanying   *\n+ * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n+ **********************************************************************/\n+\n+#ifndef SECP256K1_MODULE_ECDSA_SIGN_TO_CONTRACT_MAIN_H\n+#define SECP256K1_MODULE_ECDSA_SIGN_TO_CONTRACT_MAIN_H\n+\n+#include \"include/secp256k1_ecdsa_sign_to_contract.h\"\n+\n+int secp256k1_ecdsa_s2c_sign(const secp256k1_context *ctx, secp256k1_ecdsa_signature *signature, secp256k1_s2c_opening *s2c_opening, const unsigned char *msg32, const unsigned char *seckey, const unsigned char* s2c_data32) {\n+    return secp256k1_ecdsa_sign_helper(ctx, signature, s2c_opening, msg32, seckey, s2c_data32, NULL, NULL);\n+}\n+\n+int secp256k1_ecdsa_s2c_verify_commit(const secp256k1_context* ctx, const secp256k1_ecdsa_signature *sig, const unsigned char *data32, const secp256k1_s2c_opening *opening) {\n+    secp256k1_pubkey commitment;\n+    secp256k1_ge commitment_ge;\n+    unsigned char x_bytes1[32];\n+    unsigned char x_bytes2[32];\n+    secp256k1_scalar sigr, sigs;\n+\n+    VERIFY_CHECK(ctx != NULL);\n+    ARG_CHECK(sig != NULL);\n+    ARG_CHECK(data32 != NULL);\n+    ARG_CHECK(opening != NULL);\n+    ARG_CHECK(secp256k1_s2c_commit_is_init(opening));\n+\n+    if (!secp256k1_ec_commit(ctx, &commitment, &opening->original_pubnonce, data32, 32)) {\n+        return 0;\n+    }\n+\n+    /* Check that sigr (x coordinate of R) matches the x coordinate of the commitment. */",
      "path": "src/modules/ecdsa_sign_to_contract/main_impl.h",
      "position": null,
      "original_position": 33,
      "commit_id": "1a0f2edfdb55f275fbd8703782b59a9ec759f65f",
      "original_commit_id": "db0ea252a96c26fe820f806fbe3e844daddb89b3",
      "in_reply_to_id": 346006753,
      "user": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "More importantly, there needs to be a sentence explaining why comparing the x coordinate is sufficient. For example, because there's only two y coordinates per x coordinate and given an opening for a point, it's as difficult finding an opening to the negation of the point as to any other point. However, I do think there's some reduction in security because it's more likely to find a collision with a point and it's negation.",
      "created_at": "2019-11-13T21:32:14Z",
      "updated_at": "2020-04-21T12:46:25Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/669#discussion_r346012855",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/346012855"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/669"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 58,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/346014423",
      "pull_request_review_id": 314882006,
      "id": 346014423,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0NjAxNDQyMw==",
      "diff_hunk": "@@ -0,0 +1,230 @@\n+/**********************************************************************\n+ * Copyright (c) 2019 Marko Bencun, Jonas Nick                        *\n+ * Distributed under the MIT software license, see the accompanying   *\n+ * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n+ **********************************************************************/\n+\n+#ifndef SECP256K1_MODULE_ECDSA_SIGN_TO_CONTRACT_TESTS_H\n+#define SECP256K1_MODULE_ECDSA_SIGN_TO_CONTRACT_TESTS_H\n+\n+static int mock_noncefp_result = 1;\n+static uint8_t* mock_noncefp_nonce = NULL;\n+static int nonce_function_non_rfc6979(unsigned char *nonce32, const unsigned char *msg32, const unsigned char *key32, const unsigned char *algo16, void *data, unsigned int counter) {\n+    (void)msg32;\n+    (void)key32;\n+    (void)algo16;\n+    (void)data;\n+    (void)counter;\n+    if (mock_noncefp_nonce != NULL) {\n+        memcpy(nonce32, mock_noncefp_nonce, 32);\n+        mock_noncefp_nonce = NULL;\n+    } else {\n+        memset(nonce32, 0x55, 32);\n+    }\n+    return mock_noncefp_result;\n+}\n+\n+typedef struct {\n+    unsigned char s2c_data[32];\n+    /* host_commitment = sha256(<s2c_data><ndata>) */\n+    unsigned char host_commitment[32];\n+    /* expected_pubnonce = host_commitment*G */\n+    unsigned char expected_pubnonce[33];\n+} ecdsa_s2c_test;\n+\n+/* When using sign-to-contract commitments, the nonce function is fixed, so we can use fixtures to test. */\n+static ecdsa_s2c_test ecdsa_s2c_tests[] = {\n+    {\n+        \"\\x1b\\xf6\\xfb\\x42\\xf4\\x1e\\xb8\\x76\\xc4\\xd7\\xaa\\x0d\\x67\\x24\\x2b\\x00\\xba\\xab\\x99\\xdc\\x20\\x84\\x49\\x3e\\x4e\\x63\\x27\\x7f\\xa1\\xf7\\x7f\\x22\",\n+        \"\\xcd\\xfe\\xb3\\xad\\x27\\x00\\x21\\x9e\\xf7\\xe1\\xd3\\x48\\x3e\\x31\\xe0\\xbf\\x19\\x34\\x50\\xb3\\x77\\x41\\x58\\xaa\\x5d\\x0f\\x95\\xb9\\xb6\\x5b\\xaf\\xc2\",\n+        \"\\x02\\x3d\\xce\\xb4\\xef\\x0d\\x4f\\x59\\x98\\xf2\\xd3\\x02\\xdb\\xfb\\x17\\x86\\x24\\xf6\\x3e\\x17\\x5c\\xd2\\x13\\xf5\\xf8\\x9a\\x30\\xce\\xe4\\x50\\x17\\x4c\\x07\",\n+    },\n+    {\n+        \"\\x35\\x19\\x9a\\x8f\\xbf\\x84\\xad\\x6e\\xf6\\x9a\\x18\\x4c\\x1b\\x19\\x28\\x5b\\xef\\xbe\\x06\\xe6\\x0b\\x62\\x64\\xe6\\xd3\\x73\\x89\\x3f\\x68\\x55\\xe2\\x4a\",\n+        \"\\x87\\x62\\x71\\xd6\\xfd\\xc7\\x57\\x5a\\x44\\xb9\\x81\\x0a\\xb2\\xea\\x8f\\x54\\xb5\\x77\\xe3\\x35\\x86\\xb3\\x4c\\x0d\\xc5\\xf3\\x5f\\xf6\\xbd\\xb8\\xeb\\x6c\",\n+        \"\\x02\\x61\\x10\\x22\\x34\\xd2\\x03\\xe6\\x11\\xaa\\xe7\\x1e\\x4e\\x04\\x30\\xc2\\xf1\\x28\\x6d\\x9c\\x2f\\x4c\\x96\\x4f\\x54\\x0d\\x03\\x5c\\xed\\x94\\xd7\\x42\\x6f\",\n+    },\n+};\n+\n+static void test_ecdsa_s2c_original_pubnonce(void) {\n+    size_t i;\n+    unsigned char privkey[32] = {\n+        0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55,\n+        0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55,\n+    };\n+    unsigned char message[32] = {\n+        0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88,\n+        0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88,\n+    };\n+    secp256k1_ecdsa_signature signature;\n+    secp256k1_s2c_opening s2c_opening;\n+    unsigned char pubnonce[33];\n+    /*\n+      Check that original pubnonce is derived from s2c_data and ndata.\n+    */\n+    for (i = 0; i < sizeof(ecdsa_s2c_tests) / sizeof(ecdsa_s2c_tests[0]); i++) {\n+        size_t pubnonce_size = 33;\n+        const ecdsa_s2c_test *test = &ecdsa_s2c_tests[i];\n+        CHECK(secp256k1_ecdsa_s2c_sign(ctx, &signature, &s2c_opening, message, privkey, test->s2c_data) == 1);\n+        CHECK(secp256k1_ec_pubkey_serialize(ctx, pubnonce, &pubnonce_size, &s2c_opening.original_pubnonce, SECP256K1_EC_COMPRESSED) == 1);\n+        CHECK(memcmp(test->expected_pubnonce, pubnonce, pubnonce_size) == 0);\n+    }\n+}\n+\n+static void test_ecdsa_s2c_api(void) {\n+    secp256k1_ecdsa_signature signature;\n+    unsigned char privkey[32] = {1};\n+    unsigned char message[32] = {0};\n+    unsigned char s2c_data[32] = {0};\n+    secp256k1_s2c_opening s2c_opening;\n+\n+    secp256k1_context *none = secp256k1_context_create(SECP256K1_CONTEXT_NONE);\n+    secp256k1_context *sign = secp256k1_context_create(SECP256K1_CONTEXT_SIGN);\n+    secp256k1_context *vrfy = secp256k1_context_create(SECP256K1_CONTEXT_VERIFY);\n+    secp256k1_context *both = secp256k1_context_create(SECP256K1_CONTEXT_SIGN | SECP256K1_CONTEXT_VERIFY);\n+\n+    int ecount = 0;\n+    secp256k1_context_set_illegal_callback(none, counting_illegal_callback_fn, &ecount);\n+    secp256k1_context_set_illegal_callback(sign, counting_illegal_callback_fn, &ecount);\n+    secp256k1_context_set_illegal_callback(vrfy, counting_illegal_callback_fn, &ecount);\n+    secp256k1_context_set_illegal_callback(both, counting_illegal_callback_fn, &ecount);\n+\n+    {\n+        ecount = 0;\n+        CHECK(secp256k1_ecdsa_s2c_sign(none, &signature, NULL, message, privkey, NULL) == 0);\n+        CHECK(ecount == 1);\n+        CHECK(secp256k1_ecdsa_s2c_sign(sign, &signature, NULL, message, privkey, NULL) == 1);\n+        CHECK(ecount == 1);\n+        CHECK(secp256k1_ecdsa_s2c_sign(vrfy, &signature, NULL, message, privkey, NULL) == 0);\n+        CHECK(ecount == 2);\n+        CHECK(secp256k1_ecdsa_s2c_sign(both, &signature, NULL, message, privkey, NULL) == 1);\n+        CHECK(ecount == 2);\n+    }\n+    { /* message, signature, seckey */\n+        ecount = 0;\n+        CHECK(secp256k1_ecdsa_s2c_sign(sign, NULL, NULL, message, privkey, NULL) == 0);\n+        CHECK(ecount == 1);\n+        CHECK(secp256k1_ecdsa_s2c_sign(sign, &signature, NULL, NULL, privkey, NULL) == 0);\n+        CHECK(ecount == 2);\n+        CHECK(secp256k1_ecdsa_s2c_sign(sign, &signature, NULL, message, NULL, NULL) == 0);\n+        CHECK(ecount == 3);\n+    }\n+    { /* either both opening and s2c_data are provided or none */\n+        ecount = 0;\n+        CHECK(secp256k1_ecdsa_s2c_sign(sign, &signature, NULL, message, privkey, NULL) == 1);\n+        CHECK(ecount == 0);\n+        CHECK(secp256k1_ecdsa_s2c_sign(sign, &signature, &s2c_opening, message, privkey, s2c_data) == 1);\n+        CHECK(ecount == 0);\n+        CHECK(secp256k1_ecdsa_s2c_sign(sign, &signature, NULL, message, privkey, s2c_data) == 0);\n+        CHECK(ecount == 1);\n+        CHECK(secp256k1_ecdsa_s2c_sign(sign, &signature, &s2c_opening, message, privkey, NULL) == 0);\n+        CHECK(ecount == 2);\n+    }\n+    { /* verify_commit, ctx */\n+        ecount = 0;\n+        CHECK(secp256k1_ecdsa_s2c_sign(sign, &signature, &s2c_opening, message, privkey, s2c_data) == 1);\n+        CHECK(secp256k1_ecdsa_s2c_verify_commit(none, &signature, s2c_data, &s2c_opening) == 0);\n+        CHECK(ecount == 1);\n+        CHECK(secp256k1_ecdsa_s2c_verify_commit(sign, &signature, s2c_data, &s2c_opening) == 0);\n+        CHECK(ecount == 2);\n+        CHECK(secp256k1_ecdsa_s2c_verify_commit(vrfy, &signature, s2c_data, &s2c_opening) == 1);\n+        CHECK(ecount == 2);\n+        CHECK(secp256k1_ecdsa_s2c_verify_commit(both, &signature, s2c_data, &s2c_opening) == 1);\n+        CHECK(ecount == 2);\n+    }\n+    { /* verify_commit, NULL signature, s2c_data, s2c_opening */\n+        ecount = 0;\n+        CHECK(secp256k1_ecdsa_s2c_sign(sign, &signature, &s2c_opening, message, privkey, s2c_data) == 1);\n+        CHECK(secp256k1_ecdsa_s2c_verify_commit(vrfy, NULL, s2c_data, &s2c_opening) == 0);\n+        CHECK(ecount == 1);\n+        CHECK(secp256k1_ecdsa_s2c_verify_commit(vrfy, &signature, NULL, &s2c_opening) == 0);\n+        CHECK(ecount == 2);\n+        CHECK(secp256k1_ecdsa_s2c_verify_commit(vrfy, &signature, s2c_data, NULL) == 0);\n+        CHECK(ecount == 3);\n+    }\n+    { /* verify_commit, invalid opening */\n+        secp256k1_s2c_opening invalid_opening = {0};\n+        ecount = 0;\n+        CHECK(secp256k1_ecdsa_s2c_verify_commit(vrfy, &signature, s2c_data, &invalid_opening) == 0);\n+        CHECK(ecount == 1);\n+    }\n+}\n+\n+static void test_ecdsa_s2c_sign_verify(void) {\n+    unsigned char privkey[32];\n+    uint8_t zero_privkey[32] = {0};",
      "path": "src/modules/ecdsa_sign_to_contract/tests_impl.h",
      "position": null,
      "original_position": 155,
      "commit_id": "1a0f2edfdb55f275fbd8703782b59a9ec759f65f",
      "original_commit_id": "db0ea252a96c26fe820f806fbe3e844daddb89b3",
      "in_reply_to_id": null,
      "user": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Better to standardize on `unsigned char` for bytes?",
      "created_at": "2019-11-13T21:35:49Z",
      "updated_at": "2020-04-21T12:46:25Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/669#discussion_r346014423",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/346014423"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/669"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 155,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/346033160",
      "pull_request_review_id": 314882006,
      "id": 346033160,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0NjAzMzE2MA==",
      "diff_hunk": "@@ -444,6 +468,37 @@ SECP256K1_API int secp256k1_ecdsa_signature_serialize_compact(\n     const secp256k1_ecdsa_signature* sig\n ) SECP256K1_ARG_NONNULL(1) SECP256K1_ARG_NONNULL(2) SECP256K1_ARG_NONNULL(3);\n \n+/** Parse a sign-to-contract opening.\n+ *\n+ *  Returns: 1 if the opening was fully valid.\n+ *           0 if the opening could not be parsed or is invalid.\n+ *  Args:    ctx: a secp256k1 context object.\n+ *  Out: opening: pointer to an opening object. If 1 is returned, it is set to a\n+ *                 parsed version of input. If not, its value is undefined.\n+ *  In:  input34: pointer to 34-byte array with a serialized opening\n+ *\n+ */\n+SECP256K1_API SECP256K1_WARN_UNUSED_RESULT int secp256k1_s2c_opening_parse(\n+    const secp256k1_context* ctx,\n+    secp256k1_s2c_opening* opening,\n+    const unsigned char *input34",
      "path": "include/secp256k1.h",
      "position": null,
      "original_position": 55,
      "commit_id": "1a0f2edfdb55f275fbd8703782b59a9ec759f65f",
      "original_commit_id": "93067b1ddd2b98b38cd1ef0280c198df0554ab10",
      "in_reply_to_id": null,
      "user": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "feel free to cherry-pick my fixups in #589 (for 33 byte in/outputs).",
      "created_at": "2019-11-13T22:18:37Z",
      "updated_at": "2020-04-21T12:46:25Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/669#discussion_r346033160",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/346033160"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/669"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 484,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/361867811",
      "pull_request_review_id": 336971857,
      "id": 361867811,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MTg2NzgxMQ==",
      "diff_hunk": "@@ -681,10 +642,221 @@ int secp256k1_ec_pubkey_combine(const secp256k1_context* ctx, secp256k1_pubkey *\n     return 1;\n }\n \n+/* Compute an ec commitment tweak as hash(pubkey, data). */\n+static int secp256k1_ec_commit_tweak(const secp256k1_context *ctx, unsigned char *tweak32, const secp256k1_pubkey *pubkey, const unsigned char *data, size_t data_size) {\n+    secp256k1_ge p;\n+    unsigned char rbuf[33];\n+    size_t rbuf_size = sizeof(rbuf);\n+    secp256k1_sha256 sha;\n+\n+    if (data_size == 0) {\n+        /* That's probably not what the caller wanted */\n+        return 0;\n+    }\n+    if(!secp256k1_pubkey_load(ctx, &p, pubkey)) {\n+        return 0;\n+    }\n+    secp256k1_eckey_pubkey_serialize(&p, rbuf, &rbuf_size, 1);\n+\n+    secp256k1_sha256_initialize(&sha);\n+    secp256k1_sha256_write(&sha, rbuf, rbuf_size);\n+    secp256k1_sha256_write(&sha, data, data_size);\n+    secp256k1_sha256_finalize(&sha, tweak32);\n+    return 1;\n+}\n+\n+/* Compute an ec commitment as pubkey + hash(pubkey, data)*G. */\n+static int secp256k1_ec_commit(const secp256k1_context* ctx, secp256k1_pubkey *commitment, const secp256k1_pubkey *pubkey, const unsigned char *data, size_t data_size) {\n+    unsigned char tweak[32];\n+\n+    *commitment = *pubkey;\n+    if (!secp256k1_ec_commit_tweak(ctx, tweak, commitment, data, data_size)) {\n+        return 0;\n+    }\n+    return secp256k1_ec_pubkey_tweak_add(ctx, commitment, tweak);\n+}\n+\n+/* Compute the seckey of an ec commitment from the original secret key of the pubkey as seckey +\n+ * hash(pubkey, data). */\n+static int secp256k1_ec_commit_seckey(const secp256k1_context* ctx, unsigned char *seckey, const secp256k1_pubkey *pubkey, const unsigned char *data, size_t data_size) {\n+    unsigned char tweak[32];\n+    secp256k1_pubkey pubkey_tmp;\n+\n+    if (pubkey == NULL) {\n+        /* Compute pubkey from seckey if not provided */\n+        int overflow;\n+        secp256k1_scalar x;\n+        secp256k1_gej pj;\n+        secp256k1_ge p;\n+\n+        secp256k1_scalar_set_b32(&x, seckey, &overflow);\n+        if (overflow != 0) {\n+            return 0;\n+        }\n+        secp256k1_ecmult_gen(&ctx->ecmult_gen_ctx, &pj, &x);\n+        secp256k1_ge_set_gej(&p, &pj);\n+        secp256k1_pubkey_save(&pubkey_tmp, &p);\n+        pubkey = &pubkey_tmp;\n+    }\n+\n+    if (!secp256k1_ec_commit_tweak(ctx, tweak, pubkey, data, data_size)) {\n+        return 0;\n+    }\n+    return secp256k1_ec_privkey_tweak_add(ctx, seckey, tweak);\n+}\n+\n+/* Verify an ec commitment as pubkey + hash(pubkey, data)*G ?= commitment. */\n+static int secp256k1_ec_commit_verify(const secp256k1_context* ctx, const secp256k1_pubkey *commitment, const secp256k1_pubkey *pubkey, const unsigned char *data, size_t data_size) {\n+    secp256k1_gej pj;\n+    secp256k1_ge p;\n+    secp256k1_pubkey commitment_tmp;\n+\n+    if (!secp256k1_ec_commit(ctx, &commitment_tmp, pubkey, data, data_size)) {\n+        return 0;\n+    }\n+\n+    /* Return commitment == commitment_tmp */\n+    secp256k1_gej_set_infinity(&pj);\n+    secp256k1_pubkey_load(ctx, &p, &commitment_tmp);\n+    secp256k1_gej_add_ge_var(&pj, &pj, &p, NULL);\n+    secp256k1_pubkey_load(ctx, &p, commitment);\n+    secp256k1_ge_neg(&p, &p);\n+    secp256k1_gej_add_ge_var(&pj, &pj, &p, NULL);\n+    return secp256k1_gej_is_infinity(&pj);\n+}\n+\n+static uint64_t s2c_opening_magic = 0x5d0520b8b7f2b168ULL;\n+\n+static void secp256k1_s2c_opening_init(secp256k1_s2c_opening *opening) {\n+    opening->magic = s2c_opening_magic;\n+    opening->nonce_is_negated = 0;\n+}\n+\n+static int secp256k1_s2c_commit_is_init(const secp256k1_s2c_opening *opening) {\n+    return opening->magic == s2c_opening_magic;\n+}\n+\n+int secp256k1_s2c_opening_parse(const secp256k1_context* ctx, secp256k1_s2c_opening* opening, const unsigned char *input34) {\n+    VERIFY_CHECK(ctx != NULL);\n+    ARG_CHECK(opening != NULL);\n+    ARG_CHECK(input34 != NULL);\n+\n+    secp256k1_s2c_opening_init(opening);\n+    opening->nonce_is_negated = input34[0];\n+    return secp256k1_ec_pubkey_parse(ctx, &opening->original_pubnonce, &input34[1], 33);\n+}\n+\n+int secp256k1_s2c_opening_serialize(const secp256k1_context* ctx, unsigned char *output34, const secp256k1_s2c_opening* opening) {\n+    size_t outputlen = 33;\n+\n+    VERIFY_CHECK(ctx != NULL);\n+    ARG_CHECK(output34 != NULL);\n+    ARG_CHECK(opening != NULL);\n+    ARG_CHECK(secp256k1_s2c_commit_is_init(opening));\n+\n+    output34[0] = opening->nonce_is_negated;\n+    return secp256k1_ec_pubkey_serialize(ctx, &output34[1], &outputlen, &opening->original_pubnonce, SECP256K1_EC_COMPRESSED);\n+}\n+\n+static int secp256k1_ecdsa_sign_helper(const secp256k1_context *ctx, secp256k1_ecdsa_signature *signature, secp256k1_s2c_opening *s2c_opening, const unsigned char *msg32, const unsigned char *seckey, const unsigned char* s2c_data32, secp256k1_nonce_function noncefp, const void* noncedata) {\n+    secp256k1_scalar r, s;\n+    secp256k1_scalar sec, non, msg;\n+    int ret = 0;\n+    int overflow = 0;\n+    unsigned char ndata[32];\n+    VERIFY_CHECK(ctx != NULL);\n+    ARG_CHECK(secp256k1_ecmult_gen_context_is_built(&ctx->ecmult_gen_ctx));\n+    ARG_CHECK(msg32 != NULL);\n+    ARG_CHECK(signature != NULL);\n+    ARG_CHECK(seckey != NULL);\n+    if (noncefp == NULL) {\n+        noncefp = secp256k1_nonce_function_default;\n+    }\n+    /* sign-to-contract commitments only work with the default nonce function,\n+     * because we need to ensure that s2c_data is actually hashed into the nonce and\n+     * not just ignored. */\n+    ARG_CHECK(s2c_data32 == NULL || noncefp == secp256k1_nonce_function_default);\n+    /* s2c_opening and s2c_data32 should be either both non-NULL or both NULL. */\n+    ARG_CHECK((s2c_opening != NULL) == (s2c_data32 != NULL));\n+    /* if s2c_data32 is not NULL, noncedata must be NULL. */\n+    ARG_CHECK(s2c_data32 == NULL || noncedata == NULL);\n+    if (s2c_opening != NULL) {\n+        secp256k1_s2c_opening_init(s2c_opening);\n+    }\n+\n+    if(s2c_data32 != NULL) {",
      "path": "src/secp256k1.c",
      "position": null,
      "original_position": 201,
      "commit_id": "1a0f2edfdb55f275fbd8703782b59a9ec759f65f",
      "original_commit_id": "baec472ef44691b8ce971be136a3fe2cd0936ad0",
      "in_reply_to_id": 332616778,
      "user": {
        "login": "benma",
        "id": 1225267,
        "node_id": "MDQ6VXNlcjEyMjUyNjc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1225267?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/benma",
        "html_url": "https://github.com/benma",
        "followers_url": "https://api.github.com/users/benma/followers",
        "following_url": "https://api.github.com/users/benma/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/benma/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/benma/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/benma/subscriptions",
        "organizations_url": "https://api.github.com/users/benma/orgs",
        "repos_url": "https://api.github.com/users/benma/repos",
        "events_url": "https://api.github.com/users/benma/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/benma/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "As discussed previously (in the other PR possibly), we settled on removing noncedata from `secp256k1_ecdsa_s2c_sign()`, as we couldn't think of a good use case. SInce I will be moving the `noncedata=hash(s2c_data)` computation over there, there is no noncedata to mix in anymore. Sounds overall simpler than adding code for an unclear future use. ",
      "created_at": "2019-12-29T19:26:04Z",
      "updated_at": "2020-04-21T12:46:25Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/669#discussion_r361867811",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/361867811"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/669"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 787,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/361868660",
      "pull_request_review_id": 336972498,
      "id": 361868660,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MTg2ODY2MA==",
      "diff_hunk": "@@ -43,4 +43,83 @@ int secp256k1_ecdsa_s2c_verify_commit(const secp256k1_context* ctx, const secp25\n \n }\n \n+int secp256k1_ecdsa_s2c_anti_nonce_covert_channel_client_commit(const secp256k1_context* ctx, secp256k1_pubkey *client_commit, const unsigned char *msg32, const unsigned char *seckey32, unsigned char *rand_commitment32) {\n+    unsigned char nonce32[32];\n+    secp256k1_scalar k;\n+    secp256k1_gej rj;\n+    secp256k1_ge r;\n+    unsigned int count = 0;\n+    VERIFY_CHECK(ctx != NULL);\n+    ARG_CHECK(secp256k1_ecmult_gen_context_is_built(&ctx->ecmult_gen_ctx));\n+    ARG_CHECK(client_commit != NULL);\n+    ARG_CHECK(msg32 != NULL);\n+    ARG_CHECK(seckey32 != NULL);\n+    ARG_CHECK(rand_commitment32 != NULL);\n+\n+    while (1) {\n+        int overflow = 0;\n+        if (!secp256k1_nonce_function_default(nonce32, msg32, seckey32, NULL, rand_commitment32, count)) {\n+            /* cannot happen with secp256k1_nonce_function_default */\n+            return 0;\n+        }\n+\n+        secp256k1_scalar_set_b32(&k, nonce32, &overflow);\n+        if (!overflow && !secp256k1_scalar_is_zero(&k)) {\n+            break;\n+        }\n+        count++;\n+    }\n+\n+    secp256k1_ecmult_gen(&ctx->ecmult_gen_ctx, &rj, &k);\n+    secp256k1_ge_set_gej(&r, &rj);\n+    secp256k1_pubkey_save(client_commit, &r);\n+    return 1;",
      "path": "src/modules/ecdsa_sign_to_contract/main_impl.h",
      "position": 120,
      "original_position": 34,
      "commit_id": "1a0f2edfdb55f275fbd8703782b59a9ec759f65f",
      "original_commit_id": "baec472ef44691b8ce971be136a3fe2cd0936ad0",
      "in_reply_to_id": 345880807,
      "user": {
        "login": "benma",
        "id": 1225267,
        "node_id": "MDQ6VXNlcjEyMjUyNjc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1225267?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/benma",
        "html_url": "https://github.com/benma",
        "followers_url": "https://api.github.com/users/benma/followers",
        "following_url": "https://api.github.com/users/benma/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/benma/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/benma/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/benma/subscriptions",
        "organizations_url": "https://api.github.com/users/benma/orgs",
        "repos_url": "https://api.github.com/users/benma/repos",
        "events_url": "https://api.github.com/users/benma/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/benma/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done; though in your PR it seems to be missing? https://github.com/bitcoin-core/secp256k1/pull/590/files#diff-313ca26f0048bc16a608709915d0111eR94\r\n\r\nIn the future, we should use a safe memory zeroing function, otherwise there is no guarantee the compiler won't optimize it away.",
      "created_at": "2019-12-29T19:44:36Z",
      "updated_at": "2020-04-21T12:46:25Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/669#discussion_r361868660",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/361868660"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/669"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 120,
      "original_line": 120,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/361869099",
      "pull_request_review_id": 336972833,
      "id": 361869099,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MTg2OTA5OQ==",
      "diff_hunk": "@@ -681,10 +642,221 @@ int secp256k1_ec_pubkey_combine(const secp256k1_context* ctx, secp256k1_pubkey *\n     return 1;\n }\n \n+/* Compute an ec commitment tweak as hash(pubkey, data). */\n+static int secp256k1_ec_commit_tweak(const secp256k1_context *ctx, unsigned char *tweak32, const secp256k1_pubkey *pubkey, const unsigned char *data, size_t data_size) {\n+    secp256k1_ge p;\n+    unsigned char rbuf[33];\n+    size_t rbuf_size = sizeof(rbuf);\n+    secp256k1_sha256 sha;\n+\n+    if (data_size == 0) {\n+        /* That's probably not what the caller wanted */\n+        return 0;\n+    }\n+    if(!secp256k1_pubkey_load(ctx, &p, pubkey)) {\n+        return 0;\n+    }\n+    secp256k1_eckey_pubkey_serialize(&p, rbuf, &rbuf_size, 1);\n+\n+    secp256k1_sha256_initialize(&sha);\n+    secp256k1_sha256_write(&sha, rbuf, rbuf_size);\n+    secp256k1_sha256_write(&sha, data, data_size);\n+    secp256k1_sha256_finalize(&sha, tweak32);\n+    return 1;\n+}\n+\n+/* Compute an ec commitment as pubkey + hash(pubkey, data)*G. */\n+static int secp256k1_ec_commit(const secp256k1_context* ctx, secp256k1_pubkey *commitment, const secp256k1_pubkey *pubkey, const unsigned char *data, size_t data_size) {\n+    unsigned char tweak[32];\n+\n+    *commitment = *pubkey;\n+    if (!secp256k1_ec_commit_tweak(ctx, tweak, commitment, data, data_size)) {\n+        return 0;\n+    }\n+    return secp256k1_ec_pubkey_tweak_add(ctx, commitment, tweak);\n+}\n+\n+/* Compute the seckey of an ec commitment from the original secret key of the pubkey as seckey +\n+ * hash(pubkey, data). */\n+static int secp256k1_ec_commit_seckey(const secp256k1_context* ctx, unsigned char *seckey, const secp256k1_pubkey *pubkey, const unsigned char *data, size_t data_size) {\n+    unsigned char tweak[32];\n+    secp256k1_pubkey pubkey_tmp;\n+\n+    if (pubkey == NULL) {\n+        /* Compute pubkey from seckey if not provided */\n+        int overflow;\n+        secp256k1_scalar x;\n+        secp256k1_gej pj;\n+        secp256k1_ge p;\n+\n+        secp256k1_scalar_set_b32(&x, seckey, &overflow);\n+        if (overflow != 0) {\n+            return 0;\n+        }\n+        secp256k1_ecmult_gen(&ctx->ecmult_gen_ctx, &pj, &x);\n+        secp256k1_ge_set_gej(&p, &pj);\n+        secp256k1_pubkey_save(&pubkey_tmp, &p);\n+        pubkey = &pubkey_tmp;\n+    }\n+\n+    if (!secp256k1_ec_commit_tweak(ctx, tweak, pubkey, data, data_size)) {\n+        return 0;\n+    }\n+    return secp256k1_ec_privkey_tweak_add(ctx, seckey, tweak);\n+}\n+\n+/* Verify an ec commitment as pubkey + hash(pubkey, data)*G ?= commitment. */\n+static int secp256k1_ec_commit_verify(const secp256k1_context* ctx, const secp256k1_pubkey *commitment, const secp256k1_pubkey *pubkey, const unsigned char *data, size_t data_size) {\n+    secp256k1_gej pj;\n+    secp256k1_ge p;\n+    secp256k1_pubkey commitment_tmp;\n+\n+    if (!secp256k1_ec_commit(ctx, &commitment_tmp, pubkey, data, data_size)) {\n+        return 0;\n+    }\n+\n+    /* Return commitment == commitment_tmp */\n+    secp256k1_gej_set_infinity(&pj);\n+    secp256k1_pubkey_load(ctx, &p, &commitment_tmp);\n+    secp256k1_gej_add_ge_var(&pj, &pj, &p, NULL);\n+    secp256k1_pubkey_load(ctx, &p, commitment);\n+    secp256k1_ge_neg(&p, &p);\n+    secp256k1_gej_add_ge_var(&pj, &pj, &p, NULL);\n+    return secp256k1_gej_is_infinity(&pj);\n+}\n+\n+static uint64_t s2c_opening_magic = 0x5d0520b8b7f2b168ULL;\n+\n+static void secp256k1_s2c_opening_init(secp256k1_s2c_opening *opening) {\n+    opening->magic = s2c_opening_magic;\n+    opening->nonce_is_negated = 0;\n+}\n+\n+static int secp256k1_s2c_commit_is_init(const secp256k1_s2c_opening *opening) {\n+    return opening->magic == s2c_opening_magic;\n+}\n+\n+int secp256k1_s2c_opening_parse(const secp256k1_context* ctx, secp256k1_s2c_opening* opening, const unsigned char *input34) {\n+    VERIFY_CHECK(ctx != NULL);\n+    ARG_CHECK(opening != NULL);\n+    ARG_CHECK(input34 != NULL);\n+\n+    secp256k1_s2c_opening_init(opening);\n+    opening->nonce_is_negated = input34[0];\n+    return secp256k1_ec_pubkey_parse(ctx, &opening->original_pubnonce, &input34[1], 33);\n+}\n+\n+int secp256k1_s2c_opening_serialize(const secp256k1_context* ctx, unsigned char *output34, const secp256k1_s2c_opening* opening) {\n+    size_t outputlen = 33;\n+\n+    VERIFY_CHECK(ctx != NULL);\n+    ARG_CHECK(output34 != NULL);\n+    ARG_CHECK(opening != NULL);\n+    ARG_CHECK(secp256k1_s2c_commit_is_init(opening));\n+\n+    output34[0] = opening->nonce_is_negated;\n+    return secp256k1_ec_pubkey_serialize(ctx, &output34[1], &outputlen, &opening->original_pubnonce, SECP256K1_EC_COMPRESSED);\n+}\n+\n+static int secp256k1_ecdsa_sign_helper(const secp256k1_context *ctx, secp256k1_ecdsa_signature *signature, secp256k1_s2c_opening *s2c_opening, const unsigned char *msg32, const unsigned char *seckey, const unsigned char* s2c_data32, secp256k1_nonce_function noncefp, const void* noncedata) {\n+    secp256k1_scalar r, s;\n+    secp256k1_scalar sec, non, msg;\n+    int ret = 0;\n+    int overflow = 0;\n+    unsigned char ndata[32];\n+    VERIFY_CHECK(ctx != NULL);\n+    ARG_CHECK(secp256k1_ecmult_gen_context_is_built(&ctx->ecmult_gen_ctx));\n+    ARG_CHECK(msg32 != NULL);\n+    ARG_CHECK(signature != NULL);\n+    ARG_CHECK(seckey != NULL);\n+    if (noncefp == NULL) {\n+        noncefp = secp256k1_nonce_function_default;\n+    }\n+    /* sign-to-contract commitments only work with the default nonce function,\n+     * because we need to ensure that s2c_data is actually hashed into the nonce and\n+     * not just ignored. */\n+    ARG_CHECK(s2c_data32 == NULL || noncefp == secp256k1_nonce_function_default);",
      "path": "src/secp256k1.c",
      "position": null,
      "original_position": 192,
      "commit_id": "1a0f2edfdb55f275fbd8703782b59a9ec759f65f",
      "original_commit_id": "baec472ef44691b8ce971be136a3fe2cd0936ad0",
      "in_reply_to_id": 332616666,
      "user": {
        "login": "benma",
        "id": 1225267,
        "node_id": "MDQ6VXNlcjEyMjUyNjc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1225267?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/benma",
        "html_url": "https://github.com/benma",
        "followers_url": "https://api.github.com/users/benma/followers",
        "following_url": "https://api.github.com/users/benma/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/benma/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/benma/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/benma/subscriptions",
        "organizations_url": "https://api.github.com/users/benma/orgs",
        "repos_url": "https://api.github.com/users/benma/repos",
        "events_url": "https://api.github.com/users/benma/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/benma/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2019-12-29T19:54:13Z",
      "updated_at": "2020-04-21T12:46:25Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/669#discussion_r361869099",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/361869099"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/669"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 778,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/361869108",
      "pull_request_review_id": 336972842,
      "id": 361869108,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MTg2OTEwOA==",
      "diff_hunk": "@@ -0,0 +1,55 @@\n+#ifndef SECP256K1_ECDSA_SIGN_TO_CONTRACT_H\n+#define SECP256K1_ECDSA_SIGN_TO_CONTRACT_H\n+\n+#include \"secp256k1.h\"\n+\n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif\n+\n+/** Same as secp256k1_ecdsa_sign, but s2c_data32 is committed to by adding `hash(R1, s2c_data32)` to",
      "path": "include/secp256k1_ecdsa_sign_to_contract.h",
      "position": null,
      "original_position": 10,
      "commit_id": "1a0f2edfdb55f275fbd8703782b59a9ec759f65f",
      "original_commit_id": "db0ea252a96c26fe820f806fbe3e844daddb89b3",
      "in_reply_to_id": 344700285,
      "user": {
        "login": "benma",
        "id": 1225267,
        "node_id": "MDQ6VXNlcjEyMjUyNjc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1225267?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/benma",
        "html_url": "https://github.com/benma",
        "followers_url": "https://api.github.com/users/benma/followers",
        "following_url": "https://api.github.com/users/benma/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/benma/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/benma/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/benma/subscriptions",
        "organizations_url": "https://api.github.com/users/benma/orgs",
        "repos_url": "https://api.github.com/users/benma/repos",
        "events_url": "https://api.github.com/users/benma/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/benma/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Fixed.",
      "created_at": "2019-12-29T19:54:31Z",
      "updated_at": "2020-04-21T12:46:25Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/669#discussion_r361869108",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/361869108"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/669"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 10,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/361869149",
      "pull_request_review_id": 336972879,
      "id": 361869149,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MTg2OTE0OQ==",
      "diff_hunk": "@@ -446,50 +446,11 @@ static int nonce_function_rfc6979(unsigned char *nonce32, const unsigned char *m\n const secp256k1_nonce_function secp256k1_nonce_function_rfc6979 = nonce_function_rfc6979;\n const secp256k1_nonce_function secp256k1_nonce_function_default = nonce_function_rfc6979;\n \n-int secp256k1_ecdsa_sign(const secp256k1_context* ctx, secp256k1_ecdsa_signature *signature, const unsigned char *msg32, const unsigned char *seckey, secp256k1_nonce_function noncefp, const void* noncedata) {\n-    secp256k1_scalar r, s;\n-    secp256k1_scalar sec, non, msg;\n-    int ret = 0;\n-    int overflow = 0;\n-    VERIFY_CHECK(ctx != NULL);\n-    ARG_CHECK(secp256k1_ecmult_gen_context_is_built(&ctx->ecmult_gen_ctx));\n-    ARG_CHECK(msg32 != NULL);\n-    ARG_CHECK(signature != NULL);\n-    ARG_CHECK(seckey != NULL);\n-    if (noncefp == NULL) {\n-        noncefp = secp256k1_nonce_function_default;\n-    }\n+/* TODO: re-order functions in this file so forward declarations are not needed? */",
      "path": "src/secp256k1.c",
      "position": null,
      "original_position": 17,
      "commit_id": "1a0f2edfdb55f275fbd8703782b59a9ec759f65f",
      "original_commit_id": "db0ea252a96c26fe820f806fbe3e844daddb89b3",
      "in_reply_to_id": 344737138,
      "user": {
        "login": "benma",
        "id": 1225267,
        "node_id": "MDQ6VXNlcjEyMjUyNjc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1225267?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/benma",
        "html_url": "https://github.com/benma",
        "followers_url": "https://api.github.com/users/benma/followers",
        "following_url": "https://api.github.com/users/benma/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/benma/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/benma/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/benma/subscriptions",
        "organizations_url": "https://api.github.com/users/benma/orgs",
        "repos_url": "https://api.github.com/users/benma/repos",
        "events_url": "https://api.github.com/users/benma/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/benma/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done.",
      "created_at": "2019-12-29T19:55:29Z",
      "updated_at": "2020-04-21T12:46:25Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/669#discussion_r361869149",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/361869149"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/669"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 449,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/361869225",
      "pull_request_review_id": 336972932,
      "id": 361869225,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MTg2OTIyNQ==",
      "diff_hunk": "@@ -0,0 +1,230 @@\n+/**********************************************************************\n+ * Copyright (c) 2019 Marko Bencun, Jonas Nick                        *\n+ * Distributed under the MIT software license, see the accompanying   *\n+ * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n+ **********************************************************************/\n+\n+#ifndef SECP256K1_MODULE_ECDSA_SIGN_TO_CONTRACT_TESTS_H\n+#define SECP256K1_MODULE_ECDSA_SIGN_TO_CONTRACT_TESTS_H\n+\n+static int mock_noncefp_result = 1;\n+static uint8_t* mock_noncefp_nonce = NULL;\n+static int nonce_function_non_rfc6979(unsigned char *nonce32, const unsigned char *msg32, const unsigned char *key32, const unsigned char *algo16, void *data, unsigned int counter) {\n+    (void)msg32;\n+    (void)key32;\n+    (void)algo16;\n+    (void)data;\n+    (void)counter;\n+    if (mock_noncefp_nonce != NULL) {\n+        memcpy(nonce32, mock_noncefp_nonce, 32);\n+        mock_noncefp_nonce = NULL;\n+    } else {\n+        memset(nonce32, 0x55, 32);\n+    }\n+    return mock_noncefp_result;\n+}\n+\n+typedef struct {\n+    unsigned char s2c_data[32];\n+    /* host_commitment = sha256(<s2c_data><ndata>) */\n+    unsigned char host_commitment[32];\n+    /* expected_pubnonce = host_commitment*G */\n+    unsigned char expected_pubnonce[33];\n+} ecdsa_s2c_test;\n+\n+/* When using sign-to-contract commitments, the nonce function is fixed, so we can use fixtures to test. */\n+static ecdsa_s2c_test ecdsa_s2c_tests[] = {\n+    {\n+        \"\\x1b\\xf6\\xfb\\x42\\xf4\\x1e\\xb8\\x76\\xc4\\xd7\\xaa\\x0d\\x67\\x24\\x2b\\x00\\xba\\xab\\x99\\xdc\\x20\\x84\\x49\\x3e\\x4e\\x63\\x27\\x7f\\xa1\\xf7\\x7f\\x22\",\n+        \"\\xcd\\xfe\\xb3\\xad\\x27\\x00\\x21\\x9e\\xf7\\xe1\\xd3\\x48\\x3e\\x31\\xe0\\xbf\\x19\\x34\\x50\\xb3\\x77\\x41\\x58\\xaa\\x5d\\x0f\\x95\\xb9\\xb6\\x5b\\xaf\\xc2\",\n+        \"\\x02\\x3d\\xce\\xb4\\xef\\x0d\\x4f\\x59\\x98\\xf2\\xd3\\x02\\xdb\\xfb\\x17\\x86\\x24\\xf6\\x3e\\x17\\x5c\\xd2\\x13\\xf5\\xf8\\x9a\\x30\\xce\\xe4\\x50\\x17\\x4c\\x07\",\n+    },\n+    {\n+        \"\\x35\\x19\\x9a\\x8f\\xbf\\x84\\xad\\x6e\\xf6\\x9a\\x18\\x4c\\x1b\\x19\\x28\\x5b\\xef\\xbe\\x06\\xe6\\x0b\\x62\\x64\\xe6\\xd3\\x73\\x89\\x3f\\x68\\x55\\xe2\\x4a\",\n+        \"\\x87\\x62\\x71\\xd6\\xfd\\xc7\\x57\\x5a\\x44\\xb9\\x81\\x0a\\xb2\\xea\\x8f\\x54\\xb5\\x77\\xe3\\x35\\x86\\xb3\\x4c\\x0d\\xc5\\xf3\\x5f\\xf6\\xbd\\xb8\\xeb\\x6c\",\n+        \"\\x02\\x61\\x10\\x22\\x34\\xd2\\x03\\xe6\\x11\\xaa\\xe7\\x1e\\x4e\\x04\\x30\\xc2\\xf1\\x28\\x6d\\x9c\\x2f\\x4c\\x96\\x4f\\x54\\x0d\\x03\\x5c\\xed\\x94\\xd7\\x42\\x6f\",\n+    },\n+};\n+\n+static void test_ecdsa_s2c_original_pubnonce(void) {\n+    size_t i;\n+    unsigned char privkey[32] = {\n+        0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55,\n+        0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55,\n+    };\n+    unsigned char message[32] = {\n+        0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88,\n+        0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88,\n+    };\n+    secp256k1_ecdsa_signature signature;\n+    secp256k1_s2c_opening s2c_opening;\n+    unsigned char pubnonce[33];\n+    /*\n+      Check that original pubnonce is derived from s2c_data and ndata.\n+    */\n+    for (i = 0; i < sizeof(ecdsa_s2c_tests) / sizeof(ecdsa_s2c_tests[0]); i++) {\n+        size_t pubnonce_size = 33;\n+        const ecdsa_s2c_test *test = &ecdsa_s2c_tests[i];\n+        CHECK(secp256k1_ecdsa_s2c_sign(ctx, &signature, &s2c_opening, message, privkey, test->s2c_data) == 1);\n+        CHECK(secp256k1_ec_pubkey_serialize(ctx, pubnonce, &pubnonce_size, &s2c_opening.original_pubnonce, SECP256K1_EC_COMPRESSED) == 1);\n+        CHECK(memcmp(test->expected_pubnonce, pubnonce, pubnonce_size) == 0);\n+    }\n+}\n+\n+static void test_ecdsa_s2c_api(void) {\n+    secp256k1_ecdsa_signature signature;\n+    unsigned char privkey[32] = {1};\n+    unsigned char message[32] = {0};\n+    unsigned char s2c_data[32] = {0};\n+    secp256k1_s2c_opening s2c_opening;\n+\n+    secp256k1_context *none = secp256k1_context_create(SECP256K1_CONTEXT_NONE);\n+    secp256k1_context *sign = secp256k1_context_create(SECP256K1_CONTEXT_SIGN);\n+    secp256k1_context *vrfy = secp256k1_context_create(SECP256K1_CONTEXT_VERIFY);\n+    secp256k1_context *both = secp256k1_context_create(SECP256K1_CONTEXT_SIGN | SECP256K1_CONTEXT_VERIFY);\n+\n+    int ecount = 0;\n+    secp256k1_context_set_illegal_callback(none, counting_illegal_callback_fn, &ecount);\n+    secp256k1_context_set_illegal_callback(sign, counting_illegal_callback_fn, &ecount);\n+    secp256k1_context_set_illegal_callback(vrfy, counting_illegal_callback_fn, &ecount);\n+    secp256k1_context_set_illegal_callback(both, counting_illegal_callback_fn, &ecount);\n+\n+    {\n+        ecount = 0;\n+        CHECK(secp256k1_ecdsa_s2c_sign(none, &signature, NULL, message, privkey, NULL) == 0);\n+        CHECK(ecount == 1);\n+        CHECK(secp256k1_ecdsa_s2c_sign(sign, &signature, NULL, message, privkey, NULL) == 1);\n+        CHECK(ecount == 1);\n+        CHECK(secp256k1_ecdsa_s2c_sign(vrfy, &signature, NULL, message, privkey, NULL) == 0);\n+        CHECK(ecount == 2);\n+        CHECK(secp256k1_ecdsa_s2c_sign(both, &signature, NULL, message, privkey, NULL) == 1);\n+        CHECK(ecount == 2);\n+    }\n+    { /* message, signature, seckey */\n+        ecount = 0;\n+        CHECK(secp256k1_ecdsa_s2c_sign(sign, NULL, NULL, message, privkey, NULL) == 0);\n+        CHECK(ecount == 1);\n+        CHECK(secp256k1_ecdsa_s2c_sign(sign, &signature, NULL, NULL, privkey, NULL) == 0);\n+        CHECK(ecount == 2);\n+        CHECK(secp256k1_ecdsa_s2c_sign(sign, &signature, NULL, message, NULL, NULL) == 0);\n+        CHECK(ecount == 3);\n+    }\n+    { /* either both opening and s2c_data are provided or none */\n+        ecount = 0;\n+        CHECK(secp256k1_ecdsa_s2c_sign(sign, &signature, NULL, message, privkey, NULL) == 1);\n+        CHECK(ecount == 0);\n+        CHECK(secp256k1_ecdsa_s2c_sign(sign, &signature, &s2c_opening, message, privkey, s2c_data) == 1);\n+        CHECK(ecount == 0);\n+        CHECK(secp256k1_ecdsa_s2c_sign(sign, &signature, NULL, message, privkey, s2c_data) == 0);\n+        CHECK(ecount == 1);\n+        CHECK(secp256k1_ecdsa_s2c_sign(sign, &signature, &s2c_opening, message, privkey, NULL) == 0);\n+        CHECK(ecount == 2);\n+    }\n+    { /* verify_commit, ctx */\n+        ecount = 0;\n+        CHECK(secp256k1_ecdsa_s2c_sign(sign, &signature, &s2c_opening, message, privkey, s2c_data) == 1);\n+        CHECK(secp256k1_ecdsa_s2c_verify_commit(none, &signature, s2c_data, &s2c_opening) == 0);\n+        CHECK(ecount == 1);\n+        CHECK(secp256k1_ecdsa_s2c_verify_commit(sign, &signature, s2c_data, &s2c_opening) == 0);\n+        CHECK(ecount == 2);\n+        CHECK(secp256k1_ecdsa_s2c_verify_commit(vrfy, &signature, s2c_data, &s2c_opening) == 1);\n+        CHECK(ecount == 2);\n+        CHECK(secp256k1_ecdsa_s2c_verify_commit(both, &signature, s2c_data, &s2c_opening) == 1);\n+        CHECK(ecount == 2);\n+    }\n+    { /* verify_commit, NULL signature, s2c_data, s2c_opening */\n+        ecount = 0;\n+        CHECK(secp256k1_ecdsa_s2c_sign(sign, &signature, &s2c_opening, message, privkey, s2c_data) == 1);\n+        CHECK(secp256k1_ecdsa_s2c_verify_commit(vrfy, NULL, s2c_data, &s2c_opening) == 0);\n+        CHECK(ecount == 1);\n+        CHECK(secp256k1_ecdsa_s2c_verify_commit(vrfy, &signature, NULL, &s2c_opening) == 0);\n+        CHECK(ecount == 2);\n+        CHECK(secp256k1_ecdsa_s2c_verify_commit(vrfy, &signature, s2c_data, NULL) == 0);\n+        CHECK(ecount == 3);\n+    }\n+    { /* verify_commit, invalid opening */\n+        secp256k1_s2c_opening invalid_opening = {0};\n+        ecount = 0;\n+        CHECK(secp256k1_ecdsa_s2c_verify_commit(vrfy, &signature, s2c_data, &invalid_opening) == 0);\n+        CHECK(ecount == 1);\n+    }\n+}\n+\n+static void test_ecdsa_s2c_sign_verify(void) {\n+    unsigned char privkey[32];\n+    uint8_t zero_privkey[32] = {0};",
      "path": "src/modules/ecdsa_sign_to_contract/tests_impl.h",
      "position": null,
      "original_position": 155,
      "commit_id": "1a0f2edfdb55f275fbd8703782b59a9ec759f65f",
      "original_commit_id": "db0ea252a96c26fe820f806fbe3e844daddb89b3",
      "in_reply_to_id": 346014423,
      "user": {
        "login": "benma",
        "id": 1225267,
        "node_id": "MDQ6VXNlcjEyMjUyNjc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1225267?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/benma",
        "html_url": "https://github.com/benma",
        "followers_url": "https://api.github.com/users/benma/followers",
        "following_url": "https://api.github.com/users/benma/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/benma/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/benma/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/benma/subscriptions",
        "organizations_url": "https://api.github.com/users/benma/orgs",
        "repos_url": "https://api.github.com/users/benma/repos",
        "events_url": "https://api.github.com/users/benma/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/benma/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2019-12-29T19:56:50Z",
      "updated_at": "2020-04-21T12:46:25Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/669#discussion_r361869225",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/361869225"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/669"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 155,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/361994244",
      "pull_request_review_id": 337115531,
      "id": 361994244,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MTk5NDI0NA==",
      "diff_hunk": "@@ -444,6 +468,37 @@ SECP256K1_API int secp256k1_ecdsa_signature_serialize_compact(\n     const secp256k1_ecdsa_signature* sig\n ) SECP256K1_ARG_NONNULL(1) SECP256K1_ARG_NONNULL(2) SECP256K1_ARG_NONNULL(3);\n \n+/** Parse a sign-to-contract opening.\n+ *\n+ *  Returns: 1 if the opening was fully valid.\n+ *           0 if the opening could not be parsed or is invalid.\n+ *  Args:    ctx: a secp256k1 context object.\n+ *  Out: opening: pointer to an opening object. If 1 is returned, it is set to a\n+ *                 parsed version of input. If not, its value is undefined.\n+ *  In:  input34: pointer to 34-byte array with a serialized opening\n+ *\n+ */\n+SECP256K1_API SECP256K1_WARN_UNUSED_RESULT int secp256k1_s2c_opening_parse(\n+    const secp256k1_context* ctx,\n+    secp256k1_s2c_opening* opening,\n+    const unsigned char *input34",
      "path": "include/secp256k1.h",
      "position": null,
      "original_position": 55,
      "commit_id": "1a0f2edfdb55f275fbd8703782b59a9ec759f65f",
      "original_commit_id": "93067b1ddd2b98b38cd1ef0280c198df0554ab10",
      "in_reply_to_id": 346033160,
      "user": {
        "login": "benma",
        "id": 1225267,
        "node_id": "MDQ6VXNlcjEyMjUyNjc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1225267?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/benma",
        "html_url": "https://github.com/benma",
        "followers_url": "https://api.github.com/users/benma/followers",
        "following_url": "https://api.github.com/users/benma/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/benma/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/benma/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/benma/subscriptions",
        "organizations_url": "https://api.github.com/users/benma/orgs",
        "repos_url": "https://api.github.com/users/benma/repos",
        "events_url": "https://api.github.com/users/benma/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/benma/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done.",
      "created_at": "2019-12-30T14:06:26Z",
      "updated_at": "2020-04-21T12:46:25Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/669#discussion_r361994244",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/361994244"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/669"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 484,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/362004837",
      "pull_request_review_id": 337129045,
      "id": 362004837,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjAwNDgzNw==",
      "diff_hunk": "@@ -48,6 +48,74 @@ SECP256K1_API int secp256k1_ecdsa_s2c_verify_commit(\n     const secp256k1_s2c_opening *opening\n ) SECP256K1_ARG_NONNULL(1) SECP256K1_ARG_NONNULL(2) SECP256K1_ARG_NONNULL(3) SECP256K1_ARG_NONNULL(4);\n \n+/** Compute commitment on the client as part of the ECDSA Anti Nonce Covert Channel Protocol.\n+ *\n+ * ECDSA Anti Nonce Covert Channel Protocol:\n+ * 1. The host draws randomness `k2`, commits to it with sha256 and sends the commitment to the client.\n+ * 2. The client commits to its original nonce `k1` using the host commitment by calling\n+ *    `secp256k1_ecdsa_anti_covert_channel_client_commit`. The client sends the resulting commitment\n+ *   `R1` to the host.\n+ * 3. The host replies with `k2` generated in step 1.\n+ * 4. The client signs with `secp256k1_ecdsa_s2c_sign`, using the `k2` as `s2c_data` and\n+ *    sends the signature and opening to the host.\n+ * 5. The host verifies that `R_x = (R1 + H(R1, k2)*G)_x`, where R_x is the `r` part of the signature by using\n+ *    `secp256k1_ecdsa_s2c_anti_nonce_covert_channel_host_verify` with the client's\n+ *     commitment from step 2 and the signature and opening received in step 4. If verification does\n+ *     not succeed, the protocol failed and can be restarted.\n+ *\n+ *  Returns 1 on success, 0 on failure.\n+ *  Args:           ctx: pointer to a context object (cannot be NULL)\n+ *  Out:  client_commit: pointer to a pubkey where the clients public nonce will be\n+ *                       placed. (cannot be NULL)\n+ *  In:           msg32: the 32-byte message hash to be signed (cannot be NULL)\n+ *             seckey32: the 32-byte secret key used for signing (cannot be NULL)\n+ *              noncefp: pointer to a nonce generation function. If NULL, secp256k1_nonce_function_default is used\n+ *    rand_commitment32: the 32-byte randomness commitment from the host (cannot be NULL)\n+ */\n+SECP256K1_API int secp256k1_ecdsa_s2c_anti_nonce_covert_channel_client_commit(\n+    const secp256k1_context* ctx,\n+    secp256k1_pubkey *client_commit,\n+    const unsigned char *msg32,\n+    const unsigned char *seckey32,\n+    unsigned char *rand_commitment32\n+) SECP256K1_ARG_NONNULL(1) SECP256K1_ARG_NONNULL(2) SECP256K1_ARG_NONNULL(3) SECP256K1_ARG_NONNULL(4) SECP256K1_ARG_NONNULL(5);\n+\n+/** Create a randomness commitment on the host as part of the ECDSA Anti Nonce Covert Channel Protocol.\n+ *\n+ *  Returns 1 on success, 0 on failure.\n+ *  Args:              ctx: pointer to a context object (cannot be NULL)\n+ *  Out: rand_commitment32: pointer to 32-byte array to store the returned commitment (cannot be NULL)\n+ *  In:             rand32: the 32-byte randomness to commit to (cannot be NULL)",
      "path": "include/secp256k1_ecdsa_sign_to_contract.h",
      "position": null,
      "original_position": 41,
      "commit_id": "1a0f2edfdb55f275fbd8703782b59a9ec759f65f",
      "original_commit_id": "baec472ef44691b8ce971be136a3fe2cd0936ad0",
      "in_reply_to_id": 345884334,
      "user": {
        "login": "benma",
        "id": 1225267,
        "node_id": "MDQ6VXNlcjEyMjUyNjc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1225267?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/benma",
        "html_url": "https://github.com/benma",
        "followers_url": "https://api.github.com/users/benma/followers",
        "following_url": "https://api.github.com/users/benma/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/benma/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/benma/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/benma/subscriptions",
        "organizations_url": "https://api.github.com/users/benma/orgs",
        "repos_url": "https://api.github.com/users/benma/repos",
        "events_url": "https://api.github.com/users/benma/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/benma/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done.",
      "created_at": "2019-12-30T14:49:30Z",
      "updated_at": "2020-04-21T12:46:25Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/669#discussion_r362004837",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/362004837"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/669"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 88,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/367462968",
      "pull_request_review_id": 343971991,
      "id": 367462968,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzQ2Mjk2OA==",
      "diff_hunk": "@@ -0,0 +1,46 @@\n+/**********************************************************************\n+ * Copyright (c) 2019 Marko Bencun, Jonas Nick                        *\n+ * Distributed under the MIT software license, see the accompanying   *\n+ * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n+ **********************************************************************/\n+\n+#ifndef SECP256K1_MODULE_ECDSA_SIGN_TO_CONTRACT_MAIN_H\n+#define SECP256K1_MODULE_ECDSA_SIGN_TO_CONTRACT_MAIN_H\n+\n+#include \"include/secp256k1_ecdsa_sign_to_contract.h\"\n+\n+int secp256k1_ecdsa_s2c_sign(const secp256k1_context *ctx, secp256k1_ecdsa_signature *signature, secp256k1_s2c_opening *s2c_opening, const unsigned char *msg32, const unsigned char *seckey, const unsigned char* s2c_data32) {\n+    return secp256k1_ecdsa_sign_helper(ctx, signature, s2c_opening, msg32, seckey, s2c_data32, NULL, NULL);\n+}\n+\n+int secp256k1_ecdsa_s2c_verify_commit(const secp256k1_context* ctx, const secp256k1_ecdsa_signature *sig, const unsigned char *data32, const secp256k1_s2c_opening *opening) {\n+    secp256k1_pubkey commitment;\n+    secp256k1_ge commitment_ge;\n+    unsigned char x_bytes1[32];\n+    unsigned char x_bytes2[32];\n+    secp256k1_scalar sigr, sigs;\n+\n+    VERIFY_CHECK(ctx != NULL);\n+    ARG_CHECK(sig != NULL);\n+    ARG_CHECK(data32 != NULL);\n+    ARG_CHECK(opening != NULL);\n+    ARG_CHECK(secp256k1_s2c_commit_is_init(opening));\n+\n+    if (!secp256k1_ec_commit(ctx, &commitment, &opening->original_pubnonce, data32, 32)) {\n+        return 0;\n+    }\n+\n+    /* Check that sigr (x coordinate of R) matches the x coordinate of the commitment. */",
      "path": "src/modules/ecdsa_sign_to_contract/main_impl.h",
      "position": null,
      "original_position": 33,
      "commit_id": "1a0f2edfdb55f275fbd8703782b59a9ec759f65f",
      "original_commit_id": "db0ea252a96c26fe820f806fbe3e844daddb89b3",
      "in_reply_to_id": 346006753,
      "user": {
        "login": "benma",
        "id": 1225267,
        "node_id": "MDQ6VXNlcjEyMjUyNjc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1225267?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/benma",
        "html_url": "https://github.com/benma",
        "followers_url": "https://api.github.com/users/benma/followers",
        "following_url": "https://api.github.com/users/benma/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/benma/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/benma/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/benma/subscriptions",
        "organizations_url": "https://api.github.com/users/benma/orgs",
        "repos_url": "https://api.github.com/users/benma/repos",
        "events_url": "https://api.github.com/users/benma/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/benma/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> nit: stress somehow that sigr is a scalar and the x coordinate of the commitment is a field element.\r\n\r\nWill do, though I thought that was clear as it is the same way with regular ecdsa verification.\r\n\r\n> Note that sig[0:32] can be greater than group order and therefore sigr will be reduced. But in that case ecdsa_verify doesn't pass\r\n\r\nThat is not true, is it? ecdsa_verify can still pass in this case, as the condition is ` sig_r == x (mod n)` (the field element `x` is also reduced modulo `n`).\r\n\r\nIn the current code a few lines down, there actually might be a \"mistake\": we memory-compare the byte representation of the *scalar* `sigr` and the *field element* `x`, without first reducing `x modulo n`, which might fail for actually valid commitments with very low (negligible) probability. \r\n\r\nShouldn't this be implemented the same way as the actual `secp256k1_ecdsa_verify()`? Basically convert the field element `x` to a scalar and use `secp256k1_scalar_eq()` instead of `memcmp`, like here:\r\n\r\nhttps://github.com/bitcoin-core/secp256k1/blob/074ab582ddb9085611cba8a0495828dadb645345/src/ecdsa_impl.h#L236-L238",
      "created_at": "2020-01-16T14:55:29Z",
      "updated_at": "2020-04-21T12:46:25Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/669#discussion_r367462968",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/367462968"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/669"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 58,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/367482223",
      "pull_request_review_id": 343997447,
      "id": 367482223,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzQ4MjIyMw==",
      "diff_hunk": "@@ -0,0 +1,46 @@\n+/**********************************************************************\n+ * Copyright (c) 2019 Marko Bencun, Jonas Nick                        *\n+ * Distributed under the MIT software license, see the accompanying   *\n+ * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n+ **********************************************************************/\n+\n+#ifndef SECP256K1_MODULE_ECDSA_SIGN_TO_CONTRACT_MAIN_H\n+#define SECP256K1_MODULE_ECDSA_SIGN_TO_CONTRACT_MAIN_H\n+\n+#include \"include/secp256k1_ecdsa_sign_to_contract.h\"\n+\n+int secp256k1_ecdsa_s2c_sign(const secp256k1_context *ctx, secp256k1_ecdsa_signature *signature, secp256k1_s2c_opening *s2c_opening, const unsigned char *msg32, const unsigned char *seckey, const unsigned char* s2c_data32) {\n+    return secp256k1_ecdsa_sign_helper(ctx, signature, s2c_opening, msg32, seckey, s2c_data32, NULL, NULL);\n+}\n+\n+int secp256k1_ecdsa_s2c_verify_commit(const secp256k1_context* ctx, const secp256k1_ecdsa_signature *sig, const unsigned char *data32, const secp256k1_s2c_opening *opening) {\n+    secp256k1_pubkey commitment;\n+    secp256k1_ge commitment_ge;\n+    unsigned char x_bytes1[32];\n+    unsigned char x_bytes2[32];\n+    secp256k1_scalar sigr, sigs;\n+\n+    VERIFY_CHECK(ctx != NULL);\n+    ARG_CHECK(sig != NULL);\n+    ARG_CHECK(data32 != NULL);\n+    ARG_CHECK(opening != NULL);\n+    ARG_CHECK(secp256k1_s2c_commit_is_init(opening));\n+\n+    if (!secp256k1_ec_commit(ctx, &commitment, &opening->original_pubnonce, data32, 32)) {\n+        return 0;\n+    }\n+\n+    /* Check that sigr (x coordinate of R) matches the x coordinate of the commitment. */",
      "path": "src/modules/ecdsa_sign_to_contract/main_impl.h",
      "position": null,
      "original_position": 33,
      "commit_id": "1a0f2edfdb55f275fbd8703782b59a9ec759f65f",
      "original_commit_id": "db0ea252a96c26fe820f806fbe3e844daddb89b3",
      "in_reply_to_id": 346006753,
      "user": {
        "login": "benma",
        "id": 1225267,
        "node_id": "MDQ6VXNlcjEyMjUyNjc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1225267?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/benma",
        "html_url": "https://github.com/benma",
        "followers_url": "https://api.github.com/users/benma/followers",
        "following_url": "https://api.github.com/users/benma/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/benma/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/benma/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/benma/subscriptions",
        "organizations_url": "https://api.github.com/users/benma/orgs",
        "repos_url": "https://api.github.com/users/benma/repos",
        "events_url": "https://api.github.com/users/benma/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/benma/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "edit: seems like `secp256k1_scalar_set_b32()` reduces modulo `n`\r\n\r\n~Generally a bit confused, I don't see \"modulo n\" reduction happening in signing nor verification despite it being part of the algorithm as described here:~\r\n\r\n~https://en.wikipedia.org/wiki/Elliptic_Curve_Digital_Signature_Algorithm~\r\n\r\n",
      "created_at": "2020-01-16T15:27:54Z",
      "updated_at": "2020-04-21T12:46:25Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/669#discussion_r367482223",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/367482223"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/669"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 58,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/367533463",
      "pull_request_review_id": 344064073,
      "id": 367533463,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzUzMzQ2Mw==",
      "diff_hunk": "@@ -0,0 +1,46 @@\n+/**********************************************************************\n+ * Copyright (c) 2019 Marko Bencun, Jonas Nick                        *\n+ * Distributed under the MIT software license, see the accompanying   *\n+ * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n+ **********************************************************************/\n+\n+#ifndef SECP256K1_MODULE_ECDSA_SIGN_TO_CONTRACT_MAIN_H\n+#define SECP256K1_MODULE_ECDSA_SIGN_TO_CONTRACT_MAIN_H\n+\n+#include \"include/secp256k1_ecdsa_sign_to_contract.h\"\n+\n+int secp256k1_ecdsa_s2c_sign(const secp256k1_context *ctx, secp256k1_ecdsa_signature *signature, secp256k1_s2c_opening *s2c_opening, const unsigned char *msg32, const unsigned char *seckey, const unsigned char* s2c_data32) {\n+    return secp256k1_ecdsa_sign_helper(ctx, signature, s2c_opening, msg32, seckey, s2c_data32, NULL, NULL);\n+}\n+\n+int secp256k1_ecdsa_s2c_verify_commit(const secp256k1_context* ctx, const secp256k1_ecdsa_signature *sig, const unsigned char *data32, const secp256k1_s2c_opening *opening) {\n+    secp256k1_pubkey commitment;\n+    secp256k1_ge commitment_ge;\n+    unsigned char x_bytes1[32];\n+    unsigned char x_bytes2[32];\n+    secp256k1_scalar sigr, sigs;\n+\n+    VERIFY_CHECK(ctx != NULL);\n+    ARG_CHECK(sig != NULL);\n+    ARG_CHECK(data32 != NULL);\n+    ARG_CHECK(opening != NULL);\n+    ARG_CHECK(secp256k1_s2c_commit_is_init(opening));\n+\n+    if (!secp256k1_ec_commit(ctx, &commitment, &opening->original_pubnonce, data32, 32)) {\n+        return 0;\n+    }\n+\n+    /* Check that sigr (x coordinate of R) matches the x coordinate of the commitment. */",
      "path": "src/modules/ecdsa_sign_to_contract/main_impl.h",
      "position": null,
      "original_position": 33,
      "commit_id": "1a0f2edfdb55f275fbd8703782b59a9ec759f65f",
      "original_commit_id": "db0ea252a96c26fe820f806fbe3e844daddb89b3",
      "in_reply_to_id": 346006753,
      "user": {
        "login": "benma",
        "id": 1225267,
        "node_id": "MDQ6VXNlcjEyMjUyNjc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1225267?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/benma",
        "html_url": "https://github.com/benma",
        "followers_url": "https://api.github.com/users/benma/followers",
        "following_url": "https://api.github.com/users/benma/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/benma/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/benma/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/benma/subscriptions",
        "organizations_url": "https://api.github.com/users/benma/orgs",
        "repos_url": "https://api.github.com/users/benma/repos",
        "events_url": "https://api.github.com/users/benma/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/benma/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Added one commit to extend the comment, and one to change to `secp256k1_scalar_eq()` to properly compare the values modulo `n`. The second comment about the reduced security will follow soon.",
      "created_at": "2020-01-16T16:51:56Z",
      "updated_at": "2020-04-21T12:46:25Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/669#discussion_r367533463",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/367533463"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/669"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 58,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/367909793",
      "pull_request_review_id": 344543499,
      "id": 367909793,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzkwOTc5Mw==",
      "diff_hunk": "@@ -0,0 +1,46 @@\n+/**********************************************************************\n+ * Copyright (c) 2019 Marko Bencun, Jonas Nick                        *\n+ * Distributed under the MIT software license, see the accompanying   *\n+ * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n+ **********************************************************************/\n+\n+#ifndef SECP256K1_MODULE_ECDSA_SIGN_TO_CONTRACT_MAIN_H\n+#define SECP256K1_MODULE_ECDSA_SIGN_TO_CONTRACT_MAIN_H\n+\n+#include \"include/secp256k1_ecdsa_sign_to_contract.h\"\n+\n+int secp256k1_ecdsa_s2c_sign(const secp256k1_context *ctx, secp256k1_ecdsa_signature *signature, secp256k1_s2c_opening *s2c_opening, const unsigned char *msg32, const unsigned char *seckey, const unsigned char* s2c_data32) {\n+    return secp256k1_ecdsa_sign_helper(ctx, signature, s2c_opening, msg32, seckey, s2c_data32, NULL, NULL);\n+}\n+\n+int secp256k1_ecdsa_s2c_verify_commit(const secp256k1_context* ctx, const secp256k1_ecdsa_signature *sig, const unsigned char *data32, const secp256k1_s2c_opening *opening) {\n+    secp256k1_pubkey commitment;\n+    secp256k1_ge commitment_ge;\n+    unsigned char x_bytes1[32];\n+    unsigned char x_bytes2[32];\n+    secp256k1_scalar sigr, sigs;\n+\n+    VERIFY_CHECK(ctx != NULL);\n+    ARG_CHECK(sig != NULL);\n+    ARG_CHECK(data32 != NULL);\n+    ARG_CHECK(opening != NULL);\n+    ARG_CHECK(secp256k1_s2c_commit_is_init(opening));\n+\n+    if (!secp256k1_ec_commit(ctx, &commitment, &opening->original_pubnonce, data32, 32)) {\n+        return 0;\n+    }\n+\n+    /* Check that sigr (x coordinate of R) matches the x coordinate of the commitment. */",
      "path": "src/modules/ecdsa_sign_to_contract/main_impl.h",
      "position": null,
      "original_position": 33,
      "commit_id": "1a0f2edfdb55f275fbd8703782b59a9ec759f65f",
      "original_commit_id": "db0ea252a96c26fe820f806fbe3e844daddb89b3",
      "in_reply_to_id": 346006753,
      "user": {
        "login": "benma",
        "id": 1225267,
        "node_id": "MDQ6VXNlcjEyMjUyNjc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1225267?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/benma",
        "html_url": "https://github.com/benma",
        "followers_url": "https://api.github.com/users/benma/followers",
        "following_url": "https://api.github.com/users/benma/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/benma/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/benma/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/benma/subscriptions",
        "organizations_url": "https://api.github.com/users/benma/orgs",
        "repos_url": "https://api.github.com/users/benma/repos",
        "events_url": "https://api.github.com/users/benma/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/benma/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> More importantly, there needs to be a sentence explaining why comparing the x coordinate is sufficient. For example, because there's only two y coordinates per x coordinate and given an opening for a point, it's as difficult finding an opening to the negation of the point as to any other point. However, I do think there's some reduction in security because it's more likely to find a collision with a point and it's negation.\r\n\r\nDone.",
      "created_at": "2020-01-17T12:21:44Z",
      "updated_at": "2020-04-21T12:46:25Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/669#discussion_r367909793",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/367909793"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/669"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 58,
      "side": "RIGHT"
    }
  ]
}