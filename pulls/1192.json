{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1192",
    "id": 1192931529,
    "node_id": "PR_kwDOAP4Jqs5HGrDJ",
    "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1192",
    "diff_url": "https://github.com/bitcoin-core/secp256k1/pull/1192.diff",
    "patch_url": "https://github.com/bitcoin-core/secp256k1/pull/1192.patch",
    "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1192",
    "commits_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1192/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1192/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1192/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin-core/secp256k1/statuses/ce60785b2654e60b43577dd75996b7020afbfec8",
    "number": 1192,
    "state": "closed",
    "locked": false,
    "maintainer_can_modify": false,
    "title": "Switch to exhaustive groups with small B coefficient",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "This has the advantage that in the future, multiplication with B can be done using `secp256k1_fe_mul_int` rather than the slower `secp256k1_fe_mul`.",
    "labels": [],
    "created_at": "2023-01-10T21:27:23Z",
    "updated_at": "2023-01-17T08:54:56Z",
    "closed_at": "2023-01-16T21:36:25Z",
    "mergeable_state": "unknown",
    "merged_at": "2023-01-16T21:36:25Z",
    "merge_commit_sha": "a01a7d86dc293116f4637e1d59838def94775672",
    "assignees": [],
    "requested_reviewers": [],
    "requested_teams": [],
    "head": {
      "label": "sipa:202301_small_b",
      "ref": "202301_small_b",
      "sha": "ce60785b2654e60b43577dd75996b7020afbfec8",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "repo": {
        "id": 16648672,
        "node_id": "MDEwOlJlcG9zaXRvcnkxNjY0ODY3Mg==",
        "name": "secp256k1",
        "full_name": "sipa/secp256k1",
        "owner": {
          "login": "sipa",
          "id": 548488,
          "node_id": "MDQ6VXNlcjU0ODQ4OA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/sipa",
          "html_url": "https://github.com/sipa",
          "followers_url": "https://api.github.com/users/sipa/followers",
          "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
          "organizations_url": "https://api.github.com/users/sipa/orgs",
          "repos_url": "https://api.github.com/users/sipa/repos",
          "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/sipa/received_events",
          "type": "User",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/sipa/secp256k1",
        "description": "Optimized C library for EC operations on curve secp256k1",
        "fork": true,
        "url": "https://api.github.com/repos/sipa/secp256k1",
        "archive_url": "https://api.github.com/repos/sipa/secp256k1/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/sipa/secp256k1/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/sipa/secp256k1/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/sipa/secp256k1/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/sipa/secp256k1/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/sipa/secp256k1/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/sipa/secp256k1/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/sipa/secp256k1/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/sipa/secp256k1/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/sipa/secp256k1/contributors",
        "deployments_url": "https://api.github.com/repos/sipa/secp256k1/deployments",
        "downloads_url": "https://api.github.com/repos/sipa/secp256k1/downloads",
        "events_url": "https://api.github.com/repos/sipa/secp256k1/events",
        "forks_url": "https://api.github.com/repos/sipa/secp256k1/forks",
        "git_commits_url": "https://api.github.com/repos/sipa/secp256k1/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/sipa/secp256k1/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/sipa/secp256k1/git/tags%7B/sha%7D",
        "git_url": "git://github.com/sipa/secp256k1.git",
        "issue_comment_url": "https://api.github.com/repos/sipa/secp256k1/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/sipa/secp256k1/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/sipa/secp256k1/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/sipa/secp256k1/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/sipa/secp256k1/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/sipa/secp256k1/languages",
        "merges_url": "https://api.github.com/repos/sipa/secp256k1/merges",
        "milestones_url": "https://api.github.com/repos/sipa/secp256k1/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/sipa/secp256k1/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/sipa/secp256k1/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/sipa/secp256k1/releases%7B/id%7D",
        "ssh_url": "git@github.com:sipa/secp256k1.git",
        "stargazers_url": "https://api.github.com/repos/sipa/secp256k1/stargazers",
        "statuses_url": "https://api.github.com/repos/sipa/secp256k1/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/sipa/secp256k1/subscribers",
        "subscription_url": "https://api.github.com/repos/sipa/secp256k1/subscription",
        "tags_url": "https://api.github.com/repos/sipa/secp256k1/tags",
        "teams_url": "https://api.github.com/repos/sipa/secp256k1/teams",
        "trees_url": "https://api.github.com/repos/sipa/secp256k1/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/sipa/secp256k1.git",
        "hooks_url": "https://api.github.com/repos/sipa/secp256k1/hooks",
        "svn_url": "https://github.com/sipa/secp256k1",
        "language": "C",
        "forks_count": 20,
        "stargazers_count": 43,
        "watchers_count": 43,
        "size": 11649,
        "default_branch": "master",
        "open_issues_count": 0,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": true,
        "has_wiki": true,
        "has_pages": false,
        "has_downloads": true,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-07-09T03:46:04Z",
        "created_at": "2014-02-08T17:33:30Z",
        "updated_at": "2023-05-11T11:08:51Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "base": {
      "label": "bitcoin-core:master",
      "ref": "master",
      "sha": "88e80722d2a13b01f666ae0f418a118062c2b9af",
      "user": {
        "login": "bitcoin-core",
        "id": 13464320,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjEzNDY0MzIw",
        "avatar_url": "https://avatars.githubusercontent.com/u/13464320?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin-core",
        "html_url": "https://github.com/bitcoin-core",
        "followers_url": "https://api.github.com/users/bitcoin-core/followers",
        "following_url": "https://api.github.com/users/bitcoin-core/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin-core/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin-core/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin-core/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin-core/orgs",
        "repos_url": "https://api.github.com/users/bitcoin-core/repos",
        "events_url": "https://api.github.com/users/bitcoin-core/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin-core/received_events",
        "type": "Organization",
        "site_admin": false
      },
      "repo": {
        "id": 16648618,
        "node_id": "MDEwOlJlcG9zaXRvcnkxNjY0ODYxOA==",
        "name": "secp256k1",
        "full_name": "bitcoin-core/secp256k1",
        "owner": {
          "login": "bitcoin-core",
          "id": 13464320,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjEzNDY0MzIw",
          "avatar_url": "https://avatars.githubusercontent.com/u/13464320?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin-core",
          "html_url": "https://github.com/bitcoin-core",
          "followers_url": "https://api.github.com/users/bitcoin-core/followers",
          "following_url": "https://api.github.com/users/bitcoin-core/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin-core/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin-core/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin-core/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin-core/orgs",
          "repos_url": "https://api.github.com/users/bitcoin-core/repos",
          "events_url": "https://api.github.com/users/bitcoin-core/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin-core/received_events",
          "type": "Organization",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/bitcoin-core/secp256k1",
        "description": "Optimized C library for EC operations on curve secp256k1",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1",
        "archive_url": "https://api.github.com/repos/bitcoin-core/secp256k1/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin-core/secp256k1/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin-core/secp256k1/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin-core/secp256k1/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin-core/secp256k1/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin-core/secp256k1/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin-core/secp256k1/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin-core/secp256k1/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin-core/secp256k1/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin-core/secp256k1/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin-core/secp256k1/downloads",
        "events_url": "https://api.github.com/repos/bitcoin-core/secp256k1/events",
        "forks_url": "https://api.github.com/repos/bitcoin-core/secp256k1/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin-core/secp256k1.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin-core/secp256k1/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin-core/secp256k1/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin-core/secp256k1/languages",
        "merges_url": "https://api.github.com/repos/bitcoin-core/secp256k1/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin-core/secp256k1/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin-core/secp256k1/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin-core/secp256k1/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin-core/secp256k1.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin-core/secp256k1/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin-core/secp256k1/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin-core/secp256k1/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin-core/secp256k1/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin-core/secp256k1/tags",
        "teams_url": "https://api.github.com/repos/bitcoin-core/secp256k1/teams",
        "trees_url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin-core/secp256k1.git",
        "hooks_url": "https://api.github.com/repos/bitcoin-core/secp256k1/hooks",
        "svn_url": "https://github.com/bitcoin-core/secp256k1",
        "language": "C",
        "forks_count": 962,
        "stargazers_count": 1802,
        "watchers_count": 1802,
        "size": 10374,
        "default_branch": "master",
        "open_issues_count": 145,
        "is_template": false,
        "topics": [],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": true,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-08-01T01:00:35Z",
        "created_at": "2014-02-08T17:30:06Z",
        "updated_at": "2023-08-01T08:52:35Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1192"
      }
    },
    "author_association": "CONTRIBUTOR",
    "draft": false,
    "additions": 161,
    "deletions": 115,
    "changed_files": 5,
    "commits": 2,
    "review_comments": 9,
    "comments": 6
  },
  "events": [
    {
      "event": "head_ref_force_pushed",
      "id": 8196039309,
      "node_id": "HRFPE_lADOAP4Jqs5bE-QezwAAAAHohaKN",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/8196039309",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-01-10T21:28:37Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 8196391569,
      "node_id": "HRFPE_lADOAP4Jqs5bE-QezwAAAAHoiwKR",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/8196391569",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-01-10T22:19:04Z"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-01-10T22:19:39Z",
      "updated_at": "2023-01-10T22:19:39Z",
      "source": {
        "issue": {
          "id": 1292383877,
          "node_id": "PR_kwDOAP4Jqs46weaa",
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1118",
          "repository_url": "https://api.github.com/repos/bitcoin-core/secp256k1",
          "labels_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1118/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1118/comments",
          "events_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1118/events",
          "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1118",
          "number": 1118,
          "state": "closed",
          "state_reason": null,
          "title": "Add x-only ecmult_const version with x specified as n/d",
          "body": "This implements a generalization of Peter Dettman's sqrt-less x-only random-base multiplication algorithm from #262, using the Jacobi symbol algorithm from #979. The generalization is to permit the X coordinate of the base point to be specified as a fraction $n/d$:\r\n\r\nTo compute $x(q \\cdot P)$, where $x(P) = n/d$:\r\n* Compute $g=n^3 + 7d^3$.\r\n* Let $P' = (ng, g^2, 1)$ (the Jacobian coordinates of $P$ mapped to the isomorphic curve $y^2 = x^3 + 7(dg)^3$).\r\n* Compute the Jacobian coordinates $(X',Y',Z') = q \\cdot P'$ on the isomorphic curve.\r\n* Return $X'/(dgZ'^2)$, which is the affine x coordinate on the isomorphic curve $X/Z'^2$ mapped back to secp256k1.\r\n\r\nThis ability to specify the X coordinate as a fraction is useful in the context of x-only [Elligator Swift](https://eprint.iacr.org/2022/759), which can decode to X coordinates on the curve without inversions this way.",
          "user": {
            "login": "sipa",
            "id": 548488,
            "node_id": "MDQ6VXNlcjU0ODQ4OA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sipa",
            "html_url": "https://github.com/sipa",
            "followers_url": "https://api.github.com/users/sipa/followers",
            "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
            "organizations_url": "https://api.github.com/users/sipa/orgs",
            "repos_url": "https://api.github.com/users/sipa/repos",
            "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/sipa/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": false,
          "comments": 12,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1118",
            "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1118",
            "diff_url": "https://github.com/bitcoin-core/secp256k1/pull/1118.diff",
            "patch_url": "https://github.com/bitcoin-core/secp256k1/pull/1118.patch"
          },
          "closed_at": "2023-04-10T06:24:18Z",
          "created_at": "2022-07-03T18:07:54Z",
          "updated_at": "2023-07-09T15:21:23Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "reviewed",
      "id": 1243506730,
      "node_id": "PRR_kwDOAP4Jqs5KHmgq",
      "url": null,
      "actor": null,
      "commit_id": "28cba925eb8d6b434604595fad92bd9e1da54913",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Great :)\r\n\r\nThis should touch also touch the exhaustive tests code touched in https://github.com/bitcoin-core/secp256k1/commit/b110c106fa9704e30f6b0c2ffa6a2697031e89a8, at least the comments.\r\n\r\n",
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1192#pullrequestreview-1243506730",
      "submitted_at": "2023-01-11T09:10:32Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1192"
    },
    {
      "event": "reviewed",
      "id": 1243992044,
      "node_id": "PRR_kwDOAP4Jqs5KJc_s",
      "url": null,
      "actor": null,
      "commit_id": "28cba925eb8d6b434604595fad92bd9e1da54913",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "ACK 28cba925eb8d6b434604595fad92bd9e1da54913",
      "user": {
        "login": "apoelstra",
        "id": 1351933,
        "node_id": "MDQ6VXNlcjEzNTE5MzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1351933?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/apoelstra",
        "html_url": "https://github.com/apoelstra",
        "followers_url": "https://api.github.com/users/apoelstra/followers",
        "following_url": "https://api.github.com/users/apoelstra/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/apoelstra/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/apoelstra/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/apoelstra/subscriptions",
        "organizations_url": "https://api.github.com/users/apoelstra/orgs",
        "repos_url": "https://api.github.com/users/apoelstra/repos",
        "events_url": "https://api.github.com/users/apoelstra/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/apoelstra/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1192#pullrequestreview-1243992044",
      "submitted_at": "2023-01-11T14:17:13Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1192"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 8205417774,
      "node_id": "HRFPE_lADOAP4Jqs5bE-QezwAAAAHpFL0u",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/8205417774",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-01-11T20:58:02Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 8205430198,
      "node_id": "HRFPE_lADOAP4Jqs5bE-QezwAAAAHpFO22",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/8205430198",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-01-11T21:00:05Z"
    },
    {
      "event": "reviewed",
      "id": 1244775842,
      "node_id": "PRR_kwDOAP4Jqs5KMcWi",
      "url": null,
      "actor": null,
      "commit_id": "d4cf3f2da1e35118ede5b682082827f7d0393334",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "ACK d4cf3f2da1e35118ede5b682082827f7d0393334",
      "user": {
        "login": "apoelstra",
        "id": 1351933,
        "node_id": "MDQ6VXNlcjEzNTE5MzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1351933?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/apoelstra",
        "html_url": "https://github.com/apoelstra",
        "followers_url": "https://api.github.com/users/apoelstra/followers",
        "following_url": "https://api.github.com/users/apoelstra/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/apoelstra/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/apoelstra/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/apoelstra/subscriptions",
        "organizations_url": "https://api.github.com/users/apoelstra/orgs",
        "repos_url": "https://api.github.com/users/apoelstra/repos",
        "events_url": "https://api.github.com/users/apoelstra/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/apoelstra/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1192#pullrequestreview-1244775842",
      "submitted_at": "2023-01-11T23:45:30Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1192"
    },
    {
      "event": "commented",
      "id": 1380195862,
      "node_id": "IC_kwDOAP4Jqs5SRB4W",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/1380195862",
      "actor": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-01-12T11:34:01Z",
      "updated_at": "2023-01-12T11:34:01Z",
      "author_association": "CONTRIBUTOR",
      "body": "When running the sage script locally, I noticed that it outputs a group of order 7, too. Did you omit this on purpose when copying the output of the script the C files?\r\n\r\nAnyway, the exhaustive tests break don't compile for this order of 7. Here's a branch that fixes this problem and also has fixups (please squash) to your commits which include the 7 group (plus further formatting nits, what I actually had in mind here https://github.com/bitcoin-core/secp256k1/pull/1192#discussion_r1066739496): https://github.com/real-or-random/secp256k1/commits/202301_small_b\r\n\r\nThis comment of mine is still unaddressed:\r\n\r\n> This should touch also touch the exhaustive tests code touched in [b110c10](https://github.com/bitcoin-core/secp256k1/commit/b110c106fa9704e30f6b0c2ffa6a2697031e89a8), at least the comments.\r\n\r\n\r\nSorry, I didn't foresee that my comment about using `mul_int` in #1118 gets us sidetracked so much... ^^",
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1192#issuecomment-1380195862",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1192"
    },
    {
      "event": "commented",
      "id": 1382315250,
      "node_id": "IC_kwDOAP4Jqs5SZHTy",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/1382315250",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-01-13T19:44:49Z",
      "updated_at": "2023-01-13T19:49:48Z",
      "author_association": "CONTRIBUTOR",
      "body": "> When running the sage script locally, I noticed that it outputs a group of order 7, too. Did you omit this on purpose when copying the output of the script the C files?\r\n\r\nNo, for me the output does not include size 7:\r\n\r\n```\r\nAnalyzing curve y^2 = x^3 + 6\r\n- Finding subgroups\r\n- Analyzing subgroup of order 2\r\n  - Bad size\r\n- Analyzing subgroup of order 7\r\n  - No endomorphism for this subgroup\r\n- Analyzing subgroup of order 2\r\n  - Bad size\r\n...\r\n```\r\n\r\n> Anyway, the exhaustive tests break don't compile for this order of 7. Here's a branch that fixes this problem and also has fixups (please squash) to your commits which include the 7 group (plus further formatting nits, what I actually had in mind here https://github.com/bitcoin-core/secp256k1/pull/1192#discussion_r1066739496): https://github.com/real-or-random/secp256k1/commits/202301_small_b\r\n\r\nBizarre that 7 actually works (your branch compiles, and the exhaustive tests pass...).\r\n\r\n> This comment of mine is still unaddressed:\r\n>\r\n>> This should touch also touch the exhaustive tests code touched in [b110c10](https://github.com/bitcoin-core/secp256k1/commit/b110c106fa9704e30f6b0c2ffa6a2697031e89a8), at least the comments.\r\n\r\nI have no idea what you're trying to say.\r\n",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1192#issuecomment-1382315250",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1192"
    },
    {
      "event": "commented",
      "id": 1382377263,
      "node_id": "IC_kwDOAP4Jqs5SZWcv",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/1382377263",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-01-13T20:55:51Z",
      "updated_at": "2023-01-13T20:55:51Z",
      "author_association": "CONTRIBUTOR",
      "body": "> Bizarre that 7 actually works (your branch compiles, and the exhaustive tests pass...).\r\n\r\nFound it!\r\n\r\n`y^2 = x^3 + 6` actually has *two* subgroups of order 7, leading to 48 valid generators. Only 12 of those generators generate a group which admit a GLV endomorphism. Apparently Sage versions report different generators, which means the code in this PR may or may not find a GLV-compatible one. Fixing.",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1192#issuecomment-1382377263",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1192"
    },
    {
      "event": "commented",
      "id": 1382395278,
      "node_id": "IC_kwDOAP4Jqs5SZa2O",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/1382395278",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-01-13T21:11:39Z",
      "updated_at": "2023-01-13T21:11:39Z",
      "author_association": "CONTRIBUTOR",
      "body": "> I have no idea what you're trying to say.\r\n\r\nOh, I had missed you were talking about the C code touched there. Indeed, will address.",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1192#issuecomment-1382395278",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1192"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAP4JqtoAKDQ5MzRhYTc5OTU4YjUwNmE2ZTljZmNmZTMwYThmNjg1ZGIzZjVmNWY",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/4934aa79958b506a6e9cfcfe30a8f685db3f5f5f",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/4934aa79958b506a6e9cfcfe30a8f685db3f5f5f",
      "tree": {
        "sha": "7731c8ea5fa96121c7ce6e76f8f665208da3aede",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/7731c8ea5fa96121c7ce6e76f8f665208da3aede"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/88e80722d2a13b01f666ae0f418a118062c2b9af",
          "sha": "88e80722d2a13b01f666ae0f418a118062c2b9af",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/88e80722d2a13b01f666ae0f418a118062c2b9af"
        }
      ],
      "message": "Switch to exhaustive groups with small B coefficient",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2023-01-13T22:05:35Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2023-01-10T21:10:45Z"
      },
      "sha": "4934aa79958b506a6e9cfcfe30a8f685db3f5f5f"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAP4JqtoAKGNlNjA3ODViMjY1NGU2MGI0MzU3N2RkNzU5OTZiNzAyMGFmYmZlYzg",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/ce60785b2654e60b43577dd75996b7020afbfec8",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/secp256k1/commit/ce60785b2654e60b43577dd75996b7020afbfec8",
      "tree": {
        "sha": "0d77a7e963fd89902f8bdc8135b95d9cc0f5d1ce",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/trees/0d77a7e963fd89902f8bdc8135b95d9cc0f5d1ce"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/git/commits/4934aa79958b506a6e9cfcfe30a8f685db3f5f5f",
          "sha": "4934aa79958b506a6e9cfcfe30a8f685db3f5f5f",
          "html_url": "https://github.com/bitcoin-core/secp256k1/commit/4934aa79958b506a6e9cfcfe30a8f685db3f5f5f"
        }
      ],
      "message": "Introduce SECP256K1_B macro for curve b coefficient",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2023-01-13T22:05:39Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2023-01-10T21:23:32Z"
      },
      "sha": "ce60785b2654e60b43577dd75996b7020afbfec8"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 8224773989,
      "node_id": "HRFPE_lADOAP4Jqs5bE-QezwAAAAHqPBdl",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/8224773989",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-01-13T22:05:47Z"
    },
    {
      "event": "commented",
      "id": 1382448523,
      "node_id": "IC_kwDOAP4Jqs5SZn2L",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/1382448523",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-01-13T22:09:33Z",
      "updated_at": "2023-01-13T22:09:33Z",
      "author_association": "CONTRIBUTOR",
      "body": "Addressed comments, I think.",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1192#issuecomment-1382448523",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1192"
    },
    {
      "event": "reviewed",
      "id": 1250626996,
      "node_id": "PRR_kwDOAP4Jqs5Kiw20",
      "url": null,
      "actor": null,
      "commit_id": "ce60785b2654e60b43577dd75996b7020afbfec8",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "ACK ce60785b2654e60b43577dd75996b7020afbfec8 also ran the exhaustive tests with the group of size 7\r\n\r\nI still think that https://github.com/real-or-random/secp256k1/commit/7eef8f4a305a72567db0b563260081712304b5fb is a good cleanup but we can also add it after this PR\r\n\r\nedit: I guess we want to stick with the group of size 13 as a default? It's reasonably fast.",
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1192#pullrequestreview-1250626996",
      "submitted_at": "2023-01-16T20:07:17Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1192"
    },
    {
      "event": "reviewed",
      "id": 1250662260,
      "node_id": "PRR_kwDOAP4Jqs5Ki5d0",
      "url": null,
      "actor": null,
      "commit_id": "ce60785b2654e60b43577dd75996b7020afbfec8",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "ACK ce60785b2654e60b43577dd75996b7020afbfec8",
      "user": {
        "login": "apoelstra",
        "id": 1351933,
        "node_id": "MDQ6VXNlcjEzNTE5MzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1351933?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/apoelstra",
        "html_url": "https://github.com/apoelstra",
        "followers_url": "https://api.github.com/users/apoelstra/followers",
        "following_url": "https://api.github.com/users/apoelstra/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/apoelstra/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/apoelstra/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/apoelstra/subscriptions",
        "organizations_url": "https://api.github.com/users/apoelstra/orgs",
        "repos_url": "https://api.github.com/users/apoelstra/repos",
        "events_url": "https://api.github.com/users/apoelstra/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/apoelstra/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1192#pullrequestreview-1250662260",
      "submitted_at": "2023-01-16T21:04:50Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1192"
    },
    {
      "event": "merged",
      "id": 8240214587,
      "node_id": "ME_lADOAP4Jqs5bE-QezwAAAAHrJ7I7",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/8240214587",
      "actor": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "a01a7d86dc293116f4637e1d59838def94775672",
      "commit_url": "https://api.github.com/repos/bitcoin-core/secp256k1/commits/a01a7d86dc293116f4637e1d59838def94775672",
      "created_at": "2023-01-16T21:36:25Z"
    },
    {
      "event": "closed",
      "id": 8240214597,
      "node_id": "CE_lADOAP4Jqs5bE-QezwAAAAHrJ7JF",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/8240214597",
      "actor": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-01-16T21:36:25Z"
    },
    {
      "event": "commented",
      "id": 1385044563,
      "node_id": "IC_kwDOAP4Jqs5SjhpT",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/1385044563",
      "actor": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-01-17T08:54:56Z",
      "updated_at": "2023-01-17T08:54:56Z",
      "author_association": "CONTRIBUTOR",
      "body": "For our future curious minds:\r\n\r\n```\r\n00:44 <sipa> Let G1 and G2 be generators of the two endomorphism-compatible order-7 subgroups.\r\n00:46 <sipa> Let C_i be the subgroup consisting of itG1 + tG2 for t=0..6 (with i=infinity for the group consisting of tG1).\r\n00:47 <sipa> Then beta*C_i lands you in C_{2i}.\r\n00:47 <sipa> If i=0 or i=inf, it's an endomorphism.\r\n01:20 <sipa> Ah! And there is a much simpler explanation.\r\n01:21 <sipa> With the same two generators G1,G2 above, beta-multiplying a*G1 + b*G2 gives 2*a*G1 + 4*b*G2.\r\n01:21 <sipa> If you started off with a*G1, you get twice your input, so lambda=2.\r\n01:22 <sipa> If you started off with b*G2, you get 4 times your input, so lambda=4.\r\n01:22 <sipa> But if you started off with a linear combination with non-zero contributions from both, you get a different linear combination that's not a pure multiple back.\r\n01:24 <sipa> Put otherwise, for any independent generators G1,G2 of the order-49 subgroup, if you think of the elements as vectors with basis G1,G2, then beta-multiplication is effectively a linear transformation on those vectors.\r\n01:24 <sipa> That linear transformation has eigenvalues 2 and 4.\r\n01:25 <sipa> The subgroup consisting of eigenvectors corresponding to eigenvalue 2 is the subgroup in which the endomorphism works, with lambda=2.\r\n01:25 <sipa> Same with eigenvalue 4.\r\n```\r\n\r\nhttps://gnusha.org/secp256k1/2023-01-16.log",
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1192#issuecomment-1385044563",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1192"
    },
    {
      "event": "referenced",
      "id": 8415740081,
      "node_id": "REFE_lADOAP4Jqs5bE-QezwAAAAH1ngCx",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/8415740081",
      "actor": {
        "login": "dhruv",
        "id": 856960,
        "node_id": "MDQ6VXNlcjg1Njk2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/856960?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dhruv",
        "html_url": "https://github.com/dhruv",
        "followers_url": "https://api.github.com/users/dhruv/followers",
        "following_url": "https://api.github.com/users/dhruv/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dhruv/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dhruv/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dhruv/subscriptions",
        "organizations_url": "https://api.github.com/users/dhruv/orgs",
        "repos_url": "https://api.github.com/users/dhruv/repos",
        "events_url": "https://api.github.com/users/dhruv/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dhruv/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "4d33046ce304c373b43159cd56e34264119a1b34",
      "commit_url": "https://api.github.com/repos/dhruv/bitcoin-core-ci/commits/4d33046ce304c373b43159cd56e34264119a1b34",
      "created_at": "2023-02-01T23:53:05Z"
    },
    {
      "event": "referenced",
      "id": 8415768397,
      "node_id": "REFE_lADOAP4Jqs5bE-QezwAAAAH1nm9N",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/8415768397",
      "actor": {
        "login": "dhruv",
        "id": 856960,
        "node_id": "MDQ6VXNlcjg1Njk2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/856960?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dhruv",
        "html_url": "https://github.com/dhruv",
        "followers_url": "https://api.github.com/users/dhruv/followers",
        "following_url": "https://api.github.com/users/dhruv/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dhruv/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dhruv/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dhruv/subscriptions",
        "organizations_url": "https://api.github.com/users/dhruv/orgs",
        "repos_url": "https://api.github.com/users/dhruv/repos",
        "events_url": "https://api.github.com/users/dhruv/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dhruv/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "55e7f2cf2b7ae0619200040fdf52e4d71f3162d2",
      "commit_url": "https://api.github.com/repos/dhruv/bitcoin-core-ci/commits/55e7f2cf2b7ae0619200040fdf52e4d71f3162d2",
      "created_at": "2023-02-02T00:00:05Z"
    },
    {
      "event": "referenced",
      "id": 8449690478,
      "node_id": "REFE_lADOAP4Jqs5bE-QezwAAAAH3pAtu",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/8449690478",
      "actor": {
        "login": "stratospher",
        "id": 44024636,
        "node_id": "MDQ6VXNlcjQ0MDI0NjM2",
        "avatar_url": "https://avatars.githubusercontent.com/u/44024636?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stratospher",
        "html_url": "https://github.com/stratospher",
        "followers_url": "https://api.github.com/users/stratospher/followers",
        "following_url": "https://api.github.com/users/stratospher/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stratospher/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stratospher/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stratospher/subscriptions",
        "organizations_url": "https://api.github.com/users/stratospher/orgs",
        "repos_url": "https://api.github.com/users/stratospher/repos",
        "events_url": "https://api.github.com/users/stratospher/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stratospher/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "647f63669eb22643802f3c6b8f79df1b6e8b9d45",
      "commit_url": "https://api.github.com/repos/stratospher/bitcoin/commits/647f63669eb22643802f3c6b8f79df1b6e8b9d45",
      "created_at": "2023-02-06T17:00:48Z"
    },
    {
      "event": "referenced",
      "id": 8565541657,
      "node_id": "REFE_lADOAP4Jqs5bE-QezwAAAAH-i8sZ",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/8565541657",
      "actor": {
        "login": "dhruv",
        "id": 856960,
        "node_id": "MDQ6VXNlcjg1Njk2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/856960?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dhruv",
        "html_url": "https://github.com/dhruv",
        "followers_url": "https://api.github.com/users/dhruv/followers",
        "following_url": "https://api.github.com/users/dhruv/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dhruv/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dhruv/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dhruv/subscriptions",
        "organizations_url": "https://api.github.com/users/dhruv/orgs",
        "repos_url": "https://api.github.com/users/dhruv/repos",
        "events_url": "https://api.github.com/users/dhruv/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dhruv/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "a4351c0df65e57cd606f83afed8e04831a81e897",
      "commit_url": "https://api.github.com/repos/dhruv/bitcoin-core-ci/commits/a4351c0df65e57cd606f83afed8e04831a81e897",
      "created_at": "2023-02-20T23:18:21Z"
    },
    {
      "event": "referenced",
      "id": 8574947810,
      "node_id": "REFE_lADOAP4Jqs5bE-QezwAAAAH_G1Hi",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/8574947810",
      "actor": {
        "login": "stratospher",
        "id": 44024636,
        "node_id": "MDQ6VXNlcjQ0MDI0NjM2",
        "avatar_url": "https://avatars.githubusercontent.com/u/44024636?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stratospher",
        "html_url": "https://github.com/stratospher",
        "followers_url": "https://api.github.com/users/stratospher/followers",
        "following_url": "https://api.github.com/users/stratospher/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stratospher/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stratospher/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stratospher/subscriptions",
        "organizations_url": "https://api.github.com/users/stratospher/orgs",
        "repos_url": "https://api.github.com/users/stratospher/repos",
        "events_url": "https://api.github.com/users/stratospher/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stratospher/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "23f825fc8b5a374ee22fd0b3f2579d239c90f54c",
      "commit_url": "https://api.github.com/repos/stratospher/bitcoin/commits/23f825fc8b5a374ee22fd0b3f2579d239c90f54c",
      "created_at": "2023-02-21T21:04:59Z"
    },
    {
      "event": "referenced",
      "id": 8687167915,
      "node_id": "REFE_lADOAP4Jqs5bE-QezwAAAAIFy6mr",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/8687167915",
      "actor": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "7c0cc5d976910145fa5771e9b5eb07271fe96cfc",
      "commit_url": "https://api.github.com/repos/hebasto/bitcoin/commits/7c0cc5d976910145fa5771e9b5eb07271fe96cfc",
      "created_at": "2023-03-07T15:24:30Z"
    },
    {
      "event": "referenced",
      "id": 8691097733,
      "node_id": "REFE_lADOAP4Jqs5bE-QezwAAAAIGB6CF",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/8691097733",
      "actor": {
        "login": "dhruv",
        "id": 856960,
        "node_id": "MDQ6VXNlcjg1Njk2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/856960?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dhruv",
        "html_url": "https://github.com/dhruv",
        "followers_url": "https://api.github.com/users/dhruv/followers",
        "following_url": "https://api.github.com/users/dhruv/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dhruv/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dhruv/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dhruv/subscriptions",
        "organizations_url": "https://api.github.com/users/dhruv/orgs",
        "repos_url": "https://api.github.com/users/dhruv/repos",
        "events_url": "https://api.github.com/users/dhruv/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dhruv/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "a5df79db12ea656a23f883194056ba60191fcf3a",
      "commit_url": "https://api.github.com/repos/dhruv/bitcoin-core-ci/commits/a5df79db12ea656a23f883194056ba60191fcf3a",
      "created_at": "2023-03-07T22:33:09Z"
    },
    {
      "event": "referenced",
      "id": 8691141484,
      "node_id": "REFE_lADOAP4Jqs5bE-QezwAAAAIGCEts",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/8691141484",
      "actor": {
        "login": "dhruv",
        "id": 856960,
        "node_id": "MDQ6VXNlcjg1Njk2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/856960?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dhruv",
        "html_url": "https://github.com/dhruv",
        "followers_url": "https://api.github.com/users/dhruv/followers",
        "following_url": "https://api.github.com/users/dhruv/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dhruv/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dhruv/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dhruv/subscriptions",
        "organizations_url": "https://api.github.com/users/dhruv/orgs",
        "repos_url": "https://api.github.com/users/dhruv/repos",
        "events_url": "https://api.github.com/users/dhruv/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dhruv/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "77b510d84ce6e2db2b3a90acd96b34a441fa797f",
      "commit_url": "https://api.github.com/repos/dhruv/bitcoin-core-ci/commits/77b510d84ce6e2db2b3a90acd96b34a441fa797f",
      "created_at": "2023-03-07T22:40:10Z"
    },
    {
      "event": "referenced",
      "id": 8701394461,
      "node_id": "REFE_lADOAP4Jqs5bE-QezwAAAAIGpL4d",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/8701394461",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "763079a3f1b937f54e3c2d4166d296f596f7be1b",
      "commit_url": "https://api.github.com/repos/sipa/bitcoin/commits/763079a3f1b937f54e3c2d4166d296f596f7be1b",
      "created_at": "2023-03-08T22:42:59Z"
    },
    {
      "event": "referenced",
      "id": 8748930169,
      "node_id": "REFE_lADOAP4Jqs5bE-QezwAAAAIJehR5",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/8748930169",
      "actor": {
        "login": "div72",
        "id": 60045611,
        "node_id": "MDQ6VXNlcjYwMDQ1NjEx",
        "avatar_url": "https://avatars.githubusercontent.com/u/60045611?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/div72",
        "html_url": "https://github.com/div72",
        "followers_url": "https://api.github.com/users/div72/followers",
        "following_url": "https://api.github.com/users/div72/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/div72/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/div72/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/div72/subscriptions",
        "organizations_url": "https://api.github.com/users/div72/orgs",
        "repos_url": "https://api.github.com/users/div72/repos",
        "events_url": "https://api.github.com/users/div72/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/div72/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "945b09457569a68ff338368a99234bd8473da1bf",
      "commit_url": "https://api.github.com/repos/div72/Gridcoin-Research/commits/945b09457569a68ff338368a99234bd8473da1bf",
      "created_at": "2023-03-14T22:14:01Z"
    },
    {
      "event": "referenced",
      "id": 9425177771,
      "node_id": "REFE_lADOAP4Jqs5bE-QezwAAAAIxyMyr",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/9425177771",
      "actor": {
        "login": "vmta",
        "id": 23269741,
        "node_id": "MDQ6VXNlcjIzMjY5NzQx",
        "avatar_url": "https://avatars.githubusercontent.com/u/23269741?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vmta",
        "html_url": "https://github.com/vmta",
        "followers_url": "https://api.github.com/users/vmta/followers",
        "following_url": "https://api.github.com/users/vmta/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vmta/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vmta/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vmta/subscriptions",
        "organizations_url": "https://api.github.com/users/vmta/orgs",
        "repos_url": "https://api.github.com/users/vmta/repos",
        "events_url": "https://api.github.com/users/vmta/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vmta/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "e1120c94a1fe2208bfe6c939b4f67f6d37ce931c",
      "commit_url": "https://api.github.com/repos/umkoin/umkoin/commits/e1120c94a1fe2208bfe6c939b4f67f6d37ce931c",
      "created_at": "2023-06-04T15:42:07Z"
    },
    {
      "event": "referenced",
      "id": 9696152731,
      "node_id": "REFE_lADOAP4Jqs5bE-QezwAAAAJB74yb",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/9696152731",
      "actor": {
        "login": "vmta",
        "id": 23269741,
        "node_id": "MDQ6VXNlcjIzMjY5NzQx",
        "avatar_url": "https://avatars.githubusercontent.com/u/23269741?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vmta",
        "html_url": "https://github.com/vmta",
        "followers_url": "https://api.github.com/users/vmta/followers",
        "following_url": "https://api.github.com/users/vmta/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vmta/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vmta/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vmta/subscriptions",
        "organizations_url": "https://api.github.com/users/vmta/orgs",
        "repos_url": "https://api.github.com/users/vmta/repos",
        "events_url": "https://api.github.com/users/vmta/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vmta/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "8f03457eede9abfd1d7a0d26abc379a710e16755",
      "commit_url": "https://api.github.com/repos/umkoin/umkoin/commits/8f03457eede9abfd1d7a0d26abc379a710e16755",
      "created_at": "2023-07-01T12:32:50Z"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-07-20T16:31:02Z",
      "updated_at": "2023-07-20T16:31:02Z",
      "source": {
        "issue": {
          "id": 1814391231,
          "node_id": "PR_kwDOAjZbZs5WBg2K",
          "url": "https://api.github.com/repos/BlockstreamResearch/secp256k1-zkp/issues/249",
          "repository_url": "https://api.github.com/repos/BlockstreamResearch/secp256k1-zkp",
          "labels_url": "https://api.github.com/repos/BlockstreamResearch/secp256k1-zkp/issues/249/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/BlockstreamResearch/secp256k1-zkp/issues/249/comments",
          "events_url": "https://api.github.com/repos/BlockstreamResearch/secp256k1-zkp/issues/249/events",
          "html_url": "https://github.com/BlockstreamResearch/secp256k1-zkp/pull/249",
          "number": 249,
          "state": "closed",
          "state_reason": null,
          "title": "Upstream PRs 1160, 1193, 1169, 1190, 1192, 1194, 1196, 1195, 1170, 1172, 1200, 1199, 1203, 1201, 1206, 1078, 1209, 979, 1212, 1218, 1217, 1221, 1222",
          "body": "[bitcoin-core/secp256k1#1160]: Makefile: add `-I$(top_srcdir)/{include,src}` to `CPPFLAGS` for precomputed\r\n[bitcoin-core/secp256k1#1193]: Add `noverify_tests` to `.gitignore`\r\n[bitcoin-core/secp256k1#1169]: Add support for msan instead of valgrind (for memcheck and ctime test)\r\n[bitcoin-core/secp256k1#1190]: Make all non-API functions (except main) static\r\n[bitcoin-core/secp256k1#1192]: Switch to exhaustive groups with small B coefficient\r\n[bitcoin-core/secp256k1#1194]: Ensure safety of ctz_debruijn implementation.\r\n[bitcoin-core/secp256k1#1196]: Drop no longer used variables from the build system\r\n[bitcoin-core/secp256k1#1195]: ctime_tests: improve output when CHECKMEM_RUNNING is not defined\r\n[bitcoin-core/secp256k1#1170]: contexts: Forbid destroying, cloning and randomizing the static context\r\n[bitcoin-core/secp256k1#1172]: benchmarks: fix bench_scalar_split\r\n[bitcoin-core/secp256k1#1200]: Drop no longer used Autoheader macros\r\n[bitcoin-core/secp256k1#1199]: ci: Minor improvements inspired by Bitcoin Core\r\n[bitcoin-core/secp256k1#1203]: Do not link `bench` and `ctime_tests` to `COMMON_LIB`\r\n[bitcoin-core/secp256k1#1201]: ci: Do not set git's `user.{email,name}` config options\r\n[bitcoin-core/secp256k1#1206]: build: Add -Wreserved-identifier supported by clang\r\n[bitcoin-core/secp256k1#1078]: group: Save a normalize_to_zero in gej_add_ge\r\n[bitcoin-core/secp256k1#1209]: build: Add SECP256K1_API_VAR to fix importing variables from DLLs\r\n[bitcoin-core/secp256k1#979]: Native jacobi symbol algorithm\r\n[bitcoin-core/secp256k1#1212]: Prevent dead-store elimination when clearing secrets in examples\r\n[bitcoin-core/secp256k1#1218]: Update overflow check\r\n[bitcoin-core/secp256k1#1217]: Add secp256k1_fe_add_int function\r\n[bitcoin-core/secp256k1#1221]: Update Changelog\r\n[bitcoin-core/secp256k1#1222]: Remove redundant checks.\r\n\r\n- made -zkp functions static where possible\r\n- CTIMETEST -> CTIMETESTS\r\n- VG_CHECK_VERIFY(r->n, sizeof(r->n)); -> SECP256K1_CHECKMEM_CHECK_VERIFY\r\n\r\nThe next PR introduces cmake.",
          "user": {
            "login": "jonasnick",
            "id": 2582071,
            "node_id": "MDQ6VXNlcjI1ODIwNzE=",
            "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jonasnick",
            "html_url": "https://github.com/jonasnick",
            "followers_url": "https://api.github.com/users/jonasnick/followers",
            "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
            "organizations_url": "https://api.github.com/users/jonasnick/orgs",
            "repos_url": "https://api.github.com/users/jonasnick/repos",
            "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/jonasnick/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": false,
          "comments": 0,
          "pull_request": {
            "url": "https://api.github.com/repos/BlockstreamResearch/secp256k1-zkp/pulls/249",
            "html_url": "https://github.com/BlockstreamResearch/secp256k1-zkp/pull/249",
            "diff_url": "https://github.com/BlockstreamResearch/secp256k1-zkp/pull/249.diff",
            "patch_url": "https://github.com/BlockstreamResearch/secp256k1-zkp/pull/249.patch"
          },
          "closed_at": "2023-07-21T13:29:08Z",
          "created_at": "2023-07-20T16:31:02Z",
          "updated_at": "2023-07-21T13:29:08Z"
        },
        "type": "issue"
      }
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1066725708",
      "pull_request_review_id": 1243506730,
      "id": 1066725708,
      "node_id": "PRRC_kwDOAP4Jqs4_lPFM",
      "diff_hunk": "@@ -1,120 +1,121 @@\n load(\"secp256k1_params.sage\")\n \n+MAX_ORDER = 1000\n+\n+# Set of (curve) orders we have encountered so far.\n orders_done = set()\n-results = {}\n-first = True\n+\n+# Map from (subgroup) orders to [b, int(gen.x), int(gen.y), gen, lambda] for those subgroups.\n+gens = {}\n+\n+# Iterate over curves of the form y^2 = x^3 + B.\n for b in range(1, P):\n-    # There are only 6 curves (up to isomorphism) of the form y^2=x^3+B. Stop once we have tried all.\n+    # There are only 6 curves (up to isomorphism) of the form y^2 = x^3 + B. Stop once we have tried all.\n     if len(orders_done) == 6:\n         break\n \n     E = EllipticCurve(F, [0, b])\n     print(\"Analyzing curve y^2 = x^3 + %i\" % b)\n     n = E.order()\n+\n     # Skip curves with an order we've already tried\n     if n in orders_done:\n         print(\"- Isomorphic to earlier curve\")\n         continue\n     orders_done.add(n)\n+\n     # Skip curves isomorphic to the real secp256k1\n     if n.is_pseudoprime():\n         print(\" - Isomorphic to secp256k1\")\n         continue\n \n     print(\"- Finding subgroups\")\n \n-    # Find what prime subgroups exist\n-    for f, _ in n.factor():\n-        print(\"- Analyzing subgroup of order %i\" % f)\n-        # Skip subgroups of order >1000\n-        if f < 4 or f > 1000:\n-            print(\"  - Bad size\")\n-            continue\n-\n-        # Iterate over X coordinates until we find one that is on the curve, has order f,\n-        # and for which curve isomorphism exists that maps it to X coordinate 1.\n-        for x in range(1, P):\n-            # Skip X coordinates not on the curve, and construct the full point otherwise.\n-            if not E.is_x_coord(x):\n+    # Iterate over the generators of this curve.\n+    for g in E.gens():\n+        # Find what prime subgroups of group generated by g exist.\n+        g_order = g.order()\n+        for f, _ in g.order().factor():\n+            print(\"- Analyzing subgroup of order %i\" % f)\n+            # Skip subgroups that are too large.\n+            if f < 4 or f > MAX_ORDER:\n+                print(\"  - Bad size\")\n                 continue\n-            G = E.lift_x(F(x))\n \n-            print(\"  - Analyzing (multiples of) point with X=%i\" % x)\n-\n-            # Skip points whose order is not a multiple of f. Project the point to have\n-            # order f otherwise.\n-            if (G.order() % f):\n-                print(\"    - Bad order\")\n-                continue\n-            G = G * (G.order() // f)\n+            # Construct a generator for that subgroup.\n+            gen = g * (g_order // f)\n+            assert(gen.order() == f)\n \n             # Find lambda for endomorphism. Skip if none can be found.\n             lam = None\n             for l in Integers(f)(1).nth_root(3, all=True):\n-                if int(l)*G == E(BETA*G[0], G[1]):\n+                if int(l)*gen == E(BETA*gen[0], gen[1]):\n                     lam = int(l)\n                     break\n             if lam is None:\n-                print(\"    - No endomorphism for this subgroup\")\n+                print(\"  - No endomorphism for this subgroup\")\n                 break\n \n-            # Now look for an isomorphism of the curve that gives this point an X\n-            # coordinate equal to 1.\n-            # If (x,y) is on y^2 = x^3 + b, then (a^2*x, a^3*y) is on y^2 = x^3 + a^6*b.\n-            # So look for m=a^2=1/x.\n-            m = F(1)/G[0]\n-            if not m.is_square():\n-                print(\"    - No curve isomorphism maps it to a point with X=1\")\n-                continue\n-            a = m.sqrt()\n-            rb = a^6*b\n-            RE = EllipticCurve(F, [0, rb])\n-\n-            # Use as generator twice the image of G under the above isormorphism.\n-            # This means that generator*(1/2 mod f) will have X coordinate 1.\n-            RG = RE(1, a^3*G[1]) * 2\n-            # And even Y coordinate.\n-            if int(RG[1]) % 2:\n-                RG = -RG\n-            assert(RG.order() == f)\n-            assert(lam*RG == RE(BETA*RG[0], RG[1]))\n-\n-            # We have found curve RE:y^2=x^3+rb with generator RG of order f. Remember it\n-            results[f] = {\"b\": rb, \"G\": RG, \"lambda\": lam}\n-            print(\"    - Found solution\")\n-            break\n+            # Add to gens all the generators for that subgroup.\n+            gens.setdefault(f, [])\n+            gens[f].extend((b, int(P[0]), int(P[1]), P, lam) for P in [n*gen for n in range(1, f)])\n+            print(\"  - Found solutions\")\n \n     print(\"\")\n \n+def output_generator(g, name):\n+    print(f\"#define {name} SECP256K1_GE_CONST(\\\\\")\n+    print(\"    0x%08x, 0x%08x, 0x%08x, 0x%08x,\\\\\" % tuple((int(g[0]) >> (32 * (7 - i))) & 0xffffffff for i in range(4)))\n+    print(\"    0x%08x, 0x%08x, 0x%08x, 0x%08x,\\\\\" % tuple((int(g[0]) >> (32 * (7 - i))) & 0xffffffff for i in range(4, 8)))\n+    print(\"    0x%08x, 0x%08x, 0x%08x, 0x%08x,\\\\\" % tuple((int(g[1]) >> (32 * (7 - i))) & 0xffffffff for i in range(4)))\n+    print(\"    0x%08x, 0x%08x, 0x%08x, 0x%08x\\\\\" % tuple((int(g[1]) >> (32 * (7 - i))) & 0xffffffff for i in range(4, 8)))\n+    print(\")\")\n+\n+def output_b(b):\n+    print(f\"#define SECP256K1_B {int(b)}U\")\n+\n print(\"\")\n print(\"\")\n print(\"/* To be put in src/group_impl.h: */\")\n+for f in sorted(gens.keys()):\n+    # Use as generator/2 the one with lowest b, and lowest (x, y) generator (interpreted as integers).",
      "path": "sage/gen_exhaustive_groups.sage",
      "position": null,
      "original_position": 133,
      "commit_id": "ce60785b2654e60b43577dd75996b7020afbfec8",
      "original_commit_id": "28cba925eb8d6b434604595fad92bd9e1da54913",
      "in_reply_to_id": null,
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I guess it doesn't matter but take min(generator/2) instead of just min(generator)?\r\n\r\n```suggestion\r\n    # Use as generator/2 the one with lowest b, and lowest (x, y) generator (interpreted as non-negative integers).\r\n```",
      "created_at": "2023-01-11T08:54:52Z",
      "updated_at": "2023-01-11T09:10:33Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1192#discussion_r1066725708",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1066725708"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1192"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 81,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1066739496",
      "pull_request_review_id": 1243506730,
      "id": 1066739496,
      "node_id": "PRRC_kwDOAP4Jqs4_lSco",
      "diff_hunk": "@@ -1,120 +1,121 @@\n load(\"secp256k1_params.sage\")\n \n+MAX_ORDER = 1000\n+\n+# Set of (curve) orders we have encountered so far.\n orders_done = set()\n-results = {}\n-first = True\n+\n+# Map from (subgroup) orders to [b, int(gen.x), int(gen.y), gen, lambda] for those subgroups.\n+gens = {}\n+\n+# Iterate over curves of the form y^2 = x^3 + B.\n for b in range(1, P):\n-    # There are only 6 curves (up to isomorphism) of the form y^2=x^3+B. Stop once we have tried all.\n+    # There are only 6 curves (up to isomorphism) of the form y^2 = x^3 + B. Stop once we have tried all.\n     if len(orders_done) == 6:\n         break\n \n     E = EllipticCurve(F, [0, b])\n     print(\"Analyzing curve y^2 = x^3 + %i\" % b)\n     n = E.order()\n+\n     # Skip curves with an order we've already tried\n     if n in orders_done:\n         print(\"- Isomorphic to earlier curve\")\n         continue\n     orders_done.add(n)\n+\n     # Skip curves isomorphic to the real secp256k1\n     if n.is_pseudoprime():\n         print(\" - Isomorphic to secp256k1\")\n         continue\n \n     print(\"- Finding subgroups\")\n \n-    # Find what prime subgroups exist\n-    for f, _ in n.factor():\n-        print(\"- Analyzing subgroup of order %i\" % f)\n-        # Skip subgroups of order >1000\n-        if f < 4 or f > 1000:\n-            print(\"  - Bad size\")\n-            continue\n-\n-        # Iterate over X coordinates until we find one that is on the curve, has order f,\n-        # and for which curve isomorphism exists that maps it to X coordinate 1.\n-        for x in range(1, P):\n-            # Skip X coordinates not on the curve, and construct the full point otherwise.\n-            if not E.is_x_coord(x):\n+    # Iterate over the generators of this curve.\n+    for g in E.gens():\n+        # Find what prime subgroups of group generated by g exist.\n+        g_order = g.order()\n+        for f, _ in g.order().factor():\n+            print(\"- Analyzing subgroup of order %i\" % f)\n+            # Skip subgroups that are too large.\n+            if f < 4 or f > MAX_ORDER:\n+                print(\"  - Bad size\")\n                 continue\n-            G = E.lift_x(F(x))\n \n-            print(\"  - Analyzing (multiples of) point with X=%i\" % x)\n-\n-            # Skip points whose order is not a multiple of f. Project the point to have\n-            # order f otherwise.\n-            if (G.order() % f):\n-                print(\"    - Bad order\")\n-                continue\n-            G = G * (G.order() // f)\n+            # Construct a generator for that subgroup.\n+            gen = g * (g_order // f)\n+            assert(gen.order() == f)\n \n             # Find lambda for endomorphism. Skip if none can be found.\n             lam = None\n             for l in Integers(f)(1).nth_root(3, all=True):\n-                if int(l)*G == E(BETA*G[0], G[1]):\n+                if int(l)*gen == E(BETA*gen[0], gen[1]):\n                     lam = int(l)\n                     break\n             if lam is None:\n-                print(\"    - No endomorphism for this subgroup\")\n+                print(\"  - No endomorphism for this subgroup\")\n                 break\n \n-            # Now look for an isomorphism of the curve that gives this point an X\n-            # coordinate equal to 1.\n-            # If (x,y) is on y^2 = x^3 + b, then (a^2*x, a^3*y) is on y^2 = x^3 + a^6*b.\n-            # So look for m=a^2=1/x.\n-            m = F(1)/G[0]\n-            if not m.is_square():\n-                print(\"    - No curve isomorphism maps it to a point with X=1\")\n-                continue\n-            a = m.sqrt()\n-            rb = a^6*b\n-            RE = EllipticCurve(F, [0, rb])\n-\n-            # Use as generator twice the image of G under the above isormorphism.\n-            # This means that generator*(1/2 mod f) will have X coordinate 1.\n-            RG = RE(1, a^3*G[1]) * 2\n-            # And even Y coordinate.\n-            if int(RG[1]) % 2:\n-                RG = -RG\n-            assert(RG.order() == f)\n-            assert(lam*RG == RE(BETA*RG[0], RG[1]))\n-\n-            # We have found curve RE:y^2=x^3+rb with generator RG of order f. Remember it\n-            results[f] = {\"b\": rb, \"G\": RG, \"lambda\": lam}\n-            print(\"    - Found solution\")\n-            break\n+            # Add to gens all the generators for that subgroup.\n+            gens.setdefault(f, [])\n+            gens[f].extend((b, int(P[0]), int(P[1]), P, lam) for P in [n*gen for n in range(1, f)])\n+            print(\"  - Found solutions\")\n \n     print(\"\")\n \n+def output_generator(g, name):\n+    print(f\"#define {name} SECP256K1_GE_CONST(\\\\\")\n+    print(\"    0x%08x, 0x%08x, 0x%08x, 0x%08x,\\\\\" % tuple((int(g[0]) >> (32 * (7 - i))) & 0xffffffff for i in range(4)))\n+    print(\"    0x%08x, 0x%08x, 0x%08x, 0x%08x,\\\\\" % tuple((int(g[0]) >> (32 * (7 - i))) & 0xffffffff for i in range(4, 8)))\n+    print(\"    0x%08x, 0x%08x, 0x%08x, 0x%08x,\\\\\" % tuple((int(g[1]) >> (32 * (7 - i))) & 0xffffffff for i in range(4)))\n+    print(\"    0x%08x, 0x%08x, 0x%08x, 0x%08x\\\\\" % tuple((int(g[1]) >> (32 * (7 - i))) & 0xffffffff for i in range(4, 8)))\n+    print(\")\")\n+\n+def output_b(b):\n+    print(f\"#define SECP256K1_B {int(b)}U\")\n+\n print(\"\")\n print(\"\")\n print(\"/* To be put in src/group_impl.h: */\")\n+for f in sorted(gens.keys()):\n+    # Use as generator/2 the one with lowest b, and lowest (x, y) generator (interpreted as integers).\n+    b, _, _, HALF_G, lam = min(gens[f])\n+    output_generator(2 * HALF_G, f\"SECP256K1_G_ORDER_{f}\")\n+print(\"/** Generator for secp256k1, value 'g' defined in\")\n+print(\" *  \\\"Standards for Efficient Cryptography\\\" (SEC2) 2.7.1.\")\n+print(\" */\")\n+output_generator(G, \"SECP256K1_G\")\n+print(\"/* These exhaustive group test orders and generators are chosen such that:\")\n+print(\" * - The field size is equal to that of secp256k1, so field code is the same.\")\n+print(\" * - The curve equation is of the form y^2=x^3+B for some small constant B.\")\n+print(\" * - The subgroup has a generator 2*P, where P.x is as small as possible.\")\n+print(f\" * - The subgroup has size less than {MAX_ORDER} to permit exhaustive testing.\")\n+print(\" * - The subgroup admits an endomorphism of the form lambda*(x,y) == (beta*x,y).\")\n+print(\" *\")\n+print(\" * These parameters are generated using sage/gen_exhaustive_groups.sage.\")\n+print(\" */\")\n+print(\"#if defined(EXHAUSTIVE_TEST_ORDER)\")\n first = True\n-for f in sorted(results.keys()):\n-    b = results[f][\"b\"]\n-    G = results[f][\"G\"]\n-    print(\"#  %s EXHAUSTIVE_TEST_ORDER == %i\" % (\"if\" if first else \"elif\", f))\n+for f in sorted(gens.keys()):\n+    b, _, _, _, lam = min(gens[f])\n+    print(f\"#  {'if' if first else 'elif'} EXHAUSTIVE_TEST_ORDER == {f}\")\n     first = False\n-    print(\"static const secp256k1_ge secp256k1_ge_const_g = SECP256K1_GE_CONST(\")\n-    print(\"    0x%08x, 0x%08x, 0x%08x, 0x%08x,\" % tuple((int(G[0]) >> (32 * (7 - i))) & 0xffffffff for i in range(4)))\n-    print(\"    0x%08x, 0x%08x, 0x%08x, 0x%08x,\" % tuple((int(G[0]) >> (32 * (7 - i))) & 0xffffffff for i in range(4, 8)))\n-    print(\"    0x%08x, 0x%08x, 0x%08x, 0x%08x,\" % tuple((int(G[1]) >> (32 * (7 - i))) & 0xffffffff for i in range(4)))\n-    print(\"    0x%08x, 0x%08x, 0x%08x, 0x%08x\" % tuple((int(G[1]) >> (32 * (7 - i))) & 0xffffffff for i in range(4, 8)))\n-    print(\");\")\n-    print(\"static const secp256k1_fe secp256k1_fe_const_b = SECP256K1_FE_CONST(\")\n-    print(\"    0x%08x, 0x%08x, 0x%08x, 0x%08x,\" % tuple((int(b) >> (32 * (7 - i))) & 0xffffffff for i in range(4)))\n-    print(\"    0x%08x, 0x%08x, 0x%08x, 0x%08x\" % tuple((int(b) >> (32 * (7 - i))) & 0xffffffff for i in range(4, 8)))\n-    print(\");\")\n+    print(f\"static const secp256k1_ge secp256k1_ge_const_g = SECP256K1_G_ORDER_{f};\")\n+    output_b(b)\n print(\"#  else\")\n print(\"#    error No known generator for the specified exhaustive test group order.\")\n print(\"#  endif\")\n+print(\"#else\")\n+print(\"static const secp256k1_ge secp256k1_ge_const_g = SECP256K1_G;\")\n+output_b(7)\n+print(\"#endif\")",
      "path": "sage/gen_exhaustive_groups.sage",
      "position": null,
      "original_position": 177,
      "commit_id": "ce60785b2654e60b43577dd75996b7020afbfec8",
      "original_commit_id": "28cba925eb8d6b434604595fad92bd9e1da54913",
      "in_reply_to_id": null,
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\nprint(\"#else\")\r\nprint()\r\nprint(\"static const secp256k1_ge secp256k1_ge_const_g = SECP256K1_G;\")\r\noutput_b(7)\r\nprint()\r\nprint(\"#endif\")\r\n```\r\n\r\nI think this improves readability of the output a lot. Same for the other `#else`/`#elif` branches. ",
      "created_at": "2023-01-11T09:08:27Z",
      "updated_at": "2023-01-11T09:10:33Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1192#discussion_r1066739496",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1066739496"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1192"
        }
      },
      "start_line": null,
      "original_start_line": 108,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 138,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1066740487",
      "pull_request_review_id": 1243506730,
      "id": 1066740487,
      "node_id": "PRRC_kwDOAP4Jqs4_lSsH",
      "diff_hunk": "@@ -1,120 +1,121 @@\n load(\"secp256k1_params.sage\")\n \n+MAX_ORDER = 1000\n+\n+# Set of (curve) orders we have encountered so far.\n orders_done = set()\n-results = {}\n-first = True\n+\n+# Map from (subgroup) orders to [b, int(gen.x), int(gen.y), gen, lambda] for those subgroups.\n+gens = {}\n+\n+# Iterate over curves of the form y^2 = x^3 + B.\n for b in range(1, P):\n-    # There are only 6 curves (up to isomorphism) of the form y^2=x^3+B. Stop once we have tried all.\n+    # There are only 6 curves (up to isomorphism) of the form y^2 = x^3 + B. Stop once we have tried all.\n     if len(orders_done) == 6:\n         break\n \n     E = EllipticCurve(F, [0, b])\n     print(\"Analyzing curve y^2 = x^3 + %i\" % b)\n     n = E.order()\n+\n     # Skip curves with an order we've already tried\n     if n in orders_done:\n         print(\"- Isomorphic to earlier curve\")\n         continue\n     orders_done.add(n)\n+\n     # Skip curves isomorphic to the real secp256k1\n     if n.is_pseudoprime():\n         print(\" - Isomorphic to secp256k1\")\n         continue\n \n     print(\"- Finding subgroups\")\n \n-    # Find what prime subgroups exist\n-    for f, _ in n.factor():\n-        print(\"- Analyzing subgroup of order %i\" % f)\n-        # Skip subgroups of order >1000\n-        if f < 4 or f > 1000:\n-            print(\"  - Bad size\")\n-            continue\n-\n-        # Iterate over X coordinates until we find one that is on the curve, has order f,\n-        # and for which curve isomorphism exists that maps it to X coordinate 1.\n-        for x in range(1, P):\n-            # Skip X coordinates not on the curve, and construct the full point otherwise.\n-            if not E.is_x_coord(x):\n+    # Iterate over the generators of this curve.\n+    for g in E.gens():\n+        # Find what prime subgroups of group generated by g exist.\n+        g_order = g.order()\n+        for f, _ in g.order().factor():\n+            print(\"- Analyzing subgroup of order %i\" % f)\n+            # Skip subgroups that are too large.\n+            if f < 4 or f > MAX_ORDER:\n+                print(\"  - Bad size\")\n                 continue\n-            G = E.lift_x(F(x))\n \n-            print(\"  - Analyzing (multiples of) point with X=%i\" % x)\n-\n-            # Skip points whose order is not a multiple of f. Project the point to have\n-            # order f otherwise.\n-            if (G.order() % f):\n-                print(\"    - Bad order\")\n-                continue\n-            G = G * (G.order() // f)\n+            # Construct a generator for that subgroup.\n+            gen = g * (g_order // f)\n+            assert(gen.order() == f)\n \n             # Find lambda for endomorphism. Skip if none can be found.\n             lam = None\n             for l in Integers(f)(1).nth_root(3, all=True):\n-                if int(l)*G == E(BETA*G[0], G[1]):\n+                if int(l)*gen == E(BETA*gen[0], gen[1]):\n                     lam = int(l)\n                     break\n             if lam is None:\n-                print(\"    - No endomorphism for this subgroup\")\n+                print(\"  - No endomorphism for this subgroup\")\n                 break\n \n-            # Now look for an isomorphism of the curve that gives this point an X\n-            # coordinate equal to 1.\n-            # If (x,y) is on y^2 = x^3 + b, then (a^2*x, a^3*y) is on y^2 = x^3 + a^6*b.\n-            # So look for m=a^2=1/x.\n-            m = F(1)/G[0]\n-            if not m.is_square():\n-                print(\"    - No curve isomorphism maps it to a point with X=1\")\n-                continue\n-            a = m.sqrt()\n-            rb = a^6*b\n-            RE = EllipticCurve(F, [0, rb])\n-\n-            # Use as generator twice the image of G under the above isormorphism.\n-            # This means that generator*(1/2 mod f) will have X coordinate 1.\n-            RG = RE(1, a^3*G[1]) * 2\n-            # And even Y coordinate.\n-            if int(RG[1]) % 2:\n-                RG = -RG\n-            assert(RG.order() == f)\n-            assert(lam*RG == RE(BETA*RG[0], RG[1]))\n-\n-            # We have found curve RE:y^2=x^3+rb with generator RG of order f. Remember it\n-            results[f] = {\"b\": rb, \"G\": RG, \"lambda\": lam}\n-            print(\"    - Found solution\")\n-            break\n+            # Add to gens all the generators for that subgroup.\n+            gens.setdefault(f, [])\n+            gens[f].extend((b, int(P[0]), int(P[1]), P, lam) for P in [n*gen for n in range(1, f)])\n+            print(\"  - Found solutions\")\n \n     print(\"\")\n \n+def output_generator(g, name):\n+    print(f\"#define {name} SECP256K1_GE_CONST(\\\\\")\n+    print(\"    0x%08x, 0x%08x, 0x%08x, 0x%08x,\\\\\" % tuple((int(g[0]) >> (32 * (7 - i))) & 0xffffffff for i in range(4)))\n+    print(\"    0x%08x, 0x%08x, 0x%08x, 0x%08x,\\\\\" % tuple((int(g[0]) >> (32 * (7 - i))) & 0xffffffff for i in range(4, 8)))\n+    print(\"    0x%08x, 0x%08x, 0x%08x, 0x%08x,\\\\\" % tuple((int(g[1]) >> (32 * (7 - i))) & 0xffffffff for i in range(4)))\n+    print(\"    0x%08x, 0x%08x, 0x%08x, 0x%08x\\\\\" % tuple((int(g[1]) >> (32 * (7 - i))) & 0xffffffff for i in range(4, 8)))\n+    print(\")\")\n+\n+def output_b(b):\n+    print(f\"#define SECP256K1_B {int(b)}U\")",
      "path": "sage/gen_exhaustive_groups.sage",
      "position": null,
      "original_position": 127,
      "commit_id": "ce60785b2654e60b43577dd75996b7020afbfec8",
      "original_commit_id": "28cba925eb8d6b434604595fad92bd9e1da54913",
      "in_reply_to_id": null,
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "It won't matter but is there a specific reason you put the `U`? `secp256k1_fe_mul_int` takes a signed int. ",
      "created_at": "2023-01-11T09:09:28Z",
      "updated_at": "2023-01-11T09:10:33Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1192#discussion_r1066740487",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1066740487"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1192"
        }
      },
      "start_line": null,
      "original_start_line": 74,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 75,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1066741392",
      "pull_request_review_id": 1243506730,
      "id": 1066741392,
      "node_id": "PRRC_kwDOAP4Jqs4_lS6Q",
      "diff_hunk": "@@ -1,120 +1,121 @@\n load(\"secp256k1_params.sage\")\n \n+MAX_ORDER = 1000\n+\n+# Set of (curve) orders we have encountered so far.\n orders_done = set()\n-results = {}\n-first = True\n+\n+# Map from (subgroup) orders to [b, int(gen.x), int(gen.y), gen, lambda] for those subgroups.\n+gens = {}\n+\n+# Iterate over curves of the form y^2 = x^3 + B.\n for b in range(1, P):\n-    # There are only 6 curves (up to isomorphism) of the form y^2=x^3+B. Stop once we have tried all.\n+    # There are only 6 curves (up to isomorphism) of the form y^2 = x^3 + B. Stop once we have tried all.\n     if len(orders_done) == 6:\n         break\n \n     E = EllipticCurve(F, [0, b])\n     print(\"Analyzing curve y^2 = x^3 + %i\" % b)\n     n = E.order()\n+\n     # Skip curves with an order we've already tried\n     if n in orders_done:\n         print(\"- Isomorphic to earlier curve\")\n         continue\n     orders_done.add(n)\n+\n     # Skip curves isomorphic to the real secp256k1\n     if n.is_pseudoprime():\n         print(\" - Isomorphic to secp256k1\")\n         continue\n \n     print(\"- Finding subgroups\")\n \n-    # Find what prime subgroups exist\n-    for f, _ in n.factor():\n-        print(\"- Analyzing subgroup of order %i\" % f)\n-        # Skip subgroups of order >1000\n-        if f < 4 or f > 1000:\n-            print(\"  - Bad size\")\n-            continue\n-\n-        # Iterate over X coordinates until we find one that is on the curve, has order f,\n-        # and for which curve isomorphism exists that maps it to X coordinate 1.\n-        for x in range(1, P):\n-            # Skip X coordinates not on the curve, and construct the full point otherwise.\n-            if not E.is_x_coord(x):\n+    # Iterate over the generators of this curve.\n+    for g in E.gens():\n+        # Find what prime subgroups of group generated by g exist.\n+        g_order = g.order()\n+        for f, _ in g.order().factor():\n+            print(\"- Analyzing subgroup of order %i\" % f)\n+            # Skip subgroups that are too large.\n+            if f < 4 or f > MAX_ORDER:\n+                print(\"  - Bad size\")\n                 continue\n-            G = E.lift_x(F(x))\n \n-            print(\"  - Analyzing (multiples of) point with X=%i\" % x)\n-\n-            # Skip points whose order is not a multiple of f. Project the point to have\n-            # order f otherwise.\n-            if (G.order() % f):\n-                print(\"    - Bad order\")\n-                continue\n-            G = G * (G.order() // f)\n+            # Construct a generator for that subgroup.\n+            gen = g * (g_order // f)\n+            assert(gen.order() == f)\n \n             # Find lambda for endomorphism. Skip if none can be found.\n             lam = None\n             for l in Integers(f)(1).nth_root(3, all=True):\n-                if int(l)*G == E(BETA*G[0], G[1]):\n+                if int(l)*gen == E(BETA*gen[0], gen[1]):\n                     lam = int(l)\n                     break\n             if lam is None:\n-                print(\"    - No endomorphism for this subgroup\")\n+                print(\"  - No endomorphism for this subgroup\")\n                 break\n \n-            # Now look for an isomorphism of the curve that gives this point an X\n-            # coordinate equal to 1.\n-            # If (x,y) is on y^2 = x^3 + b, then (a^2*x, a^3*y) is on y^2 = x^3 + a^6*b.\n-            # So look for m=a^2=1/x.\n-            m = F(1)/G[0]\n-            if not m.is_square():\n-                print(\"    - No curve isomorphism maps it to a point with X=1\")\n-                continue\n-            a = m.sqrt()\n-            rb = a^6*b\n-            RE = EllipticCurve(F, [0, rb])\n-\n-            # Use as generator twice the image of G under the above isormorphism.\n-            # This means that generator*(1/2 mod f) will have X coordinate 1.\n-            RG = RE(1, a^3*G[1]) * 2\n-            # And even Y coordinate.\n-            if int(RG[1]) % 2:\n-                RG = -RG\n-            assert(RG.order() == f)\n-            assert(lam*RG == RE(BETA*RG[0], RG[1]))\n-\n-            # We have found curve RE:y^2=x^3+rb with generator RG of order f. Remember it\n-            results[f] = {\"b\": rb, \"G\": RG, \"lambda\": lam}\n-            print(\"    - Found solution\")\n-            break\n+            # Add to gens all the generators for that subgroup.\n+            gens.setdefault(f, [])\n+            gens[f].extend((b, int(P[0]), int(P[1]), P, lam) for P in [n*gen for n in range(1, f)])\n+            print(\"  - Found solutions\")\n \n     print(\"\")\n \n+def output_generator(g, name):\n+    print(f\"#define {name} SECP256K1_GE_CONST(\\\\\")\n+    print(\"    0x%08x, 0x%08x, 0x%08x, 0x%08x,\\\\\" % tuple((int(g[0]) >> (32 * (7 - i))) & 0xffffffff for i in range(4)))\n+    print(\"    0x%08x, 0x%08x, 0x%08x, 0x%08x,\\\\\" % tuple((int(g[0]) >> (32 * (7 - i))) & 0xffffffff for i in range(4, 8)))\n+    print(\"    0x%08x, 0x%08x, 0x%08x, 0x%08x,\\\\\" % tuple((int(g[1]) >> (32 * (7 - i))) & 0xffffffff for i in range(4)))\n+    print(\"    0x%08x, 0x%08x, 0x%08x, 0x%08x\\\\\" % tuple((int(g[1]) >> (32 * (7 - i))) & 0xffffffff for i in range(4, 8)))\n+    print(\")\")\n+\n+def output_b(b):\n+    print(f\"#define SECP256K1_B {int(b)}U\")\n+\n print(\"\")\n print(\"\")\n print(\"/* To be put in src/group_impl.h: */\")",
      "path": "sage/gen_exhaustive_groups.sage",
      "position": null,
      "original_position": 131,
      "commit_id": "ce60785b2654e60b43577dd75996b7020afbfec8",
      "original_commit_id": "28cba925eb8d6b434604595fad92bd9e1da54913",
      "in_reply_to_id": null,
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Maybe add another line with `Generated by  ...` ",
      "created_at": "2023-01-11T09:10:19Z",
      "updated_at": "2023-01-11T09:10:33Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1192#discussion_r1066741392",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1066741392"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1192"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 79,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1067325062",
      "pull_request_review_id": 1244409494,
      "id": 1067325062,
      "node_id": "PRRC_kwDOAP4Jqs4_nhaG",
      "diff_hunk": "@@ -1,120 +1,121 @@\n load(\"secp256k1_params.sage\")\n \n+MAX_ORDER = 1000\n+\n+# Set of (curve) orders we have encountered so far.\n orders_done = set()\n-results = {}\n-first = True\n+\n+# Map from (subgroup) orders to [b, int(gen.x), int(gen.y), gen, lambda] for those subgroups.\n+gens = {}\n+\n+# Iterate over curves of the form y^2 = x^3 + B.\n for b in range(1, P):\n-    # There are only 6 curves (up to isomorphism) of the form y^2=x^3+B. Stop once we have tried all.\n+    # There are only 6 curves (up to isomorphism) of the form y^2 = x^3 + B. Stop once we have tried all.\n     if len(orders_done) == 6:\n         break\n \n     E = EllipticCurve(F, [0, b])\n     print(\"Analyzing curve y^2 = x^3 + %i\" % b)\n     n = E.order()\n+\n     # Skip curves with an order we've already tried\n     if n in orders_done:\n         print(\"- Isomorphic to earlier curve\")\n         continue\n     orders_done.add(n)\n+\n     # Skip curves isomorphic to the real secp256k1\n     if n.is_pseudoprime():\n         print(\" - Isomorphic to secp256k1\")\n         continue\n \n     print(\"- Finding subgroups\")\n \n-    # Find what prime subgroups exist\n-    for f, _ in n.factor():\n-        print(\"- Analyzing subgroup of order %i\" % f)\n-        # Skip subgroups of order >1000\n-        if f < 4 or f > 1000:\n-            print(\"  - Bad size\")\n-            continue\n-\n-        # Iterate over X coordinates until we find one that is on the curve, has order f,\n-        # and for which curve isomorphism exists that maps it to X coordinate 1.\n-        for x in range(1, P):\n-            # Skip X coordinates not on the curve, and construct the full point otherwise.\n-            if not E.is_x_coord(x):\n+    # Iterate over the generators of this curve.\n+    for g in E.gens():\n+        # Find what prime subgroups of group generated by g exist.\n+        g_order = g.order()\n+        for f, _ in g.order().factor():\n+            print(\"- Analyzing subgroup of order %i\" % f)\n+            # Skip subgroups that are too large.\n+            if f < 4 or f > MAX_ORDER:\n+                print(\"  - Bad size\")\n                 continue\n-            G = E.lift_x(F(x))\n \n-            print(\"  - Analyzing (multiples of) point with X=%i\" % x)\n-\n-            # Skip points whose order is not a multiple of f. Project the point to have\n-            # order f otherwise.\n-            if (G.order() % f):\n-                print(\"    - Bad order\")\n-                continue\n-            G = G * (G.order() // f)\n+            # Construct a generator for that subgroup.\n+            gen = g * (g_order // f)\n+            assert(gen.order() == f)\n \n             # Find lambda for endomorphism. Skip if none can be found.\n             lam = None\n             for l in Integers(f)(1).nth_root(3, all=True):\n-                if int(l)*G == E(BETA*G[0], G[1]):\n+                if int(l)*gen == E(BETA*gen[0], gen[1]):\n                     lam = int(l)\n                     break\n             if lam is None:\n-                print(\"    - No endomorphism for this subgroup\")\n+                print(\"  - No endomorphism for this subgroup\")\n                 break\n \n-            # Now look for an isomorphism of the curve that gives this point an X\n-            # coordinate equal to 1.\n-            # If (x,y) is on y^2 = x^3 + b, then (a^2*x, a^3*y) is on y^2 = x^3 + a^6*b.\n-            # So look for m=a^2=1/x.\n-            m = F(1)/G[0]\n-            if not m.is_square():\n-                print(\"    - No curve isomorphism maps it to a point with X=1\")\n-                continue\n-            a = m.sqrt()\n-            rb = a^6*b\n-            RE = EllipticCurve(F, [0, rb])\n-\n-            # Use as generator twice the image of G under the above isormorphism.\n-            # This means that generator*(1/2 mod f) will have X coordinate 1.\n-            RG = RE(1, a^3*G[1]) * 2\n-            # And even Y coordinate.\n-            if int(RG[1]) % 2:\n-                RG = -RG\n-            assert(RG.order() == f)\n-            assert(lam*RG == RE(BETA*RG[0], RG[1]))\n-\n-            # We have found curve RE:y^2=x^3+rb with generator RG of order f. Remember it\n-            results[f] = {\"b\": rb, \"G\": RG, \"lambda\": lam}\n-            print(\"    - Found solution\")\n-            break\n+            # Add to gens all the generators for that subgroup.\n+            gens.setdefault(f, [])\n+            gens[f].extend((b, int(P[0]), int(P[1]), P, lam) for P in [n*gen for n in range(1, f)])\n+            print(\"  - Found solutions\")\n \n     print(\"\")\n \n+def output_generator(g, name):\n+    print(f\"#define {name} SECP256K1_GE_CONST(\\\\\")\n+    print(\"    0x%08x, 0x%08x, 0x%08x, 0x%08x,\\\\\" % tuple((int(g[0]) >> (32 * (7 - i))) & 0xffffffff for i in range(4)))\n+    print(\"    0x%08x, 0x%08x, 0x%08x, 0x%08x,\\\\\" % tuple((int(g[0]) >> (32 * (7 - i))) & 0xffffffff for i in range(4, 8)))\n+    print(\"    0x%08x, 0x%08x, 0x%08x, 0x%08x,\\\\\" % tuple((int(g[1]) >> (32 * (7 - i))) & 0xffffffff for i in range(4)))\n+    print(\"    0x%08x, 0x%08x, 0x%08x, 0x%08x\\\\\" % tuple((int(g[1]) >> (32 * (7 - i))) & 0xffffffff for i in range(4, 8)))\n+    print(\")\")\n+\n+def output_b(b):\n+    print(f\"#define SECP256K1_B {int(b)}U\")\n+\n print(\"\")\n print(\"\")\n print(\"/* To be put in src/group_impl.h: */\")\n+for f in sorted(gens.keys()):\n+    # Use as generator/2 the one with lowest b, and lowest (x, y) generator (interpreted as integers).",
      "path": "sage/gen_exhaustive_groups.sage",
      "position": null,
      "original_position": 133,
      "commit_id": "ce60785b2654e60b43577dd75996b7020afbfec8",
      "original_commit_id": "28cba925eb8d6b434604595fad92bd9e1da54913",
      "in_reply_to_id": 1066725708,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> I guess it doesn't matter but take min(generator/2) instead of just min(generator)?\r\n\r\nI don't understand what you're suggesting here.",
      "created_at": "2023-01-11T18:28:42Z",
      "updated_at": "2023-01-11T18:28:43Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1192#discussion_r1067325062",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1067325062"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1192"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 81,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1067325425",
      "pull_request_review_id": 1244410041,
      "id": 1067325425,
      "node_id": "PRRC_kwDOAP4Jqs4_nhfx",
      "diff_hunk": "@@ -1,120 +1,121 @@\n load(\"secp256k1_params.sage\")\n \n+MAX_ORDER = 1000\n+\n+# Set of (curve) orders we have encountered so far.\n orders_done = set()\n-results = {}\n-first = True\n+\n+# Map from (subgroup) orders to [b, int(gen.x), int(gen.y), gen, lambda] for those subgroups.\n+gens = {}\n+\n+# Iterate over curves of the form y^2 = x^3 + B.\n for b in range(1, P):\n-    # There are only 6 curves (up to isomorphism) of the form y^2=x^3+B. Stop once we have tried all.\n+    # There are only 6 curves (up to isomorphism) of the form y^2 = x^3 + B. Stop once we have tried all.\n     if len(orders_done) == 6:\n         break\n \n     E = EllipticCurve(F, [0, b])\n     print(\"Analyzing curve y^2 = x^3 + %i\" % b)\n     n = E.order()\n+\n     # Skip curves with an order we've already tried\n     if n in orders_done:\n         print(\"- Isomorphic to earlier curve\")\n         continue\n     orders_done.add(n)\n+\n     # Skip curves isomorphic to the real secp256k1\n     if n.is_pseudoprime():\n         print(\" - Isomorphic to secp256k1\")\n         continue\n \n     print(\"- Finding subgroups\")\n \n-    # Find what prime subgroups exist\n-    for f, _ in n.factor():\n-        print(\"- Analyzing subgroup of order %i\" % f)\n-        # Skip subgroups of order >1000\n-        if f < 4 or f > 1000:\n-            print(\"  - Bad size\")\n-            continue\n-\n-        # Iterate over X coordinates until we find one that is on the curve, has order f,\n-        # and for which curve isomorphism exists that maps it to X coordinate 1.\n-        for x in range(1, P):\n-            # Skip X coordinates not on the curve, and construct the full point otherwise.\n-            if not E.is_x_coord(x):\n+    # Iterate over the generators of this curve.\n+    for g in E.gens():\n+        # Find what prime subgroups of group generated by g exist.\n+        g_order = g.order()\n+        for f, _ in g.order().factor():\n+            print(\"- Analyzing subgroup of order %i\" % f)\n+            # Skip subgroups that are too large.\n+            if f < 4 or f > MAX_ORDER:\n+                print(\"  - Bad size\")\n                 continue\n-            G = E.lift_x(F(x))\n \n-            print(\"  - Analyzing (multiples of) point with X=%i\" % x)\n-\n-            # Skip points whose order is not a multiple of f. Project the point to have\n-            # order f otherwise.\n-            if (G.order() % f):\n-                print(\"    - Bad order\")\n-                continue\n-            G = G * (G.order() // f)\n+            # Construct a generator for that subgroup.\n+            gen = g * (g_order // f)\n+            assert(gen.order() == f)\n \n             # Find lambda for endomorphism. Skip if none can be found.\n             lam = None\n             for l in Integers(f)(1).nth_root(3, all=True):\n-                if int(l)*G == E(BETA*G[0], G[1]):\n+                if int(l)*gen == E(BETA*gen[0], gen[1]):\n                     lam = int(l)\n                     break\n             if lam is None:\n-                print(\"    - No endomorphism for this subgroup\")\n+                print(\"  - No endomorphism for this subgroup\")\n                 break\n \n-            # Now look for an isomorphism of the curve that gives this point an X\n-            # coordinate equal to 1.\n-            # If (x,y) is on y^2 = x^3 + b, then (a^2*x, a^3*y) is on y^2 = x^3 + a^6*b.\n-            # So look for m=a^2=1/x.\n-            m = F(1)/G[0]\n-            if not m.is_square():\n-                print(\"    - No curve isomorphism maps it to a point with X=1\")\n-                continue\n-            a = m.sqrt()\n-            rb = a^6*b\n-            RE = EllipticCurve(F, [0, rb])\n-\n-            # Use as generator twice the image of G under the above isormorphism.\n-            # This means that generator*(1/2 mod f) will have X coordinate 1.\n-            RG = RE(1, a^3*G[1]) * 2\n-            # And even Y coordinate.\n-            if int(RG[1]) % 2:\n-                RG = -RG\n-            assert(RG.order() == f)\n-            assert(lam*RG == RE(BETA*RG[0], RG[1]))\n-\n-            # We have found curve RE:y^2=x^3+rb with generator RG of order f. Remember it\n-            results[f] = {\"b\": rb, \"G\": RG, \"lambda\": lam}\n-            print(\"    - Found solution\")\n-            break\n+            # Add to gens all the generators for that subgroup.\n+            gens.setdefault(f, [])\n+            gens[f].extend((b, int(P[0]), int(P[1]), P, lam) for P in [n*gen for n in range(1, f)])\n+            print(\"  - Found solutions\")\n \n     print(\"\")\n \n+def output_generator(g, name):\n+    print(f\"#define {name} SECP256K1_GE_CONST(\\\\\")\n+    print(\"    0x%08x, 0x%08x, 0x%08x, 0x%08x,\\\\\" % tuple((int(g[0]) >> (32 * (7 - i))) & 0xffffffff for i in range(4)))\n+    print(\"    0x%08x, 0x%08x, 0x%08x, 0x%08x,\\\\\" % tuple((int(g[0]) >> (32 * (7 - i))) & 0xffffffff for i in range(4, 8)))\n+    print(\"    0x%08x, 0x%08x, 0x%08x, 0x%08x,\\\\\" % tuple((int(g[1]) >> (32 * (7 - i))) & 0xffffffff for i in range(4)))\n+    print(\"    0x%08x, 0x%08x, 0x%08x, 0x%08x\\\\\" % tuple((int(g[1]) >> (32 * (7 - i))) & 0xffffffff for i in range(4, 8)))\n+    print(\")\")\n+\n+def output_b(b):\n+    print(f\"#define SECP256K1_B {int(b)}U\")",
      "path": "sage/gen_exhaustive_groups.sage",
      "position": null,
      "original_position": 127,
      "commit_id": "ce60785b2654e60b43577dd75996b7020afbfec8",
      "original_commit_id": "28cba925eb8d6b434604595fad92bd9e1da54913",
      "in_reply_to_id": 1066740487,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Heh, maybe `secp256k1_fe_mul_int` should be changed to take an unsigned as input...",
      "created_at": "2023-01-11T18:29:10Z",
      "updated_at": "2023-01-11T18:29:10Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1192#discussion_r1067325425",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1067325425"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1192"
        }
      },
      "start_line": null,
      "original_start_line": 74,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 75,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1067334938",
      "pull_request_review_id": 1244426214,
      "id": 1067334938,
      "node_id": "PRRC_kwDOAP4Jqs4_nj0a",
      "diff_hunk": "@@ -1,120 +1,121 @@\n load(\"secp256k1_params.sage\")\n \n+MAX_ORDER = 1000\n+\n+# Set of (curve) orders we have encountered so far.\n orders_done = set()\n-results = {}\n-first = True\n+\n+# Map from (subgroup) orders to [b, int(gen.x), int(gen.y), gen, lambda] for those subgroups.\n+gens = {}\n+\n+# Iterate over curves of the form y^2 = x^3 + B.\n for b in range(1, P):\n-    # There are only 6 curves (up to isomorphism) of the form y^2=x^3+B. Stop once we have tried all.\n+    # There are only 6 curves (up to isomorphism) of the form y^2 = x^3 + B. Stop once we have tried all.\n     if len(orders_done) == 6:\n         break\n \n     E = EllipticCurve(F, [0, b])\n     print(\"Analyzing curve y^2 = x^3 + %i\" % b)\n     n = E.order()\n+\n     # Skip curves with an order we've already tried\n     if n in orders_done:\n         print(\"- Isomorphic to earlier curve\")\n         continue\n     orders_done.add(n)\n+\n     # Skip curves isomorphic to the real secp256k1\n     if n.is_pseudoprime():\n         print(\" - Isomorphic to secp256k1\")\n         continue\n \n     print(\"- Finding subgroups\")\n \n-    # Find what prime subgroups exist\n-    for f, _ in n.factor():\n-        print(\"- Analyzing subgroup of order %i\" % f)\n-        # Skip subgroups of order >1000\n-        if f < 4 or f > 1000:\n-            print(\"  - Bad size\")\n-            continue\n-\n-        # Iterate over X coordinates until we find one that is on the curve, has order f,\n-        # and for which curve isomorphism exists that maps it to X coordinate 1.\n-        for x in range(1, P):\n-            # Skip X coordinates not on the curve, and construct the full point otherwise.\n-            if not E.is_x_coord(x):\n+    # Iterate over the generators of this curve.\n+    for g in E.gens():\n+        # Find what prime subgroups of group generated by g exist.\n+        g_order = g.order()\n+        for f, _ in g.order().factor():\n+            print(\"- Analyzing subgroup of order %i\" % f)\n+            # Skip subgroups that are too large.\n+            if f < 4 or f > MAX_ORDER:\n+                print(\"  - Bad size\")\n                 continue\n-            G = E.lift_x(F(x))\n \n-            print(\"  - Analyzing (multiples of) point with X=%i\" % x)\n-\n-            # Skip points whose order is not a multiple of f. Project the point to have\n-            # order f otherwise.\n-            if (G.order() % f):\n-                print(\"    - Bad order\")\n-                continue\n-            G = G * (G.order() // f)\n+            # Construct a generator for that subgroup.\n+            gen = g * (g_order // f)\n+            assert(gen.order() == f)\n \n             # Find lambda for endomorphism. Skip if none can be found.\n             lam = None\n             for l in Integers(f)(1).nth_root(3, all=True):\n-                if int(l)*G == E(BETA*G[0], G[1]):\n+                if int(l)*gen == E(BETA*gen[0], gen[1]):\n                     lam = int(l)\n                     break\n             if lam is None:\n-                print(\"    - No endomorphism for this subgroup\")\n+                print(\"  - No endomorphism for this subgroup\")\n                 break\n \n-            # Now look for an isomorphism of the curve that gives this point an X\n-            # coordinate equal to 1.\n-            # If (x,y) is on y^2 = x^3 + b, then (a^2*x, a^3*y) is on y^2 = x^3 + a^6*b.\n-            # So look for m=a^2=1/x.\n-            m = F(1)/G[0]\n-            if not m.is_square():\n-                print(\"    - No curve isomorphism maps it to a point with X=1\")\n-                continue\n-            a = m.sqrt()\n-            rb = a^6*b\n-            RE = EllipticCurve(F, [0, rb])\n-\n-            # Use as generator twice the image of G under the above isormorphism.\n-            # This means that generator*(1/2 mod f) will have X coordinate 1.\n-            RG = RE(1, a^3*G[1]) * 2\n-            # And even Y coordinate.\n-            if int(RG[1]) % 2:\n-                RG = -RG\n-            assert(RG.order() == f)\n-            assert(lam*RG == RE(BETA*RG[0], RG[1]))\n-\n-            # We have found curve RE:y^2=x^3+rb with generator RG of order f. Remember it\n-            results[f] = {\"b\": rb, \"G\": RG, \"lambda\": lam}\n-            print(\"    - Found solution\")\n-            break\n+            # Add to gens all the generators for that subgroup.\n+            gens.setdefault(f, [])\n+            gens[f].extend((b, int(P[0]), int(P[1]), P, lam) for P in [n*gen for n in range(1, f)])\n+            print(\"  - Found solutions\")\n \n     print(\"\")\n \n+def output_generator(g, name):\n+    print(f\"#define {name} SECP256K1_GE_CONST(\\\\\")\n+    print(\"    0x%08x, 0x%08x, 0x%08x, 0x%08x,\\\\\" % tuple((int(g[0]) >> (32 * (7 - i))) & 0xffffffff for i in range(4)))\n+    print(\"    0x%08x, 0x%08x, 0x%08x, 0x%08x,\\\\\" % tuple((int(g[0]) >> (32 * (7 - i))) & 0xffffffff for i in range(4, 8)))\n+    print(\"    0x%08x, 0x%08x, 0x%08x, 0x%08x,\\\\\" % tuple((int(g[1]) >> (32 * (7 - i))) & 0xffffffff for i in range(4)))\n+    print(\"    0x%08x, 0x%08x, 0x%08x, 0x%08x\\\\\" % tuple((int(g[1]) >> (32 * (7 - i))) & 0xffffffff for i in range(4, 8)))\n+    print(\")\")\n+\n+def output_b(b):\n+    print(f\"#define SECP256K1_B {int(b)}U\")\n+\n print(\"\")\n print(\"\")\n print(\"/* To be put in src/group_impl.h: */\")\n+for f in sorted(gens.keys()):\n+    # Use as generator/2 the one with lowest b, and lowest (x, y) generator (interpreted as integers).",
      "path": "sage/gen_exhaustive_groups.sage",
      "position": null,
      "original_position": 133,
      "commit_id": "ce60785b2654e60b43577dd75996b7020afbfec8",
      "original_commit_id": "28cba925eb8d6b434604595fad92bd9e1da54913",
      "in_reply_to_id": 1066725708,
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nevermind,",
      "created_at": "2023-01-11T18:40:16Z",
      "updated_at": "2023-01-11T18:40:16Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1192#discussion_r1067334938",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1067334938"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1192"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 81,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1067452439",
      "pull_request_review_id": 1244606520,
      "id": 1067452439,
      "node_id": "PRRC_kwDOAP4Jqs4_oAgX",
      "diff_hunk": "@@ -1,120 +1,121 @@\n load(\"secp256k1_params.sage\")\n \n+MAX_ORDER = 1000\n+\n+# Set of (curve) orders we have encountered so far.\n orders_done = set()\n-results = {}\n-first = True\n+\n+# Map from (subgroup) orders to [b, int(gen.x), int(gen.y), gen, lambda] for those subgroups.\n+gens = {}\n+\n+# Iterate over curves of the form y^2 = x^3 + B.\n for b in range(1, P):\n-    # There are only 6 curves (up to isomorphism) of the form y^2=x^3+B. Stop once we have tried all.\n+    # There are only 6 curves (up to isomorphism) of the form y^2 = x^3 + B. Stop once we have tried all.\n     if len(orders_done) == 6:\n         break\n \n     E = EllipticCurve(F, [0, b])\n     print(\"Analyzing curve y^2 = x^3 + %i\" % b)\n     n = E.order()\n+\n     # Skip curves with an order we've already tried\n     if n in orders_done:\n         print(\"- Isomorphic to earlier curve\")\n         continue\n     orders_done.add(n)\n+\n     # Skip curves isomorphic to the real secp256k1\n     if n.is_pseudoprime():\n         print(\" - Isomorphic to secp256k1\")\n         continue\n \n     print(\"- Finding subgroups\")\n \n-    # Find what prime subgroups exist\n-    for f, _ in n.factor():\n-        print(\"- Analyzing subgroup of order %i\" % f)\n-        # Skip subgroups of order >1000\n-        if f < 4 or f > 1000:\n-            print(\"  - Bad size\")\n-            continue\n-\n-        # Iterate over X coordinates until we find one that is on the curve, has order f,\n-        # and for which curve isomorphism exists that maps it to X coordinate 1.\n-        for x in range(1, P):\n-            # Skip X coordinates not on the curve, and construct the full point otherwise.\n-            if not E.is_x_coord(x):\n+    # Iterate over the generators of this curve.\n+    for g in E.gens():\n+        # Find what prime subgroups of group generated by g exist.\n+        g_order = g.order()\n+        for f, _ in g.order().factor():\n+            print(\"- Analyzing subgroup of order %i\" % f)\n+            # Skip subgroups that are too large.\n+            if f < 4 or f > MAX_ORDER:\n+                print(\"  - Bad size\")\n                 continue\n-            G = E.lift_x(F(x))\n \n-            print(\"  - Analyzing (multiples of) point with X=%i\" % x)\n-\n-            # Skip points whose order is not a multiple of f. Project the point to have\n-            # order f otherwise.\n-            if (G.order() % f):\n-                print(\"    - Bad order\")\n-                continue\n-            G = G * (G.order() // f)\n+            # Construct a generator for that subgroup.\n+            gen = g * (g_order // f)\n+            assert(gen.order() == f)\n \n             # Find lambda for endomorphism. Skip if none can be found.\n             lam = None\n             for l in Integers(f)(1).nth_root(3, all=True):\n-                if int(l)*G == E(BETA*G[0], G[1]):\n+                if int(l)*gen == E(BETA*gen[0], gen[1]):\n                     lam = int(l)\n                     break\n             if lam is None:\n-                print(\"    - No endomorphism for this subgroup\")\n+                print(\"  - No endomorphism for this subgroup\")\n                 break\n \n-            # Now look for an isomorphism of the curve that gives this point an X\n-            # coordinate equal to 1.\n-            # If (x,y) is on y^2 = x^3 + b, then (a^2*x, a^3*y) is on y^2 = x^3 + a^6*b.\n-            # So look for m=a^2=1/x.\n-            m = F(1)/G[0]\n-            if not m.is_square():\n-                print(\"    - No curve isomorphism maps it to a point with X=1\")\n-                continue\n-            a = m.sqrt()\n-            rb = a^6*b\n-            RE = EllipticCurve(F, [0, rb])\n-\n-            # Use as generator twice the image of G under the above isormorphism.\n-            # This means that generator*(1/2 mod f) will have X coordinate 1.\n-            RG = RE(1, a^3*G[1]) * 2\n-            # And even Y coordinate.\n-            if int(RG[1]) % 2:\n-                RG = -RG\n-            assert(RG.order() == f)\n-            assert(lam*RG == RE(BETA*RG[0], RG[1]))\n-\n-            # We have found curve RE:y^2=x^3+rb with generator RG of order f. Remember it\n-            results[f] = {\"b\": rb, \"G\": RG, \"lambda\": lam}\n-            print(\"    - Found solution\")\n-            break\n+            # Add to gens all the generators for that subgroup.\n+            gens.setdefault(f, [])\n+            gens[f].extend((b, int(P[0]), int(P[1]), P, lam) for P in [n*gen for n in range(1, f)])\n+            print(\"  - Found solutions\")\n \n     print(\"\")\n \n+def output_generator(g, name):\n+    print(f\"#define {name} SECP256K1_GE_CONST(\\\\\")\n+    print(\"    0x%08x, 0x%08x, 0x%08x, 0x%08x,\\\\\" % tuple((int(g[0]) >> (32 * (7 - i))) & 0xffffffff for i in range(4)))\n+    print(\"    0x%08x, 0x%08x, 0x%08x, 0x%08x,\\\\\" % tuple((int(g[0]) >> (32 * (7 - i))) & 0xffffffff for i in range(4, 8)))\n+    print(\"    0x%08x, 0x%08x, 0x%08x, 0x%08x,\\\\\" % tuple((int(g[1]) >> (32 * (7 - i))) & 0xffffffff for i in range(4)))\n+    print(\"    0x%08x, 0x%08x, 0x%08x, 0x%08x\\\\\" % tuple((int(g[1]) >> (32 * (7 - i))) & 0xffffffff for i in range(4, 8)))\n+    print(\")\")\n+\n+def output_b(b):\n+    print(f\"#define SECP256K1_B {int(b)}U\")",
      "path": "sage/gen_exhaustive_groups.sage",
      "position": null,
      "original_position": 127,
      "commit_id": "ce60785b2654e60b43577dd75996b7020afbfec8",
      "original_commit_id": "28cba925eb8d6b434604595fad92bd9e1da54913",
      "in_reply_to_id": 1066740487,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Removed the \"U\".",
      "created_at": "2023-01-11T21:00:16Z",
      "updated_at": "2023-01-11T21:00:17Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1192#discussion_r1067452439",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1067452439"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1192"
        }
      },
      "start_line": null,
      "original_start_line": 74,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 75,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1067452934",
      "pull_request_review_id": 1244607231,
      "id": 1067452934,
      "node_id": "PRRC_kwDOAP4Jqs4_oAoG",
      "diff_hunk": "@@ -1,120 +1,121 @@\n load(\"secp256k1_params.sage\")\n \n+MAX_ORDER = 1000\n+\n+# Set of (curve) orders we have encountered so far.\n orders_done = set()\n-results = {}\n-first = True\n+\n+# Map from (subgroup) orders to [b, int(gen.x), int(gen.y), gen, lambda] for those subgroups.\n+gens = {}\n+\n+# Iterate over curves of the form y^2 = x^3 + B.\n for b in range(1, P):\n-    # There are only 6 curves (up to isomorphism) of the form y^2=x^3+B. Stop once we have tried all.\n+    # There are only 6 curves (up to isomorphism) of the form y^2 = x^3 + B. Stop once we have tried all.\n     if len(orders_done) == 6:\n         break\n \n     E = EllipticCurve(F, [0, b])\n     print(\"Analyzing curve y^2 = x^3 + %i\" % b)\n     n = E.order()\n+\n     # Skip curves with an order we've already tried\n     if n in orders_done:\n         print(\"- Isomorphic to earlier curve\")\n         continue\n     orders_done.add(n)\n+\n     # Skip curves isomorphic to the real secp256k1\n     if n.is_pseudoprime():\n         print(\" - Isomorphic to secp256k1\")\n         continue\n \n     print(\"- Finding subgroups\")\n \n-    # Find what prime subgroups exist\n-    for f, _ in n.factor():\n-        print(\"- Analyzing subgroup of order %i\" % f)\n-        # Skip subgroups of order >1000\n-        if f < 4 or f > 1000:\n-            print(\"  - Bad size\")\n-            continue\n-\n-        # Iterate over X coordinates until we find one that is on the curve, has order f,\n-        # and for which curve isomorphism exists that maps it to X coordinate 1.\n-        for x in range(1, P):\n-            # Skip X coordinates not on the curve, and construct the full point otherwise.\n-            if not E.is_x_coord(x):\n+    # Iterate over the generators of this curve.\n+    for g in E.gens():\n+        # Find what prime subgroups of group generated by g exist.\n+        g_order = g.order()\n+        for f, _ in g.order().factor():\n+            print(\"- Analyzing subgroup of order %i\" % f)\n+            # Skip subgroups that are too large.\n+            if f < 4 or f > MAX_ORDER:\n+                print(\"  - Bad size\")\n                 continue\n-            G = E.lift_x(F(x))\n \n-            print(\"  - Analyzing (multiples of) point with X=%i\" % x)\n-\n-            # Skip points whose order is not a multiple of f. Project the point to have\n-            # order f otherwise.\n-            if (G.order() % f):\n-                print(\"    - Bad order\")\n-                continue\n-            G = G * (G.order() // f)\n+            # Construct a generator for that subgroup.\n+            gen = g * (g_order // f)\n+            assert(gen.order() == f)\n \n             # Find lambda for endomorphism. Skip if none can be found.\n             lam = None\n             for l in Integers(f)(1).nth_root(3, all=True):\n-                if int(l)*G == E(BETA*G[0], G[1]):\n+                if int(l)*gen == E(BETA*gen[0], gen[1]):\n                     lam = int(l)\n                     break\n             if lam is None:\n-                print(\"    - No endomorphism for this subgroup\")\n+                print(\"  - No endomorphism for this subgroup\")\n                 break\n \n-            # Now look for an isomorphism of the curve that gives this point an X\n-            # coordinate equal to 1.\n-            # If (x,y) is on y^2 = x^3 + b, then (a^2*x, a^3*y) is on y^2 = x^3 + a^6*b.\n-            # So look for m=a^2=1/x.\n-            m = F(1)/G[0]\n-            if not m.is_square():\n-                print(\"    - No curve isomorphism maps it to a point with X=1\")\n-                continue\n-            a = m.sqrt()\n-            rb = a^6*b\n-            RE = EllipticCurve(F, [0, rb])\n-\n-            # Use as generator twice the image of G under the above isormorphism.\n-            # This means that generator*(1/2 mod f) will have X coordinate 1.\n-            RG = RE(1, a^3*G[1]) * 2\n-            # And even Y coordinate.\n-            if int(RG[1]) % 2:\n-                RG = -RG\n-            assert(RG.order() == f)\n-            assert(lam*RG == RE(BETA*RG[0], RG[1]))\n-\n-            # We have found curve RE:y^2=x^3+rb with generator RG of order f. Remember it\n-            results[f] = {\"b\": rb, \"G\": RG, \"lambda\": lam}\n-            print(\"    - Found solution\")\n-            break\n+            # Add to gens all the generators for that subgroup.\n+            gens.setdefault(f, [])\n+            gens[f].extend((b, int(P[0]), int(P[1]), P, lam) for P in [n*gen for n in range(1, f)])\n+            print(\"  - Found solutions\")\n \n     print(\"\")\n \n+def output_generator(g, name):\n+    print(f\"#define {name} SECP256K1_GE_CONST(\\\\\")\n+    print(\"    0x%08x, 0x%08x, 0x%08x, 0x%08x,\\\\\" % tuple((int(g[0]) >> (32 * (7 - i))) & 0xffffffff for i in range(4)))\n+    print(\"    0x%08x, 0x%08x, 0x%08x, 0x%08x,\\\\\" % tuple((int(g[0]) >> (32 * (7 - i))) & 0xffffffff for i in range(4, 8)))\n+    print(\"    0x%08x, 0x%08x, 0x%08x, 0x%08x,\\\\\" % tuple((int(g[1]) >> (32 * (7 - i))) & 0xffffffff for i in range(4)))\n+    print(\"    0x%08x, 0x%08x, 0x%08x, 0x%08x\\\\\" % tuple((int(g[1]) >> (32 * (7 - i))) & 0xffffffff for i in range(4, 8)))\n+    print(\")\")\n+\n+def output_b(b):\n+    print(f\"#define SECP256K1_B {int(b)}U\")\n+\n print(\"\")\n print(\"\")\n print(\"/* To be put in src/group_impl.h: */\")",
      "path": "sage/gen_exhaustive_groups.sage",
      "position": null,
      "original_position": 131,
      "commit_id": "ce60785b2654e60b43577dd75996b7020afbfec8",
      "original_commit_id": "28cba925eb8d6b434604595fad92bd9e1da54913",
      "in_reply_to_id": 1066741392,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I wrapped both sections in lines saying \"Begin/End of section generated by sage/gen_exhaustive_groups.size.\".",
      "created_at": "2023-01-11T21:00:52Z",
      "updated_at": "2023-01-11T21:00:52Z",
      "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1192#discussion_r1067452934",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/comments/1067452934"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1192"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 79,
      "side": "RIGHT"
    }
  ]
}