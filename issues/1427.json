{
  "type": "issue",
  "issue": {
    "id": 1920495384,
    "node_id": "I_kwDOAP4Jqs5yeG8Y",
    "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1427",
    "repository_url": "https://api.github.com/repos/bitcoin-core/secp256k1",
    "labels_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1427/labels%7B/name%7D",
    "comments_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1427/comments",
    "events_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1427/events",
    "html_url": "https://github.com/bitcoin-core/secp256k1/issues/1427",
    "number": 1427,
    "state": "open",
    "state_reason": null,
    "title": "Silent Payments (BIP352) module -- discussion about scope and interface",
    "body": "At the last CoreDev meeting the idea of creating a libsecp Silent Payments (BIP352) module for handling the low-level parts [was brought up](https://btctranscripts.com/bitcoin-core-dev-tech/2023-09/libsecp256k1-meeting/). I've spent some time recently studying the BIP and  it's current implementation (https://github.com/bitcoin/bips/pull/1458, see also tracking issue https://github.com/bitcoin/bitcoin/issues/28536) and thought about what parts would make sense to put into this new module. A good amount of code is ready to use, but before opening a concrete PR, I'd like to discuss the related questions \r\n* _What is the exact scope of a potential libsecp256k1 silent payments module?_ and \r\n* _What should a sane interface look like?_\r\n\r\nNote that when I talk about the caller side I'm not only thinking about Bitcoin Core (though this would obviously be the first one taking use of it); one of the benefits of providing a module would be to help other implementations with the hard low-level math parts about Silent Payments, i.e. the interface should definitely have the goal to be easy and intuitive to use.\r\n\r\nI'm listing some basic ingredients from the Silent Payments protocol and  my thoughts about scope/interface to each of them:\r\n\r\n### 1. calculate the outpoints hash (both sender and receiver sides) \r\n(see https://github.com/josibake/bips/blob/silent-payments-bip/bip-0352.mediawiki#user-content-Outpoints_hash)\r\n\r\nThis step includes sorting a given list of serialized 36-bytes outpoints (=32-bytes txid, 4-bytes vout) and then applying a SHA256 hash to the  concatenated result. Should a SP module living in libsecp256k1 land be involved in any of this at all? Three variants are possible:\r\n\r\n1) both sorting and hashing is done by the SP module\r\n2) sorting is done by the caller, hashing is done by the SP module\r\n3) both sorting and hashing has to be done by the caller\r\n\r\nFor the sake of simplicity, I'm leaning towards variant 3) here. Though it would be ideal if users wouldn't need to take care of any  intermediate computations needed for the protocol at all (not even hashing), it seems a bit odd to pass in specific transaction-internal data to an ECC-focused library. Looking at other libsecp modules, we primarily work with \"curve-relevant\" inputs like scalars and group elements (and their serializations), and I feel that handling more than that is out of scope and would be better suited for a different, higher-level library. Invoking a sorting algorithm in libsecp256k1 also just feels kind of odd (though technically easily possible, as [qsort(3)](https://man7.org/linux/man-pages/man3/qsort.3.html) is part of the standard library for C89).\r\n\r\nNote that the libsecp256k1 implementation of SHA256 is also not optimized and hence slower than the implementation in Bitcoin Core on common architectures.\r\n\r\n### 2. calculate the sum tweak of input private keys (sender side)\r\n(see https://github.com/josibake/bips/blob/silent-payments-bip/bip-0352.mediawiki#user-content-Creating_outputs)\r\n\r\nThis definitely sounds like something a SP module should take care of. It seems trivial to provide an interface for this part, and one would think that a simple function taking a single list of private keys (i.e. a pointer plus a counter in C world) would do it. The extra challenge here though is that for private keys that are used for taproot outputs, we need to negate them if they'd result in points with an odd y coordinate (to enforce even y parity for the scanning side which only sees an x-only-pubkey, see also https://github.com/josibake/bips/blob/silent-payments-bip/bip-0352.mediawiki#cite_note-why_negate_taproot_private_keys_15). So _some_ of the keys need special treatment. How do we cope with that w.r.t. to an interface that is not too confusing for the user?\r\n\r\n1) Pass two different lists, ones for private keys belonging to pre-taproot outputs and one for keys that result in taproot outputs? (or, create a `silentpayments_privkey` struct that has an extra flag which indicates if even y parity has to be enforced and use that?)\r\n2) Provide a helper function like `secp256k1_silentpayments_privkey_enforce_even_y_parity` that has to be applied on all private keys resulting in BIP341 outputs, before those private keys are passed to the summing function?\r\n\r\nBoth approaches don't sound ideal to me, to be honest, the first one is probably the lesser evil.\r\n\r\n### 3. calculate the sum tweak of input public keys (receiver side)\r\n\r\n(see https://github.com/josibake/bips/blob/silent-payments-bip/bip-0352.mediawiki#user-content-Scanning)\r\n\r\nIn contrast to private keys which are always just 32-bytes long for our purposes, public keys come in different sizes (33, 65 and 32 bytes) and formats (\"full\", x-only). The question arises how a user would pass in those different types in a single function call. Should we\r\n\r\n1) Pass in two lists, one of the type `secp256k1_pubkey`, another one of the type `secp256k1_xonly_pubkey`? (The user would need to call the corresponding parse functions before, obviously)\r\n2) Provide a function that let's the user convert xonly-pubkeys to pubkeys first (in this context, this should be simple by just prepending a 0x02 byte, IIUC) and then only take a single list of `secp256k1_pubkey` elements?\r\n3) Something else?\r\n\r\n### 4. calculate the shared secret using unhashed ECDH (both sides)\r\n\r\nThis seems obvious to put into the library, users shouldn't have the need define a \"not-a-hash\"-hash-functions to pass onto secp256k1_ecdh manually :)\r\n\r\n----\r\n\r\nI have to admit after digging deeper it seems that providing an easy interface seems to be a bit more challening than I thought to, especially considering that this can lead to ugly glue code to translate between C++ and C worlds.\r\n\r\nAny thoughts? Happy to hear any input, even an opinion like \"please, keep stuff like this stuff completely out of libsecp\" is helpful if it is well-founded. ",
    "user": {
      "login": "theStack",
      "id": 91535,
      "node_id": "MDQ6VXNlcjkxNTM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theStack",
      "html_url": "https://github.com/theStack",
      "followers_url": "https://api.github.com/users/theStack/followers",
      "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
      "organizations_url": "https://api.github.com/users/theStack/orgs",
      "repos_url": "https://api.github.com/users/theStack/repos",
      "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/theStack/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "assignees": [],
    "author_association": "CONTRIBUTOR",
    "locked": false,
    "comments": 0,
    "created_at": "2023-10-01T02:02:50Z",
    "updated_at": "2023-10-01T02:03:58Z"
  },
  "events": [
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-10-01T02:18:14Z",
      "updated_at": "2023-10-01T02:18:14Z",
      "source": {
        "issue": {
          "id": 1913356976,
          "node_id": "I_kwDOABII585yC4Kw",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28536",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28536/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28536/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28536/events",
          "html_url": "https://github.com/bitcoin/bitcoin/issues/28536",
          "number": 28536,
          "state": "open",
          "state_reason": null,
          "title": "BIP352 tracking issue",
          "body": "This issue will be updated to reflect the current state of [BIP352](https://github.com/bitcoin/bips/pull/1458) integration.\r\n\r\nPRs ready for review:\r\n\r\n* https://github.com/bitcoin/bips/pull/1458\r\n* https://github.com/bitcoin/bitcoin/pull/28122\r\n\r\nTesting:\r\n* For a wallet with send and receive support, compile https://github.com/bitcoin/bitcoin/pull/28453\r\n* Post your signet / testnet silent payment address in the comments!\r\n\r\nOverall plan:\r\n\r\n* Send and receive support in the Bitcoin Core wallet:\r\n  - [x] Code cleanup / refactor: https://github.com/bitcoin/bitcoin/pull/28244\r\n  - [x] Dependency: https://github.com/bitcoin/bitcoin/pull/28246\r\n  - [ ] Base protocol: https://github.com/bitcoin/bitcoin/pull/28122\r\n  - [ ] Sending (depends on 28122): https://github.com/bitcoin/bitcoin/pull/28201\r\n  - [ ] Receiving (depends on 28122, 28201): https://github.com/bitcoin/bitcoin/pull/28453\r\n  - [ ] Send and receive functional tests (depends on 28453) (not started)\r\n\r\n* Light client support:\r\n  - [ ] Index for silent payment tweaks (depends on 28122): https://github.com/bitcoin/bitcoin/pull/28241\r\n  - [ ] New BIP157 filter type for tweak data (not started)\r\n  - [ ] Serve new filter type (not started)\r\n\r\n* Long-term\r\n  - [ ] Move base protocol to `libsecp` as a module (not started)\r\n  - [ ] Refactor Core to use silent payments `libsecp` module directly (not started)\r\n\r\n<details>\r\n  <summary>Older stuff</summary>\r\n\r\n\r\n  <ul>\r\n  <li>Closed / Superseded:\r\n     <ul>\r\n     <li>Tracking PR (superseded by this issue): #27827</li>\r\n     <li>Receiving (superseded by 28453): #28202</li>\r\n      <li>Original draft implementation: #24897</li>\r\n      </ul>\r\n  </li>\r\n  </ul>\r\n</details>\r\n",
          "user": {
            "login": "josibake",
            "id": 7444140,
            "node_id": "MDQ6VXNlcjc0NDQxNDA=",
            "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/josibake",
            "html_url": "https://github.com/josibake",
            "followers_url": "https://api.github.com/users/josibake/followers",
            "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
            "organizations_url": "https://api.github.com/users/josibake/orgs",
            "repos_url": "https://api.github.com/users/josibake/repos",
            "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/josibake/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 64583,
              "node_id": "MDU6TGFiZWw2NDU4Mw==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Feature",
              "name": "Feature",
              "color": "7cf575",
              "default": false
            },
            {
              "id": 149424,
              "node_id": "MDU6TGFiZWwxNDk0MjQ=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet",
              "name": "Wallet",
              "color": "08a781",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": false,
          "comments": 5,
          "created_at": "2023-09-26T11:59:59Z",
          "updated_at": "2023-10-01T02:18:13Z"
        },
        "type": "issue"
      }
    }
  ]
}