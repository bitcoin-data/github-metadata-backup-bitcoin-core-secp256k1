{
  "type": "issue",
  "issue": {
    "id": 2396412710,
    "node_id": "I_kwDOAP4Jqs6O1lsm",
    "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1567",
    "repository_url": "https://api.github.com/repos/bitcoin-core/secp256k1",
    "labels_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1567/labels%7B/name%7D",
    "comments_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1567/comments",
    "events_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1567/events",
    "html_url": "https://github.com/bitcoin-core/secp256k1/issues/1567",
    "number": 1567,
    "state": "open",
    "state_reason": null,
    "title": "feature request: `with_randomized_context` method",
    "body": "In rust-secp256k1 we're exploring how we can best support a signing API for systems which potentially have no allocator, may be operating multiple threads, but which have very limited threading primitives (e.g. we have atomics with acquire/release semantics but no stdlib with prepackaged mutexes or other locks).\r\n\r\nI think a useful function would be something like\r\n\r\n```c\r\nint secp256k1_with_randomized_context(const unsigned char* seed32, cb callback, void* callback_data) {\r\n    /* create context object on the stack, which can't be done from the public API */\r\n    secp256k1_context_rerandomize(&ctx, seed32);\r\n    return callback(&ctx, callback_data);\r\n}\r\n```\r\n\r\n(where `cb` is a type alias for a callback that takes a context and void pointer and returns an int).\r\n\r\nOur usage here would be to implement a signing function that used a freshly randomized context but which did not require the user pass context objects through every API function, nor would it require us to maintain a global mutable context object, which is really hard to do without mutexes. The resulting function would be ~twice as slow as normal signing function but for many usecases this is acceptable since signing is not a frequent operation.\r\n\r\nOn the other hand, maintaining a global mutable 32-byte random seed would be super easy because we don't need any synchronization beyond the use of atomics to avoid UB.\r\n\r\ncc https://github.com/bitcoin-core/secp256k1/issues/780 which is closely related to this but more general.",
    "user": {
      "login": "apoelstra",
      "id": 1351933,
      "node_id": "MDQ6VXNlcjEzNTE5MzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1351933?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/apoelstra",
      "html_url": "https://github.com/apoelstra",
      "followers_url": "https://api.github.com/users/apoelstra/followers",
      "following_url": "https://api.github.com/users/apoelstra/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/apoelstra/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/apoelstra/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/apoelstra/subscriptions",
      "organizations_url": "https://api.github.com/users/apoelstra/orgs",
      "repos_url": "https://api.github.com/users/apoelstra/repos",
      "events_url": "https://api.github.com/users/apoelstra/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/apoelstra/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "assignees": [],
    "author_association": "CONTRIBUTOR",
    "locked": false,
    "comments": 0,
    "created_at": "2024-07-08T19:39:52Z",
    "updated_at": "2024-07-08T19:41:28Z"
  },
  "events": []
}