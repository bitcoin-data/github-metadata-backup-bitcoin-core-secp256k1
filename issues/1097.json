{
  "type": "issue",
  "issue": {
    "id": 1190488814,
    "node_id": "I_kwDOAP4Jqs5G9Wru",
    "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1097",
    "repository_url": "https://api.github.com/repos/bitcoin-core/secp256k1",
    "labels_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1097/labels%7B/name%7D",
    "comments_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1097/comments",
    "events_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1097/events",
    "html_url": "https://github.com/bitcoin-core/secp256k1/issues/1097",
    "number": 1097,
    "state": "open",
    "state_reason": null,
    "title": "Convert `secp256k1_xonly_pubkey` to `secp256k1_pubkey`",
    "body": "Is there a way to convert a `secp256k1_xonly_pubkey` into a `secp256k1_pubkey` ?\r\n\r\nReason: Extract `secp256k1_xonly_pubkey` from a P2TR address and use it as parameter to `secp256k1_ecdh()`.\r\n\r\nEdit: Seem related.\r\nhttps://github.com/bitcoin-core/secp256k1/pull/994\r\nhttps://github.com/bitcoin-core/secp256k1/pull/262",
    "user": {
      "login": "w0xlt",
      "id": 94266259,
      "node_id": "U_kgDOBZ5jkw",
      "avatar_url": "https://avatars.githubusercontent.com/u/94266259?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/w0xlt",
      "html_url": "https://github.com/w0xlt",
      "followers_url": "https://api.github.com/users/w0xlt/followers",
      "following_url": "https://api.github.com/users/w0xlt/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/w0xlt/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/w0xlt/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/w0xlt/subscriptions",
      "organizations_url": "https://api.github.com/users/w0xlt/orgs",
      "repos_url": "https://api.github.com/users/w0xlt/repos",
      "events_url": "https://api.github.com/users/w0xlt/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/w0xlt/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "assignees": [],
    "author_association": "NONE",
    "locked": false,
    "comments": 2,
    "created_at": "2022-04-02T04:06:44Z",
    "updated_at": "2022-04-03T20:44:56Z"
  },
  "events": [
    {
      "event": "commented",
      "id": 1086686416,
      "node_id": "IC_kwDOAP4Jqs5AxYTQ",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/1086686416",
      "actor": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-04-02T17:35:50Z",
      "updated_at": "2022-04-02T17:35:50Z",
      "author_association": "CONTRIBUTOR",
      "body": "> Is there a way to convert a `secp256k1_xonly_pubkey` into a `secp256k1_pubkey` ?\r\n\r\nNo.\r\n\r\nYou could prefix the serialized `xonly_pubkey` with 0x02 or 0x03 and then parse it into a normal pubkey. This works. Whether this is secure (whatever this means), depends on your application, and some of the discussion in #262 and #994 applies. Consult your cryptographer. ;)\r\n\r\nAs a proper solution, we should indeed think about #994. Can you say more about your use case?",
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/issues/1097#issuecomment-1086686416",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1097"
    },
    {
      "event": "commented",
      "id": 1086946055,
      "node_id": "IC_kwDOAP4Jqs5AyXsH",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/1086946055",
      "actor": {
        "login": "w0xlt",
        "id": 94266259,
        "node_id": "U_kgDOBZ5jkw",
        "avatar_url": "https://avatars.githubusercontent.com/u/94266259?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/w0xlt",
        "html_url": "https://github.com/w0xlt",
        "followers_url": "https://api.github.com/users/w0xlt/followers",
        "following_url": "https://api.github.com/users/w0xlt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/w0xlt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/w0xlt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/w0xlt/subscriptions",
        "organizations_url": "https://api.github.com/users/w0xlt/orgs",
        "repos_url": "https://api.github.com/users/w0xlt/repos",
        "events_url": "https://api.github.com/users/w0xlt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/w0xlt/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-04-03T20:44:56Z",
      "updated_at": "2022-04-03T20:44:56Z",
      "author_association": "NONE",
      "body": "Thanks for clarifying @real-or-random .\r\n\r\nThe use case is the \"[Basic Scheme](https://gist.github.com/RubenSomsen/c43b79517e7cb701ebf77eec6dbb46b8#basic-scheme)\" mentioned in the article \"Silent Payment\".\r\n\r\nFor testing purposes, I implemented an example of this scheme based on #994:\r\nhttps://github.com/w0xlt/secp256k1/blob/a9677ad9f064efd6c1f91afb9fa2f5d2ab43cd03/examples/spbs.c\r\n\r\nThe result is something like below :\r\n\r\n    Sender Secret Key:                      0x4740184e6841348dc9d5c76f7854164aced4e1f976aa7a1be3fcf8448a2fa5e9\r\n    Sender Serialized X-Only Public Key:    0xec6998a51c614bdd913472b5311d77e8907810991c298568c12450edfd1a0af2    \r\n    \r\n    Recipient Secret Key:                   0x397f71e54c44f06b69023159fd4e491fde73ac10feb5ba0eaa2298d5aa09381f\r\n    Recipient Serialized X-Only Public Key: 0xb66b5717c0500cfe702fdecadad9351227884cb2016dc9c3233a51f957344c02\r\n    \r\n    Sender Shared Secret:    0x9dd2bd3b402726bf3c40f48c419d871c60fb0501bf6b8123fbb6480ff4cf54a4\r\n    Recipient Shared Secret: 0x9dd2bd3b402726bf3c40f48c419d871c60fb0501bf6b8123fbb6480ff4cf54a4\r\n\r\n    Sender Output Public Key:    0x03f898ab3f25d3dab1e5e5aee56c8daf0284c5934d97ef41d12c70aba25c34bed4\r\n    Recipient Output Public Key: 0x03f898ab3f25d3dab1e5e5aee56c8daf0284c5934d97ef41d12c70aba25c34bed4\r\n\r\nAs the recipient needs to previously expose the public key for the sender to calculate the tweaked address, this can only be done with P2TR, where the public key is in x-only format.",
      "user": {
        "login": "w0xlt",
        "id": 94266259,
        "node_id": "U_kgDOBZ5jkw",
        "avatar_url": "https://avatars.githubusercontent.com/u/94266259?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/w0xlt",
        "html_url": "https://github.com/w0xlt",
        "followers_url": "https://api.github.com/users/w0xlt/followers",
        "following_url": "https://api.github.com/users/w0xlt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/w0xlt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/w0xlt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/w0xlt/subscriptions",
        "organizations_url": "https://api.github.com/users/w0xlt/orgs",
        "repos_url": "https://api.github.com/users/w0xlt/repos",
        "events_url": "https://api.github.com/users/w0xlt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/w0xlt/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/issues/1097#issuecomment-1086946055",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1097"
    },
    {
      "event": "mentioned",
      "id": 6358773411,
      "node_id": "MEE_lADOAP4Jqs5G9WruzwAAAAF7Ay6j",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/6358773411",
      "actor": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-04-03T20:44:56Z"
    },
    {
      "event": "subscribed",
      "id": 6358773413,
      "node_id": "SE_lADOAP4Jqs5G9WruzwAAAAF7Ay6l",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/6358773413",
      "actor": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-04-03T20:44:57Z"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "w0xlt",
        "id": 94266259,
        "node_id": "U_kgDOBZ5jkw",
        "avatar_url": "https://avatars.githubusercontent.com/u/94266259?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/w0xlt",
        "html_url": "https://github.com/w0xlt",
        "followers_url": "https://api.github.com/users/w0xlt/followers",
        "following_url": "https://api.github.com/users/w0xlt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/w0xlt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/w0xlt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/w0xlt/subscriptions",
        "organizations_url": "https://api.github.com/users/w0xlt/orgs",
        "repos_url": "https://api.github.com/users/w0xlt/repos",
        "events_url": "https://api.github.com/users/w0xlt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/w0xlt/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-04-03T20:51:49Z",
      "updated_at": "2022-04-03T20:51:49Z",
      "source": {
        "issue": {
          "id": 1030867735,
          "node_id": "PR_kwDOAP4Jqs4taZLY",
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/994",
          "repository_url": "https://api.github.com/repos/bitcoin-core/secp256k1",
          "labels_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/994/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/994/comments",
          "events_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/994/events",
          "html_url": "https://github.com/bitcoin-core/secp256k1/pull/994",
          "number": 994,
          "state": "open",
          "state_reason": null,
          "title": "x-only ECDH support",
          "body": "Technically this isn't required: you can always implement an x-only hashfn yourself, and convert to a compressed pubkey to call secp256k1_ecdh().  But I'm not smart enough to figure that out myself (thanks @jonasnick !) so here we are.\r\n\r\nAPI question: should the xonly version take a scalar or a keypair?\r\n\r\nImpl question: should this implementation live in ecdh, extrakeys, or even a new ecdh_extrakeys module?\r\n\r\nThanks!",
          "user": {
            "login": "rustyrussell",
            "id": 775844,
            "node_id": "MDQ6VXNlcjc3NTg0NA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/775844?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/rustyrussell",
            "html_url": "https://github.com/rustyrussell",
            "followers_url": "https://api.github.com/users/rustyrussell/followers",
            "following_url": "https://api.github.com/users/rustyrussell/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/rustyrussell/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/rustyrussell/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/rustyrussell/subscriptions",
            "organizations_url": "https://api.github.com/users/rustyrussell/orgs",
            "repos_url": "https://api.github.com/users/rustyrussell/repos",
            "events_url": "https://api.github.com/users/rustyrussell/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/rustyrussell/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 4975353639,
              "node_id": "LA_kwDOAP4Jqs8AAAABKI3fJw",
              "url": "https://api.github.com/repos/bitcoin-core/secp256k1/labels/feature",
              "name": "feature",
              "description": "",
              "color": "731E95",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": false,
          "comments": 10,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/994",
            "html_url": "https://github.com/bitcoin-core/secp256k1/pull/994",
            "diff_url": "https://github.com/bitcoin-core/secp256k1/pull/994.diff",
            "patch_url": "https://github.com/bitcoin-core/secp256k1/pull/994.patch"
          },
          "created_at": "2021-10-20T01:03:00Z",
          "updated_at": "2023-05-11T16:38:18Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-07-06T21:09:20Z",
      "updated_at": "2022-07-06T21:09:20Z",
      "source": {
        "issue": {
          "id": 1288194039,
          "node_id": "I_kwDOHIKaus5MyEf3",
          "url": "https://api.github.com/repos/jonasnick/bips/issues/32",
          "repository_url": "https://api.github.com/repos/jonasnick/bips",
          "labels_url": "https://api.github.com/repos/jonasnick/bips/issues/32/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/jonasnick/bips/issues/32/comments",
          "events_url": "https://api.github.com/repos/jonasnick/bips/issues/32/events",
          "html_url": "https://github.com/jonasnick/bips/issues/32",
          "number": 32,
          "state": "closed",
          "state_reason": "completed",
          "title": "The principle of just-in-time xonly",
          "body": "I believe that when specifying Bitocin related protocols we should only use xonly keys at the last moment when we need to produce something that goes on chain e.g a key or signature. In retrospect xonly keys may have been a mistake but I think if we take this approach we can minimise the complexity they introduce and maybe make that 1 byte we save worth it!\r\n\r\nOf course is not how the current spec is written. It takes in xonly keys into key aggregation and outputs a key in a kind of hybrid state that can be used to sign with as an xonly key but can also be tweaked as a ordinary key or xonly key. Applying the JIT xonly approach here means taking a two stage key generation approach.  First, the inputs to key aggregation would be ordinary keys and the output would be an ordinary key. This ordinary key could then have bip32 tweaks applied to it. Eventually it could be turned into into a xonly key that could have xonly tweaks applied to it (no bip32 tweaks) and could be used to start a signing session. \r\n\r\nOther than the complexity of all the negation accounting that has to go on with the way the spec is currently written what concerns me most is that people are going to want to do things like \"nested MuSig\" where each MuSig key may be another MuSig key (or even a FROST key). I can't clearly see how badly this will compound the problem but on the other hand I didn't expect xonly keys to introduce this much complexity in the first place.\r\n\r\nSo here's how I see pros and cons:\r\n\r\nPros:\r\n\r\n- Less likely to be sprawling complexity with nested schemes or composition with other schemes.\r\n- Only needs a single `gacc` negation flag (instead of the xor of three) applied at signing time. (see below)\r\n- BIP32 applied to keygen input and output is not ambiguous. Since MuSig is creating a xonly key to sign with then how should I apply BIP32 to it? I was thinking I should just put `02` in front of the xonly key. The correct answer is that there is `GetBytes33` which returns the full internal ordinary key. It feels like MuSig can't make up its mind whether it works with xonly keys or not.\r\n- Set the precedent for the JIT xonly approach early so others can avoid mistakenly thinking that xonly inputs to ptotocols is what the experts think is the way to go.\r\n\r\nCons:\r\n- Introduces a two-stage MuSig key state\r\n- Breaks association of xonly as the public key for all schnorr signatures (although FROST will do this anyway so this is a pro to me)\r\n- xonly keys would have to be converted to ordinary keys before being used as inputs in MuSig. You might need a different keypair type for MuSig than for Schnorr.\r\n\r\nFor me the pros  overwhelm the cons. Of course I have left out the \"con\" that this will require some work to rewrite and re-engineer the spec. I had planned to implement all of this in the python spec and make a PR but I was informed that I should make this suggestion as soon as possible because it was looking to be finalised soon.\r\n\r\n### Less negation variables\r\n\r\nIt is obvious why this change would get rid of the need of the `gp/has_even_y(P)` flag . The less obvious result is how `gacc` and `g` can be merged into one. This comes because you can set the initial value of `gacc` to `has_even_y(Q)` when you go from ordinary aggregate key to xonly. In fact you can do this simplification without changing the type of input keys so this suggestion is somewhat orthogonal. For example [here](https://github.com/LLFourn/secp256kfun/pull/97/files#diff-2e97b49f3d4c45ad46b87b0f53c9f7192d85f0aa122b3dab587bd9b7972e0baaR170-R182) I implement the transition from a ordinary aggregate key to a BIP340 xonly aggregate key. This still uses xonly input keys. Though since this change implies a multi-stage keygen context anyway it makes sense that these things go together.\r\n\r\nLet me know what you think and whether it's worth pursing doing the python implementation. Sorry again for suggesting big changes this late in the process.\r\n\r\n",
          "user": {
            "login": "LLFourn",
            "id": 3734083,
            "node_id": "MDQ6VXNlcjM3MzQwODM=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3734083?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/LLFourn",
            "html_url": "https://github.com/LLFourn",
            "followers_url": "https://api.github.com/users/LLFourn/followers",
            "following_url": "https://api.github.com/users/LLFourn/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/LLFourn/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/LLFourn/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/LLFourn/subscriptions",
            "organizations_url": "https://api.github.com/users/LLFourn/orgs",
            "repos_url": "https://api.github.com/users/LLFourn/repos",
            "events_url": "https://api.github.com/users/LLFourn/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/LLFourn/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [],
          "assignees": [],
          "author_association": "NONE",
          "locked": false,
          "comments": 21,
          "closed_at": "2022-09-23T20:47:49Z",
          "created_at": "2022-06-29T05:33:22Z",
          "updated_at": "2022-09-23T20:47:49Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "csjones",
        "id": 637026,
        "node_id": "MDQ6VXNlcjYzNzAyNg==",
        "avatar_url": "https://avatars.githubusercontent.com/u/637026?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/csjones",
        "html_url": "https://github.com/csjones",
        "followers_url": "https://api.github.com/users/csjones/followers",
        "following_url": "https://api.github.com/users/csjones/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/csjones/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/csjones/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/csjones/subscriptions",
        "organizations_url": "https://api.github.com/users/csjones/orgs",
        "repos_url": "https://api.github.com/users/csjones/repos",
        "events_url": "https://api.github.com/users/csjones/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/csjones/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-12-22T20:09:27Z",
      "updated_at": "2022-12-22T20:09:27Z",
      "source": {
        "issue": {
          "id": 1508325484,
          "node_id": "I_kwDOEIaIPc5Z5zhs",
          "url": "https://api.github.com/repos/GigaBitcoin/secp256k1.swift/issues/269",
          "repository_url": "https://api.github.com/repos/GigaBitcoin/secp256k1.swift",
          "labels_url": "https://api.github.com/repos/GigaBitcoin/secp256k1.swift/issues/269/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/GigaBitcoin/secp256k1.swift/issues/269/comments",
          "events_url": "https://api.github.com/repos/GigaBitcoin/secp256k1.swift/issues/269/events",
          "html_url": "https://github.com/GigaBitcoin/secp256k1.swift/issues/269",
          "number": 269,
          "state": "closed",
          "state_reason": "completed",
          "title": "Contructing a PublicKey with rawRepresentation fails with incorrect size",
          "body": "I'm trying to construct a `secp256k1.Signing.PublicKey` with a hex encoded string. \r\nThis is my code - \r\n```swift\r\nlet pubkeyHex = \"11cc106e72c654b64bb037d0ccbe2ff47187fa5bb77330dd70398c2cb051fbd6\"\r\nlet pubKey = try secp256k1.Signing.PublicKey(rawRepresentation: pubkeyHex.bytes, format: .compressed)\r\n```\r\nI get a an error with `incorrectKeySize`.\r\nI can see that my `pubkeyHex.bytes.count` is `32` and not `33`. Do I need to pad my hexstring ? \r\nAny pointers? \r\n\r\n----\r\nversion - `0.8.1`",
          "user": {
            "login": "pseudoramdom",
            "id": 101169910,
            "node_id": "U_kgDOBge69g",
            "avatar_url": "https://avatars.githubusercontent.com/u/101169910?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/pseudoramdom",
            "html_url": "https://github.com/pseudoramdom",
            "followers_url": "https://api.github.com/users/pseudoramdom/followers",
            "following_url": "https://api.github.com/users/pseudoramdom/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/pseudoramdom/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/pseudoramdom/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/pseudoramdom/subscriptions",
            "organizations_url": "https://api.github.com/users/pseudoramdom/orgs",
            "repos_url": "https://api.github.com/users/pseudoramdom/repos",
            "events_url": "https://api.github.com/users/pseudoramdom/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/pseudoramdom/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [],
          "assignees": [],
          "author_association": "NONE",
          "locked": false,
          "comments": 3,
          "closed_at": "2022-12-24T17:03:24Z",
          "created_at": "2022-12-22T17:56:36Z",
          "updated_at": "2022-12-24T17:03:25Z"
        },
        "type": "issue"
      }
    }
  ]
}