{
  "type": "issue",
  "issue": {
    "id": 1471085049,
    "node_id": "I_kwDOAP4Jqs5Xrvn5",
    "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1164",
    "repository_url": "https://api.github.com/repos/bitcoin-core/secp256k1",
    "labels_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1164/labels%7B/name%7D",
    "comments_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1164/comments",
    "events_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1164/events",
    "html_url": "https://github.com/bitcoin-core/secp256k1/issues/1164",
    "number": 1164,
    "state": "open",
    "state_reason": null,
    "title": "64x64->64 muls are not constant-time with MSVC on 32bit x86",
    "body": "From PR https://github.com/bitcoin-core/secp256k1/pull/711, which has been closed:\r\n\r\n> The issue is that MSVC for 32-bit targets implements 64x64->64 bit multiplications using a non-constant subroutine. The subroutine is not constant-time because it shortcuts when the high 32 bits of both multiplicands are all 0. See [research.kudelskisecurity.com/2017/01/16/when-constant-time-source-may-not-save-you](https://research.kudelskisecurity.com/2017/01/16/when-constant-time-source-may-not-save-you/) and also [bearssl.org/ctmul.html](https://www.bearssl.org/ctmul.html) for a broader view of the issue.\r\n\r\nI'm opening this GitHub issue here because the underlying issue hasn't been solved. (And I've checked the [compiler explorer](https://msvc.godbolt.org/#g:!((g:!((g:!((h:codeEditor,i:(filename:'1',fontScale:14,fontUsePx:'0',j:1,lang:___c,selection:(endColumn:1,endLineNumber:1,positionColumn:1,positionLineNumber:1,selectionStartColumn:1,selectionStartLineNumber:1,startColumn:1,startLineNumber:1),source:'%23include+%3Cstdint.h%3E%0A%0Auint64_t+mul(uint64_t+a,+uint64_t+b)+%7B%0A++++return+a+*+b%3B%0A%7D%0A'),l:'5',n:'0',o:'C+source+%231',t:'0')),k:50,l:'4',n:'0',o:'',s:0,t:'0'),(g:!((h:compiler,i:(compiler:vc_v19_latest_x86,deviceViewOpen:'1',filters:(b:'0',binary:'1',commentOnly:'0',demangle:'0',directives:'0',execute:'1',intel:'0',libraryCode:'0',trim:'1'),flagsViewOpen:'1',fontScale:14,fontUsePx:'0',j:1,lang:___c,libs:!(),options:'',selection:(endColumn:42,endLineNumber:6,positionColumn:42,positionLineNumber:6,selectionStartColumn:42,selectionStartLineNumber:6,startColumn:42,startLineNumber:6),source:1),l:'5',n:'0',o:'+x86+msvc+v19.latest+(Editor+%231)',t:'0')),k:50,l:'4',n:'0',o:'',s:0,t:'0')),l:'2',n:'0',o:'',t:'0')),version:4), the issue is still present on the latest msvc...)\r\n\r\nAfter #1000 and #1156, this is (much?) less severe because we now support 64-bit targets on MSVC, and MSVC produces proper constant-time muls for those targets, it just outputs `imul`.\r\n\r\nThe best solution is probably #815. ",
    "user": {
      "login": "real-or-random",
      "id": 1071625,
      "node_id": "MDQ6VXNlcjEwNzE2MjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/real-or-random",
      "html_url": "https://github.com/real-or-random",
      "followers_url": "https://api.github.com/users/real-or-random/followers",
      "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
      "organizations_url": "https://api.github.com/users/real-or-random/orgs",
      "repos_url": "https://api.github.com/users/real-or-random/repos",
      "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/real-or-random/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "assignees": [],
    "author_association": "MEMBER",
    "locked": false,
    "comments": 0,
    "created_at": "2022-12-01T10:44:01Z",
    "updated_at": "2022-12-01T10:44:01Z"
  },
  "events": []
}