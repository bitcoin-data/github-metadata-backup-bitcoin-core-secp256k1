{
  "type": "issue",
  "issue": {
    "id": 286727472,
    "node_id": "MDU6SXNzdWUyODY3Mjc0NzI=",
    "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/497",
    "repository_url": "https://api.github.com/repos/bitcoin-core/secp256k1",
    "labels_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/497/labels%7B/name%7D",
    "comments_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/497/comments",
    "events_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/497/events",
    "html_url": "https://github.com/bitcoin-core/secp256k1/issues/497",
    "number": 497,
    "state": "closed",
    "state_reason": "completed",
    "title": "Public key recovery from signature fails immediately after signing",
    "body": "Good evening.\r\n\r\nI've created iOS build of this library at https://github.com/shamatar/secp256k1_ios, basically it just build it with the following flags\r\n\r\n#define USE_NUM_NONE 1\r\n#define USE_FIELD_INV_BUILTIN 1\r\n#define USE_SCALAR_INV_BUILTIN 1\r\n#define ENABLE_MODULE_RECOVERY 1\r\n#define ENABLE_MODULE_ECDH 1\r\n#ifdef __LP64__\r\ntypedef __int128 int128_t;\r\ntypedef unsigned __int128 uint128_t;\r\n#define USE_FIELD_5X52 1\r\n#define USE_SCALAR_4X64 1\r\n#else\r\n#define USE_FIELD_10X26 1\r\n#define USE_SCALAR_8X32 1\r\n#endif\r\n\r\nAlthough during the usage I encounter an error in the procedure Recoverable signature -> Recover public key from the signature. I supply signature procedure with extra entropy (last parameter)\r\n and use rfc6979 nonce function\r\nsecp256k1_ecdsa_sign_recoverable(..., secp256k1_nonce_function_rfc6979, extraEntropyPointer)\r\n\r\nand then immediately check that public key from recovery \r\nsecp256k1_ecdsa_recoverable_signature_parse_compact\r\n\r\nand by direct conversion from private key\r\nsecp256k1_ec_pubkey_create\r\n\r\nof course all public keys are further converted to the same serialized format, although comparison of such keys sometimes fails and I have to retry all this procedure with another extra entropy. Usually number of such rounds is 1 to 5. I wonder if it's expected behavior or I should try to dig somewhere is sources.\r\n\r\nI've also tried to use secp256k1_ecdsa_sign_recoverable with no additional entropy and in this case procedure never succeeds for some input parameters.",
    "user": {
      "login": "shamatar",
      "id": 6467575,
      "node_id": "MDQ6VXNlcjY0Njc1NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6467575?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shamatar",
      "html_url": "https://github.com/shamatar",
      "followers_url": "https://api.github.com/users/shamatar/followers",
      "following_url": "https://api.github.com/users/shamatar/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/shamatar/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/shamatar/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/shamatar/subscriptions",
      "organizations_url": "https://api.github.com/users/shamatar/orgs",
      "repos_url": "https://api.github.com/users/shamatar/repos",
      "events_url": "https://api.github.com/users/shamatar/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/shamatar/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "assignees": [],
    "author_association": "NONE",
    "locked": false,
    "comments": 6,
    "closed_at": "2018-04-17T15:12:40Z",
    "created_at": "2018-01-08T12:14:36Z",
    "updated_at": "2018-04-17T15:12:40Z"
  },
  "events": [
    {
      "event": "commented",
      "id": 355953480,
      "node_id": "MDEyOklzc3VlQ29tbWVudDM1NTk1MzQ4MA==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/355953480",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-01-08T12:26:09Z",
      "updated_at": "2018-01-08T12:26:09Z",
      "author_association": "MEMBER",
      "body": "It's hard to follow what exact functions you're using. Can you provide a code snippet that fails?\r\n\r\nDo the tests compile and run on your target?",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/issues/497#issuecomment-355953480",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/497"
    },
    {
      "event": "commented",
      "id": 355956313,
      "node_id": "MDEyOklzc3VlQ29tbWVudDM1NTk1NjMxMw==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/355956313",
      "actor": {
        "login": "shamatar",
        "id": 6467575,
        "node_id": "MDQ6VXNlcjY0Njc1NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6467575?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/shamatar",
        "html_url": "https://github.com/shamatar",
        "followers_url": "https://api.github.com/users/shamatar/followers",
        "following_url": "https://api.github.com/users/shamatar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/shamatar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/shamatar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/shamatar/subscriptions",
        "organizations_url": "https://api.github.com/users/shamatar/orgs",
        "repos_url": "https://api.github.com/users/shamatar/repos",
        "events_url": "https://api.github.com/users/shamatar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/shamatar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-01-08T12:40:57Z",
      "updated_at": "2018-01-08T12:40:57Z",
      "author_association": "NONE",
      "body": "Here are 3 Swift bindings that I use for signing, recovering and converting private to public\r\n\r\n```\r\nstatic func signForRecovery(hash: Data, privateKey: Data) -> (compressed:Data?, uncompressed: Data?) {\r\n        if (hash.count != 32 || privateKey.count != 32) {return (nil, nil)}\r\n        if !SECP256K1.verifyPrivateKey(privateKey: privateKey) {\r\n            return (nil, nil)\r\n        }\r\n        for rounds in 0...1024 {\r\n            var extraEntropy = Data(count: 32)\r\n            for _ in 0...1024 {\r\n                let result = extraEntropy.withUnsafeMutableBytes {\r\n                    SecRandomCopyBytes(kSecRandomDefault, extraEntropy.count, $0)\r\n                }\r\n                if result == errSecSuccess {\r\n                    break\r\n                }\r\n            }\r\n            var uncompressed: secp256k1_ecdsa_recoverable_signature = secp256k1_ecdsa_recoverable_signature();\r\n            var result = hash.withUnsafeBytes { (hashPointer:UnsafePointer<UInt8>) -> Int32 in\r\n                privateKey.withUnsafeBytes { (privateKeyPointer:UnsafePointer<UInt8>) -> Int32 in\r\n                    extraEntropy.withUnsafeBytes { (extraEntropyPointer:UnsafePointer<UInt8>) -> Int32 in\r\n                        let res = secp256k1_ecdsa_sign_recoverable(context!, UnsafeMutablePointer<secp256k1_ecdsa_recoverable_signature>(&uncompressed), hashPointer, privateKeyPointer, secp256k1_nonce_function_rfc6979, extraEntropyPointer)\r\n                        return res\r\n                    }\r\n                }\r\n            }\r\n            if result == 0 {\r\n                continue\r\n//                return (nil, nil)\r\n            }\r\n            let uncompressedSignature = Data(toByteArray(uncompressed))\r\n            var compressedSignature = Data(count: 64)\r\n            var v: Int32 = 0\r\n            result = compressedSignature.withUnsafeMutableBytes { (compressedPointer:UnsafeMutablePointer<UInt8>) -> Int32 in\r\n                let res = secp256k1_ecdsa_recoverable_signature_serialize_compact(context!, compressedPointer, UnsafeMutablePointer<Int32>(&v), UnsafeMutablePointer<secp256k1_ecdsa_recoverable_signature>(&uncompressed))\r\n                return res\r\n            }\r\n            if result == 0 {\r\n                continue\r\n//                return (nil, nil)\r\n            }\r\n            let buffer = toByteArray(v)\r\n            compressedSignature.append(buffer.last!)\r\n            \r\n//            let S = BigUInt(compressedSignature[32..<65])\r\n//            if S > secp256k1_halfN {\r\n//                continue\r\n//            }\r\n\r\n            guard let recoveredPubKey = SECP256K1.recoverPublicKey(hash: hash, signature: compressedSignature) else {continue}\r\n            guard let truePubKey = SECP256K1.privateToPublic(privateKey: privateKey) else {continue}\r\n            if recoveredPubKey != truePubKey {continue}\r\n            print(\"Signature required \\(rounds) rounds\")\r\n            return (compressedSignature, uncompressedSignature)\r\n        }\r\n        return (nil, nil)\r\n    }\r\n    \r\n    static func privateToPublic(privateKey: Data, compressed: Bool = false) -> Data? {\r\n        if (privateKey.count != 32) {return nil}\r\n        var publicKey = secp256k1_pubkey()\r\n        var result = privateKey.withUnsafeBytes { (privateKeyPointer:UnsafePointer<UInt8>) -> Int32 in\r\n            let res = secp256k1_ec_pubkey_create(context!, UnsafeMutablePointer<secp256k1_pubkey>(&publicKey), privateKeyPointer)\r\n            return res\r\n        }\r\n        if result == 0 {\r\n            return nil\r\n        }\r\n        var keyLength = compressed ? 33 : 65\r\n        var serializedPubkey = Data(count: keyLength)\r\n        result = serializedPubkey.withUnsafeMutableBytes { (serializedPubkeyPointer:UnsafeMutablePointer<UInt8>) -> Int32 in\r\n            let res = secp256k1_ec_pubkey_serialize(context!,\r\n                                                    serializedPubkeyPointer,\r\n                                                    UnsafeMutablePointer<Int>(&keyLength),\r\n                                                    UnsafeMutablePointer<secp256k1_pubkey>(&publicKey),\r\n                                                    UInt32(compressed ? SECP256K1_EC_COMPRESSED : SECP256K1_EC_UNCOMPRESSED))\r\n            return res\r\n        }\r\n        return serializedPubkey\r\n    }\r\n    \r\n    static func recoverPublicKey(hash: Data, signature: Data, compressed: Bool = false) -> Data? {\r\n        guard hash.count == 32, signature.count == 65 else {return nil}\r\n        var uncompressed: secp256k1_ecdsa_recoverable_signature = secp256k1_ecdsa_recoverable_signature();\r\n        let compressedSignature = Data(signature[0..<64])\r\n        let v = Int32(signature[64])\r\n        var result = compressedSignature.withUnsafeBytes{ (compressedSignaturePointer: UnsafePointer<UInt8>) -> Int32 in\r\n                    let res = secp256k1_ecdsa_recoverable_signature_parse_compact(context!, UnsafeMutablePointer<secp256k1_ecdsa_recoverable_signature>(&uncompressed), compressedSignaturePointer, v)\r\n                    return res\r\n                }\r\n        if result == 0 {\r\n            return nil\r\n        }\r\n        var publicKey: secp256k1_pubkey = secp256k1_pubkey()\r\n        result = hash.withUnsafeBytes { (hashPointer:UnsafePointer<UInt8>) -> Int32 in\r\n            withUnsafePointer(to: &uncompressed) { (signaturePointer:UnsafePointer<secp256k1_ecdsa_recoverable_signature>) -> Int32 in\r\n                let res = secp256k1_ecdsa_recover(context!, UnsafeMutablePointer<secp256k1_pubkey>(&publicKey),\r\n                    signaturePointer, hashPointer)\r\n                return res\r\n            }\r\n        }\r\n        if result == 0 {\r\n            return nil\r\n        }\r\n        var keyLength = compressed ? 33 : 65\r\n        var serializedPubkey = Data(count: keyLength)\r\n        result = serializedPubkey.withUnsafeMutableBytes { (serializedPubkeyPointer:UnsafeMutablePointer<UInt8>) -> Int32 in\r\n            let res = secp256k1_ec_pubkey_serialize(context!,\r\n                                                    serializedPubkeyPointer,\r\n                                                    UnsafeMutablePointer<Int>(&keyLength),\r\n                                                    UnsafeMutablePointer<secp256k1_pubkey>(&publicKey),\r\n                                                    UInt32(compressed ? SECP256K1_EC_COMPRESSED : SECP256K1_EC_UNCOMPRESSED))\r\n            return res\r\n        }\r\n        return serializedPubkey\r\n    }\r\n```\r\n\r\nI didn't run tests yet, just packaged latest sources as CocoaPod with flags shown above (most general ones as I understand).\r\n\r\nSincerely, Alex",
      "user": {
        "login": "shamatar",
        "id": 6467575,
        "node_id": "MDQ6VXNlcjY0Njc1NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6467575?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/shamatar",
        "html_url": "https://github.com/shamatar",
        "followers_url": "https://api.github.com/users/shamatar/followers",
        "following_url": "https://api.github.com/users/shamatar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/shamatar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/shamatar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/shamatar/subscriptions",
        "organizations_url": "https://api.github.com/users/shamatar/orgs",
        "repos_url": "https://api.github.com/users/shamatar/repos",
        "events_url": "https://api.github.com/users/shamatar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/shamatar/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/issues/497#issuecomment-355956313",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/497"
    },
    {
      "event": "commented",
      "id": 355958066,
      "node_id": "MDEyOklzc3VlQ29tbWVudDM1NTk1ODA2Ng==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/355958066",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-01-08T12:50:23Z",
      "updated_at": "2018-01-08T12:50:23Z",
      "author_association": "MEMBER",
      "body": "Well please make sure the tests run first. Perhaps there is a bug in libsecp256k1 that only affects your build target.",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/issues/497#issuecomment-355958066",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/497"
    },
    {
      "event": "commented",
      "id": 356026192,
      "node_id": "MDEyOklzc3VlQ29tbWVudDM1NjAyNjE5Mg==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/356026192",
      "actor": {
        "login": "shamatar",
        "id": 6467575,
        "node_id": "MDQ6VXNlcjY0Njc1NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6467575?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/shamatar",
        "html_url": "https://github.com/shamatar",
        "followers_url": "https://api.github.com/users/shamatar/followers",
        "following_url": "https://api.github.com/users/shamatar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/shamatar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/shamatar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/shamatar/subscriptions",
        "organizations_url": "https://api.github.com/users/shamatar/orgs",
        "repos_url": "https://api.github.com/users/shamatar/repos",
        "events_url": "https://api.github.com/users/shamatar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/shamatar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-01-08T16:58:09Z",
      "updated_at": "2018-01-08T23:43:22Z",
      "author_association": "NONE",
      "body": "I've built it for macOS using the same parameters as used for iOS:\r\n\r\ncompiler = clang\r\n./configure --host=\"none-apple-darwin\" --enable-module-recovery --with-asm=no --with-bignum=no \r\n\r\n```\r\n## ----------- ##\r\n## confdefs.h. ##\r\n## ----------- ##\r\n\r\n/* confdefs.h */\r\n#define PACKAGE_NAME \"libsecp256k1\"\r\n#define PACKAGE_TARNAME \"libsecp256k1\"\r\n#define PACKAGE_VERSION \"0.1\"\r\n#define PACKAGE_STRING \"libsecp256k1 0.1\"\r\n#define PACKAGE_BUGREPORT \"\"\r\n#define PACKAGE_URL \"\"\r\n#define PACKAGE \"libsecp256k1\"\r\n#define VERSION \"0.1\"\r\n#define STDC_HEADERS 1\r\n#define HAVE_SYS_TYPES_H 1\r\n#define HAVE_SYS_STAT_H 1\r\n#define HAVE_STDLIB_H 1\r\n#define HAVE_STRING_H 1\r\n#define HAVE_MEMORY_H 1\r\n#define HAVE_STRINGS_H 1\r\n#define HAVE_INTTYPES_H 1\r\n#define HAVE_STDINT_H 1\r\n#define HAVE_UNISTD_H 1\r\n#define HAVE_DLFCN_H 1\r\n#define LT_OBJDIR \".libs/\"\r\n#define HAVE___INT128 1\r\n#define HAVE_BUILTIN_EXPECT 1\r\n#define USE_FIELD_5X52 1\r\n#define USE_NUM_NONE 1\r\n#define USE_FIELD_INV_BUILTIN 1\r\n#define USE_SCALAR_INV_BUILTIN 1\r\n#define USE_SCALAR_4X64 1\r\n#define USE_ECMULT_STATIC_PRECOMPUTATION 1\r\n#define ENABLE_MODULE_RECOVERY 1\r\n```\r\n\r\nTests have passed, I will try to do the same on simulator and real device. \r\n\r\nAlso I'd like to check if generation of ecmult_static_context.h on distribution machine (one that creates a package) is legitimate, so this header can be just included in the bundle, instead of being generated on target machine. As far as I understood this is a scratch space for computation and should only depend from 64 or 32 bits of architecture. Please correct me if I’m wrong. \r\n  ",
      "user": {
        "login": "shamatar",
        "id": 6467575,
        "node_id": "MDQ6VXNlcjY0Njc1NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6467575?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/shamatar",
        "html_url": "https://github.com/shamatar",
        "followers_url": "https://api.github.com/users/shamatar/followers",
        "following_url": "https://api.github.com/users/shamatar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/shamatar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/shamatar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/shamatar/subscriptions",
        "organizations_url": "https://api.github.com/users/shamatar/orgs",
        "repos_url": "https://api.github.com/users/shamatar/repos",
        "events_url": "https://api.github.com/users/shamatar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/shamatar/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/issues/497#issuecomment-356026192",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/497"
    },
    {
      "event": "commented",
      "id": 356957331,
      "node_id": "MDEyOklzc3VlQ29tbWVudDM1Njk1NzMzMQ==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/356957331",
      "actor": {
        "login": "shamatar",
        "id": 6467575,
        "node_id": "MDQ6VXNlcjY0Njc1NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6467575?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/shamatar",
        "html_url": "https://github.com/shamatar",
        "followers_url": "https://api.github.com/users/shamatar/followers",
        "following_url": "https://api.github.com/users/shamatar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/shamatar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/shamatar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/shamatar/subscriptions",
        "organizations_url": "https://api.github.com/users/shamatar/orgs",
        "repos_url": "https://api.github.com/users/shamatar/repos",
        "events_url": "https://api.github.com/users/shamatar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/shamatar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-01-11T14:53:24Z",
      "updated_at": "2018-01-11T14:53:24Z",
      "author_association": "NONE",
      "body": "I've run tests on simulator and the device (64 arch though) and didn't get any errors. With new config parameters signature now requires one attempt. Would you still explain a little about ecmult_static_context.h generation on one machine and using on other.\r\n\r\nSincerely, Alex ",
      "user": {
        "login": "shamatar",
        "id": 6467575,
        "node_id": "MDQ6VXNlcjY0Njc1NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6467575?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/shamatar",
        "html_url": "https://github.com/shamatar",
        "followers_url": "https://api.github.com/users/shamatar/followers",
        "following_url": "https://api.github.com/users/shamatar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/shamatar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/shamatar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/shamatar/subscriptions",
        "organizations_url": "https://api.github.com/users/shamatar/orgs",
        "repos_url": "https://api.github.com/users/shamatar/repos",
        "events_url": "https://api.github.com/users/shamatar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/shamatar/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/issues/497#issuecomment-356957331",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/497"
    },
    {
      "event": "commented",
      "id": 382029364,
      "node_id": "MDEyOklzc3VlQ29tbWVudDM4MjAyOTM2NA==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/382029364",
      "actor": {
        "login": "shamatar",
        "id": 6467575,
        "node_id": "MDQ6VXNlcjY0Njc1NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6467575?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/shamatar",
        "html_url": "https://github.com/shamatar",
        "followers_url": "https://api.github.com/users/shamatar/followers",
        "following_url": "https://api.github.com/users/shamatar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/shamatar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/shamatar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/shamatar/subscriptions",
        "organizations_url": "https://api.github.com/users/shamatar/orgs",
        "repos_url": "https://api.github.com/users/shamatar/repos",
        "events_url": "https://api.github.com/users/shamatar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/shamatar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-04-17T15:12:40Z",
      "updated_at": "2018-04-17T15:12:40Z",
      "author_association": "NONE",
      "body": "Solved, found a binding mistake",
      "user": {
        "login": "shamatar",
        "id": 6467575,
        "node_id": "MDQ6VXNlcjY0Njc1NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6467575?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/shamatar",
        "html_url": "https://github.com/shamatar",
        "followers_url": "https://api.github.com/users/shamatar/followers",
        "following_url": "https://api.github.com/users/shamatar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/shamatar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/shamatar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/shamatar/subscriptions",
        "organizations_url": "https://api.github.com/users/shamatar/orgs",
        "repos_url": "https://api.github.com/users/shamatar/repos",
        "events_url": "https://api.github.com/users/shamatar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/shamatar/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/issues/497#issuecomment-382029364",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/497"
    },
    {
      "event": "closed",
      "id": 1579107852,
      "node_id": "MDExOkNsb3NlZEV2ZW50MTU3OTEwNzg1Mg==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/1579107852",
      "actor": {
        "login": "shamatar",
        "id": 6467575,
        "node_id": "MDQ6VXNlcjY0Njc1NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6467575?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/shamatar",
        "html_url": "https://github.com/shamatar",
        "followers_url": "https://api.github.com/users/shamatar/followers",
        "following_url": "https://api.github.com/users/shamatar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/shamatar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/shamatar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/shamatar/subscriptions",
        "organizations_url": "https://api.github.com/users/shamatar/orgs",
        "repos_url": "https://api.github.com/users/shamatar/repos",
        "events_url": "https://api.github.com/users/shamatar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/shamatar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-04-17T15:12:40Z"
    }
  ]
}