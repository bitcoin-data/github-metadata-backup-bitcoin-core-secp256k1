{
  "type": "issue",
  "issue": {
    "id": 1167467617,
    "node_id": "I_kwDOAP4Jqs5FliRh",
    "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1087",
    "repository_url": "https://api.github.com/repos/bitcoin-core/secp256k1",
    "labels_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1087/labels%7B/name%7D",
    "comments_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1087/comments",
    "events_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1087/events",
    "html_url": "https://github.com/bitcoin-core/secp256k1/issues/1087",
    "number": 1087,
    "state": "open",
    "state_reason": null,
    "title": "General batch verification API context",
    "body": "context: https://github.com/bitcoin-core/secp256k1/pull/760#issuecomment-809242311\r\n\r\nI am trying to implement a PoC for the API proposed above. I have the following `batch_verify` object in mind.\r\n```C\r\ntypedef struct {\r\n    unsigned char chacha_seed[32];  /* for generating common randomizers (1, a2, a3 ... au) */\r\n    secp256k1_scalar randomizer_cache[2];\r\n    schnorrsig_batch_verify sigs_data;\r\n    tweaked_key_batch_verify tweaked_keys_data;\r\n} batch_verify_struct;\r\n\r\ntypdef struct {\r\n    secp256k1_scratch *sigs_data; /* (sig, msg, pk) */\r\n    size_t len; \r\n    size_t capacity; /* equals (sigs_data->max_size)/(64 + 32 + sizeof(secp256k1_xonly)) */\r\n    int result;\r\n} schnorrsig_batch_verify;\r\n\r\ntypdef struct {\r\n    secp256k1_scratch *tweaks_data; /* (pairity, tweaked_key, tweak32, pubkey_key) */\r\n    size_t len;\r\n    size_t capacity;\r\n    int result;\r\n} tweaked_key_batch_verify;\r\n```\r\n----\r\nI plan to use a scratch object to store the data (schnorrsig or tweaks) since it will allow us to keep on adding new data (using `batch_add_sig` and `batch_add_xpubkey_tweak`) and increase the batch object's size accordingly. This batch object doesn't seem compatible with [`ecmult_pippenger_batch`](https://github.com/bitcoin-core/secp256k1/blob/master/src/ecmult_impl.h#L643) or [`ecmult_strauss_batch`](https://github.com/bitcoin-core/secp256k1/blob/master/src/ecmult_impl.h#L355) function call.\r\n\r\nSince both Pippenger and Strauss takes the arguments:\r\n- `void *cbdata`  --> contains the required data\r\n- `secp256k1_scratch *scratch` --> newly allocated scratch space where scalars and points are loaded for multi multiplication\r\n\r\nBut this batch object already has the required data in a scratch space. Maybe use another scratch space for loading scalars and points? Won't this increase memory usage?\r\nAlso, does this API require a new module? Or including these in the `schnorrsig` module suffice?",
    "user": {
      "login": "siv2r",
      "id": 56887198,
      "node_id": "MDQ6VXNlcjU2ODg3MTk4",
      "avatar_url": "https://avatars.githubusercontent.com/u/56887198?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/siv2r",
      "html_url": "https://github.com/siv2r",
      "followers_url": "https://api.github.com/users/siv2r/followers",
      "following_url": "https://api.github.com/users/siv2r/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/siv2r/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/siv2r/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/siv2r/subscriptions",
      "organizations_url": "https://api.github.com/users/siv2r/orgs",
      "repos_url": "https://api.github.com/users/siv2r/repos",
      "events_url": "https://api.github.com/users/siv2r/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/siv2r/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "assignees": [],
    "author_association": "CONTRIBUTOR",
    "locked": false,
    "comments": 6,
    "created_at": "2022-03-13T03:26:36Z",
    "updated_at": "2022-04-26T20:36:39Z"
  },
  "events": [
    {
      "event": "commented",
      "id": 1066197845,
      "node_id": "IC_kwDOAP4Jqs4_jONV",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/1066197845",
      "actor": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-03-13T22:45:46Z",
      "updated_at": "2022-03-14T20:43:27Z",
      "author_association": "CONTRIBUTOR",
      "body": "This is a start. Ideally, the batch object does not hold signatures, messages and the likes. Instead, only scalars and points are stored on the batch object's scratch space. In order to avoid allocating space again for scalars and points in `ecmult_strauss_batch` and `ecmult_pippenger_batch`, we need to refactor these functions (and others) to be able to tell them that scalars and points already exist on the scratch space. For this idea (and your idea btw) to work, the scratch space provided to the batch object is exclusively owned by the batch object and must not be touched by the user anymore until batch verification is over. Another drawback is that we must represent points as `secp256k1_gej` because that's required by Strauss whereas `secp256k1_ge` would be sufficient for Pippenger.\r\n\r\nWe also need to keep in mind that we can not compute the Schnorr batch verification randomizer by hashing all signatures, public keys and messages as before. We just don't know all of them yet when `secp256k1_batch_add_sig` is called to add a single (randomized) scalar to the `batch` object's scratch space. A very simple approach (but not close to being optimally efficient) is to have a (tagged) `secp256k1_sha` object in the batch object that hashes everything that was seen so far. Everytime we need a fresh randomizer, a copy of the sha object is made and finalized. This approach of computing the randomizers only from input available so far would be covered by the proof [here](https://github.com/sipa/bips/issues/219).",
      "user": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/issues/1087#issuecomment-1066197845",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1087"
    },
    {
      "event": "commented",
      "id": 1067276801,
      "node_id": "IC_kwDOAP4Jqs4_nVoB",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/1067276801",
      "actor": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-03-14T20:54:29Z",
      "updated_at": "2022-03-14T20:54:29Z",
      "author_association": "CONTRIBUTOR",
      "body": "@real-or-random pointed out to me that there is a simpler solution at the cost of requiring more memory. What I had assumed above is that we compute the randomizer immediately to allow storing only the sum of scalars that are multiplied with G (c.f. `(s_1 + a_2⋅s_2 + ... + a_u⋅s_u)⋅G` in BIP-340). If we instead store each individual such scalar, we can delay computing the randomizer to right before batch verifying.\r\n\r\nWe can do this by having the batch object store a `secp256k1_sha` object. Every time something is added to the batch, we write the input data (e.g. message, public key, signature per BIP-340 batch verification recommendation) into the `sha` object, but do not randomize the scalars yet. Only right before batch verifying, we finalize the `sha` object to obtain a hash for seeding the CSPRNG. Each scalar is then multiplied with a randomizer (the right randomizer to be precise)",
      "user": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/issues/1087#issuecomment-1067276801",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1087"
    },
    {
      "event": "mentioned",
      "id": 6238639043,
      "node_id": "MEE_lADOAP4Jqs5FliRhzwAAAAFz2hPD",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/6238639043",
      "actor": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-03-14T20:54:30Z"
    },
    {
      "event": "subscribed",
      "id": 6238639049,
      "node_id": "SE_lADOAP4Jqs5FliRhzwAAAAFz2hPJ",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/6238639049",
      "actor": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-03-14T20:54:30Z"
    },
    {
      "event": "commented",
      "id": 1070959301,
      "node_id": "IC_kwDOAP4Jqs4_1YrF",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/1070959301",
      "actor": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-03-17T14:09:24Z",
      "updated_at": "2022-03-17T14:09:24Z",
      "author_association": "CONTRIBUTOR",
      "body": "Hm yeah, right but then we'll need to store the scalars as you point out, and I'm not sure that's worth the hassle. \r\n\r\nSo we'll anyway need to keep some O(u) things:\r\n - The pubkeys `P_i`\r\n - The nonces `r_i`\r\n\r\nAdding `s_i` will make be an increase of 50% and could mean that we'll support smaller batch sizes for a given memory. \r\n\r\nOn the other hand,  if you have enough memory, this argument won't apply. Moreover, the caller may keep the `s_i` (and also the other inputs around anyway). With an API that would require the caller not to touch these until the computation has been finalized, we could save a lot of memory (and copying). But that API will be harder to use correctly. Now that I say this, maybe a \"streaming\" API is the actually wrong approach and it should be just a single call as in the BIP. That's simple and stateless.\r\n\r\n",
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/issues/1087#issuecomment-1070959301",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1087"
    },
    {
      "event": "commented",
      "id": 1079775979,
      "node_id": "IC_kwDOAP4Jqs5AXBLr",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/1079775979",
      "actor": {
        "login": "siv2r",
        "id": 56887198,
        "node_id": "MDQ6VXNlcjU2ODg3MTk4",
        "avatar_url": "https://avatars.githubusercontent.com/u/56887198?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/siv2r",
        "html_url": "https://github.com/siv2r",
        "followers_url": "https://api.github.com/users/siv2r/followers",
        "following_url": "https://api.github.com/users/siv2r/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/siv2r/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/siv2r/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/siv2r/subscriptions",
        "organizations_url": "https://api.github.com/users/siv2r/orgs",
        "repos_url": "https://api.github.com/users/siv2r/repos",
        "events_url": "https://api.github.com/users/siv2r/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/siv2r/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-03-26T21:14:09Z",
      "updated_at": "2022-03-26T21:14:09Z",
      "author_association": "CONTRIBUTOR",
      "body": "Sorry for the delay.\r\n\r\nI took a look at `scratch_alloc` done by `pippenger_batch` and `strauss_batch`. A shared format for the scratch space (allocated with scalars and points), which the `ecmult_mulit_var` can pass to either `pippenger_batch` or `strauss_batch` (for multi multiplication), seems infeasible. I can think of two options now:\r\n1. refactor the scratch allocations done in `pippenger_batch` and `strauss_batch` to support a shared format.\r\n2. avoid a shared format for scratch space and use any one of `pippenger_batch` or `strauss_batch` for multi multiplication\r\n\r\nIs option1 the right approach?\r\n\r\n----\r\n**Batch object's Scratch Space Initialization:**\r\nuser calls `void batch_verify_init(secp256k1_context ctx, size_t n_terms)`\r\n```C\r\nbatch* batch_verify_init(size_t n_terms) {\r\n     batch ret;\r\n     scratch_size = strauss_scratch_size(n_terms) + STRAUSS_SCRATCH_OBJECT*16;\r\n     ret.scratch = scratch_create(&ctx->error_callback, scratch_size);\r\n     /* allocate space for n_terms (scalar, points) on scratch space*/ --> implementation info below\r\n     /* other necessary batch obj allocations */\r\n     return &ret;\r\n}\r\n````\r\nHere, we create scratch memory required for `n_terms` Strauss points since it is always greater than the scratch memory required for `n_terms` Pippenger points. The ecmult benchmark used a similar approach (see [here](https://github.com/bitcoin-core/secp256k1/blob/master/src/bench_ecmult.c#L312)). \r\n\r\nAllocating scratch memory for `n_terms` (scalar, points):\r\n- **_Format1:_** for supporting `strauss_batch` we need to do: (see [here](https://github.com/bitcoin-core/secp256k1/blob/master/src/ecmult_impl.h#L370-L371))\r\n```C\r\n     /* both of these are impl  using scratch_alloc() */\r\n    ret.scratch->points = scratch_alloc(n_terms * sizeof(secp256k1_gej));\r\n    ret.scratch->scalars = scratch_alloc(n_terms * sizeof(secp256k1_scalar));\r\n```\r\n- **_Format2:_** for supporting `pippenger_batch` we need to do: (see [here](https://github.com/bitcoin-core/secp256k1/blob/master/src/ecmult_impl.h#L668-L669))\r\n```C\r\n    ret.scratch->points = scratch_alloc((2*n_terms + 2) * sizeof(secp256k1_ge));\r\n    ret.scratch->scalars = scratch_alloc((2*n_terms + 2) * sizeof(secp256k1_scalar));\r\n```\r\nIf we use format1, we can't call `pippenger_batch`; if we use format2, we can't call `strauss_batch`. This is the format issue that I was talking about earlier.\r\n\r\n\r\n\r\n",
      "user": {
        "login": "siv2r",
        "id": 56887198,
        "node_id": "MDQ6VXNlcjU2ODg3MTk4",
        "avatar_url": "https://avatars.githubusercontent.com/u/56887198?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/siv2r",
        "html_url": "https://github.com/siv2r",
        "followers_url": "https://api.github.com/users/siv2r/followers",
        "following_url": "https://api.github.com/users/siv2r/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/siv2r/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/siv2r/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/siv2r/subscriptions",
        "organizations_url": "https://api.github.com/users/siv2r/orgs",
        "repos_url": "https://api.github.com/users/siv2r/repos",
        "events_url": "https://api.github.com/users/siv2r/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/siv2r/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/issues/1087#issuecomment-1079775979",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1087"
    },
    {
      "event": "commented",
      "id": 1082077704,
      "node_id": "IC_kwDOAP4Jqs5AfzII",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/1082077704",
      "actor": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-03-29T16:12:00Z",
      "updated_at": "2022-03-29T16:12:00Z",
      "author_association": "CONTRIBUTOR",
      "body": "> If we use format1, we can't call pippenger_batch;\r\n\r\nThat's not true if the pippenger algorithm is refactored appropriately. The algorithm would know  that `n_terms * sizeof(secp256k1_gej)` and `n_terms * sizeof(secp256k1_scalar)` are already on the scratch space. Therefore, it would only allocate `(n_terms + 2) * sizeof(secp256k1_ge)` and `(n_terms + 2) * sizeof(secp256k1_scalar)`.\r\n\r\nBesides, I like the idea that the batch object creates its own scratch space.",
      "user": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/issues/1087#issuecomment-1082077704",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1087"
    },
    {
      "event": "commented",
      "id": 1110225523,
      "node_id": "IC_kwDOAP4Jqs5CLLJz",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/1110225523",
      "actor": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-04-26T20:36:39Z",
      "updated_at": "2022-04-26T20:36:39Z",
      "author_association": "CONTRIBUTOR",
      "body": "@real-or-random\r\n\r\n> maybe a \"streaming\" API is the actually wrong approach\r\n\r\nThere's another advantage to having a single call instead of a streaming API. In general, developers want to know approximately how long a particular function call takes. With the \"streaming\" API one can not predict when a call to `batch_add_*` will be fast and when it will take much much longer.\r\n\r\n> and it should be just a single call as in the BIP\r\n\r\nIf there was a way to do this that allows multiple objects to be batch verified and is extensible this would be worth exploring. I just don't see how.",
      "user": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/issues/1087#issuecomment-1110225523",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1087"
    },
    {
      "event": "mentioned",
      "id": 6501845503,
      "node_id": "MEE_lADOAP4Jqs5FliRhzwAAAAGDikn_",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/6501845503",
      "actor": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-04-26T20:36:40Z"
    },
    {
      "event": "subscribed",
      "id": 6501845515,
      "node_id": "SE_lADOAP4Jqs5FliRhzwAAAAGDikoL",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/6501845515",
      "actor": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-04-26T20:36:40Z"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "siv2r",
        "id": 56887198,
        "node_id": "MDQ6VXNlcjU2ODg3MTk4",
        "avatar_url": "https://avatars.githubusercontent.com/u/56887198?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/siv2r",
        "html_url": "https://github.com/siv2r",
        "followers_url": "https://api.github.com/users/siv2r/followers",
        "following_url": "https://api.github.com/users/siv2r/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/siv2r/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/siv2r/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/siv2r/subscriptions",
        "organizations_url": "https://api.github.com/users/siv2r/orgs",
        "repos_url": "https://api.github.com/users/siv2r/repos",
        "events_url": "https://api.github.com/users/siv2r/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/siv2r/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-21T08:56:20Z",
      "updated_at": "2022-08-21T08:56:20Z",
      "source": {
        "issue": {
          "id": 1345427855,
          "node_id": "PR_kwDOAP4Jqs49gwcg",
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1134",
          "repository_url": "https://api.github.com/repos/bitcoin-core/secp256k1",
          "labels_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1134/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1134/comments",
          "events_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1134/events",
          "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1134",
          "number": 1134,
          "state": "open",
          "state_reason": null,
          "title": "Add an experimental batch module",
          "body": "### Overview\r\n\r\nThis PR adds support for batch verifying Schnorr signatures and tweaked x-only public key checks. It is based on the work of @jonasnick in #760. \r\n\r\n### Batch Verification\r\n\r\nThis implementation does not strictly follow the [BIP340 batch verification spec](https://github.com/bitcoin/bips/blob/master/bip-0340.mediawiki#batch-verification). The API design is loosely based on this suggestion: https://github.com/bitcoin-core/secp256k1/pull/760#issuecomment-809242311. Prior development discussion of this PR can be found in siv2r/secp256k1#2.\r\n\r\n### Speed Up\r\n - batch verifying Schnorr signatures is **_20% faster_** - [graph here](https://github.com/bitcoin-core/secp256k1/pull/1134/files#diff-583efe34fcab54bf7e5296bf65e522adc2345b3580e2a50ad5cccbd91dd82032)\r\n - batch verifying tweak pubkey checks is **_50% faster_** - [graph here](https://github.com/bitcoin-core/secp256k1/pull/1134/files#diff-1e73547c6cfbb18febec26224f0389d8ed1893ec7883f485a97caa583609b16b)\r\n\r\nFixes #1087",
          "user": {
            "login": "siv2r",
            "id": 56887198,
            "node_id": "MDQ6VXNlcjU2ODg3MTk4",
            "avatar_url": "https://avatars.githubusercontent.com/u/56887198?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/siv2r",
            "html_url": "https://github.com/siv2r",
            "followers_url": "https://api.github.com/users/siv2r/followers",
            "following_url": "https://api.github.com/users/siv2r/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/siv2r/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/siv2r/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/siv2r/subscriptions",
            "organizations_url": "https://api.github.com/users/siv2r/orgs",
            "repos_url": "https://api.github.com/users/siv2r/repos",
            "events_url": "https://api.github.com/users/siv2r/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/siv2r/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": false,
          "comments": 6,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin-core/secp256k1/pulls/1134",
            "html_url": "https://github.com/bitcoin-core/secp256k1/pull/1134",
            "diff_url": "https://github.com/bitcoin-core/secp256k1/pull/1134.diff",
            "patch_url": "https://github.com/bitcoin-core/secp256k1/pull/1134.patch"
          },
          "created_at": "2022-08-21T08:55:46Z",
          "updated_at": "2022-12-26T06:34:40Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-22T20:49:37Z",
      "updated_at": "2022-08-22T20:49:37Z",
      "source": {
        "issue": {
          "id": 1346968528,
          "node_id": "PR_kwDOAN28mc49l2CD",
          "url": "https://api.github.com/repos/bitcoin/bips/issues/1360",
          "repository_url": "https://api.github.com/repos/bitcoin/bips",
          "labels_url": "https://api.github.com/repos/bitcoin/bips/issues/1360/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bips/issues/1360/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bips/issues/1360/events",
          "html_url": "https://github.com/bitcoin/bips/pull/1360",
          "number": 1360,
          "state": "closed",
          "state_reason": null,
          "title": "bip-340: reduce size of randomizers to 128 bit and provide argument",
          "body": "This (currently) speeds up batch verification in libsecp256k1 by up to 9%.\r\n\r\nReopen of https://github.com/sipa/bips/pull/220 which was automatically closed. Closes https://github.com/sipa/bips/pull/219.\r\n\r\n- [ ] Consider replacing Schwartz-Zippel with proof by induction.\r\n\r\nApplying Schwartz-Zippel may be detrimental if we want to allow a more general approach where randomizer `a_i` only depend on `pk_1..pk_i`, `m_1..m_i` and `sig_1..sig_i` and not all pubkeys messages and sigs (this is actually currently implemented in https://github.com/bitcoin-core/secp256k1/issues/1087. Hence, one can choose `pk_{i+1}` and therefore bias `a_{i+1}` after computing `a_i`. SZ on the other hand requires the randomizers to be drawn random independently and uniformly.\r\n\r\nThe proof sketch in the [issue](https://github.com/sipa/bips/pull/219) does not use SZ but instead a proof by induction that appears to be better suited for dependent `a_i`.",
          "user": {
            "login": "jonasnick",
            "id": 2582071,
            "node_id": "MDQ6VXNlcjI1ODIwNzE=",
            "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jonasnick",
            "html_url": "https://github.com/jonasnick",
            "followers_url": "https://api.github.com/users/jonasnick/followers",
            "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
            "organizations_url": "https://api.github.com/users/jonasnick/orgs",
            "repos_url": "https://api.github.com/users/jonasnick/repos",
            "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/jonasnick/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": false,
          "comments": 1,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bips/pulls/1360",
            "html_url": "https://github.com/bitcoin/bips/pull/1360",
            "diff_url": "https://github.com/bitcoin/bips/pull/1360.diff",
            "patch_url": "https://github.com/bitcoin/bips/pull/1360.patch"
          },
          "closed_at": "2022-08-23T06:19:10Z",
          "created_at": "2022-08-22T20:49:37Z",
          "updated_at": "2022-08-23T06:19:10Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-23T09:41:32Z",
      "updated_at": "2022-08-23T09:41:32Z",
      "source": {
        "issue": {
          "id": 1347646277,
          "node_id": "PR_kwDOAOwp3849oFnE",
          "url": "https://api.github.com/repos/sipa/bips/issues/222",
          "repository_url": "https://api.github.com/repos/sipa/bips",
          "labels_url": "https://api.github.com/repos/sipa/bips/issues/222/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/sipa/bips/issues/222/comments",
          "events_url": "https://api.github.com/repos/sipa/bips/issues/222/events",
          "html_url": "https://github.com/sipa/bips/pull/222",
          "number": 222,
          "state": "open",
          "state_reason": null,
          "title": "bip-340: reduce size of randomizers to 128 bit and provide argument",
          "body": "This (currently) speeds up batch verification in libsecp256k1 by up to 9%.\r\n\r\nReopen of https://github.com/sipa/bips/pull/220 which was automatically closed. Closes https://github.com/sipa/bips/pull/219.\r\n\r\n- [ ] Consider replacing Schwartz-Zippel with proof by induction.\r\n\r\nApplying Schwartz-Zippel may be detrimental if we want to allow a more general approach where randomizer `a_i` only depend on `pk_1..pk_i`, `m_1..m_i` and `sig_1..sig_i` and not all pubkeys messages and sigs (this is actually currently implemented in https://github.com/bitcoin-core/secp256k1/issues/1087. Hence, one can choose `pk_{i+1}` and therefore bias `a_{i+1}` after computing `a_i`. SZ on the other hand requires the randomizers to be drawn random independently and uniformly.\r\n\r\nThe proof sketch in the [issue](https://github.com/sipa/bips/pull/219) does not use SZ but instead a proof by induction that appears to be better suited for dependent `a_i`.\r\n",
          "user": {
            "login": "jonasnick",
            "id": 2582071,
            "node_id": "MDQ6VXNlcjI1ODIwNzE=",
            "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jonasnick",
            "html_url": "https://github.com/jonasnick",
            "followers_url": "https://api.github.com/users/jonasnick/followers",
            "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
            "organizations_url": "https://api.github.com/users/jonasnick/orgs",
            "repos_url": "https://api.github.com/users/jonasnick/repos",
            "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/jonasnick/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [],
          "assignees": [],
          "author_association": "NONE",
          "locked": false,
          "comments": 2,
          "pull_request": {
            "url": "https://api.github.com/repos/sipa/bips/pulls/222",
            "html_url": "https://github.com/sipa/bips/pull/222",
            "diff_url": "https://github.com/sipa/bips/pull/222.diff",
            "patch_url": "https://github.com/sipa/bips/pull/222.patch"
          },
          "created_at": "2022-08-23T09:41:32Z",
          "updated_at": "2023-06-05T13:18:36Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-10T13:30:57Z",
      "updated_at": "2023-05-10T13:30:57Z",
      "source": {
        "issue": {
          "id": 1703946347,
          "node_id": "I_kwDOAP4Jqs5lkChr",
          "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1302",
          "repository_url": "https://api.github.com/repos/bitcoin-core/secp256k1",
          "labels_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1302/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1302/comments",
          "events_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1302/events",
          "html_url": "https://github.com/bitcoin-core/secp256k1/issues/1302",
          "number": 1302,
          "state": "open",
          "state_reason": null,
          "title": "Rework or get rid of scratch space ",
          "body": "Our confidence in the scratch space code isn't particularly high. It reinvents bump allocation, but it had a few issues in the past. All the code that uses scratch space is currently unreachable from the public API (except that we have `secp256k1_scratch_create` and `secp256k1_scratch_destroy` themselves in the public API.\r\n\r\nA much simpler alternative is to get rid of scratch spaces and just assume the existence of `malloc`/`free` and use these directly. The disadvantage of this is that it's a bit harder for platforms that don't have `malloc`. \r\n\r\nAnother alternative is to rework the scratch space code. It may be possible to simply it and improve its usability.  \r\n\r\nI think our future directions on this should be guided by whatever we feel is best for our cases:\r\n  - batch validation (see https://github.com/bitcoin-core/secp256k1/issues/1087 and https://github.com/bitcoin-core/secp256k1/pull/1134)\r\n  - possibly musig2 key aggregation (maybe this is something people want to do run on hardware wallets?)",
          "user": {
            "login": "real-or-random",
            "id": 1071625,
            "node_id": "MDQ6VXNlcjEwNzE2MjU=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/real-or-random",
            "html_url": "https://github.com/real-or-random",
            "followers_url": "https://api.github.com/users/real-or-random/followers",
            "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
            "organizations_url": "https://api.github.com/users/real-or-random/orgs",
            "repos_url": "https://api.github.com/users/real-or-random/repos",
            "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/real-or-random/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 165017692,
              "node_id": "MDU6TGFiZWwxNjUwMTc2OTI=",
              "url": "https://api.github.com/repos/bitcoin-core/secp256k1/labels/assurance",
              "name": "assurance",
              "description": "",
              "color": "A6DF3D",
              "default": false
            },
            {
              "id": 4975353639,
              "node_id": "LA_kwDOAP4Jqs8AAAABKI3fJw",
              "url": "https://api.github.com/repos/bitcoin-core/secp256k1/labels/feature",
              "name": "feature",
              "description": "",
              "color": "731E95",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": false,
          "comments": 3,
          "created_at": "2023-05-10T13:30:57Z",
          "updated_at": "2023-05-11T17:16:23Z"
        },
        "type": "issue"
      }
    }
  ]
}