{
  "type": "issue",
  "issue": {
    "id": 2556979186,
    "node_id": "I_kwDOAP4Jqs6YaGfy",
    "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1610",
    "repository_url": "https://api.github.com/repos/bitcoin-core/secp256k1",
    "labels_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1610/labels%7B/name%7D",
    "comments_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1610/comments",
    "events_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1610/events",
    "html_url": "https://github.com/bitcoin-core/secp256k1/issues/1610",
    "number": 1610,
    "state": "open",
    "state_reason": null,
    "title": "Add extra API for offline/online phases in ECDSA signing",
    "body": "We'd love to split the ECDSA signing operation into two steps:\r\n- an \"offline\" step that is independent on the message,\r\n- an \"online\" step that depends on the message.\r\n\r\nThe advantage here is that the offline step can be precomputed arbitrarily early and do \"most of the computational work\". This is very useful for signers that have a lot of idle time before the signing request comes in, but little time to compute and return the signature. For example, hardware wallets.\r\n\r\nIn ECDSA, the offline step can essentially compute nonce generation + scalar multiplication + nonce modular inversion. These values (\"precomputed material\") are input to the online part. The online part just finishes the ECDSA computation. The online part is extremely fast (we're seeing around 5000x faster than the offline phase in a non-libsecp256k1 proof-of-concept).\r\n\r\nThe precomputed material is secret, can only be used once and needs to be wiped after usage.\r\n\r\nAPI-wise this would probably mean adding two functions: \r\n * `secp256k1_ecdsa_sign_split_phase_precompute()`\r\n * `secp256k1_ecdsa_sign_split_phase_online()`\r\n\r\nThe composition of the two functions compute `secp256k1_ecdsa_sign()`. The input/output behavior does not change. \r\n\r\n\r\nIs there any appetite for this? Happy to write the code for this.\r\n",
    "user": {
      "login": "RandomLattice",
      "id": 128569685,
      "node_id": "U_kgDOB6nRVQ",
      "avatar_url": "https://avatars.githubusercontent.com/u/128569685?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/RandomLattice",
      "html_url": "https://github.com/RandomLattice",
      "followers_url": "https://api.github.com/users/RandomLattice/followers",
      "following_url": "https://api.github.com/users/RandomLattice/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/RandomLattice/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/RandomLattice/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/RandomLattice/subscriptions",
      "organizations_url": "https://api.github.com/users/RandomLattice/orgs",
      "repos_url": "https://api.github.com/users/RandomLattice/repos",
      "events_url": "https://api.github.com/users/RandomLattice/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/RandomLattice/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "assignees": [],
    "author_association": "CONTRIBUTOR",
    "locked": false,
    "comments": 0,
    "created_at": "2024-09-30T15:15:06Z",
    "updated_at": "2024-09-30T15:15:06Z"
  },
  "events": []
}