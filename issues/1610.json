{
  "type": "issue",
  "issue": {
    "id": 2556979186,
    "node_id": "I_kwDOAP4Jqs6YaGfy",
    "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1610",
    "repository_url": "https://api.github.com/repos/bitcoin-core/secp256k1",
    "labels_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1610/labels%7B/name%7D",
    "comments_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1610/comments",
    "events_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1610/events",
    "html_url": "https://github.com/bitcoin-core/secp256k1/issues/1610",
    "number": 1610,
    "state": "open",
    "state_reason": null,
    "title": "Add extra API for offline/online phases in ECDSA signing",
    "body": "We'd love to split the ECDSA signing operation into two steps:\r\n- an \"offline\" step that is independent on the message,\r\n- an \"online\" step that depends on the message.\r\n\r\nThe advantage here is that the offline step can be precomputed arbitrarily early and do \"most of the computational work\". This is very useful for signers that have a lot of idle time before the signing request comes in, but little time to compute and return the signature. For example, hardware wallets.\r\n\r\nIn ECDSA, the offline step can essentially compute nonce generation + scalar multiplication + nonce modular inversion. These values (\"precomputed material\") are input to the online part. The online part just finishes the ECDSA computation. The online part is extremely fast (we're seeing around 5000x faster than the offline phase in a non-libsecp256k1 proof-of-concept).\r\n\r\nThe precomputed material is secret, can only be used once and needs to be wiped after usage.\r\n\r\nAPI-wise this would probably mean adding two functions: \r\n * `secp256k1_ecdsa_sign_split_phase_precompute()`\r\n * `secp256k1_ecdsa_sign_split_phase_online()`\r\n\r\nThe composition of the two functions compute `secp256k1_ecdsa_sign()`. The input/output behavior does not change. \r\n\r\n\r\nIs there any appetite for this? Happy to write the code for this.\r\n",
    "user": {
      "login": "RandomLattice",
      "id": 128569685,
      "node_id": "U_kgDOB6nRVQ",
      "avatar_url": "https://avatars.githubusercontent.com/u/128569685?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/RandomLattice",
      "html_url": "https://github.com/RandomLattice",
      "followers_url": "https://api.github.com/users/RandomLattice/followers",
      "following_url": "https://api.github.com/users/RandomLattice/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/RandomLattice/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/RandomLattice/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/RandomLattice/subscriptions",
      "organizations_url": "https://api.github.com/users/RandomLattice/orgs",
      "repos_url": "https://api.github.com/users/RandomLattice/repos",
      "events_url": "https://api.github.com/users/RandomLattice/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/RandomLattice/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 4975353639,
        "node_id": "LA_kwDOAP4Jqs8AAAABKI3fJw",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/labels/feature",
        "name": "feature",
        "description": "",
        "color": "731E95",
        "default": false
      },
      {
        "id": 4975389731,
        "node_id": "LA_kwDOAP4Jqs8AAAABKI5sIw",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/labels/performance",
        "name": "performance",
        "description": "",
        "color": "DE3CCC",
        "default": false
      }
    ],
    "assignees": [],
    "author_association": "CONTRIBUTOR",
    "locked": false,
    "comments": 5,
    "created_at": "2024-09-30T15:15:06Z",
    "updated_at": "2024-10-04T16:55:00Z"
  },
  "events": [
    {
      "event": "unsubscribed",
      "id": 14458237495,
      "node_id": "UE_lADOAP4Jqs6YaGfyzwAAAANdxzI3",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/14458237495",
      "actor": {
        "login": "romanz",
        "id": 9900,
        "node_id": "MDQ6VXNlcjk5MDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9900?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/romanz",
        "html_url": "https://github.com/romanz",
        "followers_url": "https://api.github.com/users/romanz/followers",
        "following_url": "https://api.github.com/users/romanz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/romanz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/romanz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/romanz/subscriptions",
        "organizations_url": "https://api.github.com/users/romanz/orgs",
        "repos_url": "https://api.github.com/users/romanz/repos",
        "events_url": "https://api.github.com/users/romanz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/romanz/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-30T15:18:27Z"
    },
    {
      "event": "labeled",
      "id": 14506579305,
      "node_id": "LE_lADOAP4Jqs6YaGfyzwAAAANgqNVp",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/14506579305",
      "actor": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-03T15:41:11Z",
      "label": {
        "name": "feature",
        "color": "731E95"
      }
    },
    {
      "event": "labeled",
      "id": 14506579320,
      "node_id": "LE_lADOAP4Jqs6YaGfyzwAAAANgqNV4",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/14506579320",
      "actor": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-03T15:41:11Z",
      "label": {
        "name": "performance",
        "color": "DE3CCC"
      }
    },
    {
      "event": "commented",
      "id": 2391758208,
      "node_id": "IC_kwDOAP4Jqs6Oj1WA",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/2391758208",
      "actor": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-03T15:48:25Z",
      "updated_at": "2024-10-03T15:48:25Z",
      "author_association": "CONTRIBUTOR",
      "body": "> The precomputed material is secret, can only be used once and needs to be wiped after usage.\r\n\r\nIndeed, and this is the drawback of this. It's a major footgun, and I'm sure this is the reason why it's currently implemented this way.\r\n\r\nPersonally, I'm a bit on the fence. We're about to add a [MuSig2 module](https://github.com/bitcoin-core/secp256k1/pull/1479), which is also prone to nonce-reuse failures -- but in that case, it is unavoidable to split nonce generation and the actual signing into two separate steps. In the end, I don't think I'm against giving users advanced and dangerous features, but they should be clearly marked as such.\r\n\r\nI'd love to hear your use case and scenario here. Noone has asked for this before, and I doubt many users will benefit. (And anyway, ECDSA can be considered somewhat deprecated in Bitcoin, but okay, the same could be done for Schnorr signing). Do you personally need/want this, or is this is just a suggestion for improvement?\r\n\r\nIt would be interesting to know what other contributors and maintainers think. ",
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/issues/1610#issuecomment-2391758208",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1610"
    },
    {
      "event": "commented",
      "id": 2393147995,
      "node_id": "IC_kwDOAP4Jqs6OpIpb",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/2393147995",
      "actor": {
        "login": "RandomLattice",
        "id": 128569685,
        "node_id": "U_kgDOB6nRVQ",
        "avatar_url": "https://avatars.githubusercontent.com/u/128569685?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/RandomLattice",
        "html_url": "https://github.com/RandomLattice",
        "followers_url": "https://api.github.com/users/RandomLattice/followers",
        "following_url": "https://api.github.com/users/RandomLattice/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/RandomLattice/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/RandomLattice/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/RandomLattice/subscriptions",
        "organizations_url": "https://api.github.com/users/RandomLattice/orgs",
        "repos_url": "https://api.github.com/users/RandomLattice/repos",
        "events_url": "https://api.github.com/users/RandomLattice/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/RandomLattice/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-04T08:34:01Z",
      "updated_at": "2024-10-04T08:34:01Z",
      "author_association": "CONTRIBUTOR",
      "body": "> this is the drawback of this. It's a major footgun\r\n\r\nI think we have ways to make this less of a footgun. For example, here goes a simple mitigation. We can add to the precomputed material data struct a flag `has_been_used` meant to detect reuse. The consumer function of the struct uses this flag as follows:\r\n - checks on function enter that `has_been_used == NOT_USED_YET`. Refuses to continue if this doesn't check.\r\n - sets `has_been_used` to `ALREADY_USED`\r\n - proceeds to perform the actual computation (possibly following sad paths)\r\n\r\nLike this, a user has to go out of their way to use this unsafely (by modifying fields in an opaque struct). This doesn't cover the contrived case where the user is reusing precomputed material that got persisted _before_ the flag change; but I think that's a narrow corner case that can be dealt with a clear warning: do not reuse nonce material if you're using this API.\r\n\r\nI imagine you've considered similar things for MuSig2, curious what you think.\r\n\r\n> I don't think I'm against giving users advanced and dangerous features, but they should be clearly marked as such\r\n\r\nI think this is the right tradeoff. We can clearly mark the precomputed material as secret and that it cannot be re-used.\r\n\r\n> I'd love to hear your use case and scenario here. [...] Do you personally need/want this, or is this is just a suggestion for improvement?\r\n\r\nI'm asking others to chime in and give better context. Long story short is that we're hitting a performance bottleneck in Bitkey hardware wallet (https://github.com/proto-at-block/bitkey). We need to speed up (by a lot) the signing operation for large transactions if we want to use libsecp256k1.\r\n",
      "user": {
        "login": "RandomLattice",
        "id": 128569685,
        "node_id": "U_kgDOB6nRVQ",
        "avatar_url": "https://avatars.githubusercontent.com/u/128569685?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/RandomLattice",
        "html_url": "https://github.com/RandomLattice",
        "followers_url": "https://api.github.com/users/RandomLattice/followers",
        "following_url": "https://api.github.com/users/RandomLattice/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/RandomLattice/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/RandomLattice/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/RandomLattice/subscriptions",
        "organizations_url": "https://api.github.com/users/RandomLattice/orgs",
        "repos_url": "https://api.github.com/users/RandomLattice/repos",
        "events_url": "https://api.github.com/users/RandomLattice/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/RandomLattice/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/issues/1610#issuecomment-2393147995",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1610"
    },
    {
      "event": "commented",
      "id": 2393523572,
      "node_id": "IC_kwDOAP4Jqs6OqkV0",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/2393523572",
      "actor": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-04T11:48:43Z",
      "updated_at": "2024-10-04T11:48:43Z",
      "author_association": "CONTRIBUTOR",
      "body": "> > this is the drawback of this. It's a major footgun\r\n> \r\n> I think we have ways to make this less of a footgun. For example, here goes a simple mitigation. We can add to the precomputed material data struct a flag `has_been_used` meant to detect reuse. [...]\r\n> \r\n> Like this, a user has to go out of their way to use this unsafely (by modifying fields in an opaque struct). \r\n\r\n> This doesn't cover the contrived case where the user is reusing precomputed material that got persisted _before_ the flag change; but I think that's a narrow corner case that can be dealt with a clear warning: do not reuse nonce material if you're using this API.\r\n\r\nI don't think it's contrived. What if you run inside a VM and the VM is reset? What if the caller decides to memcpy the nonce, or write it to disk? (We can document that one must not do this, but this doesn't necessarily mean that people will adhere to the rules.)  \r\n\r\nThe second large concern is that one cannot use deterministic nonce generation when the message is not known. So you'll need a good source of randomness during signing.\r\n\r\nBut yeah, we're apparently willing to accept that risk in the MuSig2 API, so it's not entirely crazy to add a similar API also for ordinary signatures.\r\n\r\n> I imagine you've considered similar things for MuSig2, curious what you think.\r\n\r\nIn the MuSig2 PR, we simply overwrite the nonce with zeros after using it. That's a tiny bit safer and doesn't need a flag. \r\n\r\n> Long story short is that we're hitting a performance bottleneck in Bitkey hardware wallet ([proto-at-block/bitkey](https://github.com/proto-at-block/bitkey)). We need to speed up (by a lot) the signing operation for large transactions if we want to use libsecp256k1.\r\n\r\nI'm curious why you use ECDSA at all in a modern wallet. Schnorr signing is 27% faster on my machine, I'd be curious about the difference on the hardware wallet. The difference is probably mostly due to the RFC6979 hashing in ECDSA, which is overkill. So [switching to a faster nonce derivation function](https://github.com/bitcoin-core/secp256k1/issues/757#issuecomment-697225995) should already speed up things a lot without introducing risks. \r\n\r\nAlso, have you tried with a recent version (>=0.5.0), and have you tried all precomputation table sizes on your platform? (See https://github.com/bitcoin-core/secp256k1/blob/master/CHANGELOG.md#changed-1, note that we changed the default in 0.5.1) ",
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/issues/1610#issuecomment-2393523572",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1610"
    },
    {
      "event": "commented",
      "id": 2393679053,
      "node_id": "IC_kwDOAP4Jqs6OrKTN",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/2393679053",
      "actor": {
        "login": "RandomLattice",
        "id": 128569685,
        "node_id": "U_kgDOB6nRVQ",
        "avatar_url": "https://avatars.githubusercontent.com/u/128569685?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/RandomLattice",
        "html_url": "https://github.com/RandomLattice",
        "followers_url": "https://api.github.com/users/RandomLattice/followers",
        "following_url": "https://api.github.com/users/RandomLattice/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/RandomLattice/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/RandomLattice/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/RandomLattice/subscriptions",
        "organizations_url": "https://api.github.com/users/RandomLattice/orgs",
        "repos_url": "https://api.github.com/users/RandomLattice/repos",
        "events_url": "https://api.github.com/users/RandomLattice/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/RandomLattice/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-04T13:12:22Z",
      "updated_at": "2024-10-04T13:12:22Z",
      "author_association": "CONTRIBUTOR",
      "body": "Thanks for the great discussion.\r\n\r\n> I don't think it's contrived. What if you run inside a VM and the VM is reset? What if the caller decides to memcpy the nonce, or write it to disk? (We can document that one must not do this, but this doesn't necessarily mean that people will adhere to the rules.)\r\n\r\nI agree rollback is bad. I think in the VM case, one would not use the new proposed API. One would just use the existing API. The new proposed API is suitable for a specific use case we're hitting \"in real life\": an embedded device (=constrained computing device) that a) needs to sign \"very fast\" and b) has plenty of time for precomputation before the signing request comes in.\r\n\r\n> The second large concern is that one cannot use deterministic nonce generation when the message is not known.\r\n\r\nWe cannot use RFC6979 to generate the secret nonce when the message is not known. But that doesn't mean we can use other approaches for deterministic nonce generation (see next paragraph).\r\n\r\n> So you'll need a good source of randomness during signing.\r\n\r\nYes, that is one way, but not the only one. Alternatively, one can use a monotonic counter / unique (public) value as input to a keyed hash to construct the secret nonce. I'm not necessarily advocating for this; it all depends on the specific use case and definitely we're in the territory of \"you need to know what you're doing\". I think the new API should be generic enough to allow the user to do this kind of choices.\r\n\r\n> But yeah, we're apparently willing to accept that risk in the MuSig2 API, so it's not entirely crazy to add a similar API also for ordinary signatures.\r\n\r\nSounds reasonable, thanks.\r\n\r\n> In the MuSig2 PR, we simply overwrite the nonce with zeros after using it. That's a tiny bit safer and doesn't need a flag.\r\n\r\nSure, that would also work. Happy to take this approach too.\r\n\r\n> have you tried with a recent version (>=0.5.0), and have you tried all precomputation table sizes on your platform?\r\n\r\nI'll let others chime in, I don't have the numbers right now with me. Thanks for all the suggestions!",
      "user": {
        "login": "RandomLattice",
        "id": 128569685,
        "node_id": "U_kgDOB6nRVQ",
        "avatar_url": "https://avatars.githubusercontent.com/u/128569685?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/RandomLattice",
        "html_url": "https://github.com/RandomLattice",
        "followers_url": "https://api.github.com/users/RandomLattice/followers",
        "following_url": "https://api.github.com/users/RandomLattice/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/RandomLattice/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/RandomLattice/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/RandomLattice/subscriptions",
        "organizations_url": "https://api.github.com/users/RandomLattice/orgs",
        "repos_url": "https://api.github.com/users/RandomLattice/repos",
        "events_url": "https://api.github.com/users/RandomLattice/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/RandomLattice/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/issues/1610#issuecomment-2393679053",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1610"
    },
    {
      "event": "commented",
      "id": 2394112088,
      "node_id": "IC_kwDOAP4Jqs6Os0BY",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/2394112088",
      "actor": {
        "login": "jmecom",
        "id": 6612870,
        "node_id": "MDQ6VXNlcjY2MTI4NzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6612870?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jmecom",
        "html_url": "https://github.com/jmecom",
        "followers_url": "https://api.github.com/users/jmecom/followers",
        "following_url": "https://api.github.com/users/jmecom/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jmecom/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jmecom/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jmecom/subscriptions",
        "organizations_url": "https://api.github.com/users/jmecom/orgs",
        "repos_url": "https://api.github.com/users/jmecom/repos",
        "events_url": "https://api.github.com/users/jmecom/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jmecom/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-04T16:54:59Z",
      "updated_at": "2024-10-04T16:54:59Z",
      "author_association": "NONE",
      "body": "Hopping in here -- this would be useful for [Bitkey](https://bitkey.world/)'s firmware, which does transaction signing over NFC using `libsecp256k1`. The chip we're using is an [EFR32MG24](https://www.silabs.com/documents/public/data-sheets/efr32mg24-datasheet.pdf), so it's not particularly fast, and we've recently had some performance issues when users try to sign many inputs back-to-back in one NFC session on their phone.\r\n\r\nWe're considering using our chip's hardware accelerated ECDSA, but we prefer `libsecp256k1` for various reasons; and the hardware doesn't support Schnorr signatures naturally, so we're a bit stuck there without a different optimization.\r\n\r\n> I'm curious why you use ECDSA at all in a modern wallet. Schnorr signing is 27% faster on my machine, I'd be curious about the difference on the hardware wallet.\r\n\r\nNot all exchanges support [sending to bech32m](https://whentaproot.org/), so it's a bit difficult to eschew ECDSA completely. On our chip, ECDSA takes ~60ms and Schnorr takes ~55ms. We can't use large precomputation tables due to limited RAM.\r\n\r\nI do think the optimization being proposed here is _mostly_ useful for resource constrained embedded systems, but it could be very useful in those settings.",
      "user": {
        "login": "jmecom",
        "id": 6612870,
        "node_id": "MDQ6VXNlcjY2MTI4NzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6612870?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jmecom",
        "html_url": "https://github.com/jmecom",
        "followers_url": "https://api.github.com/users/jmecom/followers",
        "following_url": "https://api.github.com/users/jmecom/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jmecom/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jmecom/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jmecom/subscriptions",
        "organizations_url": "https://api.github.com/users/jmecom/orgs",
        "repos_url": "https://api.github.com/users/jmecom/repos",
        "events_url": "https://api.github.com/users/jmecom/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jmecom/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/issues/1610#issuecomment-2394112088",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1610"
    }
  ]
}