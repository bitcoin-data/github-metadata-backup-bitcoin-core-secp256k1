{
  "type": "issue",
  "issue": {
    "id": 1656695552,
    "node_id": "I_kwDOAP4Jqs5ivysA",
    "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1261",
    "repository_url": "https://api.github.com/repos/bitcoin-core/secp256k1",
    "labels_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1261/labels%7B/name%7D",
    "comments_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1261/comments",
    "events_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1261/events",
    "html_url": "https://github.com/bitcoin-core/secp256k1/issues/1261",
    "number": 1261,
    "state": "open",
    "state_reason": null,
    "title": "fiat-crypto + CryptOpt tracking issue ",
    "body": "[fiat-crypto](https://github.com/mit-plv/fiat-crypto) can generate verified field code for multiple targets, e.g., C and x86_64 asm. It has algorithm templates for our [mul](https://github.com/mit-plv/fiat-crypto/pull/1500) and [sqr](https://github.com/mit-plv/fiat-crypto/pull/1576) algorithm (under the name \"Dettman\") for secp256k1's field. But the current implementation misses at least one optimization that we have in our C code (but not asm), namely the one #810.\r\n\r\n[CryptOpt](https://github.com/0xADE1A1DE/CryptOpt) can optimize fiat-crypto's output, producing significantly faster asm while retaining the formal guarantees.\r\n\r\nA plausible route towards using these projects in this library is:\r\n - [x] Optimize the algorithm template in fiat-crypto code further by implementing the optimization from #810 and perhaps further refinements. This is tracked in https://github.com/mit-plv/fiat-crypto/issues/1582. This would ideally be done by the fiat-crypto folks (in particular @OwenConoly who contributed the initial implementation). \r\n - [ ] If fiat-crypto's C output is fast enough (ideally on par with our current C code), replace the current C code by fiat-crypto's C code.\r\n - [ ] If CryptoOpt provides a significant enough further speedup, replace the current x86_64 asm by fiat-crypto + CryptOpt x86_64 asm. Since the current output of CryptOpt is not fully generic x86_64 asm, we need either of these two: \r\n   - [ ] Add CPU id on our side\r\n   - [ ] Modify CryptOpt so that it uses only instructions available on all x86_64 CPUs    ",
    "user": {
      "login": "real-or-random",
      "id": 1071625,
      "node_id": "MDQ6VXNlcjEwNzE2MjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/real-or-random",
      "html_url": "https://github.com/real-or-random",
      "followers_url": "https://api.github.com/users/real-or-random/followers",
      "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
      "organizations_url": "https://api.github.com/users/real-or-random/orgs",
      "repos_url": "https://api.github.com/users/real-or-random/repos",
      "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/real-or-random/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 165017692,
        "node_id": "MDU6TGFiZWwxNjUwMTc2OTI=",
        "url": "https://api.github.com/repos/bitcoin-core/secp256k1/labels/assurance",
        "name": "assurance",
        "description": "",
        "color": "A6DF3D",
        "default": false
      }
    ],
    "assignees": [],
    "author_association": "MEMBER",
    "locked": false,
    "comments": 29,
    "created_at": "2023-04-06T05:36:17Z",
    "updated_at": "2023-06-01T09:48:00Z"
  },
  "events": [
    {
      "event": "mentioned",
      "id": 8941776292,
      "node_id": "MEE_lADOAP4Jqs5ivysAzwAAAAIU-K2k",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/8941776292",
      "actor": {
        "login": "OwenConoly",
        "id": 56445576,
        "node_id": "MDQ6VXNlcjU2NDQ1NTc2",
        "avatar_url": "https://avatars.githubusercontent.com/u/56445576?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/OwenConoly",
        "html_url": "https://github.com/OwenConoly",
        "followers_url": "https://api.github.com/users/OwenConoly/followers",
        "following_url": "https://api.github.com/users/OwenConoly/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/OwenConoly/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/OwenConoly/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/OwenConoly/subscriptions",
        "organizations_url": "https://api.github.com/users/OwenConoly/orgs",
        "repos_url": "https://api.github.com/users/OwenConoly/repos",
        "events_url": "https://api.github.com/users/OwenConoly/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/OwenConoly/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-04-06T05:36:17Z"
    },
    {
      "event": "subscribed",
      "id": 8941776300,
      "node_id": "SE_lADOAP4Jqs5ivysAzwAAAAIU-K2s",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/8941776300",
      "actor": {
        "login": "OwenConoly",
        "id": 56445576,
        "node_id": "MDQ6VXNlcjU2NDQ1NTc2",
        "avatar_url": "https://avatars.githubusercontent.com/u/56445576?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/OwenConoly",
        "html_url": "https://github.com/OwenConoly",
        "followers_url": "https://api.github.com/users/OwenConoly/followers",
        "following_url": "https://api.github.com/users/OwenConoly/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/OwenConoly/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/OwenConoly/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/OwenConoly/subscriptions",
        "organizations_url": "https://api.github.com/users/OwenConoly/orgs",
        "repos_url": "https://api.github.com/users/OwenConoly/repos",
        "events_url": "https://api.github.com/users/OwenConoly/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/OwenConoly/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-04-06T05:36:17Z"
    },
    {
      "event": "subscribed",
      "id": 8941792433,
      "node_id": "SE_lADOAP4Jqs5ivysAzwAAAAIU-Oyx",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/8941792433",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-04-06T05:39:55Z"
    },
    {
      "event": "commented",
      "id": 1512278288,
      "node_id": "IC_kwDOAP4Jqs5aI4kQ",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/1512278288",
      "actor": {
        "login": "dderjoel",
        "id": 13455345,
        "node_id": "MDQ6VXNlcjEzNDU1MzQ1",
        "avatar_url": "https://avatars.githubusercontent.com/u/13455345?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dderjoel",
        "html_url": "https://github.com/dderjoel",
        "followers_url": "https://api.github.com/users/dderjoel/followers",
        "following_url": "https://api.github.com/users/dderjoel/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dderjoel/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dderjoel/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dderjoel/subscriptions",
        "organizations_url": "https://api.github.com/users/dderjoel/orgs",
        "repos_url": "https://api.github.com/users/dderjoel/repos",
        "events_url": "https://api.github.com/users/dderjoel/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dderjoel/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-04-18T00:36:00Z",
      "updated_at": "2023-04-18T00:36:00Z",
      "author_association": "NONE",
      "body": "Hi everyone, It took me a bit but I now have some numbers.\r\n\r\nI've used those nine machines\r\n| CPU                     | ùúá-architecture |\r\n| -- | -- | \r\n| Intel Core i7-6770HQ    | Skylake-H |\r\n| Intel Core i7-10710U    | Comet Lake-U |\r\n| Intel Core i9-10900K    | Comet Lake-S |\r\n| Intel Core i7-11700KF   | Rocket Lake-S |\r\n| Intel Core i9-13900KF   | Raptor Lake-S |\r\n| AMD Ryzen Theadr. 1900X | Zen 1 |\r\n| AMD Ryzen 7 5800X       | Zen 3 |\r\n| AMD Ryzen 9 5950X       | Zen 3 |\r\n| AMD Ryzen 9 7950X       | Zen 4 |\r\n\r\nI've created a little [project here](https://github.com/dderjoel/secp_bench), which takes this library as the base.\r\nFor `default_asm`, it compiles with `./configure --with-asm=x86_64` using the current asm implementation.\r\nFor `default_c`, it compiles with `./configure --with-asm=no` using the current c implementation.\r\nFor `default_c52`, it replaces the c-implementation with the version before the PR #810 , then compiles with `./configure --with-asm=no`. I've included that to compare that with fiat_c.\r\nFor `fiat_c`, it replaces the c implementation with the [Fiat Cryptography implementation](https://github.com/mit-plv/fiat-crypto/blob/master/fiat-c/src/secp256k1_dettman_64.c) (which does not feature the #810 optimization.)\r\nFor `fiat_cryptopt`, it uses Fiat as a starting point, then optimizes mul and square on all those machines, and I've included the 'on average best' one.\r\nSo on average, we see that for the `ecmult_gen` the `fiat_c` is more performant than the `default_asm` and `fiat_cryptopt` is  even faster than that and the current `default_c`.\r\n\r\nNumbers for the `secp256k1` benchmarks `./bench_internal simple` and `./bench_ecmult` (I've commented out the `multi_`benches to succeed in a timely manner.)\r\n\r\n### Geometric mean over nine machines (per-machine tables at the end of the post)\r\n|      implementation|         default_asm|           default_c|         default_c52|              fiat_c|       fiat_cryptopt|\r\n|---|---|---|---|---|---|\r\n|          ecmult_gen|             24.6435|             23.2049|             24.7301|             24.1802|             22.8905|\r\n|        ecmult_const|              46.798|             43.8816|             47.4836|             45.7434|             42.6387|\r\n|           ecmult_1p|             37.0311|             34.1909|               37.06|             35.7762|             33.1715|\r\n|         ecmult_0p_g|             25.3775|             23.7174|             26.1944|             25.0963|             23.3779|\r\n|         ecmult_1p_g|             21.6629|             19.9417|             21.5685|             20.8703|              19.412|\r\n|          field_half|          0.00333343|          0.00333149|          0.00334944|          0.00342343|           0.0033374|\r\n|     field_normalize|           0.0112975|           0.0113496|           0.0113459|           0.0112799|           0.0112925|\r\n|field_normalize_weak|          0.00447881|          0.00451408|          0.00449407|          0.00450251|          0.00453795|\r\n|           field_sqr|           0.0215233|           0.0194716|           0.0213214|           0.0189657|           0.0190589|\r\n|           field_mul|           0.0258206|           0.0219956|           0.0244374|           0.0240141|           0.0226145|\r\n|       field_inverse|             2.13491|             2.13158|             2.13192|             2.13569|             2.14261|\r\n|   field_inverse_var|             1.39323|             1.39281|              1.3899|             1.39515|             1.39883|\r\n| field_is_square_var|             1.82198|             1.83353|             1.84074|             1.83197|             1.82702|\r\n|          field_sqrt|             5.94338|              5.4591|             5.88598|             5.29186|             5.28916|\r\n\r\nIn addition to the benchmarks of the library, I also used the SUPERCOP framework, in which I've included [implementations with the same mul/square.](https://github.com/dderjoel/supercop/tree/main/crypto_scalarmult/secp256k1). This is similar to the table in the paper, but instead of optimizing and comparing on one single machine (not shown in the table below) I've included one particular implementation which I ran on all machines. The numbers are cycles for four scalar multiplications (two base point, two variable point). We see that on GM, the `fiat_cryptopt` is again the most performant one.\r\n\r\n|Implementation |Lang. |1900X |5800X |5950X |7950X |i7 6G |i7 10G |i9 10G |i7 11G |i9 13G |G.M.|\r\n|-- |-- |-- |-- |-- |-- |-- |-- |-- |-- |-- |--|\r\n|(`default_asm`) libsecp256k1 [Bitcoin Core 2021] | asm | 720k (1.07x) | 567k (1.05x) | 567k (1.05x) | 560k (1.06x) | 565k (1.06x) | 564k (1.06x) | 564k (1.06x) | 539k (1.08x) | 439k (1.06x) | 561k (1.06x)|\r\n| libsecp256k1+Best (Opt) | asm | 712k (1.06x) | 545k (1.01x) | 545k (1.01x) | 543k (1.02x) | 541k (1.01x) | 541k (1.02x) | 541k (1.02x) | 512k (1.03x) | 448k (1.08x) | 544k (1.02x)|\r\n| (`default_c52`) libsecp256k1 [Bitcoin Core 2021] (w/o 810) | C | 699k (1.04x) | 561k (1.04x) | 559k (1.04x) | 546k (1.03x) | 575k (1.08x) | 574k (1.08x) | 572k (1.08x) | 538k (1.08x) | 454k (1.09x) | 561k (1.06x)|\r\n| (`default_c`) libsecp256k1 [Bitcoin Core 2021] (w/ 810) | C | 671k (1.00x) | 538k (1.00x) | 538k (1.00x) | 530k (1.00x) | 561k (1.05x) | 563k (1.06x) | 562k (1.06x) | 508k (1.02x) | 435k (1.05x) | 542k (1.02x)|\r\n| (`fiat_c`) libsecp256k1 + Fiat-C | C | 671k (1.00x) | 541k (1.00x) | 540k (1.00x) | 537k (1.01x) | 551k (1.03x) | 551k (1.04x) | 550k (1.04x) | 508k (1.02x) | 425k (1.02x) | 538k (1.01x)|\r\n| (`fiat_cryptopt`) libsecp256k1+Best (Fiat) | asm | 703k (1.05x) | 539k (1.00x) | 539k (1.00x) | 536k (1.01x) | 533k (1.00x) | 530k (1.00x) | 531k (1.00x) | 498k (1.00x) | 415k (1.00x) | 532k (1.00x)|\r\n\r\n\r\n### Intel Core i7-6770HQ\r\n\r\n|               bench |            asm |              c |            c52 |         fiat_c |  fiat_cryptopt|\r\n|---------------------|----------------|----------------|----------------|----------------|---------------|\r\n|          ecmult_gen |           29.3 |           29.1 |           30.2 |           30.1 |           27.1|\r\n|        ecmult_const |           54.9 |           55.0 |           57.6 |           57.0 |           49.6|\r\n|           ecmult_1p |           42.8 |           42.7 |           44.8 |           44.3 |           38.3|\r\n|         ecmult_0p_g |           29.3 |           29.6 |           31.7 |           31.3 |           27.0|\r\n|         ecmult_1p_g |           25.1 |           24.9 |           26.1 |           25.9 |           22.5|\r\n|          field_half |        0.00425 |        0.00425 |        0.00429 |        0.00429 |        0.00424|\r\n|     field_normalize |         0.0143 |         0.0144 |         0.0145 |         0.0143 |         0.0144|\r\n|field_normalize_weak |        0.00566 |        0.00585 |        0.00566 |        0.00566 |        0.00584|\r\n|           field_sqr |         0.0243 |         0.0237 |         0.0242 |         0.0218 |         0.0214|\r\n|           field_mul |         0.0302 |         0.0266 |         0.0285 |         0.0305 |         0.0253|\r\n|       field_inverse |           2.70 |           2.69 |           2.69 |           2.70 |           2.68|\r\n|   field_inverse_var |           1.82 |           1.80 |           1.80 |           1.80 |           1.80|\r\n| field_is_square_var |           2.31 |           2.34 |           2.36 |           2.30 |           2.32|\r\n|          field_sqrt |           6.79 |           6.50 |           6.58 |           6.10 |           5.87|\r\n\r\n\r\n\r\n### Intel Core i7-10710U\r\n\r\n|               bench |            asm |              c |            c52 |         fiat_c |  fiat_cryptopt|\r\n|---------------------|----------------|----------------|----------------|----------------|---------------|\r\n|          ecmult_gen |           70.0 |           69.3 |           72.1 |           71.7 |           64.7|\r\n|        ecmult_const |          131.0 |          131.0 |          137.0 |          136.0 |          118.0|\r\n|           ecmult_1p |          102.0 |          102.0 |          107.0 |          106.0 |           91.5|\r\n|         ecmult_0p_g |           70.0 |           70.9 |           74.7 |           73.6 |           63.4|\r\n|         ecmult_1p_g |           59.9 |           59.6 |           62.4 |           61.8 |           53.8|\r\n|          field_half |        0.00997 |        0.00993 |         0.0101 |         0.0105 |        0.00994|\r\n|     field_normalize |         0.0344 |         0.0344 |         0.0344 |         0.0344 |         0.0345|\r\n|field_normalize_weak |         0.0132 |         0.0137 |         0.0132 |         0.0132 |         0.0137|\r\n|           field_sqr |         0.0576 |         0.0559 |         0.0572 |         0.0515 |         0.0507|\r\n|           field_mul |         0.0714 |         0.0629 |         0.0722 |         0.0676 |         0.0599|\r\n|       field_inverse |           6.16 |           6.16 |           6.11 |           6.15 |           6.15|\r\n|   field_inverse_var |           4.33 |           4.32 |           4.32 |           4.36 |           4.32|\r\n| field_is_square_var |           5.65 |           5.59 |           5.63 |           5.68 |           5.59|\r\n|          field_sqrt |           16.2 |           15.5 |           15.7 |           14.5 |           14.0|\r\n\r\n### Intel Core i9-10900K\r\n\r\n|               bench |            asm |              c |            c52 |         fiat_c |  fiat_cryptopt|\r\n|---------------------|----------------|----------------|----------------|----------------|---------------|\r\n|          ecmult_gen |           20.5 |           20.4 |           21.1 |           21.1 |           19.0|\r\n|        ecmult_const |           38.4 |           38.5 |           40.3 |           39.8 |           34.7|\r\n|           ecmult_1p |           30.0 |           29.9 |           31.3 |           31.0 |           26.8|\r\n|         ecmult_0p_g |           20.6 |           20.7 |           21.8 |           21.5 |           18.5|\r\n|         ecmult_1p_g |           17.6 |           17.4 |           18.3 |           18.1 |           15.7|\r\n|          field_half |        0.00296 |        0.00296 |        0.00297 |        0.00293 |        0.00298|\r\n|     field_normalize |         0.0101 |         0.0101 |         0.0101 |         0.0101 |         0.0101|\r\n|field_normalize_weak |        0.00393 |        0.00393 |        0.00392 |        0.00393 |        0.00392|\r\n|           field_sqr |         0.0171 |         0.0166 |         0.0171 |         0.0153 |         0.0151|\r\n|           field_mul |         0.0212 |         0.0187 |         0.0201 |         0.0201 |         0.0178|\r\n|       field_inverse |           1.80 |           1.80 |           1.80 |           1.80 |           1.80|\r\n|   field_inverse_var |           1.27 |           1.27 |           1.27 |           1.27 |           1.26|\r\n| field_is_square_var |           1.62 |           1.65 |           1.64 |           1.62 |           1.62|\r\n|          field_sqrt |           4.75 |           4.54 |           4.62 |           4.26 |           4.10|\r\n\r\n### Intel Core i7-11700KF\r\n\r\n\r\n|               bench |            asm |              c |            c52 |         fiat_c |  fiat_cryptopt|\r\n|---------------------|----------------|----------------|----------------|----------------|---------------|\r\n|          ecmult_gen |           19.9 |           17.8 |           19.3 |           18.8 |           17.8|\r\n|        ecmult_const |           38.3 |           34.2 |           37.1 |           35.4 |           33.4|\r\n|           ecmult_1p |           29.9 |           26.4 |           28.9 |           27.3 |           26.0|\r\n|         ecmult_0p_g |           20.9 |           18.4 |           20.1 |           18.8 |           18.1|\r\n|         ecmult_1p_g |           17.5 |           15.5 |           16.7 |           15.9 |           15.3|\r\n|          field_half |        0.00304 |        0.00303 |        0.00303 |        0.00303 |        0.00305|\r\n|     field_normalize |         0.0102 |         0.0105 |         0.0104 |         0.0101 |         0.0101|\r\n|field_normalize_weak |        0.00394 |        0.00394 |        0.00410 |        0.00415 |        0.00416|\r\n|           field_sqr |         0.0195 |         0.0171 |         0.0181 |         0.0170 |         0.0164|\r\n|           field_mul |         0.0225 |         0.0182 |         0.0191 |         0.0196 |         0.0203|\r\n|       field_inverse |           1.89 |           1.89 |           1.89 |           1.89 |           1.97|\r\n|   field_inverse_var |           1.22 |           1.22 |           1.21 |           1.22 |           1.25|\r\n| field_is_square_var |           1.67 |           1.67 |           1.68 |           1.67 |           1.68|\r\n|          field_sqrt |           5.35 |           4.69 |           5.12 |           4.51 |           4.65|\r\n\r\n### Intel Core i9-13900KF\r\n\r\n|               bench |            asm |              c |            c52 |         fiat_c |  fiat_cryptopt|\r\n|---------------------|----------------|----------------|----------------|----------------|---------------|\r\n|          ecmult_gen |           19.5 |           17.8 |           18.6 |           17.9 |           17.6|\r\n|        ecmult_const |           38.4 |           34.3 |           36.2 |           34.6 |           33.8|\r\n|           ecmult_1p |           30.7 |           27.3 |           28.8 |           27.5 |           26.8|\r\n|         ecmult_0p_g |           21.4 |           18.8 |           20.0 |           19.1 |           18.6|\r\n|         ecmult_1p_g |           18.0 |           16.0 |           16.8 |           16.1 |           15.7|\r\n|          field_half |        0.00330 |        0.00332 |        0.00337 |        0.00335 |        0.00333|\r\n|     field_normalize |         0.0109 |         0.0110 |         0.0110 |         0.0109 |         0.0109|\r\n|field_normalize_weak |        0.00452 |        0.00451 |        0.00449 |        0.00450 |        0.00451|\r\n|           field_sqr |         0.0191 |         0.0169 |         0.0193 |         0.0167 |         0.0177|\r\n|           field_mul |         0.0256 |         0.0202 |         0.0210 |         0.0196 |         0.0191|\r\n|       field_inverse |           2.13 |           2.12 |           2.13 |           2.13 |           2.13|\r\n|   field_inverse_var |           1.37 |           1.37 |           1.37 |           1.36 |           1.38|\r\n| field_is_square_var |           1.88 |           1.87 |           1.87 |           1.88 |           1.88|\r\n|          field_sqrt |           5.43 |           4.97 |           5.56 |           4.82 |           5.04|\r\n\r\n\r\n\r\n### AMD Ryzen Theadripper 1900X\r\n\r\n|               bench |            asm |              c |            c52 |         fiat_c |  fiat_cryptopt|\r\n|---------------------|----------------|----------------|----------------|----------------|---------------|\r\n|          ecmult_gen |           25.7 |           23.5 |           26.0 |           24.4 |           25.1|\r\n|        ecmult_const |           50.9 |           45.9 |           51.4 |           47.4 |           48.5|\r\n|           ecmult_1p |           39.6 |           35.5 |           40.0 |           37.1 |           37.1|\r\n|         ecmult_0p_g |           27.5 |           24.7 |           28.5 |           26.3 |           26.6|\r\n|         ecmult_1p_g |           23.0 |           20.6 |           23.2 |           21.6 |           21.5|\r\n|          field_half |        0.00270 |        0.00270 |        0.00271 |        0.00293 |        0.00269|\r\n|     field_normalize |         0.0104 |         0.0104 |         0.0104 |         0.0104 |         0.0104|\r\n|field_normalize_weak |        0.00365 |        0.00365 |        0.00365 |        0.00365 |        0.00365|\r\n|           field_sqr |         0.0216 |         0.0202 |         0.0224 |         0.0198 |         0.0202|\r\n|           field_mul |         0.0267 |         0.0235 |         0.0263 |         0.0246 |         0.0244|\r\n|       field_inverse |           2.04 |           2.04 |           2.05 |           2.05 |           2.04|\r\n|   field_inverse_var |           1.21 |           1.22 |           1.21 |           1.22 |           1.21|\r\n| field_is_square_var |           1.51 |           1.50 |           1.53 |           1.51 |           1.56|\r\n|          field_sqrt |           5.96 |           5.60 |           6.10 |           5.50 |           5.54|\r\n\r\n\r\n### AMD Ryzen 5800X\r\n\r\n|               bench |            asm |              c |            c52 |         fiat_c |  fiat_cryptopt|\r\n|---------------------|----------------|----------------|----------------|----------------|---------------|\r\n|          ecmult_gen |           20.6 |           19.2 |           20.7 |           20.3 |           19.3|\r\n|        ecmult_const |           38.2 |           35.2 |           39.3 |           37.6 |           35.5|\r\n|           ecmult_1p |           31.4 |           27.5 |           30.6 |           29.5 |           27.7|\r\n|         ecmult_0p_g |           20.9 |           19.1 |           21.6 |           20.5 |           19.4|\r\n|         ecmult_1p_g |           18.4 |           16.0 |           17.8 |           17.2 |           16.2|\r\n|          field_half |        0.00252 |        0.00251 |        0.00251 |        0.00264 |        0.00251|\r\n|     field_normalize |        0.00818 |        0.00818 |        0.00818 |        0.00819 |        0.00818|\r\n|field_normalize_weak |        0.00343 |        0.00343 |        0.00343 |        0.00343 |        0.00343|\r\n|           field_sqr |         0.0180 |         0.0147 |         0.0177 |         0.0152 |         0.0157|\r\n|           field_mul |         0.0199 |         0.0167 |         0.0194 |         0.0195 |         0.0191|\r\n|       field_inverse |           1.58 |           1.58 |           1.58 |           1.58 |           1.58|\r\n|   field_inverse_var |           1.03 |           1.03 |           1.03 |           1.03 |           1.03|\r\n| field_is_square_var |           1.37 |           1.38 |           1.38 |           1.38 |           1.36|\r\n|          field_sqrt |           4.72 |           4.23 |           4.83 |           4.30 |           4.35|\r\n\r\n### AMD Ryzen 5950X\r\n\r\n|               bench |            asm |              c |            c52 |         fiat_c |  fiat_cryptopt|\r\n|---------------------|----------------|----------------|----------------|----------------|---------------|\r\n|          ecmult_gen |           23.1 |           21.4 |           23.2 |           22.7 |           21.6|\r\n|        ecmult_const |           42.6 |           39.3 |           43.9 |           42.0 |           39.6|\r\n|           ecmult_1p |           34.9 |           30.7 |           34.1 |           32.9 |           30.9|\r\n|         ecmult_0p_g |           23.1 |           21.2 |           24.7 |           23.4 |           22.3|\r\n|         ecmult_1p_g |           20.4 |           17.9 |           19.9 |           19.2 |           18.1|\r\n|          field_half |        0.00280 |        0.00280 |        0.00280 |        0.00294 |        0.00280|\r\n|     field_normalize |        0.00914 |        0.00912 |        0.00913 |        0.00913 |        0.00913|\r\n|field_normalize_weak |        0.00382 |        0.00383 |        0.00382 |        0.00382 |        0.00382|\r\n|           field_sqr |         0.0200 |         0.0164 |         0.0197 |         0.0169 |         0.0176|\r\n|           field_mul |         0.0221 |         0.0188 |         0.0216 |         0.0216 |         0.0213|\r\n|       field_inverse |           1.77 |           1.76 |           1.76 |           1.77 |           1.77|\r\n|   field_inverse_var |           1.15 |           1.15 |           1.15 |           1.15 |           1.18|\r\n| field_is_square_var |           1.52 |           1.54 |           1.54 |           1.54 |           1.52|\r\n|          field_sqrt |           5.26 |           4.71 |           5.39 |           4.80 |           4.85|\r\n\r\n\r\n### AMD Ryzen 7950X\r\n\r\n|               bench |            asm |              c |            c52 |         fiat_c |  fiat_cryptopt|\r\n|---------------------|----------------|----------------|----------------|----------------|---------------|\r\n|          ecmult_gen |           16.8 |           15.5 |           16.8 |           16.4 |           15.8|\r\n|        ecmult_const |           32.0 |           29.2 |           32.4 |           31.0 |           29.8|\r\n|           ecmult_1p |           25.1 |           22.7 |           25.3 |           24.4 |           23.4|\r\n|         ecmult_0p_g |           17.4 |           15.8 |           18.4 |           17.6 |           17.0|\r\n|         ecmult_1p_g |           14.6 |           13.2 |           14.7 |           14.2 |           13.6|\r\n|          field_half |        0.00212 |        0.00212 |        0.00212 |        0.00212 |        0.00213|\r\n|     field_normalize |        0.00698 |        0.00697 |        0.00696 |        0.00695 |        0.00696|\r\n|field_normalize_weak |        0.00290 |        0.00290 |        0.00290 |        0.00290 |        0.00290|\r\n|           field_sqr |         0.0143 |         0.0130 |         0.0141 |         0.0128 |         0.0125|\r\n|           field_mul |         0.0165 |         0.0142 |         0.0170 |         0.0161 |         0.0149|\r\n|       field_inverse |           1.34 |           1.34 |           1.34 |           1.34 |           1.34|\r\n|   field_inverse_var |          0.825 |          0.827 |          0.825 |          0.838 |          0.825|\r\n| field_is_square_var |           1.06 |           1.09 |           1.09 |           1.09 |           1.06|\r\n|          field_sqrt |           4.12 |           3.62 |           3.93 |           3.50 |           3.51|\r\n\r\n\r\n\r\n",
      "user": {
        "login": "dderjoel",
        "id": 13455345,
        "node_id": "MDQ6VXNlcjEzNDU1MzQ1",
        "avatar_url": "https://avatars.githubusercontent.com/u/13455345?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dderjoel",
        "html_url": "https://github.com/dderjoel",
        "followers_url": "https://api.github.com/users/dderjoel/followers",
        "following_url": "https://api.github.com/users/dderjoel/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dderjoel/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dderjoel/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dderjoel/subscriptions",
        "organizations_url": "https://api.github.com/users/dderjoel/orgs",
        "repos_url": "https://api.github.com/users/dderjoel/repos",
        "events_url": "https://api.github.com/users/dderjoel/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dderjoel/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/issues/1261#issuecomment-1512278288",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1261"
    },
    {
      "event": "commented",
      "id": 1512294525,
      "node_id": "IC_kwDOAP4Jqs5aI8h9",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/1512294525",
      "actor": {
        "login": "dderjoel",
        "id": 13455345,
        "node_id": "MDQ6VXNlcjEzNDU1MzQ1",
        "avatar_url": "https://avatars.githubusercontent.com/u/13455345?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dderjoel",
        "html_url": "https://github.com/dderjoel",
        "followers_url": "https://api.github.com/users/dderjoel/followers",
        "following_url": "https://api.github.com/users/dderjoel/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dderjoel/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dderjoel/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dderjoel/subscriptions",
        "organizations_url": "https://api.github.com/users/dderjoel/orgs",
        "repos_url": "https://api.github.com/users/dderjoel/repos",
        "events_url": "https://api.github.com/users/dderjoel/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dderjoel/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-04-18T01:04:19Z",
      "updated_at": "2023-04-18T01:04:19Z",
      "author_association": "NONE",
      "body": "In regards to merging this, In the I've included the implementations as `.c` files. And the methods are not static.\r\nIn the case for [the libsecp-benchmarks](https://github.com/dderjoel/secp_bench/blob/master/bench.sh#L85-L105) \r\nI've added the implementation as a `c`-source to the `bench{,_internal,_ecmult}_SOURCES` targets (see [here](https://github.com/dderjoel/secp_bench/blob/master/bench.sh#L85-L105)). \r\n\r\nSide note, I wanted to include the implementations as `.asm` files first (as those are formally verified) but then I think we would be in trouble once we compile for non System V- ABI's. So I've used `nasm` to assemble the `asm` files and `objdump` to dump the code in at&t syntax (afaik, otherwise clang complains sometimes) and include them into the `c`-source. \r\nWith that, I hope the compiler is able (if needed) swap registers of the arguments if one compiles for non System V.\r\nAnd when I tried to include the methods as `inline static` in `.h` files, any optimization-level of the compiler resulted in segfaults, because the registers were not set correctly. (I'm too unfamiliar with this inline-asm notation).\r\n\r\nIn regards to \"tell cryptopt to emit general code (i.e. no `mulx`, `adox`, `adcx`) That is not too trivial. I'll see what I can do, but I don't think we should expect anything here too soon.\r\n\r\n\r\n",
      "user": {
        "login": "dderjoel",
        "id": 13455345,
        "node_id": "MDQ6VXNlcjEzNDU1MzQ1",
        "avatar_url": "https://avatars.githubusercontent.com/u/13455345?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dderjoel",
        "html_url": "https://github.com/dderjoel",
        "followers_url": "https://api.github.com/users/dderjoel/followers",
        "following_url": "https://api.github.com/users/dderjoel/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dderjoel/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dderjoel/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dderjoel/subscriptions",
        "organizations_url": "https://api.github.com/users/dderjoel/orgs",
        "repos_url": "https://api.github.com/users/dderjoel/repos",
        "events_url": "https://api.github.com/users/dderjoel/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dderjoel/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/issues/1261#issuecomment-1512294525",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1261"
    },
    {
      "event": "commented",
      "id": 1514857573,
      "node_id": "IC_kwDOAP4Jqs5aSuRl",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/1514857573",
      "actor": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-04-19T14:38:51Z",
      "updated_at": "2023-04-19T14:38:51Z",
      "author_association": "MEMBER",
      "body": "Thanks, you have a nice benchmark suite. :) Interestingly, `fiat_c` beats `default_c` on SUPERCOP, but not in the other benchmarks. Any idea why this is the case?\r\n\r\nAnyway, I don't think that any of this should change the plan sketched above. Since we're not in a hurry, it would be awesome to have https://github.com/mit-plv/fiat-crypto/issues/1582 solved first. \r\n\r\n> In regards to \"tell cryptopt to emit general code (i.e. no mulx, adox, adcx) That is not too trivial. I'll see what I can do, but I don't think we should expect anything here too soon.\r\n\r\nOh okay, we assumed it's a simple change. Anyway, should we decide that we want asm, which is anyway CPU-specific, then I think it makes sense to go 100% for it and use CPUID. ",
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/issues/1261#issuecomment-1514857573",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1261"
    },
    {
      "event": "unsubscribed",
      "id": 9048663876,
      "node_id": "UE_lADOAP4Jqs5ivysAzwAAAAIbV6dE",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/9048663876",
      "actor": {
        "login": "romanz",
        "id": 9900,
        "node_id": "MDQ6VXNlcjk5MDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9900?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/romanz",
        "html_url": "https://github.com/romanz",
        "followers_url": "https://api.github.com/users/romanz/followers",
        "following_url": "https://api.github.com/users/romanz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/romanz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/romanz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/romanz/subscriptions",
        "organizations_url": "https://api.github.com/users/romanz/orgs",
        "repos_url": "https://api.github.com/users/romanz/repos",
        "events_url": "https://api.github.com/users/romanz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/romanz/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-04-19T16:28:43Z"
    },
    {
      "event": "commented",
      "id": 1515561446,
      "node_id": "IC_kwDOAP4Jqs5aVaHm",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/1515561446",
      "actor": {
        "login": "dderjoel",
        "id": 13455345,
        "node_id": "MDQ6VXNlcjEzNDU1MzQ1",
        "avatar_url": "https://avatars.githubusercontent.com/u/13455345?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dderjoel",
        "html_url": "https://github.com/dderjoel",
        "followers_url": "https://api.github.com/users/dderjoel/followers",
        "following_url": "https://api.github.com/users/dderjoel/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dderjoel/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dderjoel/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dderjoel/subscriptions",
        "organizations_url": "https://api.github.com/users/dderjoel/orgs",
        "repos_url": "https://api.github.com/users/dderjoel/repos",
        "events_url": "https://api.github.com/users/dderjoel/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dderjoel/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-04-20T00:56:52Z",
      "updated_at": "2023-04-20T00:56:52Z",
      "author_association": "NONE",
      "body": "> fiat_c beats default_c on SUPERCOP, but not in the other benchmarks. Any idea why this is the case?\r\n\r\nSUPERCOP tries many different compiler / compiler settings (see below) , whereas for the `./bench_{}` I've just used the default flags (see below output of `./configure`). I'm happy to do that with other compilers, too, if you think that's useful.\r\n\r\n> Oh okay, we assumed it's a simple change. Anyway, should we decide that we want asm, which is anyway CPU-specific, then I think it makes sense to go 100% for it and use CPUID.\r\n\r\nI'll keep it in mind. I'm a bit divided on this though. CPUs since Oct '14 (Broadwell) support BMI2 / ADX. So it feel's wrong to not use them. Would be interesting to see what the usage of this library is distributed... On the other hand I do understand to be as flexible as possible.\r\n\r\nI'm using Clang 15 and GCC 12.\r\n\r\n---\r\n# Supercop compiler settings\r\n```\r\ngcc -march=native -mtune=native -O3 -fomit-frame-pointer -fwrapv -fPIC -fPIE\r\ngcc -march=native -mtune=native -Os -fomit-frame-pointer -fwrapv -fPIC -fPIE\r\ngcc -march=native -mtune=native -O2 -fomit-frame-pointer -fwrapv -fPIC -fPIE\r\ngcc -march=native -mtune=native -O -fomit-frame-pointer -fwrapv -fPIC -fPIE\r\nclang -march=native -O3 -fomit-frame-pointer -fwrapv -Qunused-arguments -fPIC -fPIE\r\nclang -march=native -Os -fomit-frame-pointer -fwrapv -Qunused-arguments -fPIC -fPIE\r\nclang -march=native -O2 -fomit-frame-pointer -fwrapv -Qunused-arguments -fPIC -fPIE\r\nclang -march=native -O -fomit-frame-pointer -fwrapv -Qunused-arguments -fPIC -fPIE\r\nclang -mcpu=native -O3 -fomit-frame-pointer -fwrapv -Qunused-arguments -fPIC -fPIE\r\n```\r\n\r\n# output of `./configure` on i7-11700K, `./fiat_cryptopt`\r\n```\r\nBuild Options:\r\n  with external callbacks = no\r\n  with benchmarks         = yes\r\n  with tests              = yes\r\n  with ctime tests        = yes\r\n  with coverage           = no\r\n  with examples           = no\r\n  module ecdh             = yes\r\n  module recovery         = no\r\n  module extrakeys        = yes\r\n  module schnorrsig       = yes\r\n\r\n  asm                     = x86_64\r\n  ecmult window size      = 15\r\n  ecmult gen prec. bits   = 4\r\n\r\n  valgrind                = yes\r\n  CC                      = gcc\r\n  CPPFLAGS                =  \r\n  SECP_CFLAGS             = -O2  -std=c89 -pedantic -Wno-long-long -Wnested-externs -Wshadow -Wstrict-prototypes -Wundef -Wno-overlength-strings -Wall -Wno-unused-function -Wextra -Wcast-align -Wcast-align=strict -fvisibility=hidden \r\n  CFLAGS                  = -g -O2\r\n  LDFLAGS                 = \r\n\r\n```",
      "user": {
        "login": "dderjoel",
        "id": 13455345,
        "node_id": "MDQ6VXNlcjEzNDU1MzQ1",
        "avatar_url": "https://avatars.githubusercontent.com/u/13455345?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dderjoel",
        "html_url": "https://github.com/dderjoel",
        "followers_url": "https://api.github.com/users/dderjoel/followers",
        "following_url": "https://api.github.com/users/dderjoel/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dderjoel/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dderjoel/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dderjoel/subscriptions",
        "organizations_url": "https://api.github.com/users/dderjoel/orgs",
        "repos_url": "https://api.github.com/users/dderjoel/repos",
        "events_url": "https://api.github.com/users/dderjoel/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dderjoel/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/issues/1261#issuecomment-1515561446",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1261"
    },
    {
      "event": "commented",
      "id": 1515903363,
      "node_id": "IC_kwDOAP4Jqs5aWtmD",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/1515903363",
      "actor": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-04-20T08:07:10Z",
      "updated_at": "2023-04-20T08:07:10Z",
      "author_association": "MEMBER",
      "body": "> SUPERCOP tries many different compiler / compiler settings (see below) , whereas for the ./bench_{} I've just used the default flags (see below output of ./configure). \r\n\r\nMakes sense.\r\n\r\n> I'm happy to do that with other compilers, too, if you think that's useful.\r\n\r\nI'm not convinced that it will provide much more insight right now.\r\n\r\n> CPUs since Oct '14 (Broadwell) support BMI2 / ADX. So it feel's wrong to not use them. Would be interesting to see what the usage of this library is distributed...\r\n\r\nYep, exactly my thoughts. If you really have an older CPU, the C code will serve you well.",
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/issues/1261#issuecomment-1515903363",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1261"
    },
    {
      "event": "commented",
      "id": 1517933216,
      "node_id": "IC_kwDOAP4Jqs5aedKg",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/1517933216",
      "actor": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-04-21T14:36:26Z",
      "updated_at": "2023-04-21T14:36:26Z",
      "author_association": "MEMBER",
      "body": "Concept ACK on investigating fiat-crypto and (longer term) cryptopt. Would be great to have a verified implementation that's only slightly slower or even faster.\r\n\r\nThanks @dderjoel for the benchmarks.",
      "user": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/issues/1261#issuecomment-1517933216",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1261"
    },
    {
      "event": "mentioned",
      "id": 9068344338,
      "node_id": "MEE_lADOAP4Jqs5ivysAzwAAAAIcg_QS",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/9068344338",
      "actor": {
        "login": "dderjoel",
        "id": 13455345,
        "node_id": "MDQ6VXNlcjEzNDU1MzQ1",
        "avatar_url": "https://avatars.githubusercontent.com/u/13455345?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dderjoel",
        "html_url": "https://github.com/dderjoel",
        "followers_url": "https://api.github.com/users/dderjoel/followers",
        "following_url": "https://api.github.com/users/dderjoel/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dderjoel/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dderjoel/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dderjoel/subscriptions",
        "organizations_url": "https://api.github.com/users/dderjoel/orgs",
        "repos_url": "https://api.github.com/users/dderjoel/repos",
        "events_url": "https://api.github.com/users/dderjoel/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dderjoel/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-04-21T14:36:27Z"
    },
    {
      "event": "subscribed",
      "id": 9068344350,
      "node_id": "SE_lADOAP4Jqs5ivysAzwAAAAIcg_Qe",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/9068344350",
      "actor": {
        "login": "dderjoel",
        "id": 13455345,
        "node_id": "MDQ6VXNlcjEzNDU1MzQ1",
        "avatar_url": "https://avatars.githubusercontent.com/u/13455345?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dderjoel",
        "html_url": "https://github.com/dderjoel",
        "followers_url": "https://api.github.com/users/dderjoel/followers",
        "following_url": "https://api.github.com/users/dderjoel/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dderjoel/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dderjoel/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dderjoel/subscriptions",
        "organizations_url": "https://api.github.com/users/dderjoel/orgs",
        "repos_url": "https://api.github.com/users/dderjoel/repos",
        "events_url": "https://api.github.com/users/dderjoel/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dderjoel/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-04-21T14:36:27Z"
    },
    {
      "event": "commented",
      "id": 1532314457,
      "node_id": "IC_kwDOAP4Jqs5bVUNZ",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/1532314457",
      "actor": {
        "login": "dderjoel",
        "id": 13455345,
        "node_id": "MDQ6VXNlcjEzNDU1MzQ1",
        "avatar_url": "https://avatars.githubusercontent.com/u/13455345?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dderjoel",
        "html_url": "https://github.com/dderjoel",
        "followers_url": "https://api.github.com/users/dderjoel/followers",
        "following_url": "https://api.github.com/users/dderjoel/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dderjoel/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dderjoel/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dderjoel/subscriptions",
        "organizations_url": "https://api.github.com/users/dderjoel/orgs",
        "repos_url": "https://api.github.com/users/dderjoel/repos",
        "events_url": "https://api.github.com/users/dderjoel/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dderjoel/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-03T00:34:49Z",
      "updated_at": "2023-05-03T00:34:49Z",
      "author_association": "NONE",
      "body": "Owen implemented #810  in the Fiat repo (see PR https://github.com/mit-plv/fiat-crypto/issues/1582), it's not yet fully merged, but I could not wait to benchmark it.\r\n\r\nI've updated [secp_bench](https://github.com/dderjoel/secp_bench) and  [supercop](https://github.com/dderjoel/supercop/tree/main/crypto_scalarmult/secp256k1) with the new C and CryptOpt-optimized versions.\r\n\r\nI've also added our 12th Gen machine back into the benchmark suite, here the updated numbers (copied post from above, indicating changes):\r\n\r\nI've used those ~nine~ *ten* machines\r\n| CPU                     | ùúá-architecture |\r\n| -- | -- | \r\n| Intel Core i7-6770HQ    | Skylake-H |\r\n| Intel Core i7-10710U    | Comet Lake-U |\r\n| Intel Core i9-10900K    | Comet Lake-S |\r\n| Intel Core i7-11700KF   | Rocket Lake-S |\r\n| Intel Core i9-12900KF   | Alder Lake-S |\r\n| Intel Core i9-13900KF   | Raptor Lake-S |\r\n| AMD Ryzen Theadr. 1900X | Zen 1 |\r\n| AMD Ryzen 7 5800X       | Zen 3 |\r\n| AMD Ryzen 9 5950X       | Zen 3 |\r\n| AMD Ryzen 9 7950X       | Zen 4 |\r\n\r\n\r\n\r\nI've created a little [project here](https://github.com/dderjoel/secp_bench), which takes this library as the base.\r\nFor `default_asm`, it compiles with `./configure --with-asm=x86_64` using the current asm implementation.\r\nFor `default_c`, it compiles with `./configure --with-asm=no` using the current c implementation.\r\nFor `default_c52`, it replaces the c-implementation with the version before the PR #810 , then compiles with `./configure --with-asm=no`. I've included that to compare that with fiat_c.\r\nFor `fiat_c`, it replaces the c implementation with the ~[Fiat Cryptography implementation](https://github.com/mit-plv/fiat-crypto/blob/master/fiat-c/src/secp256k1_dettman_64.c) (which does not feature the #810 optimization.)~ the Merge-in-progess Fiat Cryptography implementation, *now featuring the  #810 optimization*.\r\nFor `fiat_cryptopt`, it uses Fiat as a starting point, then optimizes mul and square on all those machines, and I've included the 'on average best' one. (*implicitly also now using the optimization*)\r\nSo on average, we see that for the `ecmult_gen` the `fiat_c` is more performant than the `default_asm` *and slightly more performant than `default_c` (plus giving formal assurance)* and `fiat_cryptopt` is ~even faster than that and the current `default_c`.~ *the fastest (plus formal assurance) *.\r\n\r\nNumbers for the `secp256k1` benchmarks `./bench_internal simple` and `./bench_ecmult` (I've commented out the `multi_`benches to succeed in a timely manner.)\r\n\r\n\r\n### Geometric mean over ~nine~ *ten* machines (per-machine tables at the end of the post)\r\n|      implementation |    default_asm |      default_c |    default_c52 |         fiat_c |  fiat_cryptopt |\r\n|---------------------|----------------|----------------|----------------|----------------|----------------|\r\n|          ecmult_gen |        16.1257 |        14.9874 |        15.8764 |        14.9714 |        14.1071 |\r\n|        ecmult_const |        30.3317 |        28.2041 |        30.3634 |        28.1846 |        26.1778 |\r\n|           ecmult_1p |        23.9575 |        22.0809 |         23.641 |        22.1608 |        20.5615 |\r\n|         ecmult_0p_g |        16.9942 |        15.8604 |        16.9429 |        15.9223 |        14.7684 |\r\n|         ecmult_1p_g |        14.0591 |        12.8636 |        13.7521 |        12.9906 |        12.0012 |\r\n|          field_half |      0.0024964 |      0.0024537 |     0.00237626 |      0.0023697 |     0.00237259 |\r\n|     field_normalize |     0.00737954 |     0.00744617 |     0.00736519 |     0.00732155 |     0.00733252 |\r\n|field_normalize_weak |     0.00294988 |     0.00295974 |     0.00293822 |     0.00295422 |     0.00294591 |\r\n|           field_sqr |       0.014059 |      0.0126383 |      0.0137789 |      0.0123009 |      0.0119273 |\r\n|           field_mul |      0.0170241 |      0.0144868 |      0.0156579 |       0.014689 |      0.0144257 |\r\n|       field_inverse |        1.40048 |        1.40896 |        1.39608 |        1.38928 |         1.3986 |\r\n|   field_inverse_var |       0.915942 |       0.919022 |       0.912739 |       0.907769 |       0.910547 |\r\n| field_is_square_var |        1.20313 |        1.21123 |        1.20451 |        1.19417 |        1.19385 |\r\n|          field_sqrt |        3.87547 |        3.56868 |        3.82354 |        3.44445 |        3.35331 |\r\n\r\n\r\nIn addition to the benchmarks of the library, I also used the SUPERCOP framework, in which I've included [implementations with the same mul/square.](https://github.com/dderjoel/supercop/tree/main/crypto_scalarmult/secp256k1). This is similar to the table in the paper, but instead of optimizing and comparing on one single machine (not shown in the table below) I've included one particular implementation which I ran on all machines. The numbers are cycles for four scalar multiplications (two base point, two variable point). We see that on GM, the `fiat_cryptopt` is again the most performant one. *(In fact everywhere except on 1900X, where the Fiat-C is the most performant one)*\r\n\r\n| Implementation | Lang. | 1900X | 5800X | 5950X | 7950X | i7 6G | i7 10G | i9 10G | i7 11G | i9 12G | i9 13G | G.M. | \r\n|-- |-- |-- |-- |-- |-- |-- |-- |-- |-- |-- |-- |-- |\r\n| (`default_asm`) libsecp256k1 [Bitcoin Core 2021] | asm | 719k (1.11x) | 571k (1.11x) | 567k (1.10x) | 560k (1.11x) | 565k (1.07x) | 565k (1.08x) | 564k (1.08x) | 540k (1.13x) | 438k (1.09x) | 439k (1.11x) | 548k (1.09x) | \r\n| libsecp256k1+Best (Opt) | asm | 712k (1.10x) | 543k (1.06x) | 545k (1.06x) | 544k (1.08x) | 541k (1.03x) | 541k (1.03x) | 542k (1.04x) | 512k (1.07x) | 449k (1.12x) | 447k (1.13x) | 533k (1.07x) | \r\n| (`default_c52`) libsecp256k1 [Bitcoin Core 2021] (w/o 810) | C | 699k (1.08x) | 560k (1.09x) | 561k (1.09x) | 547k (1.09x) | 574k (1.09x) | 574k (1.10x) | 573k (1.10x) | 536k (1.12x) | 459k (1.14x) | 456k (1.15x) | 550k (1.10x) | \r\n| (`default_c`) libsecp256k1 [Bitcoin Core 2021] (w/ 810) | C | 671k (1.04x) | 538k (1.05x) | 537k (1.04x) | 531k (1.06x) | 567k (1.08x) | 563k (1.07x) | 562k (1.08x) | 504k (1.06x) | 440k (1.09x) | 439k (1.11x) | 531k (1.06x) | \r\n| (`fiat_c`) libsecp256k1 + Fiat-C | C | 648k (1.00x) | 537k (1.05x) | 536k (1.04x) | 536k (1.07x) | 549k (1.04x) | 546k (1.04x) | 548k (1.05x) | 492k (1.03x) | 418k (1.04x) | 418k (1.05x) | 519k (1.04x) | \r\n| (`fiat_cryptopt`) libsecp256k1+Best (Fiat) | asm | 675k (1.04x) | 514k (1.00x) | 515k (1.00x) | 503k (1.00x) | 526k (1.00x) | 524k (1.00x) | 523k (1.00x) | 477k (1.00x) | 402k (1.00x) | 397k (1.00x) | 500k (1.00x) | \r\n\r\n\r\n### Intel Core i7-6770HQ\r\n\r\n|               bench |            asm |              c |            c52 |         fiat_c |  fiat_cryptopt |\r\n|---------------------|----------------|----------------|----------------|----------------|----------------|\r\n|          ecmult_gen |           21.9 |           21.6 |           22.4 |           22.2 |           20.0 |\r\n|        ecmult_const |           40.7 |           40.8 |           42.7 |           41.7 |           36.4 |\r\n|           ecmult_1p |           31.8 |           31.7 |           33.2 |           32.4 |           28.1 |\r\n|         ecmult_0p_g |           22.7 |           22.9 |           24.0 |           23.4 |           20.2 |\r\n|         ecmult_1p_g |           18.6 |           18.5 |           19.4 |           18.9 |           16.5 |\r\n|          field_half |        0.00470 |        0.00441 |        0.00364 |        0.00436 |        0.00378 |\r\n|     field_normalize |         0.0106 |         0.0108 |         0.0107 |         0.0107 |         0.0107 |\r\n|field_normalize_weak |        0.00420 |        0.00420 |        0.00421 |        0.00422 |        0.00421 |\r\n|           field_sqr |         0.0184 |         0.0175 |         0.0180 |         0.0169 |         0.0162 |\r\n|           field_mul |         0.0224 |         0.0198 |         0.0213 |         0.0221 |         0.0181 |\r\n|       field_inverse |           1.99 |           2.00 |           2.01 |           1.99 |           2.00 |\r\n|   field_inverse_var |           1.36 |           1.34 |           1.34 |           1.34 |           1.34 |\r\n| field_is_square_var |           1.73 |           1.74 |           1.74 |           1.72 |           1.73 |\r\n|          field_sqrt |           5.04 |           4.83 |           4.90 |           4.66 |           4.44 |\r\n\r\n### Intel Core i7-10710U\r\n\r\n|               bench |            asm |              c |            c52 |         fiat_c |  fiat_cryptopt |\r\n|---------------------|----------------|----------------|----------------|----------------|----------------|\r\n|          ecmult_gen |           19.8 |           19.3 |           20.1 |           19.7 |           17.8 |\r\n|        ecmult_const |           35.8 |           35.7 |           37.4 |           36.4 |           31.9 |\r\n|           ecmult_1p |           28.1 |           28.2 |           29.4 |           28.6 |           24.9 |\r\n|         ecmult_0p_g |           20.3 |           20.6 |           21.4 |           21.0 |           18.2 |\r\n|         ecmult_1p_g |           16.5 |           16.4 |           17.2 |           16.8 |           14.6 |\r\n|          field_half |        0.00327 |        0.00370 |        0.00356 |        0.00280 |        0.00368 |\r\n|     field_normalize |        0.00956 |        0.00956 |        0.00932 |        0.00954 |        0.00932 |\r\n|field_normalize_weak |        0.00373 |        0.00373 |        0.00364 |        0.00387 |        0.00364 |\r\n|           field_sqr |         0.0167 |         0.0157 |         0.0157 |         0.0151 |         0.0144 |\r\n|           field_mul |         0.0201 |         0.0177 |         0.0188 |         0.0186 |         0.0163 |\r\n|       field_inverse |           1.71 |           1.72 |           1.72 |           1.71 |           1.72 |\r\n|   field_inverse_var |           1.21 |           1.21 |           1.21 |           1.22 |           1.22 |\r\n| field_is_square_var |           1.60 |           1.54 |           1.56 |           1.57 |           1.56 |\r\n|          field_sqrt |           4.50 |           4.22 |           4.30 |           4.09 |           3.90 |\r\n\r\n### Intel Core i9-10900K\r\n\r\n|               bench |            asm |              c |            c52 |         fiat_c |  fiat_cryptopt |\r\n|---------------------|----------------|----------------|----------------|----------------|----------------|\r\n|          ecmult_gen |           14.9 |           14.8 |           15.3 |           15.1 |           13.6 |\r\n|        ecmult_const |           27.9 |           27.9 |           29.5 |           28.5 |           24.9 |\r\n|           ecmult_1p |           21.8 |           21.7 |           22.7 |           22.2 |           19.3 |\r\n|         ecmult_0p_g |           15.0 |           15.2 |           15.8 |           15.4 |           13.3 |\r\n|         ecmult_1p_g |           12.8 |           12.6 |           13.3 |           13.0 |           11.3 |\r\n|          field_half |        0.00222 |        0.00218 |        0.00218 |        0.00215 |        0.00218 |\r\n|     field_normalize |        0.00739 |        0.00731 |        0.00731 |        0.00733 |        0.00731 |\r\n|field_normalize_weak |        0.00285 |        0.00285 |        0.00286 |        0.00285 |        0.00285 |\r\n|           field_sqr |         0.0125 |         0.0120 |         0.0123 |         0.0115 |         0.0111 |\r\n|           field_mul |         0.0154 |         0.0136 |         0.0145 |         0.0142 |         0.0125 |\r\n|       field_inverse |           1.31 |           1.31 |           1.31 |           1.31 |           1.31 |\r\n|   field_inverse_var |          0.920 |          0.920 |          0.919 |          0.920 |          0.917 |\r\n| field_is_square_var |           1.18 |           1.19 |           1.19 |           1.17 |           1.17 |\r\n|          field_sqrt |           3.44 |           3.30 |           3.35 |           3.18 |           3.04 |\r\n\r\n### Intel Core i7-11700KF\r\n\r\n|               bench |            asm |              c |            c52 |         fiat_c |  fiat_cryptopt |\r\n|---------------------|----------------|----------------|----------------|----------------|----------------|\r\n|          ecmult_gen |           17.1 |           14.4 |           15.1 |           13.1 |           12.7 |\r\n|        ecmult_const |           31.5 |           27.3 |           28.0 |           24.5 |           23.5 |\r\n|           ecmult_1p |           23.7 |           21.2 |           20.6 |           19.5 |           19.5 |\r\n|         ecmult_0p_g |           16.6 |           14.7 |           14.4 |           14.3 |           13.6 |\r\n|         ecmult_1p_g |           14.0 |           12.2 |           12.1 |           11.6 |           11.4 |\r\n|          field_half |        0.00239 |        0.00237 |        0.00240 |        0.00223 |        0.00227 |\r\n|     field_normalize |        0.00779 |        0.00837 |        0.00805 |        0.00730 |        0.00740 |\r\n|field_normalize_weak |        0.00320 |        0.00327 |        0.00325 |        0.00296 |        0.00313 |\r\n|           field_sqr |         0.0155 |         0.0136 |         0.0142 |         0.0125 |         0.0114 |\r\n|           field_mul |         0.0175 |         0.0145 |         0.0150 |         0.0128 |         0.0144 |\r\n|       field_inverse |           1.48 |           1.50 |           1.48 |           1.36 |           1.36 |\r\n|   field_inverse_var |          0.951 |          0.969 |          0.961 |          0.877 |          0.877 |\r\n| field_is_square_var |           1.32 |           1.33 |           1.32 |           1.20 |           1.20 |\r\n|          field_sqrt |           4.18 |           3.74 |           3.92 |           3.37 |           3.15 |\r\n\r\n### Intel Core i9-12900KF\r\n\r\n|               bench |            asm |              c |            c52 |         fiat_c |  fiat_cryptopt |\r\n|---------------------|----------------|----------------|----------------|----------------|----------------|\r\n|          ecmult_gen |           11.6 |           10.6 |           11.0 |           10.4 |           9.96 |\r\n|        ecmult_const |           22.6 |           20.2 |           21.3 |           19.9 |           18.9 |\r\n|           ecmult_1p |           18.1 |           16.0 |           17.0 |           15.8 |           15.0 |\r\n|         ecmult_0p_g |           13.5 |           11.8 |           12.5 |           11.6 |           11.9 |\r\n|         ecmult_1p_g |           10.6 |           9.37 |           9.92 |           9.23 |           8.80 |\r\n|          field_half |        0.00197 |        0.00198 |        0.00196 |        0.00197 |        0.00199 |\r\n|     field_normalize |        0.00638 |        0.00626 |        0.00639 |        0.00641 |        0.00637 |\r\n|field_normalize_weak |        0.00266 |        0.00261 |        0.00264 |        0.00266 |        0.00266 |\r\n|           field_sqr |         0.0114 |        0.00948 |         0.0114 |        0.00946 |        0.00978 |\r\n|           field_mul |         0.0152 |         0.0115 |         0.0122 |         0.0113 |         0.0122 |\r\n|       field_inverse |           1.25 |           1.23 |           1.25 |           1.25 |           1.25 |\r\n|   field_inverse_var |          0.807 |          0.794 |          0.814 |          0.807 |          0.814 |\r\n| field_is_square_var |           1.10 |           1.08 |           1.10 |           1.10 |           1.10 |\r\n|          field_sqrt |           3.26 |           2.91 |           3.25 |           2.82 |           2.84 |\r\n\r\n### Intel Core i9-13900KF\r\n\r\n|               bench |            asm |              c |            c52 |         fiat_c |  fiat_cryptopt |\r\n|---------------------|----------------|----------------|----------------|----------------|----------------|\r\n|          ecmult_gen |           10.7 |           9.23 |           9.61 |           9.10 |           8.70 |\r\n|        ecmult_const |           20.1 |           17.7 |           18.7 |           17.5 |           16.6 |\r\n|           ecmult_1p |           15.9 |           14.1 |           14.9 |           13.9 |           13.2 |\r\n|         ecmult_0p_g |           11.4 |           9.95 |           10.5 |           9.66 |           9.18 |\r\n|         ecmult_1p_g |           9.30 |           8.23 |           8.72 |           8.12 |           7.74 |\r\n|          field_half |        0.00183 |        0.00183 |        0.00171 |        0.00178 |        0.00183 |\r\n|     field_normalize |        0.00562 |        0.00602 |        0.00571 |        0.00568 |        0.00595 |\r\n|field_normalize_weak |        0.00235 |        0.00247 |        0.00233 |        0.00233 |        0.00247 |\r\n|           field_sqr |        0.00978 |        0.00932 |        0.00986 |        0.00837 |        0.00905 |\r\n|           field_mul |         0.0132 |         0.0113 |         0.0107 |         0.0102 |         0.0113 |\r\n|       field_inverse |           1.10 |           1.16 |           1.10 |           1.10 |           1.16 |\r\n|   field_inverse_var |          0.705 |          0.747 |          0.709 |          0.707 |          0.745 |\r\n| field_is_square_var |          0.970 |           1.02 |          0.967 |          0.972 |           1.02 |\r\n|          field_sqrt |           2.80 |           2.71 |           2.88 |           2.44 |           2.63 |\r\n\r\n### AMD Ryzen Theadripper 1900X\r\n\r\n|               bench |            asm |              c |            c52 |         fiat_c |  fiat_cryptopt |\r\n|---------------------|----------------|----------------|----------------|----------------|----------------|\r\n|          ecmult_gen |           23.6 |           21.7 |           23.9 |           22.1 |           22.5 |\r\n|        ecmult_const |           46.6 |           42.1 |           47.1 |           42.7 |           43.4 |\r\n|           ecmult_1p |           36.1 |           32.4 |           36.4 |           33.0 |           32.9 |\r\n|         ecmult_0p_g |           25.8 |           23.4 |           26.2 |           23.6 |           23.2 |\r\n|         ecmult_1p_g |           21.0 |           18.9 |           21.2 |           19.2 |           19.1 |\r\n|          field_half |        0.00264 |        0.00273 |        0.00270 |        0.00270 |        0.00275 |\r\n|     field_normalize |        0.00960 |        0.00941 |        0.00962 |        0.00942 |        0.00942 |\r\n|field_normalize_weak |        0.00330 |        0.00332 |        0.00333 |        0.00355 |        0.00332 |\r\n|           field_sqr |         0.0196 |         0.0184 |         0.0204 |         0.0175 |         0.0172 |\r\n|           field_mul |         0.0241 |         0.0214 |         0.0240 |         0.0219 |         0.0218 |\r\n|       field_inverse |           1.82 |           1.86 |           1.84 |           1.84 |           1.86 |\r\n|   field_inverse_var |           1.11 |           1.11 |           1.11 |           1.10 |           1.10 |\r\n| field_is_square_var |           1.36 |           1.39 |           1.40 |           1.39 |           1.41 |\r\n|          field_sqrt |           5.38 |           5.08 |           5.56 |           4.82 |           4.77 |\r\n\r\n### AMD Ryzen 5800X\r\n\r\n|               bench |            asm |              c |            c52 |         fiat_c |  fiat_cryptopt |\r\n|---------------------|----------------|----------------|----------------|----------------|----------------|\r\n|          ecmult_gen |           16.3 |           15.4 |           16.8 |           15.6 |           14.5 |\r\n|        ecmult_const |           30.1 |           28.1 |           31.9 |           28.8 |           26.6 |\r\n|           ecmult_1p |           24.7 |           22.0 |           24.8 |           22.8 |           20.8 |\r\n|         ecmult_0p_g |           16.5 |           15.5 |           17.5 |           15.7 |           14.5 |\r\n|         ecmult_1p_g |           14.6 |           12.9 |           14.4 |           13.2 |           12.1 |\r\n|          field_half |        0.00255 |        0.00219 |        0.00221 |        0.00238 |        0.00199 |\r\n|     field_normalize |        0.00661 |        0.00646 |        0.00647 |        0.00655 |        0.00647 |\r\n|field_normalize_weak |        0.00275 |        0.00270 |        0.00270 |        0.00272 |        0.00270 |\r\n|           field_sqr |         0.0142 |         0.0117 |         0.0140 |         0.0124 |         0.0115 |\r\n|           field_mul |         0.0161 |         0.0136 |         0.0155 |         0.0144 |         0.0142 |\r\n|       field_inverse |           1.28 |           1.26 |           1.25 |           1.27 |           1.26 |\r\n|   field_inverse_var |          0.833 |          0.822 |          0.815 |          0.826 |          0.816 |\r\n| field_is_square_var |           1.10 |           1.09 |           1.09 |           1.10 |           1.07 |\r\n|          field_sqrt |           3.81 |           3.35 |           3.84 |           3.47 |           3.30 |\r\n\r\n### AMD Ryzen 5950X\r\n\r\n|               bench |            asm |              c |            c52 |         fiat_c |  fiat_cryptopt |\r\n|---------------------|----------------|----------------|----------------|----------------|----------------|\r\n|          ecmult_gen |           16.1 |           15.5 |           16.7 |           15.3 |           14.6 |\r\n|        ecmult_const |           30.6 |           28.4 |           31.6 |           28.1 |           26.7 |\r\n|           ecmult_1p |           25.4 |           22.4 |           25.0 |           22.1 |           20.8 |\r\n|         ecmult_0p_g |           17.7 |           16.5 |           18.0 |           16.3 |           15.3 |\r\n|         ecmult_1p_g |           15.0 |           13.1 |           14.1 |           13.2 |           12.2 |\r\n|          field_half |        0.00223 |        0.00221 |        0.00224 |        0.00224 |        0.00218 |\r\n|     field_normalize |        0.00649 |        0.00642 |        0.00642 |        0.00643 |        0.00645 |\r\n|field_normalize_weak |        0.00270 |        0.00267 |        0.00267 |        0.00267 |        0.00267 |\r\n|           field_sqr |         0.0142 |         0.0115 |         0.0139 |         0.0121 |         0.0114 |\r\n|           field_mul |         0.0158 |         0.0132 |         0.0154 |         0.0140 |         0.0140 |\r\n|       field_inverse |           1.26 |           1.24 |           1.24 |           1.25 |           1.25 |\r\n|   field_inverse_var |          0.819 |          0.808 |          0.817 |          0.816 |          0.811 |\r\n| field_is_square_var |           1.08 |           1.08 |           1.08 |           1.08 |           1.07 |\r\n|          field_sqrt |           3.75 |           3.33 |           3.81 |           3.39 |           3.27 |\r\n\r\n### AMD Ryzen 7950X\r\n\r\n|               bench |            asm |              c |            c52 |         fiat_c |  fiat_cryptopt |\r\n|---------------------|----------------|----------------|----------------|----------------|----------------|\r\n|          ecmult_gen |           14.0 |           12.7 |           13.8 |           13.1 |           12.3 |\r\n|        ecmult_const |           26.4 |           23.9 |           26.7 |           24.8 |           23.0 |\r\n|           ecmult_1p |           20.7 |           18.6 |           20.9 |           19.5 |           18.2 |\r\n|         ecmult_0p_g |           15.1 |           13.6 |           15.4 |           14.3 |           13.2 |\r\n|         ecmult_1p_g |           12.1 |           10.8 |           12.1 |           11.4 |           10.4 |\r\n|          field_half |        0.00213 |        0.00196 |        0.00189 |        0.00189 |        0.00189 |\r\n|     field_normalize |        0.00556 |        0.00564 |        0.00549 |        0.00561 |        0.00559 |\r\n|field_normalize_weak |        0.00228 |        0.00229 |        0.00228 |        0.00230 |        0.00229 |\r\n|           field_sqr |         0.0115 |         0.0106 |         0.0112 |         0.0104 |        0.00989 |\r\n|           field_mul |         0.0137 |         0.0118 |         0.0136 |         0.0123 |         0.0123 |\r\n|       field_inverse |           1.09 |           1.10 |           1.07 |           1.10 |           1.10 |\r\n|   field_inverse_var |          0.670 |          0.680 |          0.657 |          0.681 |          0.675 |\r\n| field_is_square_var |          0.855 |          0.889 |          0.860 |          0.881 |          0.857 |\r\n|          field_sqrt |           3.34 |           2.98 |           3.17 |           2.95 |           2.82 |\r\n",
      "user": {
        "login": "dderjoel",
        "id": 13455345,
        "node_id": "MDQ6VXNlcjEzNDU1MzQ1",
        "avatar_url": "https://avatars.githubusercontent.com/u/13455345?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dderjoel",
        "html_url": "https://github.com/dderjoel",
        "followers_url": "https://api.github.com/users/dderjoel/followers",
        "following_url": "https://api.github.com/users/dderjoel/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dderjoel/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dderjoel/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dderjoel/subscriptions",
        "organizations_url": "https://api.github.com/users/dderjoel/orgs",
        "repos_url": "https://api.github.com/users/dderjoel/repos",
        "events_url": "https://api.github.com/users/dderjoel/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dderjoel/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/issues/1261#issuecomment-1532314457",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1261"
    },
    {
      "event": "commented",
      "id": 1539448523,
      "node_id": "IC_kwDOAP4Jqs5bwh7L",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/1539448523",
      "actor": {
        "login": "dderjoel",
        "id": 13455345,
        "node_id": "MDQ6VXNlcjEzNDU1MzQ1",
        "avatar_url": "https://avatars.githubusercontent.com/u/13455345?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dderjoel",
        "html_url": "https://github.com/dderjoel",
        "followers_url": "https://api.github.com/users/dderjoel/followers",
        "following_url": "https://api.github.com/users/dderjoel/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dderjoel/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dderjoel/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dderjoel/subscriptions",
        "organizations_url": "https://api.github.com/users/dderjoel/orgs",
        "repos_url": "https://api.github.com/users/dderjoel/repos",
        "events_url": "https://api.github.com/users/dderjoel/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dderjoel/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-09T05:50:00Z",
      "updated_at": "2023-05-09T05:50:00Z",
      "author_association": "NONE",
      "body": "Hi everyone, \r\nI've integrated the new implementations (CryptOpt Assembly and Fiat-C) into [my fork](https://github.com/dderjoel/secp256k1), and it works with `./configure --with-asm=no` and `./configure --with-asm=x86_64`.\r\nI am unsure how to run the ci, to see if it works (especially on Windows).\r\n\r\nAlso, the current commits don't check if the CPU features flags `BMI2` nor `ADX`. Is the idea to check that at runtime or compile time or both?\r\nAlso, I can't figure out how I would make the field arithmetic static and inline again (if that is needed).\r\n\r\nI'm happy to do the bulk work but I'd need some guidance on the following\r\n- [ ] CPU flags check on compile / run time\r\n- [ ] Where to put implementations (I've currently put them into `src/third_party`) and whether to force them to be static\r\n- [ ] If not static, then we need CMake integration (to compile `./third_party/*.c`)\r\n",
      "user": {
        "login": "dderjoel",
        "id": 13455345,
        "node_id": "MDQ6VXNlcjEzNDU1MzQ1",
        "avatar_url": "https://avatars.githubusercontent.com/u/13455345?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dderjoel",
        "html_url": "https://github.com/dderjoel",
        "followers_url": "https://api.github.com/users/dderjoel/followers",
        "following_url": "https://api.github.com/users/dderjoel/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dderjoel/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dderjoel/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dderjoel/subscriptions",
        "organizations_url": "https://api.github.com/users/dderjoel/orgs",
        "repos_url": "https://api.github.com/users/dderjoel/repos",
        "events_url": "https://api.github.com/users/dderjoel/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dderjoel/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/issues/1261#issuecomment-1539448523",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1261"
    },
    {
      "event": "labeled",
      "id": 9212768820,
      "node_id": "LE_lADOAP4Jqs5ivysAzwAAAAIlH7I0",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/9212768820",
      "actor": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-10T14:58:44Z",
      "label": {
        "name": "assurance",
        "color": "A6DF3D"
      }
    },
    {
      "event": "commented",
      "id": 1556686606,
      "node_id": "IC_kwDOAP4Jqs5cyScO",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/1556686606",
      "actor": {
        "login": "dderjoel",
        "id": 13455345,
        "node_id": "MDQ6VXNlcjEzNDU1MzQ1",
        "avatar_url": "https://avatars.githubusercontent.com/u/13455345?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dderjoel",
        "html_url": "https://github.com/dderjoel",
        "followers_url": "https://api.github.com/users/dderjoel/followers",
        "following_url": "https://api.github.com/users/dderjoel/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dderjoel/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dderjoel/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dderjoel/subscriptions",
        "organizations_url": "https://api.github.com/users/dderjoel/orgs",
        "repos_url": "https://api.github.com/users/dderjoel/repos",
        "events_url": "https://api.github.com/users/dderjoel/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dderjoel/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-22T07:29:50Z",
      "updated_at": "2023-05-22T07:29:50Z",
      "author_association": "NONE",
      "body": "Hi everyone,\r\n\r\nI've updated my fork in three ways: \r\n1. I've included the up to date version from Fiat, i.e. without the unnecessary AND's \r\n1. I've included the CryptOpt-generated versions into the header files, (as opposed to earlier where I've put them into separate C files). \r\n    One problem was that the inline assembly did not specify that caller-save registers will be overwritten.\r\n    Another problem was that rdx and rdi were also overwritten. Now, I've added two instructions to the end, which restore `rdx` and `rdi`.  (Does anyone know hot to tell CC that those are clobbered AND read at the same time)?\r\n1. I've included CPU flag detection macros into `./build-aux/m4/bitcoin_secp.m4`. I've found existing macros [to check common cpu features](https://www.gnu.org/software/autoconf-archive/ax_check_x86_features.html) and to [check via builtin](https://www.gnu.org/savannah-checkouts/gnu/autoconf-archive/ax_gcc_x86_cpuid.html) already, but I was unable to reliably detect `adx` (especially with clang, which does not support those in `__builtin_cpu_supports`. [c.f. the list of supported flags](https://lists.llvm.org/pipermail/cfe-commits/Week-of-Mon-20150629/131941.html)\r\n\r\nI believe the last thing for a PR would be to check during the CMAKE build process, if BMI2 and ADX are available.  Does anyone have other ideas on what we need here? ",
      "user": {
        "login": "dderjoel",
        "id": 13455345,
        "node_id": "MDQ6VXNlcjEzNDU1MzQ1",
        "avatar_url": "https://avatars.githubusercontent.com/u/13455345?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dderjoel",
        "html_url": "https://github.com/dderjoel",
        "followers_url": "https://api.github.com/users/dderjoel/followers",
        "following_url": "https://api.github.com/users/dderjoel/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dderjoel/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dderjoel/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dderjoel/subscriptions",
        "organizations_url": "https://api.github.com/users/dderjoel/orgs",
        "repos_url": "https://api.github.com/users/dderjoel/repos",
        "events_url": "https://api.github.com/users/dderjoel/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dderjoel/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/issues/1261#issuecomment-1556686606",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1261"
    },
    {
      "event": "commented",
      "id": 1557175920,
      "node_id": "IC_kwDOAP4Jqs5c0J5w",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/1557175920",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-22T12:59:17Z",
      "updated_at": "2023-05-22T13:09:14Z",
      "author_association": "MEMBER",
      "body": "@dderjoel Thanks for the updates, I'm very glad to see the progress here.\r\n\r\nMy thinking is that we'll actually want to split this into two separate efforts, which we can discuss and consider with different timelines:\r\n* Replacing the pure-C code with Fiat-Crypto generated C code.\r\n* Introducing CryptoOpt-generated assembly code.\r\n\r\nThe first is straightforward, I think: your benchmarks show that the Fiat-Crypto generated C code (with the #810 optimization) is competitive with the C code we already have, so I think there is little reason not to just outright replace that code. Since there is no reason to keep the old code too, we don't need any decision logic or build system support to choose one over the other. I have some comments on the implementation, but that can wait for a PR. Overall, this feels very close to usable.\r\n\r\nIntroducing CryptoOpt is a more complex matter, because of the use of ADCX/ADOX/MULX it cannot be a drop-in replacement for the assembly code we already have. While I have no problem with optimizing exclusively for architectures which do have these, we can't just drop support for those who don't (but falling back to the C implementation, or another less-optimized asm implementation, on those is ok, IMO). There are a number of options:\r\n* Modify CryptoOpt to not use the new instructions, allowing us to use it as a drop-in replacement for the existing asm code. There are of course alternatives to this, like using the output of a well-known, stable, C compiler on the Fiat-Crypto generated C code, and include that output directly as asm code. Either of these options would essentially give us the same level of assurance in the asm code as fiat-crypto-output-fed-to-c-compiler, which is more than what we currently have for the asm code.\r\n* No autodetection, and only enable it when explicitly requested at configure time, which someone can do if they know it'll be run on a machine that supports the new instructions. This could be a first step to introduce the CryptoOpt code to the codebase, but it won't see widespread use in this mode.\r\n* Have runtime autodetection, to determine whether the machine the code is running on (not the compiler host machine as I have the impression your branch is trying to do) has support for the relevant instructions, and use that to determine which code to use. The CPU feature detection code isn't hard to write, but it may involve some changes to the library to have any kind of runtime-switchable features (e.g. when does the autodetect code run, does it need to go into the context for thread-safety, ...) that we'd need to have a discussion about.",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/issues/1261#issuecomment-1557175920",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1261"
    },
    {
      "event": "mentioned",
      "id": 9302450446,
      "node_id": "MEE_lADOAP4Jqs5ivysAzwAAAAIqeCEO",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/9302450446",
      "actor": {
        "login": "dderjoel",
        "id": 13455345,
        "node_id": "MDQ6VXNlcjEzNDU1MzQ1",
        "avatar_url": "https://avatars.githubusercontent.com/u/13455345?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dderjoel",
        "html_url": "https://github.com/dderjoel",
        "followers_url": "https://api.github.com/users/dderjoel/followers",
        "following_url": "https://api.github.com/users/dderjoel/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dderjoel/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dderjoel/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dderjoel/subscriptions",
        "organizations_url": "https://api.github.com/users/dderjoel/orgs",
        "repos_url": "https://api.github.com/users/dderjoel/repos",
        "events_url": "https://api.github.com/users/dderjoel/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dderjoel/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-22T12:59:18Z"
    },
    {
      "event": "subscribed",
      "id": 9302450466,
      "node_id": "SE_lADOAP4Jqs5ivysAzwAAAAIqeCEi",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/9302450466",
      "actor": {
        "login": "dderjoel",
        "id": 13455345,
        "node_id": "MDQ6VXNlcjEzNDU1MzQ1",
        "avatar_url": "https://avatars.githubusercontent.com/u/13455345?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dderjoel",
        "html_url": "https://github.com/dderjoel",
        "followers_url": "https://api.github.com/users/dderjoel/followers",
        "following_url": "https://api.github.com/users/dderjoel/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dderjoel/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dderjoel/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dderjoel/subscriptions",
        "organizations_url": "https://api.github.com/users/dderjoel/orgs",
        "repos_url": "https://api.github.com/users/dderjoel/repos",
        "events_url": "https://api.github.com/users/dderjoel/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dderjoel/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-22T12:59:18Z"
    },
    {
      "event": "commented",
      "id": 1557191247,
      "node_id": "IC_kwDOAP4Jqs5c0NpP",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/1557191247",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-22T13:07:46Z",
      "updated_at": "2023-05-22T13:15:13Z",
      "author_association": "MEMBER",
      "body": "Separate comment, as it feels unrelated to the rest.\r\n\r\nIn inline asm blocks, all variable templates fall in one of these categories:\r\n  * Input variables\r\n  * Early-clobber output variable (`=&`)\r\n  * Output variables (`=`)\r\n  * Input-output variables (`+`)\r\n  * (not actually variables) explicitly clobbered registers (which won't be assigned to input or output variables)\r\n\r\nNormal output variables may be assigned the same register as an input variable, but early-clobber output variables won't.\r\n\r\nIf there is a PR, I'm happy to look over it.",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/issues/1261#issuecomment-1557191247",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1261"
    },
    {
      "event": "commented",
      "id": 1557372814,
      "node_id": "IC_kwDOAP4Jqs5c05-O",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/1557372814",
      "actor": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-22T14:57:54Z",
      "updated_at": "2023-05-22T14:57:54Z",
      "author_association": "MEMBER",
      "body": "I agree that we should add Fiat-Crypto first separately. I wonder what would be necessary for reviewers to be convinced that the code is correct and what exact guarantees the Fiat-Crypto proofs provide. \r\n\r\n> Introducing CryptoOpt is a more complex matter [...]\r\n\r\nI think a reasonable path forward is to first a compile-time option (maybe with a simple abort at run time, e.g., just call ADX in the self-check), and then later add runtime autodetection. Modifying CryptoOpt to be generic x86_64 sounds more complicated, and we'd probably leave performance on the table.",
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/issues/1261#issuecomment-1557372814",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1261"
    },
    {
      "event": "commented",
      "id": 1557413959,
      "node_id": "IC_kwDOAP4Jqs5c1EBH",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/1557413959",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-22T15:19:40Z",
      "updated_at": "2023-05-22T15:19:40Z",
      "author_association": "MEMBER",
      "body": "> I wonder what would be necessary for reviewers to be convinced that the code is correct and what exact guarantees the Fiat-Crypto proofs provide.\r\n\r\nIndeed. I wonder if @roconnor-blockstream would be interested in having a look at that too...\r\n\r\n(Thinking out loud) would it be possible to use Klee to prove the C code that comes out is always correct, independent from the Fiat-crypto proofs? Actually, if that's feasible, perhaps we could try to do that right now with the current C code too.\r\n\r\n> I think a reasonable path forward is to first a compile-time option (maybe with a simple abort at run time, e.g., just call ADX in the self-check), and then later add runtime autodetection.\r\n\r\nThat seems reasonable.\r\n\r\n> Modifying CryptoOpt to be generic x86_64 sounds more complicated, and we'd probably leave performance on the table.\r\n\r\nI certainly wouldn't have non-ADCX-cryptopt-asm as the *only* x86_64 asm code in the library longer term; that seems like a waste. But if we don't, what do we do for non-ADCX systems in the runtime autodetection world?\r\n* Fall back to the C code implementation (and deleting the existing ASM code)?\r\n* Fall back to the existing non-proven ASM code?\r\n* Replace the existing ASM code with a new one that incorporates #810 (e.g. by taking compiler output from the fiat-crypto C code)?",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/issues/1261#issuecomment-1557413959",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1261"
    },
    {
      "event": "mentioned",
      "id": 9304084226,
      "node_id": "MEE_lADOAP4Jqs5ivysAzwAAAAIqkQ8C",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/9304084226",
      "actor": {
        "login": "roconnor-blockstream",
        "id": 21371712,
        "node_id": "MDQ6VXNlcjIxMzcxNzEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/21371712?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/roconnor-blockstream",
        "html_url": "https://github.com/roconnor-blockstream",
        "followers_url": "https://api.github.com/users/roconnor-blockstream/followers",
        "following_url": "https://api.github.com/users/roconnor-blockstream/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/roconnor-blockstream/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/roconnor-blockstream/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/roconnor-blockstream/subscriptions",
        "organizations_url": "https://api.github.com/users/roconnor-blockstream/orgs",
        "repos_url": "https://api.github.com/users/roconnor-blockstream/repos",
        "events_url": "https://api.github.com/users/roconnor-blockstream/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/roconnor-blockstream/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-22T15:19:40Z"
    },
    {
      "event": "subscribed",
      "id": 9304084237,
      "node_id": "SE_lADOAP4Jqs5ivysAzwAAAAIqkQ8N",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/9304084237",
      "actor": {
        "login": "roconnor-blockstream",
        "id": 21371712,
        "node_id": "MDQ6VXNlcjIxMzcxNzEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/21371712?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/roconnor-blockstream",
        "html_url": "https://github.com/roconnor-blockstream",
        "followers_url": "https://api.github.com/users/roconnor-blockstream/followers",
        "following_url": "https://api.github.com/users/roconnor-blockstream/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/roconnor-blockstream/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/roconnor-blockstream/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/roconnor-blockstream/subscriptions",
        "organizations_url": "https://api.github.com/users/roconnor-blockstream/orgs",
        "repos_url": "https://api.github.com/users/roconnor-blockstream/repos",
        "events_url": "https://api.github.com/users/roconnor-blockstream/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/roconnor-blockstream/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-22T15:19:40Z"
    },
    {
      "event": "commented",
      "id": 1557428738,
      "node_id": "IC_kwDOAP4Jqs5c1HoC",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/1557428738",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-22T15:29:05Z",
      "updated_at": "2023-05-22T15:29:05Z",
      "author_association": "MEMBER",
      "body": "@dderjoel Another question: what about the 32-bit code? Can fiat-crypto generate C code for that too? If so, does that incorporate #810 now? I don't think we care enough about the 32-bit code to bother with asm optimizations for that, but replacing the existing code with formally-verified code would still be nice.",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/issues/1261#issuecomment-1557428738",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1261"
    },
    {
      "event": "mentioned",
      "id": 9304177080,
      "node_id": "MEE_lADOAP4Jqs5ivysAzwAAAAIqknm4",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/9304177080",
      "actor": {
        "login": "dderjoel",
        "id": 13455345,
        "node_id": "MDQ6VXNlcjEzNDU1MzQ1",
        "avatar_url": "https://avatars.githubusercontent.com/u/13455345?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dderjoel",
        "html_url": "https://github.com/dderjoel",
        "followers_url": "https://api.github.com/users/dderjoel/followers",
        "following_url": "https://api.github.com/users/dderjoel/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dderjoel/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dderjoel/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dderjoel/subscriptions",
        "organizations_url": "https://api.github.com/users/dderjoel/orgs",
        "repos_url": "https://api.github.com/users/dderjoel/repos",
        "events_url": "https://api.github.com/users/dderjoel/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dderjoel/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-22T15:29:05Z"
    },
    {
      "event": "subscribed",
      "id": 9304177094,
      "node_id": "SE_lADOAP4Jqs5ivysAzwAAAAIqknnG",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/9304177094",
      "actor": {
        "login": "dderjoel",
        "id": 13455345,
        "node_id": "MDQ6VXNlcjEzNDU1MzQ1",
        "avatar_url": "https://avatars.githubusercontent.com/u/13455345?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dderjoel",
        "html_url": "https://github.com/dderjoel",
        "followers_url": "https://api.github.com/users/dderjoel/followers",
        "following_url": "https://api.github.com/users/dderjoel/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dderjoel/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dderjoel/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dderjoel/subscriptions",
        "organizations_url": "https://api.github.com/users/dderjoel/orgs",
        "repos_url": "https://api.github.com/users/dderjoel/repos",
        "events_url": "https://api.github.com/users/dderjoel/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dderjoel/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-22T15:29:05Z"
    },
    {
      "event": "commented",
      "id": 1558291804,
      "node_id": "IC_kwDOAP4Jqs5c4aVc",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/1558291804",
      "actor": {
        "login": "dderjoel",
        "id": 13455345,
        "node_id": "MDQ6VXNlcjEzNDU1MzQ1",
        "avatar_url": "https://avatars.githubusercontent.com/u/13455345?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dderjoel",
        "html_url": "https://github.com/dderjoel",
        "followers_url": "https://api.github.com/users/dderjoel/followers",
        "following_url": "https://api.github.com/users/dderjoel/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dderjoel/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dderjoel/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dderjoel/subscriptions",
        "organizations_url": "https://api.github.com/users/dderjoel/orgs",
        "repos_url": "https://api.github.com/users/dderjoel/repos",
        "events_url": "https://api.github.com/users/dderjoel/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dderjoel/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-23T00:53:52Z",
      "updated_at": "2023-05-23T00:53:52Z",
      "author_association": "NONE",
      "body": "\r\n\r\n> * Replacing the pure-C code with Fiat-Crypto generated C code.\r\n\r\n> I agree that we should add Fiat-Crypto first separately. \r\n\r\nWill create a PR later which only replaces the 64bit C code. We can then continue to discuss there.\r\n\r\n> maybe with a simple abort at run time, e.g., just call ADX in the self-check\r\n\r\n> That seems reasonable.\r\n\r\nWould that be in [src/selftest.h:29](https://github.com/bitcoin-core/secp256k1/blob/5f7903c73c18953b2a3a209fceb3fae430cfeb35/src/selftest.h#L29)? \r\nsomething like\r\n```c\r\nstatic int secp256k1_selftest_passes(void) {\r\n    int ret = 1;\r\n#if defined(USE_ASM_X86_64)     \r\n  __asm__ __volatile__(\"cpuid\\n\"\r\n                       \"mov %%rbx, %%rax\\n\"\r\n                       \"shr $19, %%rbx\\n\"\r\n                       \"shr $8, %%rax\\n\"\r\n                       \"and %%rbx, %%rax\\n\"\r\n                       \"and $1, %%rax\\n\"\r\n                       : \"=a\"(ret)\r\n                       : \"a\"(7), \"c\"(0)\r\n                       : \"rdx\", \"rbx\");\r\n#fi\r\n    return secp256k1_selftest_sha256() && ret;\r\n}\r\n```\r\n\r\n> (but falling back to the C implementation, or another less-optimized asm implementation, on those is ok, IMO)\r\n\r\nYes. According to my benchmarks, the C code is faster than the current asm implementation so performance wise, it does make sense to fallback to that.\r\n\r\n> Modify CryptoOpt to not use the new instructions, \r\n\r\nAs @real-or-random  already pointed out, that is a bit more complex, see also [Issue 143 in the CryptOpt repo](https://github.com/0xADE1A1DE/CryptOpt/issues/143), where I explain why.\r\n\r\n> No autodetection [...], but it won't see widespread use in this mode.\r\n\r\nYes, I agree, which would be sad. As far as I understood, the current  autodetection assumes that the code is compiled for the native system, as it checks if the local machine is x86_64. Hence, I thought it might as well also check if the flags are available. The only situation in which this (semantically) fails is if I compile on a (new ish) x86 machine and run it on an older x86 machine. This would, currently still work, but with the flag detection only in the build pipeline would not. I wonder how likely that is.\r\n\r\n> Have runtime autodetection\r\n\r\nYes, this is quite common in other libraries, too, like openSSL. If we have that, we could even go one step further and include one version for AMD and one for Intel, or even one for each Generation (at some point I believe it's a bit too much to maintain, but as CryptOpt makes it very easy to generate such implementations, it becomes feasible at least :)) \r\n\r\n\r\n\r\n> @dderjoel Another question: what about the 32-bit code? Can fiat-crypto generate C code for that too? If so, does that incorporate #810 now? I don't think we care enough about the 32-bit code to bother with asm optimizations for that, but replacing the existing code with formally-verified code would still be nice.\r\n\r\nThat is a question for Owen and the Fiat-Crypto team. So if I look at [the current 32-bit implementation](https://github.com/bitcoin-core/secp256k1/blob/master/src/field_10x26_impl.h), and look at the limbs I think its 10 limbs and the last limb has a width of 22 bits.\r\n\r\nWhen I call `./src/ExtractionOCaml/dettman_multiplication  dettman 32 10 22 '2^256 - 4294968273'` It fails with \r\n```\r\nComputed bounds (Some [Some [0x0 ~> 0x3ffffff], Some [0x0 ~> 0x3ffffff], Some [0x0 ~> 0x3ffffff], Some [0x0 ~> 0x3ffffff], Some [0x0 ~> 0x3ffffff], ome [0x0 ~> 0x3ffffff], Some [0x0 ~> 0x3ffffff], Some [0x0 ~> 0x3ffffff], Some [0x0 ~> 0x3ffffff], Some [0x0 ~> 0x800401ea7]]) are not tight enough expected bounds not looser than (Some [Some [0x0 ~> 0x7fffffe], Some [0x0 ~> 0x7fffffe], Some [0x0 ~> 0x7fffffe], Some [0x0 ~> 0x7fffffe], Some [0x0~> 0x7fffffe], Some [0x0 ~> 0x7fffffe], Some [0x0 ~> 0x7fffffe], Some [0x0 ~> 0x7fffffe], Some [0x0 ~> 0x7fffffe], Some [0x0 ~> 0x5fffff]])).\r\nThe bounds [0x0 ~> 0x800401ea7] are looser than the expected bounds [0x0 ~> 0x5fffff]\r\n``` \r\n\r\nand a lot of intermediate code.\r\n\r\nOn the CryptOpt side, I have not tried incorporating 32-bit code yet. This is probably another engineering task, probably at the order of \"get CryptOpt to generate code without ADX / BMI2\", as everything is tailored to 64-bit registers and carry-bits. But as it currently does not seem that urgent here either, this is not priority 1 on my list.\r\n",
      "user": {
        "login": "dderjoel",
        "id": 13455345,
        "node_id": "MDQ6VXNlcjEzNDU1MzQ1",
        "avatar_url": "https://avatars.githubusercontent.com/u/13455345?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dderjoel",
        "html_url": "https://github.com/dderjoel",
        "followers_url": "https://api.github.com/users/dderjoel/followers",
        "following_url": "https://api.github.com/users/dderjoel/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dderjoel/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dderjoel/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dderjoel/subscriptions",
        "organizations_url": "https://api.github.com/users/dderjoel/orgs",
        "repos_url": "https://api.github.com/users/dderjoel/repos",
        "events_url": "https://api.github.com/users/dderjoel/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dderjoel/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/issues/1261#issuecomment-1558291804",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1261"
    },
    {
      "event": "mentioned",
      "id": 9309364110,
      "node_id": "MEE_lADOAP4Jqs5ivysAzwAAAAIq4Z-O",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/9309364110",
      "actor": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-23T00:53:52Z"
    },
    {
      "event": "subscribed",
      "id": 9309364116,
      "node_id": "SE_lADOAP4Jqs5ivysAzwAAAAIq4Z-U",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/9309364116",
      "actor": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-23T00:53:52Z"
    },
    {
      "event": "mentioned",
      "id": 9309364125,
      "node_id": "MEE_lADOAP4Jqs5ivysAzwAAAAIq4Z-d",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/9309364125",
      "actor": {
        "login": "dderjoel",
        "id": 13455345,
        "node_id": "MDQ6VXNlcjEzNDU1MzQ1",
        "avatar_url": "https://avatars.githubusercontent.com/u/13455345?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dderjoel",
        "html_url": "https://github.com/dderjoel",
        "followers_url": "https://api.github.com/users/dderjoel/followers",
        "following_url": "https://api.github.com/users/dderjoel/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dderjoel/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dderjoel/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dderjoel/subscriptions",
        "organizations_url": "https://api.github.com/users/dderjoel/orgs",
        "repos_url": "https://api.github.com/users/dderjoel/repos",
        "events_url": "https://api.github.com/users/dderjoel/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dderjoel/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-23T00:53:52Z"
    },
    {
      "event": "subscribed",
      "id": 9309364129,
      "node_id": "SE_lADOAP4Jqs5ivysAzwAAAAIq4Z-h",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/9309364129",
      "actor": {
        "login": "dderjoel",
        "id": 13455345,
        "node_id": "MDQ6VXNlcjEzNDU1MzQ1",
        "avatar_url": "https://avatars.githubusercontent.com/u/13455345?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dderjoel",
        "html_url": "https://github.com/dderjoel",
        "followers_url": "https://api.github.com/users/dderjoel/followers",
        "following_url": "https://api.github.com/users/dderjoel/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dderjoel/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dderjoel/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dderjoel/subscriptions",
        "organizations_url": "https://api.github.com/users/dderjoel/orgs",
        "repos_url": "https://api.github.com/users/dderjoel/repos",
        "events_url": "https://api.github.com/users/dderjoel/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dderjoel/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-23T00:53:52Z"
    },
    {
      "event": "commented",
      "id": 1558376538,
      "node_id": "IC_kwDOAP4Jqs5c4vBa",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/1558376538",
      "actor": {
        "login": "OwenConoly",
        "id": 56445576,
        "node_id": "MDQ6VXNlcjU2NDQ1NTc2",
        "avatar_url": "https://avatars.githubusercontent.com/u/56445576?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/OwenConoly",
        "html_url": "https://github.com/OwenConoly",
        "followers_url": "https://api.github.com/users/OwenConoly/followers",
        "following_url": "https://api.github.com/users/OwenConoly/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/OwenConoly/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/OwenConoly/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/OwenConoly/subscriptions",
        "organizations_url": "https://api.github.com/users/OwenConoly/orgs",
        "repos_url": "https://api.github.com/users/OwenConoly/repos",
        "events_url": "https://api.github.com/users/OwenConoly/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/OwenConoly/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-23T01:51:57Z",
      "updated_at": "2023-05-23T01:51:57Z",
      "author_association": "NONE",
      "body": "> When I call `./src/ExtractionOCaml/dettman_multiplication dettman 32 10 22 '2^256 - 4294968273'` It fails with\r\n> \r\n> ```\r\n> Computed bounds (Some [Some [0x0 ~> 0x3ffffff], Some [0x0 ~> 0x3ffffff], Some [0x0 ~> 0x3ffffff], Some [0x0 ~> 0x3ffffff], Some [0x0 ~> 0x3ffffff], ome [0x0 ~> 0x3ffffff], Some [0x0 ~> 0x3ffffff], Some [0x0 ~> 0x3ffffff], Some [0x0 ~> 0x3ffffff], Some [0x0 ~> 0x800401ea7]]) are not tight enough expected bounds not looser than (Some [Some [0x0 ~> 0x7fffffe], Some [0x0 ~> 0x7fffffe], Some [0x0 ~> 0x7fffffe], Some [0x0 ~> 0x7fffffe], Some [0x0~> 0x7fffffe], Some [0x0 ~> 0x7fffffe], Some [0x0 ~> 0x7fffffe], Some [0x0 ~> 0x7fffffe], Some [0x0 ~> 0x7fffffe], Some [0x0 ~> 0x5fffff]])).\r\n> The bounds [0x0 ~> 0x800401ea7] are looser than the expected bounds [0x0 ~> 0x5fffff]\r\n> ```\r\nInteresting.  Apparently there's a qualitative difference between the 64-bit implementation and the 32-bit implementation.  (I suppose this shouldn't be extremely surprising.)  It looks like there's some extra reduction on the final limb?  I'll take a closer look at the 32-bit code to see what the difference is.",
      "user": {
        "login": "OwenConoly",
        "id": 56445576,
        "node_id": "MDQ6VXNlcjU2NDQ1NTc2",
        "avatar_url": "https://avatars.githubusercontent.com/u/56445576?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/OwenConoly",
        "html_url": "https://github.com/OwenConoly",
        "followers_url": "https://api.github.com/users/OwenConoly/followers",
        "following_url": "https://api.github.com/users/OwenConoly/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/OwenConoly/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/OwenConoly/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/OwenConoly/subscriptions",
        "organizations_url": "https://api.github.com/users/OwenConoly/orgs",
        "repos_url": "https://api.github.com/users/OwenConoly/repos",
        "events_url": "https://api.github.com/users/OwenConoly/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/OwenConoly/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/issues/1261#issuecomment-1558376538",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1261"
    },
    {
      "event": "commented",
      "id": 1558377500,
      "node_id": "IC_kwDOAP4Jqs5c4vQc",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/1558377500",
      "actor": {
        "login": "dderjoel",
        "id": 13455345,
        "node_id": "MDQ6VXNlcjEzNDU1MzQ1",
        "avatar_url": "https://avatars.githubusercontent.com/u/13455345?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dderjoel",
        "html_url": "https://github.com/dderjoel",
        "followers_url": "https://api.github.com/users/dderjoel/followers",
        "following_url": "https://api.github.com/users/dderjoel/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dderjoel/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dderjoel/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dderjoel/subscriptions",
        "organizations_url": "https://api.github.com/users/dderjoel/orgs",
        "repos_url": "https://api.github.com/users/dderjoel/repos",
        "events_url": "https://api.github.com/users/dderjoel/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dderjoel/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-23T01:53:25Z",
      "updated_at": "2023-05-23T01:53:25Z",
      "author_association": "NONE",
      "body": "> Interesting. Apparently there's a qualitative difference between the 64-bit implementation and the 32-bit implementation. (I suppose this shouldn't be extremely surprising.) It looks like there's some extra reduction on the final limb? I'll take a closer look at the 32-bit code to see what the difference is.\r\n\r\nThanks for looking into that, Owen.\r\nFWIW, I'm not 100% sure if my invocation is correct, it was just an (somewhat educated) guess.\r\n",
      "user": {
        "login": "dderjoel",
        "id": 13455345,
        "node_id": "MDQ6VXNlcjEzNDU1MzQ1",
        "avatar_url": "https://avatars.githubusercontent.com/u/13455345?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dderjoel",
        "html_url": "https://github.com/dderjoel",
        "followers_url": "https://api.github.com/users/dderjoel/followers",
        "following_url": "https://api.github.com/users/dderjoel/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dderjoel/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dderjoel/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dderjoel/subscriptions",
        "organizations_url": "https://api.github.com/users/dderjoel/orgs",
        "repos_url": "https://api.github.com/users/dderjoel/repos",
        "events_url": "https://api.github.com/users/dderjoel/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dderjoel/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/issues/1261#issuecomment-1558377500",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1261"
    },
    {
      "event": "commented",
      "id": 1558384738,
      "node_id": "IC_kwDOAP4Jqs5c4xBi",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/1558384738",
      "actor": {
        "login": "dderjoel",
        "id": 13455345,
        "node_id": "MDQ6VXNlcjEzNDU1MzQ1",
        "avatar_url": "https://avatars.githubusercontent.com/u/13455345?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dderjoel",
        "html_url": "https://github.com/dderjoel",
        "followers_url": "https://api.github.com/users/dderjoel/followers",
        "following_url": "https://api.github.com/users/dderjoel/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dderjoel/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dderjoel/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dderjoel/subscriptions",
        "organizations_url": "https://api.github.com/users/dderjoel/orgs",
        "repos_url": "https://api.github.com/users/dderjoel/repos",
        "events_url": "https://api.github.com/users/dderjoel/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dderjoel/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-23T02:02:31Z",
      "updated_at": "2023-05-23T02:02:31Z",
      "author_association": "NONE",
      "body": "> In inline asm blocks, all variable templates fall in one of these categories:\r\n> \r\n>   * Input variables\r\n> \r\n>   * Early-clobber output variable (`=&`)\r\n> \r\n>   * Output variables (`=`)\r\n> \r\n>   * Input-output variables (`+`)\r\n> \r\n>   * (not actually variables) explicitly clobbered registers (which won't be assigned to input or output variables)\r\n> \r\n> \r\n> Normal output variables may be assigned the same register as an input variable, but early-clobber output variables won't.\r\n> \r\n> If there is a PR, I'm happy to look over it.\r\n\r\n\r\nSo I've created a branch `only-asm` which features the [asm implementation here](https://github.com/dderjoel/secp256k1/blob/only-asm/src/third_party/field_5x52_asm_impl_cryptopt.h). \r\nlines 202 and 203 are the instructions to restore `r` and `b` into `rdi` and `rdx` respectively.\r\nThat is not always necessary, and also did not run through the equivalence checker.\r\nAs it it sometimes dead operations, depending on when/how the code is used, it would be more elegant to tell CC that those are simply clobbered. I'm also unsure with all the memory read/write, if they are needed.\r\n\r\nNow I'm having a hard time to sort `\"D\"(r)` and `\"d\"(b)` into your description above. \r\n",
      "user": {
        "login": "dderjoel",
        "id": 13455345,
        "node_id": "MDQ6VXNlcjEzNDU1MzQ1",
        "avatar_url": "https://avatars.githubusercontent.com/u/13455345?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dderjoel",
        "html_url": "https://github.com/dderjoel",
        "followers_url": "https://api.github.com/users/dderjoel/followers",
        "following_url": "https://api.github.com/users/dderjoel/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dderjoel/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dderjoel/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dderjoel/subscriptions",
        "organizations_url": "https://api.github.com/users/dderjoel/orgs",
        "repos_url": "https://api.github.com/users/dderjoel/repos",
        "events_url": "https://api.github.com/users/dderjoel/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dderjoel/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/issues/1261#issuecomment-1558384738",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1261"
    },
    {
      "event": "commented",
      "id": 1558459212,
      "node_id": "IC_kwDOAP4Jqs5c5DNM",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/1558459212",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-23T03:30:43Z",
      "updated_at": "2023-05-23T03:32:15Z",
      "author_association": "MEMBER",
      "body": "@dderjoel\r\n\r\n> Would that be in [src/selftest.h:29](https://github.com/bitcoin-core/secp256k1/blob/5f7903c73c18953b2a3a209fceb3fae430cfeb35/src/selftest.h#L29)?\r\n> something like\r\n> ...\r\n\r\nI think @real-or-random meant something even simpler (just some asm code that uses adc, which presumbly crashes on non-supporting systems), but your suggestion is better (and already introduces detection logic which can be later moved from selftesting to autodetection once that is feasible).\r\n\r\n> Yes. According to my benchmarks, the C code is faster than the current asm implementation so performance wise, it does make sense to fallback to that.\r\n\r\nGreat.\r\n\r\n> As @real-or-random already pointed out, that is a bit more complex, see also https://github.com/0xADE1A1DE/CryptOpt/issues/143, where I explain why.\r\n\r\nAh, I see now why it's nontrivial to avoid those instructions. I assumed you already had support for mul/imul, and it was just a matter of disabling mulx... but I get why mul/imul are actually a lot harder to deal with than mulx.\r\n\r\nIn either case, we still do have the option of replacing the asm code with fiat-crypto-c-fed-through-c-compiler, if we find a particularly fast combination of compiler/version/options.\r\n\r\n> Yes, I agree, which would be sad. As far as I understood, the current autodetection assumes that the code is compiled for the native system, as it checks if the local machine is x86_64. Hence, I thought it might as well also check if the flags are available. The only situation in which this (semantically) fails is if I compile on a (new ish) x86 machine and run it on an older x86 machine. This would, currently still work, but with the flag detection only in the build pipeline would not. I wonder how likely that is.\r\n\r\nI see where you're coming from now, but no, there is absolutely no assumption that the compilation is for the native system. *You* tell the libsecp256k1 build system what compiler suite to use, and it targets whatever that compiler is for. By default, that's your standard system compiler, which is most likely for the same architecture (x86/x86_64/arm32/aarch64/...) as the system you're running on, but there is no requirement for that. And even if it's the same architecture, it's not necessarily for your own system. In fact, I believe that there is a significant fraction of libsecp256k1 use that is built through cross-compiling (as compilation for another system than your own is called), as Bitcoin Core's release binaries (which include libsecp256k1) are created on a Linux x86_64 environment, cross-compiled for everything else (including arm32, aarch64, windows x86_64, mac osx, ...).\r\n\r\nWe absolutely can't do autodetection at compile or configure time. The options are manual configuration, or runtime autodetection.\r\n\r\n> If we have that, we could even go one step further and include one version for AMD and one for Intel, or even one for each Generation (at some point I believe it's a bit too much to maintain, but as CryptOpt makes it very easy to generate such implementations, it becomes feasible at least :))\r\n\r\nIndeed. That's the advantage of using formal methods, that they lower the review barrier significantly for having multiple options like this.\r\n\r\nIt'd also open the door for things like #967, which adds a field with a more standard 4x64 limb representation, but which is only faster with asm optimization (because it much more crucially relies on fast carries, which are hard to get the compiler to emit for pure C code).\r\n\r\n> This is probably another engineering task, probably at the order of \"get CryptOpt to generate code without ADX / BMI2\", as everything is tailored to 64-bit registers and carry-bits. But as it currently does not seem that urgent here either, this is not priority 1 on my list.c\r\n\r\n32-bit x86 is all but dead, I absolutely wouldn't suggest you spend any time on asm optimizing that.\r\n\r\nThe 32-bit C code is there for weak hardware, from hardware wallet to (old) Raspberry Pi like devices. But none of those are x86. If you're looking for more work, 32-bit ARM and (increasingly) 64-bit ARM are far more interesting targets than 32-bit x86.\r\n\r\n@OwenConoly \r\n\r\n> Interesting. Apparently there's a qualitative difference between the 64-bit implementation and the 32-bit implementation. (I suppose this shouldn't be extremely surprising.) It looks like there's some extra reduction on the final limb? I'll take a closer look at the 32-bit code to see what the difference is.\r\n\r\nThank you for looking into it!\r\n",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/issues/1261#issuecomment-1558459212",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1261"
    },
    {
      "event": "mentioned",
      "id": 9310449141,
      "node_id": "MEE_lADOAP4Jqs5ivysAzwAAAAIq8i31",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/9310449141",
      "actor": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-23T03:30:43Z"
    },
    {
      "event": "subscribed",
      "id": 9310449147,
      "node_id": "SE_lADOAP4Jqs5ivysAzwAAAAIq8i37",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/9310449147",
      "actor": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-23T03:30:43Z"
    },
    {
      "event": "mentioned",
      "id": 9310449157,
      "node_id": "MEE_lADOAP4Jqs5ivysAzwAAAAIq8i4F",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/9310449157",
      "actor": {
        "login": "dderjoel",
        "id": 13455345,
        "node_id": "MDQ6VXNlcjEzNDU1MzQ1",
        "avatar_url": "https://avatars.githubusercontent.com/u/13455345?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dderjoel",
        "html_url": "https://github.com/dderjoel",
        "followers_url": "https://api.github.com/users/dderjoel/followers",
        "following_url": "https://api.github.com/users/dderjoel/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dderjoel/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dderjoel/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dderjoel/subscriptions",
        "organizations_url": "https://api.github.com/users/dderjoel/orgs",
        "repos_url": "https://api.github.com/users/dderjoel/repos",
        "events_url": "https://api.github.com/users/dderjoel/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dderjoel/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-23T03:30:43Z"
    },
    {
      "event": "subscribed",
      "id": 9310449167,
      "node_id": "SE_lADOAP4Jqs5ivysAzwAAAAIq8i4P",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/9310449167",
      "actor": {
        "login": "dderjoel",
        "id": 13455345,
        "node_id": "MDQ6VXNlcjEzNDU1MzQ1",
        "avatar_url": "https://avatars.githubusercontent.com/u/13455345?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dderjoel",
        "html_url": "https://github.com/dderjoel",
        "followers_url": "https://api.github.com/users/dderjoel/followers",
        "following_url": "https://api.github.com/users/dderjoel/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dderjoel/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dderjoel/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dderjoel/subscriptions",
        "organizations_url": "https://api.github.com/users/dderjoel/orgs",
        "repos_url": "https://api.github.com/users/dderjoel/repos",
        "events_url": "https://api.github.com/users/dderjoel/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dderjoel/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-23T03:30:43Z"
    },
    {
      "event": "mentioned",
      "id": 9310449180,
      "node_id": "MEE_lADOAP4Jqs5ivysAzwAAAAIq8i4c",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/9310449180",
      "actor": {
        "login": "OwenConoly",
        "id": 56445576,
        "node_id": "MDQ6VXNlcjU2NDQ1NTc2",
        "avatar_url": "https://avatars.githubusercontent.com/u/56445576?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/OwenConoly",
        "html_url": "https://github.com/OwenConoly",
        "followers_url": "https://api.github.com/users/OwenConoly/followers",
        "following_url": "https://api.github.com/users/OwenConoly/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/OwenConoly/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/OwenConoly/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/OwenConoly/subscriptions",
        "organizations_url": "https://api.github.com/users/OwenConoly/orgs",
        "repos_url": "https://api.github.com/users/OwenConoly/repos",
        "events_url": "https://api.github.com/users/OwenConoly/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/OwenConoly/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-23T03:30:44Z"
    },
    {
      "event": "subscribed",
      "id": 9310449187,
      "node_id": "SE_lADOAP4Jqs5ivysAzwAAAAIq8i4j",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/9310449187",
      "actor": {
        "login": "OwenConoly",
        "id": 56445576,
        "node_id": "MDQ6VXNlcjU2NDQ1NTc2",
        "avatar_url": "https://avatars.githubusercontent.com/u/56445576?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/OwenConoly",
        "html_url": "https://github.com/OwenConoly",
        "followers_url": "https://api.github.com/users/OwenConoly/followers",
        "following_url": "https://api.github.com/users/OwenConoly/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/OwenConoly/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/OwenConoly/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/OwenConoly/subscriptions",
        "organizations_url": "https://api.github.com/users/OwenConoly/orgs",
        "repos_url": "https://api.github.com/users/OwenConoly/repos",
        "events_url": "https://api.github.com/users/OwenConoly/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/OwenConoly/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-23T03:30:44Z"
    },
    {
      "event": "commented",
      "id": 1558495996,
      "node_id": "IC_kwDOAP4Jqs5c5ML8",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/1558495996",
      "actor": {
        "login": "dderjoel",
        "id": 13455345,
        "node_id": "MDQ6VXNlcjEzNDU1MzQ1",
        "avatar_url": "https://avatars.githubusercontent.com/u/13455345?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dderjoel",
        "html_url": "https://github.com/dderjoel",
        "followers_url": "https://api.github.com/users/dderjoel/followers",
        "following_url": "https://api.github.com/users/dderjoel/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dderjoel/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dderjoel/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dderjoel/subscriptions",
        "organizations_url": "https://api.github.com/users/dderjoel/orgs",
        "repos_url": "https://api.github.com/users/dderjoel/repos",
        "events_url": "https://api.github.com/users/dderjoel/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dderjoel/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-23T04:18:34Z",
      "updated_at": "2023-05-23T04:18:34Z",
      "author_association": "NONE",
      "body": "> which presumbly crashes on non-supporting systems\r\n\r\nYes, should trigger an `SIGILL` in those cases. \r\n\r\nre, build:\r\n\r\nYes, I forgot about the cross compilation and releases. \r\nin the `only-asm` branch, I've hooked the detection into the case where the build script is checking anyway, and is conservative to not use the asm then. In other words, where it used to check if it could use `x86_64`, it now additionally checks if the flags are set.\r\nHowever, now I see that this is not enough. For the case, one wants to build for *generic x64*, one would set `--with-asm=x86-64` and this would result in code which needs the flags. So as an alternative, we could use additional switches `--has-adx` and `--has-bmi2` to `./configure`, and then if (regardless of auto-detected or explicitly set) also `--with-asm=x86-64` is set, then the new asm can be used.\r\nQuestion then is, what the default for this should be (also auto detect or conservative to false?)\r\n\r\nIf we want to use runtime detection-and-selection, then I believe either the functions must be non-inlined and in e.g. [here](https://github.com/bitcoin-core/secp256k1/blob/master/src/field_5x52_impl.h#L353) we could check a global bit which one to jump to, either the adx-asm version or to the C-compiled fallback.\r\n",
      "user": {
        "login": "dderjoel",
        "id": 13455345,
        "node_id": "MDQ6VXNlcjEzNDU1MzQ1",
        "avatar_url": "https://avatars.githubusercontent.com/u/13455345?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dderjoel",
        "html_url": "https://github.com/dderjoel",
        "followers_url": "https://api.github.com/users/dderjoel/followers",
        "following_url": "https://api.github.com/users/dderjoel/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dderjoel/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dderjoel/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dderjoel/subscriptions",
        "organizations_url": "https://api.github.com/users/dderjoel/orgs",
        "repos_url": "https://api.github.com/users/dderjoel/repos",
        "events_url": "https://api.github.com/users/dderjoel/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dderjoel/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/issues/1261#issuecomment-1558495996",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1261"
    },
    {
      "event": "commented",
      "id": 1558640651,
      "node_id": "IC_kwDOAP4Jqs5c5vgL",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/1558640651",
      "actor": {
        "login": "peterdettman",
        "id": 3423981,
        "node_id": "MDQ6VXNlcjM0MjM5ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3423981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/peterdettman",
        "html_url": "https://github.com/peterdettman",
        "followers_url": "https://api.github.com/users/peterdettman/followers",
        "following_url": "https://api.github.com/users/peterdettman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/peterdettman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/peterdettman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/peterdettman/subscriptions",
        "organizations_url": "https://api.github.com/users/peterdettman/orgs",
        "repos_url": "https://api.github.com/users/peterdettman/repos",
        "events_url": "https://api.github.com/users/peterdettman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/peterdettman/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-23T06:52:56Z",
      "updated_at": "2023-05-23T06:52:56Z",
      "author_association": "CONTRIBUTOR",
      "body": "> Interesting. Apparently there's a qualitative difference between the 64-bit implementation and the 32-bit implementation. (I suppose this shouldn't be extremely surprising.) It looks like there's some extra reduction on the final limb? I'll take a closer look at the 32-bit code to see what the difference is.\r\n\r\nPossibly relevant: the current 10x26 field mul/sqr leave their residual carry in limbs[2] (thus exceeding 26 bits), while the most-significant limb will be fully reduced (22 bits). The 5x52 (C code, not asm) leaves theirs in the most-significant limb (limbs[4]).\r\n\r\nSee this PR: https://github.com/bitcoin-core/secp256k1/pull/815 , in particular the first commit: https://github.com/bitcoin-core/secp256k1/pull/815/commits/9388b77b03c6e0c09a950e84ba34e9a2d8e0d433 . In that PR @sipa also anticipates that this may be better for fiat-crypto integration: https://github.com/bitcoin-core/secp256k1/pull/815#issuecomment-1540331544 .\r\n\r\nI have previously mentioned a side-benefit to our magnitude tracking from rectifying this: https://github.com/bitcoin-core/secp256k1/issues/1060#issuecomment-1009647883 (\"Secondly...\")\r\n",
      "user": {
        "login": "peterdettman",
        "id": 3423981,
        "node_id": "MDQ6VXNlcjM0MjM5ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3423981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/peterdettman",
        "html_url": "https://github.com/peterdettman",
        "followers_url": "https://api.github.com/users/peterdettman/followers",
        "following_url": "https://api.github.com/users/peterdettman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/peterdettman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/peterdettman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/peterdettman/subscriptions",
        "organizations_url": "https://api.github.com/users/peterdettman/orgs",
        "repos_url": "https://api.github.com/users/peterdettman/repos",
        "events_url": "https://api.github.com/users/peterdettman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/peterdettman/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/issues/1261#issuecomment-1558640651",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1261"
    },
    {
      "event": "mentioned",
      "id": 9311785290,
      "node_id": "MEE_lADOAP4Jqs5ivysAzwAAAAIrBpFK",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/9311785290",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-23T06:52:56Z"
    },
    {
      "event": "subscribed",
      "id": 9311785299,
      "node_id": "SE_lADOAP4Jqs5ivysAzwAAAAIrBpFT",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/9311785299",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-23T06:52:56Z"
    },
    {
      "event": "commented",
      "id": 1561999261,
      "node_id": "IC_kwDOAP4Jqs5dGjed",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/1561999261",
      "actor": {
        "login": "dderjoel",
        "id": 13455345,
        "node_id": "MDQ6VXNlcjEzNDU1MzQ1",
        "avatar_url": "https://avatars.githubusercontent.com/u/13455345?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dderjoel",
        "html_url": "https://github.com/dderjoel",
        "followers_url": "https://api.github.com/users/dderjoel/followers",
        "following_url": "https://api.github.com/users/dderjoel/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dderjoel/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dderjoel/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dderjoel/subscriptions",
        "organizations_url": "https://api.github.com/users/dderjoel/orgs",
        "repos_url": "https://api.github.com/users/dderjoel/repos",
        "events_url": "https://api.github.com/users/dderjoel/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dderjoel/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-24T22:17:08Z",
      "updated_at": "2023-05-24T22:17:08Z",
      "author_association": "NONE",
      "body": "Okay, I'm more than happy to do the work and let the core team here review, but I'd need some corners with some guidance, because I'm not 100% sure of what we want.\r\nCurrently, I see two options: \r\n- At compile time include both, the asm version and the C version, and at runtime check the necessary bits and decide which one to use.\r\n- At compile time decide (with switches would we want, what would defaults be?) which one to compile and then have the check in the self-test (sort of what we have now in my fork's `only-asm` branch, maybe needs some more verbose error message.)",
      "user": {
        "login": "dderjoel",
        "id": 13455345,
        "node_id": "MDQ6VXNlcjEzNDU1MzQ1",
        "avatar_url": "https://avatars.githubusercontent.com/u/13455345?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dderjoel",
        "html_url": "https://github.com/dderjoel",
        "followers_url": "https://api.github.com/users/dderjoel/followers",
        "following_url": "https://api.github.com/users/dderjoel/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dderjoel/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dderjoel/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dderjoel/subscriptions",
        "organizations_url": "https://api.github.com/users/dderjoel/orgs",
        "repos_url": "https://api.github.com/users/dderjoel/repos",
        "events_url": "https://api.github.com/users/dderjoel/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dderjoel/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/issues/1261#issuecomment-1561999261",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1261"
    },
    {
      "event": "commented",
      "id": 1562002713,
      "node_id": "IC_kwDOAP4Jqs5dGkUZ",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/1562002713",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-24T22:20:55Z",
      "updated_at": "2023-05-24T22:20:55Z",
      "author_association": "MEMBER",
      "body": "@dderjoel\r\n\r\nI think eventually we want runtime check and proper dispatch to the right version, having both compiled in. But at this stage, I think it's more interesting to just have a configure flag that enables either the asm or C (defaulting to C code), plus a selfcheck.\r\n\r\nThis allows experimentation and benchmarking and testing, but avoids the need to make whatever restructuring is needed for autodetection. Moreover, it makes it easier for someone other than you do make the autodetection happen, as all the actual code would already be in.",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/issues/1261#issuecomment-1562002713",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1261"
    },
    {
      "event": "mentioned",
      "id": 9333247801,
      "node_id": "MEE_lADOAP4Jqs5ivysAzwAAAAIsTg85",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/9333247801",
      "actor": {
        "login": "dderjoel",
        "id": 13455345,
        "node_id": "MDQ6VXNlcjEzNDU1MzQ1",
        "avatar_url": "https://avatars.githubusercontent.com/u/13455345?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dderjoel",
        "html_url": "https://github.com/dderjoel",
        "followers_url": "https://api.github.com/users/dderjoel/followers",
        "following_url": "https://api.github.com/users/dderjoel/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dderjoel/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dderjoel/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dderjoel/subscriptions",
        "organizations_url": "https://api.github.com/users/dderjoel/orgs",
        "repos_url": "https://api.github.com/users/dderjoel/repos",
        "events_url": "https://api.github.com/users/dderjoel/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dderjoel/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-24T22:20:56Z"
    },
    {
      "event": "subscribed",
      "id": 9333247807,
      "node_id": "SE_lADOAP4Jqs5ivysAzwAAAAIsTg8_",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/9333247807",
      "actor": {
        "login": "dderjoel",
        "id": 13455345,
        "node_id": "MDQ6VXNlcjEzNDU1MzQ1",
        "avatar_url": "https://avatars.githubusercontent.com/u/13455345?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dderjoel",
        "html_url": "https://github.com/dderjoel",
        "followers_url": "https://api.github.com/users/dderjoel/followers",
        "following_url": "https://api.github.com/users/dderjoel/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dderjoel/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dderjoel/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dderjoel/subscriptions",
        "organizations_url": "https://api.github.com/users/dderjoel/orgs",
        "repos_url": "https://api.github.com/users/dderjoel/repos",
        "events_url": "https://api.github.com/users/dderjoel/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dderjoel/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-24T22:20:56Z"
    },
    {
      "event": "commented",
      "id": 1562275018,
      "node_id": "IC_kwDOAP4Jqs5dHmzK",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/1562275018",
      "actor": {
        "login": "dderjoel",
        "id": 13455345,
        "node_id": "MDQ6VXNlcjEzNDU1MzQ1",
        "avatar_url": "https://avatars.githubusercontent.com/u/13455345?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dderjoel",
        "html_url": "https://github.com/dderjoel",
        "followers_url": "https://api.github.com/users/dderjoel/followers",
        "following_url": "https://api.github.com/users/dderjoel/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dderjoel/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dderjoel/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dderjoel/subscriptions",
        "organizations_url": "https://api.github.com/users/dderjoel/orgs",
        "repos_url": "https://api.github.com/users/dderjoel/repos",
        "events_url": "https://api.github.com/users/dderjoel/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dderjoel/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-25T05:06:38Z",
      "updated_at": "2023-05-25T05:15:05Z",
      "author_association": "NONE",
      "body": "Just created a PR for exactly this, can I trigger CI without removing the *Draft* status?\r\nEDIT: never mind, just a minute to trigger itself",
      "user": {
        "login": "dderjoel",
        "id": 13455345,
        "node_id": "MDQ6VXNlcjEzNDU1MzQ1",
        "avatar_url": "https://avatars.githubusercontent.com/u/13455345?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dderjoel",
        "html_url": "https://github.com/dderjoel",
        "followers_url": "https://api.github.com/users/dderjoel/followers",
        "following_url": "https://api.github.com/users/dderjoel/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dderjoel/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dderjoel/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dderjoel/subscriptions",
        "organizations_url": "https://api.github.com/users/dderjoel/orgs",
        "repos_url": "https://api.github.com/users/dderjoel/repos",
        "events_url": "https://api.github.com/users/dderjoel/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dderjoel/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/issues/1261#issuecomment-1562275018",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1261"
    },
    {
      "event": "commented",
      "id": 1567691858,
      "node_id": "IC_kwDOAP4Jqs5dcRRS",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/1567691858",
      "actor": {
        "login": "dderjoel",
        "id": 13455345,
        "node_id": "MDQ6VXNlcjEzNDU1MzQ1",
        "avatar_url": "https://avatars.githubusercontent.com/u/13455345?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dderjoel",
        "html_url": "https://github.com/dderjoel",
        "followers_url": "https://api.github.com/users/dderjoel/followers",
        "following_url": "https://api.github.com/users/dderjoel/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dderjoel/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dderjoel/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dderjoel/subscriptions",
        "organizations_url": "https://api.github.com/users/dderjoel/orgs",
        "repos_url": "https://api.github.com/users/dderjoel/repos",
        "events_url": "https://api.github.com/users/dderjoel/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dderjoel/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-30T02:53:21Z",
      "updated_at": "2023-05-30T02:53:21Z",
      "author_association": "NONE",
      "body": "I've re-run the sec_bench suite on the exact fork on my 10 test machines, and the results is still very similar to the one before.\r\n\r\n|      implementation |    default_asm |      default_c |    default_c52 |         fiat_c |  fiat_cryptopt |\r\n|---------------------|----------------|----------------|----------------|----------------|----------------|\r\n|          ecmult_gen |        15.8059 |        14.9232 |        15.7527 |        15.0524 |        14.3984 |\r\n|        ecmult_const |        30.0159 |        28.1553 |        30.2437 |        28.3729 |        26.7443 |\r\n|           ecmult_1p |        23.7137 |          21.99 |        23.5329 |        22.3725 |        20.9531 |\r\n|         ecmult_0p_g |         16.851 |        15.7264 |        16.8364 |         15.926 |        14.9667 |\r\n|         ecmult_1p_g |        13.8695 |        12.8423 |        13.7058 |        12.9949 |        12.2609 |\r\n|          field_half |     0.00246964 |     0.00245409 |      0.0024321 |     0.00240483 |     0.00248599 |\r\n|     field_normalize |     0.00738854 |     0.00741554 |      0.0073913 |     0.00737073 |     0.00733137 |\r\n|field_normalize_weak |     0.00294516 |     0.00294647 |     0.00294284 |      0.0029337 |     0.00292048 |\r\n|           field_sqr |      0.0141365 |      0.0125201 |      0.0137808 |      0.0123229 |      0.0118652 |\r\n|           field_mul |      0.0170084 |        0.01443 |      0.0156856 |       0.014615 |      0.0145313 |\r\n|       field_inverse |        1.40032 |        1.39717 |        1.39222 |        1.39458 |        1.61234 |\r\n|   field_inverse_var |       0.912255 |       0.913256 |       0.908407 |        0.91439 |       0.909508 |\r\n| field_is_square_var |          1.194 |        1.20539 |        1.20361 |        1.20455 |        1.19346 |\r\n|          field_sqrt |        3.87147 |        3.55153 |        3.83592 |        3.44752 |        3.34927 |\r\n",
      "user": {
        "login": "dderjoel",
        "id": 13455345,
        "node_id": "MDQ6VXNlcjEzNDU1MzQ1",
        "avatar_url": "https://avatars.githubusercontent.com/u/13455345?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dderjoel",
        "html_url": "https://github.com/dderjoel",
        "followers_url": "https://api.github.com/users/dderjoel/followers",
        "following_url": "https://api.github.com/users/dderjoel/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dderjoel/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dderjoel/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dderjoel/subscriptions",
        "organizations_url": "https://api.github.com/users/dderjoel/orgs",
        "repos_url": "https://api.github.com/users/dderjoel/repos",
        "events_url": "https://api.github.com/users/dderjoel/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dderjoel/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/issues/1261#issuecomment-1567691858",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1261"
    },
    {
      "event": "commented",
      "id": 1571297030,
      "node_id": "IC_kwDOAP4Jqs5dqBcG",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/1571297030",
      "actor": {
        "login": "OwenConoly",
        "id": 56445576,
        "node_id": "MDQ6VXNlcjU2NDQ1NTc2",
        "avatar_url": "https://avatars.githubusercontent.com/u/56445576?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/OwenConoly",
        "html_url": "https://github.com/OwenConoly",
        "followers_url": "https://api.github.com/users/OwenConoly/followers",
        "following_url": "https://api.github.com/users/OwenConoly/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/OwenConoly/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/OwenConoly/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/OwenConoly/subscriptions",
        "organizations_url": "https://api.github.com/users/OwenConoly/orgs",
        "repos_url": "https://api.github.com/users/OwenConoly/repos",
        "events_url": "https://api.github.com/users/OwenConoly/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/OwenConoly/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-01T03:53:51Z",
      "updated_at": "2023-06-01T03:53:51Z",
      "author_association": "NONE",
      "body": "> @dderjoel Another question: what about the 32-bit code? Can fiat-crypto generate C code for that too? If so, does that incorporate #810 now? I don't think we care enough about the 32-bit code to bother with asm optimizations for that, but replacing the existing code with formally-verified code would still be nice.\r\n\r\nAn update on this: as Joel mentioned, using the same template we used for the 64-bit code did not work to generate the 32-bit code.  There are two reasons that it didn't work.\r\n1. When writing the 64-bit template, I hadn't considered the fact that we might need to split modular reductions into pieces, like [this](https://github.com/bitcoin-core/secp256k1/blob/9388b77b03c6e0c09a950e84ba34e9a2d8e0d433/src/field_10x26_impl.h#L517-L518).  Note that we have both R1 and R0, instead of just a single constant R like in the 64-bit code.  It was simple enough to make this generalization, so this isn't a problem anymore.\r\n2. Conceptually, the 32-bit and 64-bit algorithms are almost identical---but there's one difference.  In the 64-bit mul, the [first reduction](https://github.com/bitcoin-core/secp256k1/blob/debf3e5c08ab7a60e8d06f767b6cb3131c722e7c/src/field_5x52_int128_impl.h#L57) is from p8 (the highest partial product).  So, naively extrapolating, I would guess that in the 32-bit mul, the first reduction would be from p18 (the highest partial product).\r\nIf we try to generate the 32-bit mul and square using Joel's command-line invocation above, the generated code makes this \"naive extrapolation\" and starts out with a reduction from p18.  This doesn't work nicely at all: in the end, the value in the most significant limb ends up (potentially) being too big to even fit in a 32-bit register.\r\nThe handwritten 32-bit code avoids this issue by starting out with [a reduction from p17](https://github.com/bitcoin-core/secp256k1/blob/9388b77b03c6e0c09a950e84ba34e9a2d8e0d433/src/field_10x26_impl.h#L517-L518), before moving on to the reduction from p18.  The main difference between the generated code and the handwritten code is just that, in the handwritten code, this reduction from p17 appears at the beginning _instead of_ (i.e., not in addition to) later in the function, as in the generated code.  This is basically the only conceptual difference.\r\n\r\nI am curious whether there is a simple explanation (other than \"it makes the bounds work out right\") for why we need to start the 32-bit mul with this reduction from p17, but we don't need to start the 64-bit mul with a reduction from p7.  Ideally, I'd like to be able to answer questions like \"Hypothetically, if we were on a 16-bit machine (with a 20-limb implementation of this algorithm), then which partial product is our first reduction from?  p36 (the third-highest partial product), perhaps?\"  Of course it isn't vital to answer questions like this, but it would be nice to view both the 32-bit mul and the 64-bit mul as different instances of the same general algorithm.",
      "user": {
        "login": "OwenConoly",
        "id": 56445576,
        "node_id": "MDQ6VXNlcjU2NDQ1NTc2",
        "avatar_url": "https://avatars.githubusercontent.com/u/56445576?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/OwenConoly",
        "html_url": "https://github.com/OwenConoly",
        "followers_url": "https://api.github.com/users/OwenConoly/followers",
        "following_url": "https://api.github.com/users/OwenConoly/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/OwenConoly/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/OwenConoly/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/OwenConoly/subscriptions",
        "organizations_url": "https://api.github.com/users/OwenConoly/orgs",
        "repos_url": "https://api.github.com/users/OwenConoly/repos",
        "events_url": "https://api.github.com/users/OwenConoly/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/OwenConoly/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/issues/1261#issuecomment-1571297030",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1261"
    },
    {
      "event": "mentioned",
      "id": 9397793725,
      "node_id": "MEE_lADOAP4Jqs5ivysAzwAAAAIwJvO9",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/9397793725",
      "actor": {
        "login": "dderjoel",
        "id": 13455345,
        "node_id": "MDQ6VXNlcjEzNDU1MzQ1",
        "avatar_url": "https://avatars.githubusercontent.com/u/13455345?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dderjoel",
        "html_url": "https://github.com/dderjoel",
        "followers_url": "https://api.github.com/users/dderjoel/followers",
        "following_url": "https://api.github.com/users/dderjoel/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dderjoel/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dderjoel/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dderjoel/subscriptions",
        "organizations_url": "https://api.github.com/users/dderjoel/orgs",
        "repos_url": "https://api.github.com/users/dderjoel/repos",
        "events_url": "https://api.github.com/users/dderjoel/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dderjoel/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-01T03:53:51Z"
    },
    {
      "event": "subscribed",
      "id": 9397793727,
      "node_id": "SE_lADOAP4Jqs5ivysAzwAAAAIwJvO_",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/9397793727",
      "actor": {
        "login": "dderjoel",
        "id": 13455345,
        "node_id": "MDQ6VXNlcjEzNDU1MzQ1",
        "avatar_url": "https://avatars.githubusercontent.com/u/13455345?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dderjoel",
        "html_url": "https://github.com/dderjoel",
        "followers_url": "https://api.github.com/users/dderjoel/followers",
        "following_url": "https://api.github.com/users/dderjoel/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dderjoel/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dderjoel/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dderjoel/subscriptions",
        "organizations_url": "https://api.github.com/users/dderjoel/orgs",
        "repos_url": "https://api.github.com/users/dderjoel/repos",
        "events_url": "https://api.github.com/users/dderjoel/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dderjoel/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-01T03:53:51Z"
    },
    {
      "event": "commented",
      "id": 1571298265,
      "node_id": "IC_kwDOAP4Jqs5dqBvZ",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/1571298265",
      "actor": {
        "login": "OwenConoly",
        "id": 56445576,
        "node_id": "MDQ6VXNlcjU2NDQ1NTc2",
        "avatar_url": "https://avatars.githubusercontent.com/u/56445576?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/OwenConoly",
        "html_url": "https://github.com/OwenConoly",
        "followers_url": "https://api.github.com/users/OwenConoly/followers",
        "following_url": "https://api.github.com/users/OwenConoly/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/OwenConoly/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/OwenConoly/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/OwenConoly/subscriptions",
        "organizations_url": "https://api.github.com/users/OwenConoly/orgs",
        "repos_url": "https://api.github.com/users/OwenConoly/repos",
        "events_url": "https://api.github.com/users/OwenConoly/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/OwenConoly/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-01T03:56:12Z",
      "updated_at": "2023-06-01T03:56:12Z",
      "author_association": "NONE",
      "body": "I overcame issue (2) above simply by creating a Coq implementation for the 32-bit mul which is separate from the implementation of the 64-bit mul.  I followed along the C implementation from the first commit [9388b77](https://github.com/bitcoin-core/secp256k1/commit/9388b77b03c6e0c09a950e84ba34e9a2d8e0d433) of #815, which @peterdettman mentioned above.\r\n\r\nHere's the C code I generated for the 32-bit mul and sqr: [secp256k1_dettman_32.c](https://github.com/mit-plv/fiat-crypto/blob/d4b5e302fba05eb76d324f41db0fc16d9ae0d754/fiat-c/src/secp256k1_dettman_32.c).  Would you be interested in including this code in the library as well?  I assume we'd want some benchmarks before considering that too seriously, and I gather from the discussion in #815 that not many people have 32-bit machines on which to benchmark things like this.\r\n\r\nNote that the generated code does not include the Karatsuba optimization from the third commit of #815.  I think it would be interesting to add the Karatsuba multiplication to fiat-crypto, so I would be willing to add that optimization as well.\r\n\r\nAnd the 32-bit code I generated does incorporate the optimization from #810.  The handwritten 32-bit code from #815 also has this optimization.",
      "user": {
        "login": "OwenConoly",
        "id": 56445576,
        "node_id": "MDQ6VXNlcjU2NDQ1NTc2",
        "avatar_url": "https://avatars.githubusercontent.com/u/56445576?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/OwenConoly",
        "html_url": "https://github.com/OwenConoly",
        "followers_url": "https://api.github.com/users/OwenConoly/followers",
        "following_url": "https://api.github.com/users/OwenConoly/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/OwenConoly/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/OwenConoly/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/OwenConoly/subscriptions",
        "organizations_url": "https://api.github.com/users/OwenConoly/orgs",
        "repos_url": "https://api.github.com/users/OwenConoly/repos",
        "events_url": "https://api.github.com/users/OwenConoly/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/OwenConoly/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/issues/1261#issuecomment-1571298265",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1261"
    },
    {
      "event": "mentioned",
      "id": 9397802310,
      "node_id": "MEE_lADOAP4Jqs5ivysAzwAAAAIwJxVG",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/9397802310",
      "actor": {
        "login": "peterdettman",
        "id": 3423981,
        "node_id": "MDQ6VXNlcjM0MjM5ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3423981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/peterdettman",
        "html_url": "https://github.com/peterdettman",
        "followers_url": "https://api.github.com/users/peterdettman/followers",
        "following_url": "https://api.github.com/users/peterdettman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/peterdettman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/peterdettman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/peterdettman/subscriptions",
        "organizations_url": "https://api.github.com/users/peterdettman/orgs",
        "repos_url": "https://api.github.com/users/peterdettman/repos",
        "events_url": "https://api.github.com/users/peterdettman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/peterdettman/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-01T03:56:12Z"
    },
    {
      "event": "subscribed",
      "id": 9397802316,
      "node_id": "SE_lADOAP4Jqs5ivysAzwAAAAIwJxVM",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/9397802316",
      "actor": {
        "login": "peterdettman",
        "id": 3423981,
        "node_id": "MDQ6VXNlcjM0MjM5ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3423981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/peterdettman",
        "html_url": "https://github.com/peterdettman",
        "followers_url": "https://api.github.com/users/peterdettman/followers",
        "following_url": "https://api.github.com/users/peterdettman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/peterdettman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/peterdettman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/peterdettman/subscriptions",
        "organizations_url": "https://api.github.com/users/peterdettman/orgs",
        "repos_url": "https://api.github.com/users/peterdettman/repos",
        "events_url": "https://api.github.com/users/peterdettman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/peterdettman/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-01T03:56:12Z"
    },
    {
      "event": "commented",
      "id": 1571711533,
      "node_id": "IC_kwDOAP4Jqs5drmot",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/1571711533",
      "actor": {
        "login": "peterdettman",
        "id": 3423981,
        "node_id": "MDQ6VXNlcjM0MjM5ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3423981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/peterdettman",
        "html_url": "https://github.com/peterdettman",
        "followers_url": "https://api.github.com/users/peterdettman/followers",
        "following_url": "https://api.github.com/users/peterdettman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/peterdettman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/peterdettman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/peterdettman/subscriptions",
        "organizations_url": "https://api.github.com/users/peterdettman/orgs",
        "repos_url": "https://api.github.com/users/peterdettman/repos",
        "events_url": "https://api.github.com/users/peterdettman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/peterdettman/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-01T09:45:40Z",
      "updated_at": "2023-06-01T09:45:40Z",
      "author_association": "CONTRIBUTOR",
      "body": "> I am curious whether there is a simple explanation (other than \"it makes the bounds work out right\") for why we need to start the 32-bit mul with this reduction from p17, but we don't need to start the 64-bit mul with a reduction from p7. Ideally, I'd like to be able to answer questions like \"Hypothetically, if we were on a 16-bit machine (with a 20-limb implementation of this algorithm), then which partial product is our first reduction from? p36 (the third-highest partial product), perhaps?\" Of course it isn't vital to answer questions like this, but it would be nice to view both the 32-bit mul and the 64-bit mul as different instances of the same general algorithm.\r\n\r\nWell it pretty much is just \"it makes the bounds work out right\", but the crux is which of the high partial products can we do _last_ so that our residual carry lands neatly in the most-significant-limb. We then start one higher than that.\r\n\r\nFor 10x26:\r\np18 produces a 91 bit reduced result that doesn't fit in r8, r9 i.e. 49 bits.\r\np17 produces a 95 bit reduced result that doesn't fit in r7, r8, r9 i.e. 75 bits.\r\np16 produces a 98 bit reduced result that _does_ fit in r6, r7, r8, r9 i.e. 101 bits.\r\n\r\nSo our best option for the _last_ partial products step is p6/p16, and a final carry chain landing in r9 as desired.\r\n\r\nFor 5x52:\r\np8 produces a 143 bit reduced result that doesn't fit in r3, r4 i.e. 101 bits.\r\np7 produces a 147 bit reduced result that _does_ fit in r2, r3, r4 i.e. 153 bits.\r\n\r\nSo our best option for the _last_ partial products step is p2/p7, and a final carry chain landing in r4 as desired.\r\n\r\nFor our field there's (conservatively) an extra bit coming from the lower partial product in each pair and the carry-in (that I ignored above), but for a field with a prime very (very) close to a power of 2, the lower partial product would need to be included in the analysis properly.\r\n\r\nRegarding 16-bit, I doubt a practical algorithm would try to follow the pattern of these implementations. If a reduced radix is even tenable I would guess it would have to use Karatsuba, perhaps with 20 limbs in four groups of 64 bits: (13 13 13 13 12). (Note that this is already incompatible with the current assumption of 4 extra bits for carry-free linear field ops).\r\n",
      "user": {
        "login": "peterdettman",
        "id": 3423981,
        "node_id": "MDQ6VXNlcjM0MjM5ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3423981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/peterdettman",
        "html_url": "https://github.com/peterdettman",
        "followers_url": "https://api.github.com/users/peterdettman/followers",
        "following_url": "https://api.github.com/users/peterdettman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/peterdettman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/peterdettman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/peterdettman/subscriptions",
        "organizations_url": "https://api.github.com/users/peterdettman/orgs",
        "repos_url": "https://api.github.com/users/peterdettman/repos",
        "events_url": "https://api.github.com/users/peterdettman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/peterdettman/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/issues/1261#issuecomment-1571711533",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1261"
    },
    {
      "event": "commented",
      "id": 1571716479,
      "node_id": "IC_kwDOAP4Jqs5drn1_",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/1571716479",
      "actor": {
        "login": "peterdettman",
        "id": 3423981,
        "node_id": "MDQ6VXNlcjM0MjM5ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3423981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/peterdettman",
        "html_url": "https://github.com/peterdettman",
        "followers_url": "https://api.github.com/users/peterdettman/followers",
        "following_url": "https://api.github.com/users/peterdettman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/peterdettman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/peterdettman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/peterdettman/subscriptions",
        "organizations_url": "https://api.github.com/users/peterdettman/orgs",
        "repos_url": "https://api.github.com/users/peterdettman/repos",
        "events_url": "https://api.github.com/users/peterdettman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/peterdettman/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-01T09:48:00Z",
      "updated_at": "2023-06-01T09:48:00Z",
      "author_association": "CONTRIBUTOR",
      "body": "Also, +1 in principle to including also the 32-bit code.",
      "user": {
        "login": "peterdettman",
        "id": 3423981,
        "node_id": "MDQ6VXNlcjM0MjM5ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3423981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/peterdettman",
        "html_url": "https://github.com/peterdettman",
        "followers_url": "https://api.github.com/users/peterdettman/followers",
        "following_url": "https://api.github.com/users/peterdettman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/peterdettman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/peterdettman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/peterdettman/subscriptions",
        "organizations_url": "https://api.github.com/users/peterdettman/orgs",
        "repos_url": "https://api.github.com/users/peterdettman/repos",
        "events_url": "https://api.github.com/users/peterdettman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/peterdettman/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/issues/1261#issuecomment-1571716479",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/1261"
    }
  ]
}