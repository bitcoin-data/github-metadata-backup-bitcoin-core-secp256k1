{
  "type": "issue",
  "issue": {
    "id": 432475636,
    "node_id": "MDU6SXNzdWU0MzI0NzU2MzY=",
    "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/609",
    "repository_url": "https://api.github.com/repos/bitcoin-core/secp256k1",
    "labels_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/609/labels%7B/name%7D",
    "comments_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/609/comments",
    "events_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/609/events",
    "html_url": "https://github.com/bitcoin-core/secp256k1/issues/609",
    "number": 609,
    "state": "closed",
    "state_reason": "completed",
    "title": "Failed in verify test cases of wycheproof",
    "body": "For this case [wycheproof ecdsa sha256 test case 218](https://github.com/google/wycheproof/blob/c313761979d74b0417230eddd0f87d0cfab2b46b/testvectors/ecdsa_secp256k1_sha256_test.json#L1928), the expected result is valid, however, it returns error.\r\n\r\npublic_key is `04b838ff44e5bc177bf21189d0766082fc9d843226887fc9760371100b7ee20a6ff0c9d75bfba7b31a6bca1974496eeb56de357071955d83c4b1badaa0b21832e9`\r\n\r\nTake test case 3 and test case 218 as examples:\r\n\r\nthe case 3 is\r\n\r\n```json\r\n        {\r\n          \"tcId\" : 3,\r\n          \"comment\" : \"valid\",\r\n          \"msg\" : \"313233343030\",\r\n          \"sig\" : \"3045022100813ef79ccefa9a56f7ba805f0e478584fe5f0dd5f567bc09b5123ccbc983236502206ff18a52dcc0336f7af62400a6dd9b810732baf1ff758000d6f613a556eb31ba\",\r\n          \"result\" : \"valid\",\r\n          \"flags\" : []\r\n        },\r\n```\r\n\r\ncase 218 is:\r\n\r\n```json\r\n        {\r\n          \"tcId\" : 218,\r\n          \"comment\" : \"special case hash\",\r\n          \"msg\" : \"37313338363834383931\",\r\n          \"sig\" : \"3045022028f94a894e92024699e345fe66971e3edcd050023386135ab3939d550898fb25022100cd69c1a42be05a6ee1270c821479251e134c21858d800bda6f4e98b37196238e\",\r\n          \"result\" : \"valid\",\r\n          \"flags\" : []\r\n        },\r\n```\r\n\r\n```\r\nmsg = sha256(base16_decode(msg))\r\nsig = base16_decode(sig)\r\npubkey = base16_decode(pubkey)\r\n```\r\n\r\nMy program is:\r\n\r\n```c\r\n#include <stdio.h>\r\n#include <string.h>\r\n#include <stdint.h>\r\n#include \"include/secp256k1.h\"\r\n\r\nint verify(uint8_t msg[32], uint8_t* sig, uint8_t siglen, uint8_t pubkey[65], uint8_t pubkeylen) {\r\n    secp256k1_context* ctx = secp256k1_context_create(SECP256K1_CONTEXT_SIGN | SECP256K1_CONTEXT_VERIFY);\r\n\r\n    secp256k1_ecdsa_signature signature;\r\n    secp256k1_pubkey publickey;\r\n\r\n    if (secp256k1_ecdsa_signature_parse_der(ctx, &signature, sig, siglen) != 1) {\r\n        printf(\"signature parse failed\\n\");\r\n        secp256k1_context_destroy(ctx);\r\n        return 0;\r\n    }\r\n\r\n    if (secp256k1_ec_pubkey_parse(ctx, &publickey, pubkey, pubkeylen) != 1) {\r\n        printf(\"pubkey parse failed\\n\");\r\n        secp256k1_context_destroy(ctx);\r\n        return 0;\r\n    }\r\n\r\n    if (secp256k1_ecdsa_verify(ctx, &signature, msg, &publickey) != 1) {\r\n        printf(\"signature is not valid\\n\");\r\n        secp256k1_context_destroy(ctx);\r\n        return 0;\r\n    }\r\n\r\n    printf(\"signature is valid\\n\");\r\n    secp256k1_context_destroy(ctx);\r\n    return 1;\r\n}\r\n\r\nint main() {\r\n\r\n    uint8_t wycheproof_pubkey[65] = {4, 184, 56, 255, 68, 229, 188, 23, \r\n                                    123, 242, 17, 137, 208, 118, 96, 130, \r\n                                    252, 157, 132, 50, 38, 136, 127, 201, \r\n                                    118, 3, 113, 16, 11, 126, 226, 10, \r\n                                    111, 240, 201, 215, 91, 251, 167, 179, \r\n                                    26, 107, 202, 25, 116, 73, 110, 235, \r\n                                    86, 222, 53, 112, 113, 149, 93, 131, \r\n                                    196, 177, 186, 218, 160, 178, 24, 50, 233};\r\n\r\n    uint8_t wycheproof_msg3[32] = {187, 90, 82, 244, 47, 156, 146, 97, 237, 67, 97, 245, 148, 34, 161, 227, 0, 54, 231, 195, 43, 39, 12, 136, 7, 164, 25, 254, 202, 96, 80, 35};\r\n    uint8_t wycheproof_sig3[71] = {48, 69, 2, 33, 0, 129, 62, 247, 156, 206, 250, 154, 86, 247, 186, 128, 95, 14, 71, 133, 132, 254, 95, 13, 213, 245, 103, 188, 9, 181, 18, 60, 203, 201, 131, 35, 101, 2, 32, 111, 241, 138, 82, 220, 192, 51, 111, 122, 246, 36, 0, 166, 221, 155, 129, 7, 50, 186, 241, 255, 117, 128, 0, 214, 246, 19, 165, 86, 235, 49, 186};\r\n\r\n    uint8_t wycheproof_msg218[32] = {115, 0, 0, 0, 0, 33, 63, 42, 82, 92, 96, 53, 114, 82, 53, 194, 246, 150, 173, 62, 187, 94, 228, 127, 20, 6, 151, 173, 37, 119, 13, 145};\r\n    uint8_t wycheproof_sig218[71] = {48, 69, 2, 32, 40, 249, 74, 137, 78, 146, 2, 70, 153, 227, 69, 254, 102, 151, 30, 62, 220, 208, 80, 2, 51, 134, 19, 90, 179, 147, 157, 85, 8, 152, 251, 37, 2, 33, 0, 205, 105, 193, 164, 43, 224, 90, 110, 225, 39, 12, 130, 20, 121, 37, 30, 19, 76, 33, 133, 141, 128, 11, 218, 111, 78, 152, 179, 113, 150, 35, 142};\r\n\r\n    int result3;\r\n    int result218;\r\n\r\n    result3 = verify(wycheproof_msg3, wycheproof_sig3, sizeof(wycheproof_sig3), wycheproof_pubkey, sizeof(wycheproof_pubkey));\r\n    result218 = verify(wycheproof_msg218, wycheproof_sig218, sizeof(wycheproof_sig218), wycheproof_pubkey, sizeof(wycheproof_pubkey));\r\n\r\n    printf(\"result3 is %d\\n\", result3);\r\n    printf(\"result218 is %d\\n\", result218);\r\n    return 0;\r\n}\r\n```\r\n\r\nThe result of test case 3 is as expected, but the result of test case 218 is wrong.\r\n\r\nBTW, A [go-version secp256k1 library](https://github.com/btcsuite/btcd/tree/master/btcec) can verify case 218 correctly.",
    "user": {
      "login": "LanfordCai",
      "id": 10380321,
      "node_id": "MDQ6VXNlcjEwMzgwMzIx",
      "avatar_url": "https://avatars.githubusercontent.com/u/10380321?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/LanfordCai",
      "html_url": "https://github.com/LanfordCai",
      "followers_url": "https://api.github.com/users/LanfordCai/followers",
      "following_url": "https://api.github.com/users/LanfordCai/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/LanfordCai/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/LanfordCai/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/LanfordCai/subscriptions",
      "organizations_url": "https://api.github.com/users/LanfordCai/orgs",
      "repos_url": "https://api.github.com/users/LanfordCai/repos",
      "events_url": "https://api.github.com/users/LanfordCai/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/LanfordCai/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "assignees": [],
    "author_association": "NONE",
    "locked": false,
    "comments": 2,
    "closed_at": "2019-04-13T03:38:53Z",
    "created_at": "2019-04-12T09:35:32Z",
    "updated_at": "2019-04-13T03:38:53Z"
  },
  "events": [
    {
      "event": "commented",
      "id": 482546849,
      "node_id": "MDEyOklzc3VlQ29tbWVudDQ4MjU0Njg0OQ==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/482546849",
      "actor": {
        "login": "gmaxwell",
        "id": 858454,
        "node_id": "MDQ6VXNlcjg1ODQ1NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gmaxwell",
        "html_url": "https://github.com/gmaxwell",
        "followers_url": "https://api.github.com/users/gmaxwell/followers",
        "following_url": "https://api.github.com/users/gmaxwell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gmaxwell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gmaxwell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
        "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
        "repos_url": "https://api.github.com/users/gmaxwell/repos",
        "events_url": "https://api.github.com/users/gmaxwell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-04-12T11:55:57Z",
      "updated_at": "2019-04-12T11:57:46Z",
      "author_association": "CONTRIBUTOR",
      "body": "Thank you so much for testing the library.  However the result you are getting appears to be both expected and correct behaviour from the library.\r\n\r\nPlease see the documentation for secp256k1_ecdsa_verify:  https://github.com/bitcoin-core/secp256k1/blob/master/include/secp256k1.h#L415\r\n\r\n>  To avoid accepting malleable signatures, only ECDSA signatures in lower-S form are accepted. If you need to accept ECDSA signatures from sources that do not obey this rule, apply secp256k1_ecdsa_signature_normalize to the signature prior to validation, but be aware that doing so results in malleable signatures.\r\n\r\nAdding a normalize call to your test case above the verify like this:\r\n\r\n+    secp256k1_ecdsa_signature_normalize(ctx, &signature, &signature);\r\n\r\nresults in:\r\n\r\n> signature is valid\r\n> signature is valid\r\n> result3 is 1\r\n> result218 is 1\r\n\r\nTo further confirm that the normailzation wasn't simply bypassing the test intent, I modified  secp256k1_ecdsa_verify to remove the secp256k1_scalar_is_high call, left the normalization out, and the test still passes. \r\n\r\nAny system which does not enforce a functionally equivalent normalization is vulnerable to malleation-- which may be irrelevant or serious vulnerabilities depending on the specific application. In OpenSSL this sort of malleation allows for trivial certificate blacklist bypassing, in Bitcoin before correction it resulted in moderately severe denial of service and in some cases could cause funds loss.  Any implementation that does not do this would also now be consensus inconsistent with Bitcoin.\r\n\r\nIn libsecp256k1 since we don't know what protocols we may be used from we can't decide that it's simply safe to allow this behaviour (and, in our primary application of Bitcoin, it is very much not safe) our intentional and documented behaviour is to fix this vulnerability.  If a particular callee wants to preserve it (or they know it is harmless in their application) they can get the conventional behaviour with a normalize call.\r\n\r\nA quick look at the wycheproof vectors suggests to me that our existing tests already check most (all?) of those cases (and in some cases we have much stronger versions where curve specific magic made constructing them possible), but more tests is better so it it would probably be pretty nice if someone wanted to submit an addition to our tests that includes them, similar to your test harness. ",
      "user": {
        "login": "gmaxwell",
        "id": 858454,
        "node_id": "MDQ6VXNlcjg1ODQ1NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gmaxwell",
        "html_url": "https://github.com/gmaxwell",
        "followers_url": "https://api.github.com/users/gmaxwell/followers",
        "following_url": "https://api.github.com/users/gmaxwell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gmaxwell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gmaxwell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
        "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
        "repos_url": "https://api.github.com/users/gmaxwell/repos",
        "events_url": "https://api.github.com/users/gmaxwell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/issues/609#issuecomment-482546849",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/609"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "gmaxwell",
        "id": 858454,
        "node_id": "MDQ6VXNlcjg1ODQ1NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gmaxwell",
        "html_url": "https://github.com/gmaxwell",
        "followers_url": "https://api.github.com/users/gmaxwell/followers",
        "following_url": "https://api.github.com/users/gmaxwell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gmaxwell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gmaxwell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
        "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
        "repos_url": "https://api.github.com/users/gmaxwell/repos",
        "events_url": "https://api.github.com/users/gmaxwell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-04-12T12:22:37Z",
      "updated_at": "2019-04-12T12:22:37Z",
      "source": {
        "issue": {
          "id": 432539501,
          "node_id": "MDU6SXNzdWU0MzI1Mzk1MDE=",
          "url": "https://api.github.com/repos/google/wycheproof/issues/70",
          "repository_url": "https://api.github.com/repos/google/wycheproof",
          "labels_url": "https://api.github.com/repos/google/wycheproof/issues/70/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/google/wycheproof/issues/70/comments",
          "events_url": "https://api.github.com/repos/google/wycheproof/issues/70/events",
          "html_url": "https://github.com/google/wycheproof/issues/70",
          "number": 70,
          "state": "open",
          "state_reason": null,
          "title": "Distinguish ECDSA malleability?",
          "body": "Libsecp256k1 implements a variant of ECDSA used by the Bitcoin system (and many other things now) which eliminates malleability by requiring s to be in the lower half of its range.  Callers that need compatible (but vulnerable...) behaviour are instructed by the documentation to call a provided normalize function on signatures before validating them.\r\n\r\nSomeone opened an [issue](https://github.com/bitcoin-core/secp256k1/issues/609) reporting that secp256k1 ecdsa sha256 test case 218 fails. I confirmed that this failure is due exclusively to this restriction.\r\n\r\nYou can expect other secp256k1 implementations to implement similar things as this behaviour is _required_ for consensus consistency with Bitcoin, so it might be useful to avoid gratuitously triggering this incompatibility, and flag tests that necessarily do so (e.g. because they are intentionally trying to use high S values).\r\n\r\nThanks for the interesting work. Although we have very extensive testing already, I think a diverse test cases created by a different set of minds will be a valuable addition to our testing arsenal.\r\n\r\nYou may be interested in a different test strategy, implemented by our \"exhaustive\" tests based on the observation the virtually all code in an ECC library is independent of b in the curve equation (usually only point decompression/validation depends on it).  We use this fact to allow a test harness to build an alternative version of the library that operates using a different curve equation on a small sgroup (e.g. of size 43) where we can do things like exhaustively test group operations.  We've shown this test to be effective at detecting some real but otherwise incredibly hard to detect bugs, such as cases of incorrectly handled group law incompleteness.  As a result it might be interesting to publish vectors for these easily tested degenerate groups.",
          "user": {
            "login": "gmaxwell",
            "id": 858454,
            "node_id": "MDQ6VXNlcjg1ODQ1NA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/gmaxwell",
            "html_url": "https://github.com/gmaxwell",
            "followers_url": "https://api.github.com/users/gmaxwell/followers",
            "following_url": "https://api.github.com/users/gmaxwell/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/gmaxwell/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/gmaxwell/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
            "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
            "repos_url": "https://api.github.com/users/gmaxwell/repos",
            "events_url": "https://api.github.com/users/gmaxwell/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [],
          "assignees": [],
          "author_association": "NONE",
          "locked": false,
          "comments": 12,
          "created_at": "2019-04-12T12:22:37Z",
          "updated_at": "2023-03-25T03:20:46Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "commented",
      "id": 482772751,
      "node_id": "MDEyOklzc3VlQ29tbWVudDQ4Mjc3Mjc1MQ==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/comments/482772751",
      "actor": {
        "login": "LanfordCai",
        "id": 10380321,
        "node_id": "MDQ6VXNlcjEwMzgwMzIx",
        "avatar_url": "https://avatars.githubusercontent.com/u/10380321?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/LanfordCai",
        "html_url": "https://github.com/LanfordCai",
        "followers_url": "https://api.github.com/users/LanfordCai/followers",
        "following_url": "https://api.github.com/users/LanfordCai/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/LanfordCai/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/LanfordCai/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/LanfordCai/subscriptions",
        "organizations_url": "https://api.github.com/users/LanfordCai/orgs",
        "repos_url": "https://api.github.com/users/LanfordCai/repos",
        "events_url": "https://api.github.com/users/LanfordCai/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/LanfordCai/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-04-13T03:38:53Z",
      "updated_at": "2019-04-13T03:38:53Z",
      "author_association": "NONE",
      "body": "Thank for your patient explaination!",
      "user": {
        "login": "LanfordCai",
        "id": 10380321,
        "node_id": "MDQ6VXNlcjEwMzgwMzIx",
        "avatar_url": "https://avatars.githubusercontent.com/u/10380321?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/LanfordCai",
        "html_url": "https://github.com/LanfordCai",
        "followers_url": "https://api.github.com/users/LanfordCai/followers",
        "following_url": "https://api.github.com/users/LanfordCai/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/LanfordCai/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/LanfordCai/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/LanfordCai/subscriptions",
        "organizations_url": "https://api.github.com/users/LanfordCai/orgs",
        "repos_url": "https://api.github.com/users/LanfordCai/repos",
        "events_url": "https://api.github.com/users/LanfordCai/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/LanfordCai/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/secp256k1/issues/609#issuecomment-482772751",
      "issue_url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/609"
    },
    {
      "event": "closed",
      "id": 2273910025,
      "node_id": "MDExOkNsb3NlZEV2ZW50MjI3MzkxMDAyNQ==",
      "url": "https://api.github.com/repos/bitcoin-core/secp256k1/issues/events/2273910025",
      "actor": {
        "login": "LanfordCai",
        "id": 10380321,
        "node_id": "MDQ6VXNlcjEwMzgwMzIx",
        "avatar_url": "https://avatars.githubusercontent.com/u/10380321?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/LanfordCai",
        "html_url": "https://github.com/LanfordCai",
        "followers_url": "https://api.github.com/users/LanfordCai/followers",
        "following_url": "https://api.github.com/users/LanfordCai/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/LanfordCai/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/LanfordCai/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/LanfordCai/subscriptions",
        "organizations_url": "https://api.github.com/users/LanfordCai/orgs",
        "repos_url": "https://api.github.com/users/LanfordCai/repos",
        "events_url": "https://api.github.com/users/LanfordCai/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/LanfordCai/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-04-13T03:38:53Z"
    }
  ]
}